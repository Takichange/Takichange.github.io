(window.webpackJsonp=window.webpackJsonp||[]).push([[1],[]]);!function(n){function e(e){for(var r,a,s=e[0],u=e[1],l=e[2],p=0,d=[];p<s.length;p++)a=s[p],Object.prototype.hasOwnProperty.call(o,a)&&o[a]&&d.push(o[a][0]),o[a]=0;for(r in u)Object.prototype.hasOwnProperty.call(u,r)&&(n[r]=u[r]);for(c&&c(e);d.length;)d.shift()();return i.push.apply(i,l||[]),t()}function t(){for(var n,e=0;e<i.length;e++){for(var t=i[e],r=!0,s=1;s<t.length;s++){var u=t[s];0!==o[u]&&(r=!1)}r&&(i.splice(e--,1),n=a(a.s=t[0]))}return n}var r={},o={2:0},i=[];function a(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,a),t.l=!0,t.exports}a.e=function(n){var e=[],t=o[n];if(0!==t)if(t)e.push(t[2]);else{var r=new Promise((function(e,r){t=o[n]=[e,r]}));e.push(t[2]=r);var i,s=document.createElement("script");s.charset="utf-8",s.timeout=120,a.nc&&s.setAttribute("nonce",a.nc),s.src=function(n){return a.p+"assets/js/"+({3:"vendors~aplayer",4:"vendors~artplayer",5:"vendors~dash",6:"vendors~dplayer",7:"vendors~hls",8:"vendors~mpegts",9:"vendors~shaka-player",10:"vendors~webtorrent"}[n]||n)+"."+{0:"1f651464",3:"9d40c77a",4:"52886c7e",5:"eb76e844",6:"cd8b72a0",7:"f96c75bc",8:"dad510ec",9:"8d4980f2",10:"62d178cf",11:"c37d6593",12:"48604889",13:"1760ba16",14:"2fd40325",15:"6fa6ab34",16:"4157a9e3",17:"7df14bd5",18:"7122c02d",19:"f5e10375",20:"5a87933d",21:"1cbaf4ca",22:"5ef986bb",23:"a9c12dff",24:"253b512b",25:"9567028e",26:"756e484e",27:"18e5a59f",28:"99a8b47a",29:"b8517d23",30:"791cb2e7",31:"eeeb0aef",32:"4d88e9a2",33:"aa0d455c",34:"666f948d",35:"78d74bfa",36:"30984deb",37:"08e25b55",38:"0b740cc8",39:"d043d038",40:"a37d638a",41:"0f08f258",42:"f17ac006",43:"2823a197",44:"3f1229af",45:"12b801c6",46:"a999c91b",47:"7b25f334",48:"8fe8454d",49:"d991fdfc",50:"71127988",51:"2a1c73d2",52:"52baa95a",53:"58a287a3",54:"2a901d76",55:"43368a0a",56:"c85a63a3",57:"9136ce26",58:"a71eb44e",59:"a86c9477",60:"2442a8fc",61:"04cfd9a7",62:"3a6a2390",63:"302d51e3"}[n]+".js"}(n);var u=new Error;i=function(e){s.onerror=s.onload=null,clearTimeout(l);var t=o[n];if(0!==t){if(t){var r=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;u.message="Loading chunk "+n+" failed.\n("+r+": "+i+")",u.name="ChunkLoadError",u.type=r,u.request=i,t[1](u)}o[n]=void 0}};var l=setTimeout((function(){i({type:"timeout",target:s})}),12e4);s.onerror=s.onload=i,document.head.appendChild(s)}return Promise.all(e)},a.m=n,a.c=r,a.d=function(n,e,t){a.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},a.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},a.t=function(n,e){if(1&e&&(n=a(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(a.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)a.d(t,r,function(e){return n[e]}.bind(null,r));return t},a.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return a.d(e,"a",e),e},a.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},a.p="/",a.oe=function(n){throw console.error(n),n};var s=window.webpackJsonp=window.webpackJsonp||[],u=s.push.bind(s);s.push=e,s=s.slice();for(var l=0;l<s.length;l++)e(s[l]);var c=u;i.push([244,1]),t()}([function(n,e){var t=function(n){return n&&n.Math==Math&&n};n.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof global&&global)||function(){return this}()||Function("return this")()},function(n,e,t){var r=t(0),o=t(40).f,i=t(34),a=t(17),s=t(121),u=t(127),l=t(100);n.exports=function(n,e){var t,c,p,d,v,m=n.target,h=n.global,f=n.stat;if(t=h?r:f?r[m]||s(m,{}):(r[m]||{}).prototype)for(c in e){if(d=e[c],p=n.noTargetGet?(v=o(t,c))&&v.value:t[c],!l(h?c:m+(f?".":"#")+c,n.forced)&&void 0!==p){if(typeof d==typeof p)continue;u(d,p)}(n.sham||p&&p.sham)&&i(d,"sham",!0),a(t,c,d,n)}}},function(n,e,t){var r=t(74),o=Function.prototype,i=o.bind,a=o.call,s=r&&i.bind(a,a);n.exports=r?function(n){return n&&s(n)}:function(n){return n&&function(){return a.apply(n,arguments)}}},function(n,e){n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,e,t){var r=t(130),o=t(17),i=t(260);r||o(Object.prototype,"toString",i,{unsafe:!0})},function(n,e,t){"use strict";t.d(e,"a",(function(){return o}));t(4);function r(n,e,t,r,o,i,a){try{var s=n[i](a),u=s.value}catch(n){return void t(n)}s.done?e(u):Promise.resolve(u).then(r,o)}function o(n){return function(){var e=this,t=arguments;return new Promise((function(o,i){var a=n.apply(e,t);function s(n){r(a,o,i,s,u,"next",n)}function u(n){r(a,o,i,s,u,"throw",n)}s(void 0)}))}}},function(n,e,t){var r=t(0),o=t(91),i=t(12),a=t(92),s=t(122),u=t(161),l=o("wks"),c=r.Symbol,p=c&&c.for,d=u?c:c&&c.withoutSetter||a;n.exports=function(n){if(!i(l,n)||!s&&"string"!=typeof l[n]){var e="Symbol."+n;s&&i(c,n)?l[n]=c[n]:l[n]=u&&p?p(e):d(e)}return l[n]}},function(n,e){n.exports=function(n){return"function"==typeof n}},function(n,e,t){var r=t(3);n.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(n,e,t){var r=t(0),o=t(10),i=r.String,a=r.TypeError;n.exports=function(n){if(o(n))return n;throw a(i(n)+" is not an object")}},function(n,e,t){var r=t(7);n.exports=function(n){return"object"==typeof n?null!==n:r(n)}},function(n,e,t){var r=t(0),o=t(90),i=r.String;n.exports=function(n){if("Symbol"===o(n))throw TypeError("Cannot convert a Symbol value to a string");return i(n)}},function(n,e,t){var r=t(2),o=t(16),i=r({}.hasOwnProperty);n.exports=Object.hasOwn||function(n,e){return i(o(n),e)}},function(n,e,t){var r=t(0),o=t(8),i=t(163),a=t(162),s=t(9),u=t(94),l=r.TypeError,c=Object.defineProperty,p=Object.getOwnPropertyDescriptor;e.f=o?a?function(n,e,t){if(s(n),e=u(e),s(t),"function"==typeof n&&"prototype"===e&&"value"in t&&"writable"in t&&!t.writable){var r=p(n,e);r&&r.writable&&(n[e]=t.value,t={configurable:"configurable"in t?t.configurable:r.configurable,enumerable:"enumerable"in t?t.enumerable:r.enumerable,writable:!1})}return c(n,e,t)}:c:function(n,e,t){if(s(n),e=u(e),s(t),i)try{return c(n,e,t)}catch(n){}if("get"in t||"set"in t)throw l("Accessors not supported");return"value"in t&&(n[e]=t.value),n}},function(n,e,t){var r=t(74),o=Function.prototype.call;n.exports=r?o.bind(o):function(){return o.apply(o,arguments)}},function(n,e,t){"use strict";function r(n,e,t,r,o,i,a,s){var u,l="function"==typeof n?n.options:n;if(e&&(l.render=e,l.staticRenderFns=t,l._compiled=!0),r&&(l.functional=!0),i&&(l._scopeId="data-v-"+i),a?(u=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),o&&o.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(a)},l._ssrRegister=u):o&&(u=s?function(){o.call(this,(l.functional?this.parent:this).$root.$options.shadowRoot)}:o),u)if(l.functional){l._injectStyles=u;var c=l.render;l.render=function(n,e){return u.call(e),c(n,e)}}else{var p=l.beforeCreate;l.beforeCreate=p?[].concat(p,u):[u]}return{exports:n,options:l}}t.d(e,"a",(function(){return r}))},function(n,e,t){var r=t(0),o=t(22),i=r.Object;n.exports=function(n){return i(o(n))}},function(n,e,t){var r=t(0),o=t(7),i=t(12),a=t(34),s=t(121),u=t(99),l=t(36),c=t(89).CONFIGURABLE,p=l.get,d=l.enforce,v=String(String).split("String");(n.exports=function(n,e,t,u){var l,p=!!u&&!!u.unsafe,m=!!u&&!!u.enumerable,h=!!u&&!!u.noTargetGet,f=u&&void 0!==u.name?u.name:e;o(t)&&("Symbol("===String(f).slice(0,7)&&(f="["+String(f).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!i(t,"name")||c&&t.name!==f)&&a(t,"name",f),(l=d(t)).source||(l.source=v.join("string"==typeof f?f:""))),n!==r?(p?!h&&n[e]&&(m=!0):delete n[e],m?n[e]=t:a(n,e,t)):m?n[e]=t:s(e,t)})(Function.prototype,"toString",(function(){return o(this)&&p(this).source||u(this)}))},function(n,e,t){"use strict";var r=t(181).charAt,o=t(11),i=t(36),a=t(167),s=i.set,u=i.getterFor("String Iterator");a(String,"String",(function(n){s(this,{type:"String Iterator",string:o(n),index:0})}),(function(){var n,e=u(this),t=e.string,o=e.index;return o>=t.length?{value:void 0,done:!0}:(n=r(t,o),e.index+=n.length,{value:n,done:!1})}))},function(n,e,t){"use strict";t.d(e,"a",(function(){return r}));t(111);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}},function(n,e,t){"use strict";var r=t(1),o=t(104);r({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},function(n,e,t){var r=t(0),o=t(182),i=t(183),a=t(154),s=t(34),u=t(6),l=u("iterator"),c=u("toStringTag"),p=a.values,d=function(n,e){if(n){if(n[l]!==p)try{s(n,l,p)}catch(e){n[l]=p}if(n[c]||s(n,c,e),o[e])for(var t in a)if(n[t]!==a[t])try{s(n,t,a[t])}catch(e){n[t]=a[t]}}};for(var v in o)d(r[v]&&r[v].prototype,v);d(i,"DOMTokenList")},function(n,e,t){var r=t(0).TypeError;n.exports=function(n){if(null==n)throw r("Can't call method on "+n);return n}},function(n,e,t){var r=function(n){"use strict";var e=Object.prototype,t=e.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",a=r.toStringTag||"@@toStringTag";function s(n,e,t){return Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}),n[e]}try{s({},"")}catch(n){s=function(n,e,t){return n[e]=t}}function u(n,e,t,r){var o=e&&e.prototype instanceof p?e:p,i=Object.create(o.prototype),a=new k(r||[]);return i._invoke=function(n,e,t){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return V()}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var s=y(a,t);if(s){if(s===c)continue;return s}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var u=l(n,e,t);if("normal"===u.type){if(r=t.done?"completed":"suspendedYield",u.arg===c)continue;return{value:u.arg,done:t.done}}"throw"===u.type&&(r="completed",t.method="throw",t.arg=u.arg)}}}(n,t,a),i}function l(n,e,t){try{return{type:"normal",arg:n.call(e,t)}}catch(n){return{type:"throw",arg:n}}}n.wrap=u;var c={};function p(){}function d(){}function v(){}var m={};s(m,o,(function(){return this}));var h=Object.getPrototypeOf,f=h&&h(h(T([])));f&&f!==e&&t.call(f,o)&&(m=f);var g=v.prototype=p.prototype=Object.create(m);function b(n){["next","throw","return"].forEach((function(e){s(n,e,(function(n){return this._invoke(e,n)}))}))}function x(n,e){var r;this._invoke=function(o,i){function a(){return new e((function(r,a){!function r(o,i,a,s){var u=l(n[o],n,i);if("throw"!==u.type){var c=u.arg,p=c.value;return p&&"object"==typeof p&&t.call(p,"__await")?e.resolve(p.__await).then((function(n){r("next",n,a,s)}),(function(n){r("throw",n,a,s)})):e.resolve(p).then((function(n){c.value=n,a(c)}),(function(n){return r("throw",n,a,s)}))}s(u.arg)}(o,i,r,a)}))}return r=r?r.then(a,a):a()}}function y(n,e){var t=n.iterator[e.method];if(void 0===t){if(e.delegate=null,"throw"===e.method){if(n.iterator.return&&(e.method="return",e.arg=void 0,y(n,e),"throw"===e.method))return c;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return c}var r=l(t,n.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,c;var o=r.arg;return o?o.done?(e[n.resultName]=o.value,e.next=n.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,c):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,c)}function j(n){var e={tryLoc:n[0]};1 in n&&(e.catchLoc=n[1]),2 in n&&(e.finallyLoc=n[2],e.afterLoc=n[3]),this.tryEntries.push(e)}function w(n){var e=n.completion||{};e.type="normal",delete e.arg,n.completion=e}function k(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(j,this),this.reset(!0)}function T(n){if(n){var e=n[o];if(e)return e.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var r=-1,i=function e(){for(;++r<n.length;)if(t.call(n,r))return e.value=n[r],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return{next:V}}function V(){return{value:void 0,done:!0}}return d.prototype=v,s(g,"constructor",v),s(v,"constructor",d),d.displayName=s(v,a,"GeneratorFunction"),n.isGeneratorFunction=function(n){var e="function"==typeof n&&n.constructor;return!!e&&(e===d||"GeneratorFunction"===(e.displayName||e.name))},n.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,v):(n.__proto__=v,s(n,a,"GeneratorFunction")),n.prototype=Object.create(g),n},n.awrap=function(n){return{__await:n}},b(x.prototype),s(x.prototype,i,(function(){return this})),n.AsyncIterator=x,n.async=function(e,t,r,o,i){void 0===i&&(i=Promise);var a=new x(u(e,t,r,o),i);return n.isGeneratorFunction(t)?a:a.next().then((function(n){return n.done?n.value:a.next()}))},b(g),s(g,a,"Generator"),s(g,o,(function(){return this})),s(g,"toString",(function(){return"[object Generator]"})),n.keys=function(n){var e=[];for(var t in n)e.push(t);return e.reverse(),function t(){for(;e.length;){var r=e.pop();if(r in n)return t.value=r,t.done=!1,t}return t.done=!0,t}},n.values=T,k.prototype={constructor:k,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!n)for(var e in this)"t"===e.charAt(0)&&t.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var e=this;function r(t,r){return a.type="throw",a.arg=n,e.next=t,r&&(e.method="next",e.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var s=t.call(i,"catchLoc"),u=t.call(i,"finallyLoc");if(s&&u){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(n,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&t.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===n||"continue"===n)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=n,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,c):this.complete(a)},complete:function(n,e){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&e&&(this.next=e),c},finish:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.finallyLoc===n)return this.complete(t.completion,t.afterLoc),w(t),c}},catch:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.tryLoc===n){var r=t.completion;if("throw"===r.type){var o=r.arg;w(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(n,e,t){return this.delegate={iterator:T(n),resultName:e,nextLoc:t},"next"===this.method&&(this.arg=void 0),c}},n}(n.exports);try{regeneratorRuntime=r}catch(n){"object"==typeof globalThis?globalThis.regeneratorRuntime=r:Function("r","regeneratorRuntime = r")(r)}},function(n,e,t){var r=t(0),o=t(7),i=function(n){return o(n)?n:void 0};n.exports=function(n,e){return arguments.length<2?i(r[n]):r[n]&&r[n][e]}},function(n,e,t){var r=t(17),o=t(276),i=Error.prototype;i.toString!==o&&r(i,"toString",o)},function(n,e,t){"use strict";t.d(e,"a",(function(){return i}));t(48),t(81),t(35),t(4),t(387),t(30),t(31),t(184),t(388),t(111);var r=t(19);function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){Object(r.a)(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}},function(n,e,t){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(n){for(var e,t=1,r=arguments.length;t<r;t++)for(var o in e=arguments[t])Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}).apply(this,arguments)},o=this&&this.__read||function(n,e){var t="function"==typeof Symbol&&n[Symbol.iterator];if(!t)return n;var r,o,i=t.call(n),a=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(n){o={error:n}}finally{try{r&&!r.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return a},i=this&&this.__spreadArray||function(n,e,t){if(t||2===arguments.length)for(var r,o=0,i=e.length;o<i;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return n.concat(r||Array.prototype.slice.call(e))};Object.defineProperty(e,"__esModule",{value:!0});var a=function(n){if("object"==typeof n&&null!==n){if("function"==typeof Object.getPrototypeOf){var e=Object.getPrototypeOf(n);return e===Object.prototype||null===e}return"[object Object]"===Object.prototype.toString.call(n)}return!1},s=function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return n.reduce((function(n,e){return Object.keys(e).forEach((function(t){Array.isArray(n[t])&&Array.isArray(e[t])?n[t]=s.options.mergeArrays?Array.from(new Set(n[t].concat(e[t]))):e[t]:a(n[t])&&a(e[t])?n[t]=s(n[t],e[t]):n[t]=e[t]})),n}),{})},u={mergeArrays:!0};s.options=u,s.withOptions=function(n){for(var e=[],t=1;t<arguments.length;t++)e[t-1]=arguments[t];s.options=r({mergeArrays:!0},n);var a=s.apply(void 0,i([],o(e),!1));return s.options=u,a},e.default=s},function(n,e,t){var r=t(49);n.exports=function(n){return r(n.length)}},function(n,e,t){var r=t(73),o=t(22);n.exports=function(n){return r(o(n))}},function(n,e,t){"use strict";var r=t(1),o=t(186);r({target:"Array",proto:!0,forced:[].forEach!=o},{forEach:o})},function(n,e,t){var r=t(0),o=t(182),i=t(183),a=t(186),s=t(34),u=function(n){if(n&&n.forEach!==a)try{s(n,"forEach",a)}catch(e){n.forEach=a}};for(var l in o)o[l]&&u(r[l]&&r[l].prototype);u(i)},function(n,e){n.exports=!1},function(n,e,t){var r=t(2),o=r({}.toString),i=r("".slice);n.exports=function(n){return i(o(n),8,-1)}},function(n,e,t){var r=t(8),o=t(13),i=t(60);n.exports=r?function(n,e,t){return o.f(n,e,i(1,t))}:function(n,e,t){return n[e]=t,n}},function(n,e,t){"use strict";var r=t(1),o=t(61).filter;r({target:"Array",proto:!0,forced:!t(80)("filter")},{filter:function(n){return o(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){var r,o,i,a=t(246),s=t(0),u=t(2),l=t(10),c=t(34),p=t(12),d=t(120),v=t(98),m=t(76),h=s.TypeError,f=s.WeakMap;if(a||d.state){var g=d.state||(d.state=new f),b=u(g.get),x=u(g.has),y=u(g.set);r=function(n,e){if(x(g,n))throw new h("Object already initialized");return e.facade=n,y(g,n,e),e},o=function(n){return b(g,n)||{}},i=function(n){return x(g,n)}}else{var j=v("state");m[j]=!0,r=function(n,e){if(p(n,j))throw new h("Object already initialized");return e.facade=n,c(n,j,e),e},o=function(n){return p(n,j)?n[j]:{}},i=function(n){return p(n,j)}}n.exports={set:r,get:o,has:i,enforce:function(n){return i(n)?o(n):r(n,{})},getterFor:function(n){return function(e){var t;if(!l(e)||(t=o(e)).type!==n)throw h("Incompatible receiver, "+n+" required");return t}}}},function(n,e){var t=Array.isArray;n.exports=t},function(n,e,t){var r=t(24);n.exports=r("navigator","userAgent")||""},function(n,e,t){var r=t(2);n.exports=r({}.isPrototypeOf)},function(n,e,t){var r=t(8),o=t(14),i=t(126),a=t(60),s=t(29),u=t(94),l=t(12),c=t(163),p=Object.getOwnPropertyDescriptor;e.f=r?p:function(n,e){if(n=s(n),e=u(e),c)try{return p(n,e)}catch(n){}if(l(n,e))return a(!o(i.f,n,e),n[e])}},function(n,e,t){var r=t(196),o="object"==typeof self&&self&&self.Object===Object&&self,i=r||o||Function("return this")();n.exports=i},function(n,e,t){var r,o=t(9),i=t(123),a=t(125),s=t(76),u=t(166),l=t(93),c=t(98),p=c("IE_PROTO"),d=function(){},v=function(n){return"<script>"+n+"<\/script>"},m=function(n){n.write(v("")),n.close();var e=n.parentWindow.Object;return n=null,e},h=function(){try{r=new ActiveXObject("htmlfile")}catch(n){}var n,e;h="undefined"!=typeof document?document.domain&&r?m(r):((e=l("iframe")).style.display="none",u.appendChild(e),e.src=String("javascript:"),(n=e.contentWindow.document).open(),n.write(v("document.F=Object")),n.close(),n.F):m(r);for(var t=a.length;t--;)delete h.prototype[a[t]];return h()};s[p]=!0,n.exports=Object.create||function(n,e){var t;return null!==n?(d.prototype=o(n),t=new d,d.prototype=null,t[p]=n):t=h(),void 0===e?t:i.f(t,e)}},function(n,e,t){var r=t(74),o=Function.prototype,i=o.apply,a=o.call;n.exports="object"==typeof Reflect&&Reflect.apply||(r?a.bind(i):function(){return a.apply(i,arguments)})},function(n,e,t){var r=t(8),o=t(89).EXISTS,i=t(2),a=t(13).f,s=Function.prototype,u=i(s.toString),l=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,c=i(l.exec);r&&!o&&a(s,"name",{configurable:!0,get:function(){try{return c(l,u(this))[1]}catch(n){return""}}})},function(n,e,t){var r=t(0),o=t(7),i=t(96),a=r.TypeError;n.exports=function(n){if(o(n))return n;throw a(i(n)+" is not a function")}},function(n,e,t){"use strict";var r=t(1),o=t(61).map;r({target:"Array",proto:!0,forced:!t(80)("map")},{map:function(n){return o(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";var r=t(43),o=t(14),i=t(2),a=t(118),s=t(3),u=t(9),l=t(7),c=t(57),p=t(49),d=t(11),v=t(22),m=t(140),h=t(59),f=t(277),g=t(119),b=t(6)("replace"),x=Math.max,y=Math.min,j=i([].concat),w=i([].push),k=i("".indexOf),T=i("".slice),V="$0"==="a".replace(/./,"$0"),S=!!/./[b]&&""===/./[b]("a","$0");a("replace",(function(n,e,t){var i=S?"$":"$0";return[function(n,t){var r=v(this),i=null==n?void 0:h(n,b);return i?o(i,n,r,t):o(e,d(r),n,t)},function(n,o){var a=u(this),s=d(n);if("string"==typeof o&&-1===k(o,i)&&-1===k(o,"$<")){var v=t(e,a,s,o);if(v.done)return v.value}var h=l(o);h||(o=d(o));var b=a.global;if(b){var V=a.unicode;a.lastIndex=0}for(var S=[];;){var _=g(a,s);if(null===_)break;if(w(S,_),!b)break;""===d(_[0])&&(a.lastIndex=m(s,p(a.lastIndex),V))}for(var I,A="",z=0,C=0;C<S.length;C++){for(var E=d((_=S[C])[0]),P=x(y(c(_.index),s.length),0),O=[],M=1;M<_.length;M++)w(O,void 0===(I=_[M])?I:String(I));var q=_.groups;if(h){var R=j([E],O,P,s);void 0!==q&&w(R,q);var D=d(r(o,void 0,R))}else D=f(E,s,P,O,q,o);P>=z&&(A+=T(s,z,P)+D,z=P+E.length)}return A+T(s,z)}]}),!!s((function(){var n=/./;return n.exec=function(){var n=[];return n.groups={a:"7"},n},"7"!=="".replace(n,"$<a>")}))||!V||S)},function(n,e,t){var r=t(1),o=t(16),i=t(97);r({target:"Object",stat:!0,forced:t(3)((function(){i(1)}))},{keys:function(n){return i(o(n))}})},function(n,e,t){var r=t(57),o=Math.min;n.exports=function(n){return n>0?o(r(n),9007199254740991):0}},function(n,e,t){var r=t(1),o=t(0),i=t(43),a=t(272),s=o.WebAssembly,u=7!==Error("e",{cause:7}).cause,l=function(n,e){var t={};t[n]=a(n,e,u),r({global:!0,forced:u},t)},c=function(n,e){if(s&&s[n]){var t={};t[n]=a("WebAssembly."+n,e,u),r({target:"WebAssembly",stat:!0,forced:u},t)}};l("Error",(function(n){return function(e){return i(n,this,arguments)}})),l("EvalError",(function(n){return function(e){return i(n,this,arguments)}})),l("RangeError",(function(n){return function(e){return i(n,this,arguments)}})),l("ReferenceError",(function(n){return function(e){return i(n,this,arguments)}})),l("SyntaxError",(function(n){return function(e){return i(n,this,arguments)}})),l("TypeError",(function(n){return function(e){return i(n,this,arguments)}})),l("URIError",(function(n){return function(e){return i(n,this,arguments)}})),c("CompileError",(function(n){return function(e){return i(n,this,arguments)}})),c("LinkError",(function(n){return function(e){return i(n,this,arguments)}})),c("RuntimeError",(function(n){return function(e){return i(n,this,arguments)}}))},function(n,e,t){var r=t(297),o=t(300);n.exports=function(n,e){var t=o(n,e);return r(t)?t:void 0}},function(n,e,t){"use strict";t.d(e,"a",(function(){return o}));t(70);t(81),t(103),t(4),t(136),t(18),t(21);var r=t(114);t(50),t(25);function o(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,o,i=[],a=!0,s=!1;try{for(t=t.call(n);!(a=(r=t.next()).done)&&(i.push(r.value),!e||i.length!==e);a=!0);}catch(n){s=!0,o=n}finally{try{a||null==t.return||t.return()}finally{if(s)throw o}}return i}}(n,e)||Object(r.a)(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(n,e,t){"use strict";t.d(e,"a",(function(){return r}));t(81),t(103),t(4),t(136),t(18),t(21);function r(n){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}},function(n,e,t){"use strict";var r=t(1),o=t(0),i=t(3),a=t(69),s=t(10),u=t(16),l=t(28),c=t(65),p=t(117),d=t(80),v=t(6),m=t(63),h=v("isConcatSpreadable"),f=o.TypeError,g=m>=51||!i((function(){var n=[];return n[h]=!1,n.concat()[0]!==n})),b=d("concat"),x=function(n){if(!s(n))return!1;var e=n[h];return void 0!==e?!!e:a(n)};r({target:"Array",proto:!0,forced:!g||!b},{concat:function(n){var e,t,r,o,i,a=u(this),s=p(a,0),d=0;for(e=-1,r=arguments.length;e<r;e++)if(x(i=-1===e?a:arguments[e])){if(d+(o=l(i))>9007199254740991)throw f("Maximum allowed index exceeded");for(t=0;t<o;t++,d++)t in i&&c(s,d,i[t])}else{if(d>=9007199254740991)throw f("Maximum allowed index exceeded");c(s,d++,i)}return s.length=d,s}})},function(n,e,t){"use strict";t.d(e,"e",(function(){return r})),t.d(e,"b",(function(){return i})),t.d(e,"j",(function(){return a})),t.d(e,"g",(function(){return u})),t.d(e,"h",(function(){return l})),t.d(e,"i",(function(){return c})),t.d(e,"c",(function(){return p})),t.d(e,"f",(function(){return d})),t.d(e,"l",(function(){return v})),t.d(e,"m",(function(){return m})),t.d(e,"d",(function(){return f})),t.d(e,"k",(function(){return g})),t.d(e,"n",(function(){return b})),t.d(e,"a",(function(){return y}));t(20),t(47),t(230),t(56),t(229),t(157),t(46),t(30),t(4),t(31),t(35),t(70),t(151),t(72),t(54),t(150),t(25),t(67);var r=/#.*$/,o=/\.(md|html)$/,i=/\/$/,a=/^[a-z]+:/i;function s(n){return decodeURI(n).replace(r,"").replace(o,"")}function u(n){return a.test(n)}function l(n){return/^mailto:/.test(n)}function c(n){return/^tel:/.test(n)}function p(n){if(u(n))return n;if(!n)return"404";var e=n.match(r),t=e?e[0]:"",o=s(n);return i.test(o)?n:o+".html"+t}function d(n,e){var t=n.hash,o=function(n){var e=n?n.match(r):"";if(e)return e[0]}(e);return(!o||t===o)&&s(n.path)===s(e)}function v(n,e,t){if(u(e))return{type:"external",path:e};t&&(e=function(n,e,t){var r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;var o=e.split("/");t&&o[o.length-1]||o.pop();for(var i=n.replace(/^\//,"").split("/"),a=0;a<i.length;a++){var s=i[a];".."===s?o.pop():"."!==s&&o.push(s)}""!==o[0]&&o.unshift("");return o.join("/")}(e,t));for(var r=s(e),o=0;o<n.length;o++)if(s(n[o].regularPath)===r)return Object.assign({},n[o],{type:"page",path:p(n[o].path)});return console.error('[vuepress] No matching page found for sidebar item "'.concat(e,'"')),{}}function m(n,e,t,r){var o=t.pages,i=t.themeConfig,a=r&&i.locales&&i.locales[r]||i;if("auto"===(n.frontmatter.sidebar||a.sidebar||i.sidebar))return h(n);var s=a.sidebar||i.sidebar;if(s){var u=function(n,e){if(Array.isArray(e))return{base:"/",config:e};for(var t in e)if(0===(r=n,/(\.html|\/)$/.test(r)?r:r+"/").indexOf(encodeURI(t)))return{base:t,config:e[t]};var r;return{}}(e,s),l=u.base,c=u.config;return"auto"===c?h(n):c?c.map((function(n){return function n(e,t,r){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;if("string"==typeof e)return v(t,e,r);if(Array.isArray(e))return Object.assign(v(t,e[0],r),{title:e[1]});o>3&&console.error("[vuepress] detected a too deep nested sidebar group.");var i=e.children||[];return 0===i.length&&e.path?Object.assign(v(t,e.path,r),{title:e.title}):{type:"group",path:e.path,title:e.title,sidebarDepth:e.sidebarDepth,initialOpenGroupIndex:e.initialOpenGroupIndex,children:i.map((function(e){return n(e,t,r,o+1)})),collapsable:!1!==e.collapsable}}(n,o,l)})):[]}return[]}function h(n){var e=f(n.headers||[]);return[{type:"group",collapsable:!1,title:n.title,path:null,children:e.map((function(e){return{type:"auto",title:e.title,basePath:n.path,path:n.path+"#"+e.slug,children:e.children||[]}}))}]}function f(n){var e;return(n=n.map((function(n){return Object.assign({},n)}))).forEach((function(n){2===n.level?e=n:e&&(e.children||(e.children=[])).push(n)})),n.filter((function(n){return 2===n.level}))}function g(n){return Object.assign(n,{type:n.items&&n.items.length?"links":"link"})}function b(n){return Object.prototype.toString.call(n).match(/\[object (.*?)\]/)[1].toLowerCase()}function x(n){var e=n.frontmatter.date||n.lastUpdated||new Date,t=new Date(e);return"Invalid Date"==t&&e&&(t=new Date(e.replace(/-/g,"/"))),t.getTime()}function y(n,e){return x(e)-x(n)}},function(n,e,t){"use strict";t(20);var r,o,i=t(1),a=t(0),s=t(14),u=t(2),l=t(7),c=t(10),p=(r=!1,(o=/[ac]/).exec=function(){return r=!0,/./.exec.apply(this,arguments)},!0===o.test("abc")&&r),d=a.Error,v=u(/./.test);i({target:"RegExp",proto:!0,forced:!p},{test:function(n){var e=this.exec;if(!l(e))return v(this,n);var t=s(e,this,n);if(null!==t&&!c(t))throw new d("RegExp exec method returned something other than an Object or null");return!!t}})},function(n,e){var t=Math.ceil,r=Math.floor;n.exports=function(n){var e=+n;return e!=e||0===e?0:(e>0?r:t)(e)}},function(n,e,t){"use strict";var r=t(3);n.exports=function(n,e){var t=[][n];return!!t&&r((function(){t.call(null,e||function(){return 1},1)}))}},function(n,e,t){var r=t(45);n.exports=function(n,e){var t=n[e];return null==t?void 0:r(t)}},function(n,e){n.exports=function(n,e){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:e}}},function(n,e,t){var r=t(66),o=t(2),i=t(73),a=t(16),s=t(28),u=t(117),l=o([].push),c=function(n){var e=1==n,t=2==n,o=3==n,c=4==n,p=6==n,d=7==n,v=5==n||p;return function(m,h,f,g){for(var b,x,y=a(m),j=i(y),w=r(h,f),k=s(j),T=0,V=g||u,S=e?V(m,k):t||d?V(m,0):void 0;k>T;T++)if((v||T in j)&&(x=w(b=j[T],T,y),n))if(e)S[T]=x;else if(x)switch(n){case 3:return!0;case 5:return b;case 6:return T;case 2:l(S,b)}else switch(n){case 4:return!1;case 7:l(S,b)}return p?-1:o||c?c:S}};n.exports={forEach:c(0),map:c(1),filter:c(2),some:c(3),every:c(4),find:c(5),findIndex:c(6),filterReject:c(7)}},function(n,e){n.exports=function(n){return null!=n&&"object"==typeof n}},function(n,e,t){var r,o,i=t(0),a=t(38),s=i.process,u=i.Deno,l=s&&s.versions||u&&u.version,c=l&&l.v8;c&&(o=(r=c.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!o&&a&&(!(r=a.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=a.match(/Chrome\/(\d+)/))&&(o=+r[1]),n.exports=o},function(n,e,t){var r=t(165),o=t(125).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(n){return r(n,o)}},function(n,e,t){"use strict";var r=t(94),o=t(13),i=t(60);n.exports=function(n,e,t){var a=r(e);a in n?o.f(n,a,i(0,t)):n[a]=t}},function(n,e,t){var r=t(2),o=t(45),i=t(74),a=r(r.bind);n.exports=function(n,e){return o(n),void 0===e?n:i?a(n,e):function(){return n.apply(e,arguments)}}},function(n,e,t){"use strict";var r=t(2),o=t(89).PROPER,i=t(17),a=t(9),s=t(39),u=t(11),l=t(3),c=t(137),p=RegExp.prototype,d=p.toString,v=r(c),m=l((function(){return"/a/b"!=d.call({source:"a",flags:"b"})})),h=o&&"toString"!=d.name;(m||h)&&i(RegExp.prototype,"toString",(function(){var n=a(this),e=u(n.source),t=n.flags;return"/"+e+"/"+u(void 0===t&&s(p,n)&&!("flags"in p)?v(n):t)}),{unsafe:!0})},function(n,e,t){var r=t(13).f,o=t(12),i=t(6)("toStringTag");n.exports=function(n,e,t){n&&!t&&(n=n.prototype),n&&!o(n,i)&&r(n,i,{configurable:!0,value:e})}},function(n,e,t){var r=t(33);n.exports=Array.isArray||function(n){return"Array"==r(n)}},function(n,e,t){t(1)({target:"Array",stat:!0},{isArray:t(69)})},function(n,e,t){var r=t(82),o=t(282),i=t(283),a=r?r.toStringTag:void 0;n.exports=function(n){return null==n?void 0===n?"[object Undefined]":"[object Null]":a&&a in Object(n)?o(n):i(n)}},function(n,e,t){var r=t(2),o=t(17),i=Date.prototype,a=r(i.toString),s=r(i.getTime);"Invalid Date"!=String(new Date(NaN))&&o(i,"toString",(function(){var n=s(this);return n==n?a(this):"Invalid Date"}))},function(n,e,t){var r=t(0),o=t(2),i=t(3),a=t(33),s=r.Object,u=o("".split);n.exports=i((function(){return!s("z").propertyIsEnumerable(0)}))?function(n){return"String"==a(n)?u(n,""):s(n)}:s},function(n,e,t){var r=t(3);n.exports=!r((function(){var n=function(){}.bind();return"function"!=typeof n||n.hasOwnProperty("prototype")}))},function(n,e,t){var r=t(57),o=Math.max,i=Math.min;n.exports=function(n,e){var t=r(n);return t<0?o(t+e,0):i(t,e)}},function(n,e){n.exports={}},function(n,e){n.exports={}},function(n,e,t){var r=t(2),o=t(9),i=t(247);n.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,e=!1,t={};try{(n=r(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(t,[]),e=t instanceof Array}catch(n){}return function(t,r){return o(t),i(r),e?n(t,r):t.__proto__=r,t}}():void 0)},function(n,e,t){var r=t(2);n.exports=r([].slice)},function(n,e,t){var r=t(3),o=t(6),i=t(63),a=o("species");n.exports=function(n){return i>=51||!r((function(){var e=[];return(e.constructor={})[a]=function(){return{foo:1}},1!==e[n](Boolean).foo}))}},function(n,e,t){"use strict";var r=t(1),o=t(0),i=t(24),a=t(43),s=t(14),u=t(2),l=t(32),c=t(8),p=t(122),d=t(3),v=t(12),m=t(69),h=t(7),f=t(10),g=t(39),b=t(95),x=t(9),y=t(16),j=t(29),w=t(94),k=t(11),T=t(60),V=t(42),S=t(97),_=t(64),I=t(188),A=t(128),z=t(40),C=t(13),E=t(123),P=t(126),O=t(79),M=t(17),q=t(91),R=t(98),D=t(76),L=t(92),$=t(6),N=t(189),B=t(190),U=t(68),F=t(36),H=t(61).forEach,J=R("hidden"),W=$("toPrimitive"),G=F.set,X=F.getterFor("Symbol"),K=Object.prototype,Y=o.Symbol,Q=Y&&Y.prototype,Z=o.TypeError,nn=o.QObject,en=i("JSON","stringify"),tn=z.f,rn=C.f,on=I.f,an=P.f,sn=u([].push),un=q("symbols"),ln=q("op-symbols"),cn=q("string-to-symbol-registry"),pn=q("symbol-to-string-registry"),dn=q("wks"),vn=!nn||!nn.prototype||!nn.prototype.findChild,mn=c&&d((function(){return 7!=V(rn({},"a",{get:function(){return rn(this,"a",{value:7}).a}})).a}))?function(n,e,t){var r=tn(K,e);r&&delete K[e],rn(n,e,t),r&&n!==K&&rn(K,e,r)}:rn,hn=function(n,e){var t=un[n]=V(Q);return G(t,{type:"Symbol",tag:n,description:e}),c||(t.description=e),t},fn=function(n,e,t){n===K&&fn(ln,e,t),x(n);var r=w(e);return x(t),v(un,r)?(t.enumerable?(v(n,J)&&n[J][r]&&(n[J][r]=!1),t=V(t,{enumerable:T(0,!1)})):(v(n,J)||rn(n,J,T(1,{})),n[J][r]=!0),mn(n,r,t)):rn(n,r,t)},gn=function(n,e){x(n);var t=j(e),r=S(t).concat(jn(t));return H(r,(function(e){c&&!s(bn,t,e)||fn(n,e,t[e])})),n},bn=function(n){var e=w(n),t=s(an,this,e);return!(this===K&&v(un,e)&&!v(ln,e))&&(!(t||!v(this,e)||!v(un,e)||v(this,J)&&this[J][e])||t)},xn=function(n,e){var t=j(n),r=w(e);if(t!==K||!v(un,r)||v(ln,r)){var o=tn(t,r);return!o||!v(un,r)||v(t,J)&&t[J][r]||(o.enumerable=!0),o}},yn=function(n){var e=on(j(n)),t=[];return H(e,(function(n){v(un,n)||v(D,n)||sn(t,n)})),t},jn=function(n){var e=n===K,t=on(e?ln:j(n)),r=[];return H(t,(function(n){!v(un,n)||e&&!v(K,n)||sn(r,un[n])})),r};(p||(M(Q=(Y=function(){if(g(Q,this))throw Z("Symbol is not a constructor");var n=arguments.length&&void 0!==arguments[0]?k(arguments[0]):void 0,e=L(n),t=function(n){this===K&&s(t,ln,n),v(this,J)&&v(this[J],e)&&(this[J][e]=!1),mn(this,e,T(1,n))};return c&&vn&&mn(K,e,{configurable:!0,set:t}),hn(e,n)}).prototype,"toString",(function(){return X(this).tag})),M(Y,"withoutSetter",(function(n){return hn(L(n),n)})),P.f=bn,C.f=fn,E.f=gn,z.f=xn,_.f=I.f=yn,A.f=jn,N.f=function(n){return hn($(n),n)},c&&(rn(Q,"description",{configurable:!0,get:function(){return X(this).description}}),l||M(K,"propertyIsEnumerable",bn,{unsafe:!0}))),r({global:!0,wrap:!0,forced:!p,sham:!p},{Symbol:Y}),H(S(dn),(function(n){B(n)})),r({target:"Symbol",stat:!0,forced:!p},{for:function(n){var e=k(n);if(v(cn,e))return cn[e];var t=Y(e);return cn[e]=t,pn[t]=e,t},keyFor:function(n){if(!b(n))throw Z(n+" is not a symbol");if(v(pn,n))return pn[n]},useSetter:function(){vn=!0},useSimple:function(){vn=!1}}),r({target:"Object",stat:!0,forced:!p,sham:!c},{create:function(n,e){return void 0===e?V(n):gn(V(n),e)},defineProperty:fn,defineProperties:gn,getOwnPropertyDescriptor:xn}),r({target:"Object",stat:!0,forced:!p},{getOwnPropertyNames:yn,getOwnPropertySymbols:jn}),r({target:"Object",stat:!0,forced:d((function(){A.f(1)}))},{getOwnPropertySymbols:function(n){return A.f(y(n))}}),en)&&r({target:"JSON",stat:!0,forced:!p||d((function(){var n=Y();return"[null]"!=en([n])||"{}"!=en({a:n})||"{}"!=en(Object(n))}))},{stringify:function(n,e,t){var r=O(arguments),o=e;if((f(e)||void 0!==n)&&!b(n))return m(e)||(e=function(n,e){if(h(o)&&(e=s(o,this,n,e)),!b(e))return e}),r[1]=e,a(en,null,r)}});if(!Q[W]){var wn=Q.valueOf;M(Q,W,(function(n){return s(wn,this)}))}U(Y,"Symbol"),D[J]=!0},function(n,e,t){var r=t(41).Symbol;n.exports=r},function(n,e,t){"use strict";t.d(e,"a",(function(){return i}));t(70);var r=t(84);t(81),t(103),t(4),t(136),t(18),t(21),t(191);var o=t(114);t(50),t(25);function i(n){return function(n){if(Array.isArray(n))return Object(r.a)(n)}(n)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(n)||Object(o.a)(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(n,e,t){"use strict";function r(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";var r=t(1),o=t(0),i=t(69),a=t(101),s=t(10),u=t(75),l=t(28),c=t(29),p=t(65),d=t(6),v=t(80),m=t(79),h=v("slice"),f=d("species"),g=o.Array,b=Math.max;r({target:"Array",proto:!0,forced:!h},{slice:function(n,e){var t,r,o,d=c(this),v=l(d),h=u(n,v),x=u(void 0===e?v:e,v);if(i(d)&&(t=d.constructor,(a(t)&&(t===g||i(t.prototype))||s(t)&&null===(t=t[f]))&&(t=void 0),t===g||void 0===t))return m(d,h,x);for(r=new(void 0===t?g:t)(b(x-h,0)),o=0;h<x;h++,o++)h in d&&p(r,o,d[h]);return r.length=o,r}})},function(n,e,t){"use strict";var r=t(8),o=t(0),i=t(2),a=t(100),s=t(17),u=t(12),l=t(139),c=t(39),p=t(95),d=t(164),v=t(3),m=t(64).f,h=t(40).f,f=t(13).f,g=t(375),b=t(231).trim,x=o.Number,y=x.prototype,j=o.TypeError,w=i("".slice),k=i("".charCodeAt),T=function(n){var e=d(n,"number");return"bigint"==typeof e?e:V(e)},V=function(n){var e,t,r,o,i,a,s,u,l=d(n,"number");if(p(l))throw j("Cannot convert a Symbol value to a number");if("string"==typeof l&&l.length>2)if(l=b(l),43===(e=k(l,0))||45===e){if(88===(t=k(l,2))||120===t)return NaN}else if(48===e){switch(k(l,1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+l}for(a=(i=w(l,2)).length,s=0;s<a;s++)if((u=k(i,s))<48||u>o)return NaN;return parseInt(i,r)}return+l};if(a("Number",!x(" 0o1")||!x("0b1")||x("+0x1"))){for(var S,_=function(n){var e=arguments.length<1?0:x(T(n)),t=this;return c(y,t)&&v((function(){g(t)}))?l(Object(e),t,_):e},I=r?m(x):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","),A=0;I.length>A;A++)u(x,S=I[A])&&!u(_,S)&&f(_,S,h(x,S));_.prototype=y,y.constructor=_,s(o,"Number",_)}},function(n,e,t){var r=t(1),o=t(0),i=t(43),a=t(7),s=t(38),u=t(79),l=t(156),c=/MSIE .\./.test(s),p=o.Function,d=function(n){return function(e,t){var r=l(arguments.length,1)>2,o=a(e)?e:p(e),s=r?u(arguments,2):void 0;return n(r?function(){i(o,this,s)}:o,t)}};r({global:!0,bind:!0,forced:c},{setTimeout:d(o.setTimeout),setInterval:d(o.setInterval)})},function(n,e,t){var r=t(6),o=t(42),i=t(13),a=r("unscopables"),s=Array.prototype;null==s[a]&&i.f(s,a,{configurable:!0,value:o(null)}),n.exports=function(n){s[a][n]=!0}},function(n,e,t){var r=t(8),o=t(12),i=Function.prototype,a=r&&Object.getOwnPropertyDescriptor,s=o(i,"name"),u=s&&"something"===function(){}.name,l=s&&(!r||r&&a(i,"name").configurable);n.exports={EXISTS:s,PROPER:u,CONFIGURABLE:l}},function(n,e,t){var r=t(0),o=t(130),i=t(7),a=t(33),s=t(6)("toStringTag"),u=r.Object,l="Arguments"==a(function(){return arguments}());n.exports=o?a:function(n){var e,t,r;return void 0===n?"Undefined":null===n?"Null":"string"==typeof(t=function(n,e){try{return n[e]}catch(n){}}(e=u(n),s))?t:l?a(e):"Object"==(r=a(e))&&i(e.callee)?"Arguments":r}},function(n,e,t){var r=t(32),o=t(120);(n.exports=function(n,e){return o[n]||(o[n]=void 0!==e?e:{})})("versions",[]).push({version:"3.21.1",mode:r?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.21.1/LICENSE",source:"https://github.com/zloirock/core-js"})},function(n,e,t){var r=t(2),o=0,i=Math.random(),a=r(1..toString);n.exports=function(n){return"Symbol("+(void 0===n?"":n)+")_"+a(++o+i,36)}},function(n,e,t){var r=t(0),o=t(10),i=r.document,a=o(i)&&o(i.createElement);n.exports=function(n){return a?i.createElement(n):{}}},function(n,e,t){var r=t(164),o=t(95);n.exports=function(n){var e=r(n,"string");return o(e)?e:e+""}},function(n,e,t){var r=t(0),o=t(24),i=t(7),a=t(39),s=t(161),u=r.Object;n.exports=s?function(n){return"symbol"==typeof n}:function(n){var e=o("Symbol");return i(e)&&a(e.prototype,u(n))}},function(n,e,t){var r=t(0).String;n.exports=function(n){try{return r(n)}catch(n){return"Object"}}},function(n,e,t){var r=t(165),o=t(125);n.exports=Object.keys||function(n){return r(n,o)}},function(n,e,t){var r=t(91),o=t(92),i=r("keys");n.exports=function(n){return i[n]||(i[n]=o(n))}},function(n,e,t){var r=t(2),o=t(7),i=t(120),a=r(Function.toString);o(i.inspectSource)||(i.inspectSource=function(n){return a(n)}),n.exports=i.inspectSource},function(n,e,t){var r=t(3),o=t(7),i=/#|\.prototype\./,a=function(n,e){var t=u[s(n)];return t==c||t!=l&&(o(e)?r(e):!!e)},s=a.normalize=function(n){return String(n).replace(i,".").toLowerCase()},u=a.data={},l=a.NATIVE="N",c=a.POLYFILL="P";n.exports=a},function(n,e,t){var r=t(2),o=t(3),i=t(7),a=t(90),s=t(24),u=t(99),l=function(){},c=[],p=s("Reflect","construct"),d=/^\s*(?:class|function)\b/,v=r(d.exec),m=!d.exec(l),h=function(n){if(!i(n))return!1;try{return p(l,c,n),!0}catch(n){return!1}},f=function(n){if(!i(n))return!1;switch(a(n)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return m||!!v(d,u(n))}catch(n){return!0}};f.sham=!0,n.exports=!p||o((function(){var n;return h(h.call)||!h(Object)||!h((function(){n=!0}))||n}))?f:h},function(n,e,t){var r=t(33),o=t(0);n.exports="process"==r(o.process)},function(n,e,t){"use strict";var r=t(1),o=t(8),i=t(0),a=t(2),s=t(12),u=t(7),l=t(39),c=t(11),p=t(13).f,d=t(127),v=i.Symbol,m=v&&v.prototype;if(o&&u(v)&&(!("description"in m)||void 0!==v().description)){var h={},f=function(){var n=arguments.length<1||void 0===arguments[0]?void 0:c(arguments[0]),e=l(m,this)?new v(n):void 0===n?v():v(n);return""===n&&(h[e]=!0),e};d(f,v),f.prototype=m,m.constructor=f;var g="Symbol(test)"==String(v("test")),b=a(m.toString),x=a(m.valueOf),y=/^Symbol\((.*)\)[^)]+$/,j=a("".replace),w=a("".slice);p(m,"description",{configurable:!0,get:function(){var n=x(this),e=b(n);if(s(h,n))return"";var t=g?w(e,7,-1):j(e,y,"$1");return""===t?void 0:t}}),r({global:!0,forced:!0},{Symbol:f})}},function(n,e,t){"use strict";var r,o,i=t(14),a=t(2),s=t(11),u=t(137),l=t(105),c=t(91),p=t(42),d=t(36).get,v=t(138),m=t(192),h=c("native-string-replace",String.prototype.replace),f=RegExp.prototype.exec,g=f,b=a("".charAt),x=a("".indexOf),y=a("".replace),j=a("".slice),w=(o=/b*/g,i(f,r=/a/,"a"),i(f,o,"a"),0!==r.lastIndex||0!==o.lastIndex),k=l.BROKEN_CARET,T=void 0!==/()??/.exec("")[1];(w||T||k||v||m)&&(g=function(n){var e,t,r,o,a,l,c,v=this,m=d(v),V=s(n),S=m.raw;if(S)return S.lastIndex=v.lastIndex,e=i(g,S,V),v.lastIndex=S.lastIndex,e;var _=m.groups,I=k&&v.sticky,A=i(u,v),z=v.source,C=0,E=V;if(I&&(A=y(A,"y",""),-1===x(A,"g")&&(A+="g"),E=j(V,v.lastIndex),v.lastIndex>0&&(!v.multiline||v.multiline&&"\n"!==b(V,v.lastIndex-1))&&(z="(?: "+z+")",E=" "+E,C++),t=new RegExp("^(?:"+z+")",A)),T&&(t=new RegExp("^"+z+"$(?!\\s)",A)),w&&(r=v.lastIndex),o=i(f,I?t:v,E),I?o?(o.input=j(o.input,C),o[0]=j(o[0],C),o.index=v.lastIndex,v.lastIndex+=o[0].length):v.lastIndex=0:w&&o&&(v.lastIndex=v.global?o.index+o[0].length:r),T&&o&&o.length>1&&i(h,o[0],t,(function(){for(a=1;a<arguments.length-2;a++)void 0===arguments[a]&&(o[a]=void 0)})),o&&_)for(o.groups=l=p(null),a=0;a<_.length;a++)l[(c=_[a])[0]]=o[c[1]];return o}),n.exports=g},function(n,e,t){var r=t(3),o=t(0).RegExp,i=r((function(){var n=o("a","y");return n.lastIndex=2,null!=n.exec("abcd")})),a=i||r((function(){return!o("a","y").sticky})),s=i||r((function(){var n=o("^r","gy");return n.lastIndex=2,null!=n.exec("str")}));n.exports={BROKEN_CARET:s,MISSED_STICKY:a,UNSUPPORTED_Y:i}},function(n,e,t){var r=t(287),o=t(288),i=t(289),a=t(290),s=t(291);function u(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}u.prototype.clear=r,u.prototype.delete=o,u.prototype.get=i,u.prototype.has=a,u.prototype.set=s,n.exports=u},function(n,e,t){var r=t(198);n.exports=function(n,e){for(var t=n.length;t--;)if(r(n[t][0],e))return t;return-1}},function(n,e,t){var r=t(51)(Object,"create");n.exports=r},function(n,e,t){var r=t(309);n.exports=function(n,e){var t=n.__data__;return r(e)?t["string"==typeof e?"string":"hash"]:t.map}},function(n,e,t){var r=t(148);n.exports=function(n){if("string"==typeof n||r(n))return n;var e=n+"";return"0"==e&&1/n==-1/0?"-0":e}},function(n,e,t){var r=t(1),o=t(8),i=t(13).f;r({target:"Object",stat:!0,forced:Object.defineProperty!==i,sham:!o},{defineProperty:i})},function(n,e,t){"use strict";var r,o=t(1),i=t(2),a=t(40).f,s=t(49),u=t(11),l=t(132),c=t(22),p=t(134),d=t(32),v=i("".endsWith),m=i("".slice),h=Math.min,f=p("endsWith");o({target:"String",proto:!0,forced:!!(d||f||(r=a(String.prototype,"endsWith"),!r||r.writable))&&!f},{endsWith:function(n){var e=u(c(this));l(n);var t=arguments.length>1?arguments[1]:void 0,r=e.length,o=void 0===t?r:h(s(t),r),i=u(n);return v?v(e,i,o):m(e,o-i.length,o)===i}})},function(n,e,t){"use strict";var r=t(1),o=t(240);r({target:"String",proto:!0,forced:t(241)("fixed")},{fixed:function(){return o(this,"tt","","")}})},function(n,e,t){"use strict";t.d(e,"a",(function(){return o}));t(85),t(4),t(44),t(191),t(18),t(20),t(56);var r=t(84);function o(n,e){if(n){if("string"==typeof n)return Object(r.a)(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Object(r.a)(n,e):void 0}}},function(n,e,t){var r,o;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(o="function"==typeof(r=function(){var n,e,t={version:"0.2.0"},r=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function o(n,e,t){return n<e?e:n>t?t:n}function i(n){return 100*(-1+n)}t.configure=function(n){var e,t;for(e in n)void 0!==(t=n[e])&&n.hasOwnProperty(e)&&(r[e]=t);return this},t.status=null,t.set=function(n){var e=t.isStarted();n=o(n,r.minimum,1),t.status=1===n?null:n;var u=t.render(!e),l=u.querySelector(r.barSelector),c=r.speed,p=r.easing;return u.offsetWidth,a((function(e){""===r.positionUsing&&(r.positionUsing=t.getPositioningCSS()),s(l,function(n,e,t){var o;return(o="translate3d"===r.positionUsing?{transform:"translate3d("+i(n)+"%,0,0)"}:"translate"===r.positionUsing?{transform:"translate("+i(n)+"%,0)"}:{"margin-left":i(n)+"%"}).transition="all "+e+"ms "+t,o}(n,c,p)),1===n?(s(u,{transition:"none",opacity:1}),u.offsetWidth,setTimeout((function(){s(u,{transition:"all "+c+"ms linear",opacity:0}),setTimeout((function(){t.remove(),e()}),c)}),c)):setTimeout(e,c)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var n=function(){setTimeout((function(){t.status&&(t.trickle(),n())}),r.trickleSpeed)};return r.trickle&&n(),this},t.done=function(n){return n||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(n){var e=t.status;return e?("number"!=typeof n&&(n=(1-e)*o(Math.random()*e,.1,.95)),e=o(e+n,0,.994),t.set(e)):t.start()},t.trickle=function(){return t.inc(Math.random()*r.trickleRate)},n=0,e=0,t.promise=function(r){return r&&"resolved"!==r.state()?(0===e&&t.start(),n++,e++,r.always((function(){0==--e?(n=0,t.done()):t.set((n-e)/n)})),this):this},t.render=function(n){if(t.isRendered())return document.getElementById("nprogress");l(document.documentElement,"nprogress-busy");var e=document.createElement("div");e.id="nprogress",e.innerHTML=r.template;var o,a=e.querySelector(r.barSelector),u=n?"-100":i(t.status||0),c=document.querySelector(r.parent);return s(a,{transition:"all 0 linear",transform:"translate3d("+u+"%,0,0)"}),r.showSpinner||(o=e.querySelector(r.spinnerSelector))&&d(o),c!=document.body&&l(c,"nprogress-custom-parent"),c.appendChild(e),e},t.remove=function(){c(document.documentElement,"nprogress-busy"),c(document.querySelector(r.parent),"nprogress-custom-parent");var n=document.getElementById("nprogress");n&&d(n)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var n=document.body.style,e="WebkitTransform"in n?"Webkit":"MozTransform"in n?"Moz":"msTransform"in n?"ms":"OTransform"in n?"O":"";return e+"Perspective"in n?"translate3d":e+"Transform"in n?"translate":"margin"};var a=function(){var n=[];function e(){var t=n.shift();t&&t(e)}return function(t){n.push(t),1==n.length&&e()}}(),s=function(){var n=["Webkit","O","Moz","ms"],e={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(n,e){return e.toUpperCase()})),e[t]||(e[t]=function(e){var t=document.body.style;if(e in t)return e;for(var r,o=n.length,i=e.charAt(0).toUpperCase()+e.slice(1);o--;)if((r=n[o]+i)in t)return r;return e}(t))}function r(n,e,r){e=t(e),n.style[e]=r}return function(n,e){var t,o,i=arguments;if(2==i.length)for(t in e)void 0!==(o=e[t])&&e.hasOwnProperty(t)&&r(n,t,o);else r(n,i[1],i[2])}}();function u(n,e){return("string"==typeof n?n:p(n)).indexOf(" "+e+" ")>=0}function l(n,e){var t=p(n),r=t+e;u(t,e)||(n.className=r.substring(1))}function c(n,e){var t,r=p(n);u(n,e)&&(t=r.replace(" "+e+" "," "),n.className=t.substring(1,t.length-1))}function p(n){return(" "+(n.className||"")+" ").replace(/\s+/gi," ")}function d(n){n&&n.parentNode&&n.parentNode.removeChild(n)}return t})?r.call(e,t,e,n):r)||(n.exports=o)},function(n,e,t){var r=t(90),o=t(59),i=t(77),a=t(6)("iterator");n.exports=function(n){if(null!=n)return o(n,a)||o(n,"@@iterator")||i[r(n)]}},function(n,e,t){var r=t(261);n.exports=function(n,e){return new(r(n))(0===e?0:e)}},function(n,e,t){"use strict";t(20);var r=t(2),o=t(17),i=t(104),a=t(3),s=t(6),u=t(34),l=s("species"),c=RegExp.prototype;n.exports=function(n,e,t,p){var d=s(n),v=!a((function(){var e={};return e[d]=function(){return 7},7!=""[n](e)})),m=v&&!a((function(){var e=!1,t=/a/;return"split"===n&&((t={}).constructor={},t.constructor[l]=function(){return t},t.flags="",t[d]=/./[d]),t.exec=function(){return e=!0,null},t[d](""),!e}));if(!v||!m||t){var h=r(/./[d]),f=e(d,""[n],(function(n,e,t,o,a){var s=r(n),u=e.exec;return u===i||u===c.exec?v&&!a?{done:!0,value:h(e,t,o)}:{done:!0,value:s(t,e,o)}:{done:!1}}));o(String.prototype,n,f[0]),o(c,d,f[1])}p&&u(c[d],"sham",!0)}},function(n,e,t){var r=t(0),o=t(14),i=t(9),a=t(7),s=t(33),u=t(104),l=r.TypeError;n.exports=function(n,e){var t=n.exec;if(a(t)){var r=o(t,n,e);return null!==r&&i(r),r}if("RegExp"===s(n))return o(u,n,e);throw l("RegExp#exec called on incompatible receiver")}},function(n,e,t){var r=t(0),o=t(121),i=r["__core-js_shared__"]||o("__core-js_shared__",{});n.exports=i},function(n,e,t){var r=t(0),o=Object.defineProperty;n.exports=function(n,e){try{o(r,n,{value:e,configurable:!0,writable:!0})}catch(t){r[n]=e}return e}},function(n,e,t){var r=t(63),o=t(3);n.exports=!!Object.getOwnPropertySymbols&&!o((function(){var n=Symbol();return!String(n)||!(Object(n)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},function(n,e,t){var r=t(8),o=t(162),i=t(13),a=t(9),s=t(29),u=t(97);e.f=r&&!o?Object.defineProperties:function(n,e){a(n);for(var t,r=s(e),o=u(e),l=o.length,c=0;l>c;)i.f(n,t=o[c++],r[t]);return n}},function(n,e,t){var r=t(29),o=t(75),i=t(28),a=function(n){return function(e,t,a){var s,u=r(e),l=i(u),c=o(a,l);if(n&&t!=t){for(;l>c;)if((s=u[c++])!=s)return!0}else for(;l>c;c++)if((n||c in u)&&u[c]===t)return n||c||0;return!n&&-1}};n.exports={includes:a(!0),indexOf:a(!1)}},function(n,e){n.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(n,e,t){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);e.f=i?function(n){var e=o(this,n);return!!e&&e.enumerable}:r},function(n,e,t){var r=t(12),o=t(168),i=t(40),a=t(13);n.exports=function(n,e,t){for(var s=o(e),u=a.f,l=i.f,c=0;c<s.length;c++){var p=s[c];r(n,p)||t&&r(t,p)||u(n,p,l(e,p))}}},function(n,e){e.f=Object.getOwnPropertySymbols},function(n,e,t){var r=t(0),o=t(12),i=t(7),a=t(16),s=t(98),u=t(170),l=s("IE_PROTO"),c=r.Object,p=c.prototype;n.exports=u?c.getPrototypeOf:function(n){var e=a(n);if(o(e,l))return e[l];var t=e.constructor;return i(t)&&e instanceof t?t.prototype:e instanceof c?p:null}},function(n,e,t){var r={};r[t(6)("toStringTag")]="z",n.exports="[object z]"===String(r)},function(n,e,t){var r=t(9),o=t(176),i=t(6)("species");n.exports=function(n,e){var t,a=r(n).constructor;return void 0===a||null==(t=r(a)[i])?e:o(t)}},function(n,e,t){var r=t(0),o=t(133),i=r.TypeError;n.exports=function(n){if(o(n))throw i("The method doesn't accept regular expressions");return n}},function(n,e,t){var r=t(10),o=t(33),i=t(6)("match");n.exports=function(n){var e;return r(n)&&(void 0!==(e=n[i])?!!e:"RegExp"==o(n))}},function(n,e,t){var r=t(6)("match");n.exports=function(n){var e=/./;try{"/./"[n](e)}catch(t){try{return e[r]=!1,"/./"[n](e)}catch(n){}}return!1}},function(n,e,t){var r=t(0),o=t(75),i=t(28),a=t(65),s=r.Array,u=Math.max;n.exports=function(n,e,t){for(var r=i(n),l=o(e,r),c=o(void 0===t?r:t,r),p=s(u(c-l,0)),d=0;l<c;l++,d++)a(p,d,n[l]);return p.length=d,p}},function(n,e,t){t(190)("iterator")},function(n,e,t){"use strict";var r=t(9);n.exports=function(){var n=r(this),e="";return n.global&&(e+="g"),n.ignoreCase&&(e+="i"),n.multiline&&(e+="m"),n.dotAll&&(e+="s"),n.unicode&&(e+="u"),n.sticky&&(e+="y"),e}},function(n,e,t){var r=t(3),o=t(0).RegExp;n.exports=r((function(){var n=o(".","s");return!(n.dotAll&&n.exec("\n")&&"s"===n.flags)}))},function(n,e,t){var r=t(7),o=t(10),i=t(78);n.exports=function(n,e,t){var a,s;return i&&r(a=e.constructor)&&a!==t&&o(s=a.prototype)&&s!==t.prototype&&i(n,s),n}},function(n,e,t){"use strict";var r=t(181).charAt;n.exports=function(n,e,t){return e+(t?r(n,e).length:1)}},function(n,e,t){var r=t(281),o=t(62),i=Object.prototype,a=i.hasOwnProperty,s=i.propertyIsEnumerable,u=r(function(){return arguments}())?r:function(n){return o(n)&&a.call(n,"callee")&&!s.call(n,"callee")};n.exports=u},function(n,e,t){var r=t(51)(t(41),"Map");n.exports=r},function(n,e){n.exports=function(n){var e=typeof n;return null!=n&&("object"==e||"function"==e)}},function(n,e,t){var r=t(301),o=t(308),i=t(310),a=t(311),s=t(312);function u(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}u.prototype.clear=r,u.prototype.delete=o,u.prototype.get=i,u.prototype.has=a,u.prototype.set=s,n.exports=u},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n){t[++e]=n})),t}},function(n,e){n.exports=function(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}},function(n,e,t){var r=t(37),o=t(148),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,a=/^\w*$/;n.exports=function(n,e){if(r(n))return!1;var t=typeof n;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=n&&!o(n))||(a.test(n)||!i.test(n)||null!=e&&n in Object(e))}},function(n,e,t){var r=t(71),o=t(62);n.exports=function(n){return"symbol"==typeof n||o(n)&&"[object Symbol]"==r(n)}},function(n,e){n.exports=function(n){return n}},function(n,e,t){"use strict";var r=t(1),o=t(376).start;r({target:"String",proto:!0,forced:t(378)},{padStart:function(n){return o(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";var r=t(1),o=t(2),i=t(124).indexOf,a=t(58),s=o([].indexOf),u=!!s&&1/s([1],1,-0)<0,l=a("indexOf");r({target:"Array",proto:!0,forced:u||!l},{indexOf:function(n){var e=arguments.length>1?arguments[1]:void 0;return u?s(this,n,e)||0:i(this,n,e)}})},function(n,e,t){"use strict";var r=t(1),o=t(61).some;r({target:"Array",proto:!0,forced:!t(58)("some")},{some:function(n){return o(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";var r=t(1),o=t(61).find,i=t(88),a=!0;"find"in[]&&Array(1).find((function(){a=!1})),r({target:"Array",proto:!0,forced:a},{find:function(n){return o(this,n,arguments.length>1?arguments[1]:void 0)}}),i("find")},function(n,e,t){"use strict";var r=t(29),o=t(88),i=t(77),a=t(36),s=t(13).f,u=t(167),l=t(32),c=t(8),p=a.set,d=a.getterFor("Array Iterator");n.exports=u(Array,"Array",(function(n,e){p(this,{type:"Array Iterator",target:r(n),index:0,kind:e})}),(function(){var n=d(this),e=n.target,t=n.kind,r=n.index++;return!e||r>=e.length?(n.target=void 0,{value:void 0,done:!0}):"keys"==t?{value:r,done:!1}:"values"==t?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),"values");var v=i.Arguments=i.Array;if(o("keys"),o("values"),o("entries"),!l&&c&&"values"!==v.name)try{s(v,"name",{value:"values"})}catch(n){}},function(n,e,t){var r=t(0),o=t(14),i=t(45),a=t(9),s=t(96),u=t(116),l=r.TypeError;n.exports=function(n,e){var t=arguments.length<2?u(n):e;if(i(t))return a(o(t,n));throw l(s(n)+" is not iterable")}},function(n,e,t){var r=t(0).TypeError;n.exports=function(n,e){if(n<e)throw r("Not enough arguments");return n}},function(n,e,t){"use strict";var r=t(1),o=t(2),i=t(73),a=t(29),s=t(58),u=o([].join),l=i!=Object,c=s("join",",");r({target:"Array",proto:!0,forced:l||!c},{join:function(n){return u(a(this),void 0===n?",":n)}})},function(n,e){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,e){var t=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,o=/^0b[01]+$/i,i=/^0o[0-7]+$/i,a=parseInt,s="object"==typeof global&&global&&global.Object===Object&&global,u="object"==typeof self&&self&&self.Object===Object&&self,l=s||u||Function("return this")(),c=Object.prototype.toString,p=Math.max,d=Math.min,v=function(){return l.Date.now()};function m(n){var e=typeof n;return!!n&&("object"==e||"function"==e)}function h(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==c.call(n)}(n))return NaN;if(m(n)){var e="function"==typeof n.valueOf?n.valueOf():n;n=m(e)?e+"":e}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(t,"");var s=o.test(n);return s||i.test(n)?a(n.slice(2),s?2:8):r.test(n)?NaN:+n}n.exports=function(n,e,t){var r,o,i,a,s,u,l=0,c=!1,f=!1,g=!0;if("function"!=typeof n)throw new TypeError("Expected a function");function b(e){var t=r,i=o;return r=o=void 0,l=e,a=n.apply(i,t)}function x(n){return l=n,s=setTimeout(j,e),c?b(n):a}function y(n){var t=n-u;return void 0===u||t>=e||t<0||f&&n-l>=i}function j(){var n=v();if(y(n))return w(n);s=setTimeout(j,function(n){var t=e-(n-u);return f?d(t,i-(n-l)):t}(n))}function w(n){return s=void 0,g&&r?b(n):(r=o=void 0,a)}function k(){var n=v(),t=y(n);if(r=arguments,o=this,u=n,t){if(void 0===s)return x(u);if(f)return s=setTimeout(j,e),b(u)}return void 0===s&&(s=setTimeout(j,e)),a}return e=h(e)||0,m(t)&&(c=!!t.leading,i=(f="maxWait"in t)?p(h(t.maxWait)||0,e):i,g="trailing"in t?!!t.trailing:g),k.cancel=function(){void 0!==s&&clearTimeout(s),l=0,r=u=o=s=void 0},k.flush=function(){return void 0===s?a:w(v())},k}},function(n,e,t){var r=t(0),o=t(8),i=t(105).MISSED_STICKY,a=t(33),s=t(13).f,u=t(36).get,l=RegExp.prototype,c=r.TypeError;o&&i&&s(l,"sticky",{configurable:!0,get:function(){if(this!==l){if("RegExp"===a(this))return!!u(this).sticky;throw c("Incompatible receiver, RegExp required")}}})},function(n,e,t){var r=t(122);n.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(n,e,t){var r=t(8),o=t(3);n.exports=r&&o((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(n,e,t){var r=t(8),o=t(3),i=t(93);n.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(n,e,t){var r=t(0),o=t(14),i=t(10),a=t(95),s=t(59),u=t(245),l=t(6),c=r.TypeError,p=l("toPrimitive");n.exports=function(n,e){if(!i(n)||a(n))return n;var t,r=s(n,p);if(r){if(void 0===e&&(e="default"),t=o(r,n,e),!i(t)||a(t))return t;throw c("Can't convert object to primitive value")}return void 0===e&&(e="number"),u(n,e)}},function(n,e,t){var r=t(2),o=t(12),i=t(29),a=t(124).indexOf,s=t(76),u=r([].push);n.exports=function(n,e){var t,r=i(n),l=0,c=[];for(t in r)!o(s,t)&&o(r,t)&&u(c,t);for(;e.length>l;)o(r,t=e[l++])&&(~a(c,t)||u(c,t));return c}},function(n,e,t){var r=t(24);n.exports=r("document","documentElement")},function(n,e,t){"use strict";var r=t(1),o=t(14),i=t(32),a=t(89),s=t(7),u=t(233),l=t(129),c=t(78),p=t(68),d=t(34),v=t(17),m=t(6),h=t(77),f=t(169),g=a.PROPER,b=a.CONFIGURABLE,x=f.IteratorPrototype,y=f.BUGGY_SAFARI_ITERATORS,j=m("iterator"),w=function(){return this};n.exports=function(n,e,t,a,m,f,k){u(t,e,a);var T,V,S,_=function(n){if(n===m&&E)return E;if(!y&&n in z)return z[n];switch(n){case"keys":case"values":case"entries":return function(){return new t(this,n)}}return function(){return new t(this)}},I=e+" Iterator",A=!1,z=n.prototype,C=z[j]||z["@@iterator"]||m&&z[m],E=!y&&C||_(m),P="Array"==e&&z.entries||C;if(P&&(T=l(P.call(new n)))!==Object.prototype&&T.next&&(i||l(T)===x||(c?c(T,x):s(T[j])||v(T,j,w)),p(T,I,!0,!0),i&&(h[I]=w)),g&&"values"==m&&C&&"values"!==C.name&&(!i&&b?d(z,"name","values"):(A=!0,E=function(){return o(C,this)})),m)if(V={values:_("values"),keys:f?E:_("keys"),entries:_("entries")},k)for(S in V)(y||A||!(S in z))&&v(z,S,V[S]);else r({target:e,proto:!0,forced:y||A},V);return i&&!k||z[j]===E||v(z,j,E,{name:m}),h[e]=E,V}},function(n,e,t){var r=t(24),o=t(2),i=t(64),a=t(128),s=t(9),u=o([].concat);n.exports=r("Reflect","ownKeys")||function(n){var e=i.f(s(n)),t=a.f;return t?u(e,t(n)):e}},function(n,e,t){"use strict";var r,o,i,a=t(3),s=t(7),u=t(42),l=t(129),c=t(17),p=t(6),d=t(32),v=p("iterator"),m=!1;[].keys&&("next"in(i=[].keys())?(o=l(l(i)))!==Object.prototype&&(r=o):m=!0),null==r||a((function(){var n={};return r[v].call(n)!==n}))?r={}:d&&(r=u(r)),s(r[v])||c(r,v,(function(){return this})),n.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:m}},function(n,e,t){var r=t(3);n.exports=!r((function(){function n(){}return n.prototype.constructor=null,Object.getPrototypeOf(new n)!==n.prototype}))},function(n,e,t){var r=t(0);n.exports=r.Promise},function(n,e,t){"use strict";var r=t(24),o=t(13),i=t(6),a=t(8),s=i("species");n.exports=function(n){var e=r(n),t=o.f;a&&e&&!e[s]&&t(e,s,{configurable:!0,get:function(){return this}})}},function(n,e,t){var r=t(6),o=t(77),i=r("iterator"),a=Array.prototype;n.exports=function(n){return void 0!==n&&(o.Array===n||a[i]===n)}},function(n,e,t){var r=t(14),o=t(9),i=t(59);n.exports=function(n,e,t){var a,s;o(n);try{if(!(a=i(n,"return"))){if("throw"===e)throw t;return t}a=r(a,n)}catch(n){s=!0,a=n}if("throw"===e)throw t;if(s)throw a;return o(a),t}},function(n,e,t){var r=t(6)("iterator"),o=!1;try{var i=0,a={next:function(){return{done:!!i++}},return:function(){o=!0}};a[r]=function(){return this},Array.from(a,(function(){throw 2}))}catch(n){}n.exports=function(n,e){if(!e&&!o)return!1;var t=!1;try{var i={};i[r]=function(){return{next:function(){return{done:t=!0}}}},n(i)}catch(n){}return t}},function(n,e,t){var r=t(0),o=t(101),i=t(96),a=r.TypeError;n.exports=function(n){if(o(n))return n;throw a(i(n)+" is not a constructor")}},function(n,e,t){var r,o,i,a,s=t(0),u=t(43),l=t(66),c=t(7),p=t(12),d=t(3),v=t(166),m=t(79),h=t(93),f=t(156),g=t(178),b=t(102),x=s.setImmediate,y=s.clearImmediate,j=s.process,w=s.Dispatch,k=s.Function,T=s.MessageChannel,V=s.String,S=0,_={};try{r=s.location}catch(n){}var I=function(n){if(p(_,n)){var e=_[n];delete _[n],e()}},A=function(n){return function(){I(n)}},z=function(n){I(n.data)},C=function(n){s.postMessage(V(n),r.protocol+"//"+r.host)};x&&y||(x=function(n){f(arguments.length,1);var e=c(n)?n:k(n),t=m(arguments,1);return _[++S]=function(){u(e,void 0,t)},o(S),S},y=function(n){delete _[n]},b?o=function(n){j.nextTick(A(n))}:w&&w.now?o=function(n){w.now(A(n))}:T&&!g?(a=(i=new T).port2,i.port1.onmessage=z,o=l(a.postMessage,a)):s.addEventListener&&c(s.postMessage)&&!s.importScripts&&r&&"file:"!==r.protocol&&!d(C)?(o=C,s.addEventListener("message",z,!1)):o="onreadystatechange"in h("script")?function(n){v.appendChild(h("script")).onreadystatechange=function(){v.removeChild(this),I(n)}}:function(n){setTimeout(A(n),0)}),n.exports={set:x,clear:y}},function(n,e,t){var r=t(38);n.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(r)},function(n,e,t){var r=t(9),o=t(10),i=t(180);n.exports=function(n,e){if(r(n),o(e)&&e.constructor===n)return e;var t=i.f(n);return(0,t.resolve)(e),t.promise}},function(n,e,t){"use strict";var r=t(45),o=function(n){var e,t;this.promise=new n((function(n,r){if(void 0!==e||void 0!==t)throw TypeError("Bad Promise constructor");e=n,t=r})),this.resolve=r(e),this.reject=r(t)};n.exports.f=function(n){return new o(n)}},function(n,e,t){var r=t(2),o=t(57),i=t(11),a=t(22),s=r("".charAt),u=r("".charCodeAt),l=r("".slice),c=function(n){return function(e,t){var r,c,p=i(a(e)),d=o(t),v=p.length;return d<0||d>=v?n?"":void 0:(r=u(p,d))<55296||r>56319||d+1===v||(c=u(p,d+1))<56320||c>57343?n?s(p,d):r:n?l(p,d,d+2):c-56320+(r-55296<<10)+65536}};n.exports={codeAt:c(!1),charAt:c(!0)}},function(n,e){n.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(n,e,t){var r=t(93)("span").classList,o=r&&r.constructor&&r.constructor.prototype;n.exports=o===Object.prototype?void 0:o},function(n,e,t){var r=t(1),o=t(8),i=t(168),a=t(29),s=t(40),u=t(65);r({target:"Object",stat:!0,sham:!o},{getOwnPropertyDescriptors:function(n){for(var e,t,r=a(n),o=s.f,l=i(r),c={},p=0;l.length>p;)void 0!==(t=o(r,e=l[p++]))&&u(c,e,t);return c}})},function(n,e,t){var r=t(1),o=t(3),i=t(16),a=t(129),s=t(170);r({target:"Object",stat:!0,forced:o((function(){a(1)})),sham:!s},{getPrototypeOf:function(n){return a(i(n))}})},function(n,e,t){"use strict";var r=t(61).forEach,o=t(58)("forEach");n.exports=o?[].forEach:function(n){return r(this,n,arguments.length>1?arguments[1]:void 0)}},function(n,e,t){var r=t(3);n.exports=!r((function(){return Object.isExtensible(Object.preventExtensions({}))}))},function(n,e,t){var r=t(33),o=t(29),i=t(64).f,a=t(135),s="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];n.exports.f=function(n){return s&&"Window"==r(n)?function(n){try{return i(n)}catch(n){return a(s)}}(n):i(o(n))}},function(n,e,t){var r=t(6);e.f=r},function(n,e,t){var r=t(269),o=t(12),i=t(189),a=t(13).f;n.exports=function(n){var e=r.Symbol||(r.Symbol={});o(e,n)||a(e,n,{value:i.f(n)})}},function(n,e,t){var r=t(1),o=t(270);r({target:"Array",stat:!0,forced:!t(175)((function(n){Array.from(n)}))},{from:o})},function(n,e,t){var r=t(3),o=t(0).RegExp;n.exports=r((function(){var n=o("(?<a>b)","g");return"b"!==n.exec("b").groups.a||"bc"!=="b".replace(n,"$<a>c")}))},function(n,e,t){var r=t(11);n.exports=function(n,e){return void 0===n?arguments.length<2?"":e:r(n)}},function(n,e,t){t(1)({target:"Object",stat:!0,sham:!t(8)},{create:t(42)})},function(n,e){n.exports=function(n,e){for(var t=-1,r=e.length,o=n.length;++t<r;)n[o+t]=e[t];return n}},function(n,e){var t="object"==typeof global&&global&&global.Object===Object&&global;n.exports=t},function(n,e,t){var r=t(106),o=t(292),i=t(293),a=t(294),s=t(295),u=t(296);function l(n){var e=this.__data__=new r(n);this.size=e.size}l.prototype.clear=o,l.prototype.delete=i,l.prototype.get=a,l.prototype.has=s,l.prototype.set=u,n.exports=l},function(n,e){n.exports=function(n,e){return n===e||n!=n&&e!=e}},function(n,e,t){var r=t(71),o=t(143);n.exports=function(n){if(!o(n))return!1;var e=r(n);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(n,e){var t=Function.prototype.toString;n.exports=function(n){if(null!=n){try{return t.call(n)}catch(n){}try{return n+""}catch(n){}}return""}},function(n,e,t){var r=t(313),o=t(62);n.exports=function n(e,t,i,a,s){return e===t||(null==e||null==t||!o(e)&&!o(t)?e!=e&&t!=t:r(e,t,i,a,n,s))}},function(n,e,t){var r=t(203),o=t(316),i=t(204);n.exports=function(n,e,t,a,s,u){var l=1&t,c=n.length,p=e.length;if(c!=p&&!(l&&p>c))return!1;var d=u.get(n),v=u.get(e);if(d&&v)return d==e&&v==n;var m=-1,h=!0,f=2&t?new r:void 0;for(u.set(n,e),u.set(e,n);++m<c;){var g=n[m],b=e[m];if(a)var x=l?a(b,g,m,e,n,u):a(g,b,m,n,e,u);if(void 0!==x){if(x)continue;h=!1;break}if(f){if(!o(e,(function(n,e){if(!i(f,e)&&(g===n||s(g,n,t,a,u)))return f.push(e)}))){h=!1;break}}else if(g!==b&&!s(g,b,t,a,u)){h=!1;break}}return u.delete(n),u.delete(e),h}},function(n,e,t){var r=t(144),o=t(314),i=t(315);function a(n){var e=-1,t=null==n?0:n.length;for(this.__data__=new r;++e<t;)this.add(n[e])}a.prototype.add=a.prototype.push=o,a.prototype.has=i,n.exports=a},function(n,e){n.exports=function(n,e){return n.has(e)}},function(n,e,t){var r=t(326),o=t(332),i=t(209);n.exports=function(n){return i(n)?r(n):o(n)}},function(n,e,t){(function(n){var r=t(41),o=t(328),i=e&&!e.nodeType&&e,a=i&&"object"==typeof n&&n&&!n.nodeType&&n,s=a&&a.exports===i?r.Buffer:void 0,u=(s?s.isBuffer:void 0)||o;n.exports=u}).call(this,t(158)(n))},function(n,e){var t=/^(?:0|[1-9]\d*)$/;n.exports=function(n,e){var r=typeof n;return!!(e=null==e?9007199254740991:e)&&("number"==r||"symbol"!=r&&t.test(n))&&n>-1&&n%1==0&&n<e}},function(n,e,t){var r=t(329),o=t(330),i=t(331),a=i&&i.isTypedArray,s=a?o(a):r;n.exports=s},function(n,e,t){var r=t(199),o=t(146);n.exports=function(n){return null!=n&&o(n.length)&&!r(n)}},function(n,e,t){var r=t(51)(t(41),"Set");n.exports=r},function(n,e,t){var r=t(143);n.exports=function(n){return n==n&&!r(n)}},function(n,e){n.exports=function(n,e){return function(t){return null!=t&&(t[n]===e&&(void 0!==e||n in Object(t)))}}},function(n,e,t){var r=t(214),o=t(110);n.exports=function(n,e){for(var t=0,i=(e=r(e,n)).length;null!=n&&t<i;)n=n[o(e[t++])];return t&&t==i?n:void 0}},function(n,e,t){var r=t(37),o=t(147),i=t(343),a=t(346);n.exports=function(n,e){return r(n)?n:o(n,e)?[n]:i(a(n))}},function(n,e,t){},function(n,e,t){},function(n,e,t){t(1)({target:"Object",stat:!0},{setPrototypeOf:t(78)})},function(n,e,t){var r=t(1),o=t(24),i=t(43),a=t(219),s=t(176),u=t(9),l=t(10),c=t(42),p=t(3),d=o("Reflect","construct"),v=Object.prototype,m=[].push,h=p((function(){function n(){}return!(d((function(){}),[],n)instanceof n)})),f=!p((function(){d((function(){}))})),g=h||f;r({target:"Reflect",stat:!0,forced:g,sham:g},{construct:function(n,e){s(n),u(e);var t=arguments.length<3?n:s(arguments[2]);if(f&&!h)return d(n,e,t);if(n==t){switch(e.length){case 0:return new n;case 1:return new n(e[0]);case 2:return new n(e[0],e[1]);case 3:return new n(e[0],e[1],e[2]);case 4:return new n(e[0],e[1],e[2],e[3])}var r=[null];return i(m,r,e),new(i(a,n,r))}var o=t.prototype,p=c(l(o)?o:v),g=i(n,p,e);return l(g)?g:p}})},function(n,e,t){"use strict";var r=t(0),o=t(2),i=t(45),a=t(10),s=t(12),u=t(79),l=t(74),c=r.Function,p=o([].concat),d=o([].join),v={},m=function(n,e,t){if(!s(v,e)){for(var r=[],o=0;o<e;o++)r[o]="a["+o+"]";v[e]=c("C,a","return new C("+d(r,",")+")")}return v[e](n,t)};n.exports=l?c.bind:function(n){var e=i(this),t=e.prototype,r=u(arguments,1),o=function(){var t=p(r,u(arguments));return this instanceof o?m(e,t.length,t):e.apply(n,t)};return a(t)&&(o.prototype=t),o}},function(n,e,t){var r=t(1),o=t(0),i=t(68);r({global:!0},{Reflect:{}}),i(o.Reflect,"Reflect",!0)},function(n,e,t){},function(n,e,t){var r=t(1),o=t(391),i=t(88);r({target:"Array",proto:!0},{fill:o}),i("fill")},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(279),o=t(284),i=t(355),a=t(363),s=t(372),u=t(238),l=i((function(n){var e=u(n);return s(e)&&(e=void 0),a(r(n,1,s,!0),o(e,2))}));n.exports=l},function(n,e,t){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var r=/["'&<>]/;n.exports=function(n){var e,t=""+n,o=r.exec(t);if(!o)return t;var i="",a=0,s=0;for(a=o.index;a<t.length;a++){switch(t.charCodeAt(a)){case 34:e="&quot;";break;case 38:e="&amp;";break;case 39:e="&#39;";break;case 60:e="&lt;";break;case 62:e="&gt;";break;default:continue}s!==a&&(i+=t.substring(s,a)),s=a+1,i+=e}return s!==a?i+t.substring(s,a):i}},function(n,e,t){"use strict";t.r(e);var r={name:"CodeBlock",props:{title:{type:String,required:!0},active:{type:Boolean,default:!1}}},o=(t(379),t(15)),i=Object(o.a)(r,(function(){var n=this.$createElement;return(this._self._c||n)("div",{staticClass:"theme-code-block",class:{"theme-code-block__active":this.active}},[this._t("default")],2)}),[],!1,null,"4f1e9d0c",null);e.default=i.exports},function(n,e,t){"use strict";t.r(e);t(30),t(4),t(31),t(46),t(35);var r={name:"CodeGroup",data:function(){return{codeTabs:[],activeCodeTabIndex:-1}},watch:{activeCodeTabIndex:function(n){this.codeTabs.forEach((function(n){n.elm.classList.remove("theme-code-block__active")})),this.codeTabs[n].elm.classList.add("theme-code-block__active")}},mounted:function(){var n=this;this.codeTabs=(this.$slots.default||[]).filter((function(n){return Boolean(n.componentOptions)})).map((function(e,t){return""===e.componentOptions.propsData.active&&(n.activeCodeTabIndex=t),{title:e.componentOptions.propsData.title,elm:e.elm}})),-1===this.activeCodeTabIndex&&this.codeTabs.length>0&&(this.activeCodeTabIndex=0)},methods:{changeCodeTab:function(n){this.activeCodeTabIndex=n}}},o=(t(380),t(15)),i=Object(o.a)(r,(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"theme-code-group"},[t("div",{staticClass:"theme-code-group__nav"},[t("ul",{staticClass:"theme-code-group__ul"},n._l(n.codeTabs,(function(e,r){return t("li",{key:e.title,staticClass:"theme-code-group__li"},[t("button",{staticClass:"theme-code-group__nav-tab",class:{"theme-code-group__nav-tab-active":r===n.activeCodeTabIndex},on:{click:function(e){return n.changeCodeTab(r)}}},[n._v("\n            "+n._s(e.title)+"\n          ")])])})),0)]),n._v(" "),n._t("default"),n._v(" "),n.codeTabs.length<1?t("pre",{staticClass:"pre-blank"},[n._v("// Make sure to add code blocks to your code group")]):n._e()],2)}),[],!1,null,"2f5f1757",null);e.default=i.exports},function(n,e,t){"use strict";var r=t(43),o=t(14),i=t(2),a=t(118),s=t(133),u=t(9),l=t(22),c=t(131),p=t(140),d=t(49),v=t(11),m=t(59),h=t(135),f=t(119),g=t(104),b=t(105),x=t(3),y=b.UNSUPPORTED_Y,j=Math.min,w=[].push,k=i(/./.exec),T=i(w),V=i("".slice);a("split",(function(n,e,t){var i;return i="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(n,t){var i=v(l(this)),a=void 0===t?4294967295:t>>>0;if(0===a)return[];if(void 0===n)return[i];if(!s(n))return o(e,i,n,a);for(var u,c,p,d=[],m=(n.ignoreCase?"i":"")+(n.multiline?"m":"")+(n.unicode?"u":"")+(n.sticky?"y":""),f=0,b=new RegExp(n.source,m+"g");(u=o(g,b,i))&&!((c=b.lastIndex)>f&&(T(d,V(i,f,u.index)),u.length>1&&u.index<i.length&&r(w,d,h(u,1)),p=u[0].length,f=c,d.length>=a));)b.lastIndex===u.index&&b.lastIndex++;return f===i.length?!p&&k(b,"")||T(d,""):T(d,V(i,f)),d.length>a?h(d,0,a):d}:"0".split(void 0,0).length?function(n,t){return void 0===n&&0===t?[]:o(e,this,n,t)}:e,[function(e,t){var r=l(this),a=null==e?void 0:m(e,n);return a?o(a,e,r,t):o(i,v(r),e,t)},function(n,r){var o=u(this),a=v(n),s=t(i,o,a,r,i!==e);if(s.done)return s.value;var l=c(o,RegExp),m=o.unicode,h=(o.ignoreCase?"i":"")+(o.multiline?"m":"")+(o.unicode?"u":"")+(y?"g":"y"),g=new l(y?"^(?:"+o.source+")":o,h),b=void 0===r?4294967295:r>>>0;if(0===b)return[];if(0===a.length)return null===f(g,a)?[a]:[];for(var x=0,w=0,k=[];w<a.length;){g.lastIndex=y?0:w;var S,_=f(g,y?V(a,w):a);if(null===_||(S=j(d(g.lastIndex+(y?w:0)),a.length))===x)w=p(a,w,m);else{if(T(k,V(a,x,w)),k.length===b)return k;for(var I=1;I<=_.length-1;I++)if(T(k,_[I]),k.length===b)return k;w=x=S}}return T(k,V(a,x)),k}]}),!!x((function(){var n=/(?:)/,e=n.exec;n.exec=function(){return e.apply(this,arguments)};var t="ab".split(n);return 2!==t.length||"a"!==t[0]||"b"!==t[1]})),y)},function(n,e,t){"use strict";var r=t(14),o=t(118),i=t(9),a=t(49),s=t(11),u=t(22),l=t(59),c=t(140),p=t(119);o("match",(function(n,e,t){return[function(e){var t=u(this),o=null==e?void 0:l(e,n);return o?r(o,e,t):new RegExp(e)[n](s(t))},function(n){var r=i(this),o=s(n),u=t(e,r,o);if(u.done)return u.value;if(!r.global)return p(r,o);var l=r.unicode;r.lastIndex=0;for(var d,v=[],m=0;null!==(d=p(r,o));){var h=s(d[0]);v[m]=h,""===h&&(r.lastIndex=c(o,a(r.lastIndex),l)),m++}return 0===m?null:v}]}))},function(n,e,t){var r=t(2),o=t(22),i=t(11),a=t(232),s=r("".replace),u="["+a+"]",l=RegExp("^"+u+u+"*"),c=RegExp(u+u+"*$"),p=function(n){return function(e){var t=i(o(e));return 1&n&&(t=s(t,l,"")),2&n&&(t=s(t,c,"")),t}};n.exports={start:p(1),end:p(2),trim:p(3)}},function(n,e){n.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},function(n,e,t){"use strict";var r=t(169).IteratorPrototype,o=t(42),i=t(60),a=t(68),s=t(77),u=function(){return this};n.exports=function(n,e,t,l){var c=e+" Iterator";return n.prototype=o(r,{next:i(+!l,t)}),a(n,c,!1,!0),s[c]=u,n}},function(n,e,t){var r=t(17);n.exports=function(n,e,t){for(var o in e)r(n,o,e[o],t);return n}},function(n,e,t){var r=t(0),o=t(39),i=r.TypeError;n.exports=function(n,e){if(o(e,n))return n;throw i("Incorrect invocation")}},function(n,e,t){"use strict";var r=t(1),o=t(124).includes,i=t(88);r({target:"Array",proto:!0},{includes:function(n){return o(this,n,arguments.length>1?arguments[1]:void 0)}}),i("includes")},function(n,e,t){"use strict";var r=t(1),o=t(2),i=t(132),a=t(22),s=t(11),u=t(134),l=o("".indexOf);r({target:"String",proto:!0,forced:!u("includes")},{includes:function(n){return!!~l(s(a(this)),s(i(n)),arguments.length>1?arguments[1]:void 0)}})},function(n,e){n.exports=function(n){var e=null==n?0:n.length;return e?n[e-1]:void 0}},function(n,e,t){var r=t(135),o=Math.floor,i=function(n,e){var t=n.length,u=o(t/2);return t<8?a(n,e):s(n,i(r(n,0,u),e),i(r(n,u),e),e)},a=function(n,e){for(var t,r,o=n.length,i=1;i<o;){for(r=i,t=n[i];r&&e(n[r-1],t)>0;)n[r]=n[--r];r!==i++&&(n[r]=t)}return n},s=function(n,e,t,r){for(var o=e.length,i=t.length,a=0,s=0;a<o||s<i;)n[a+s]=a<o&&s<i?r(e[a],t[s])<=0?e[a++]:t[s++]:a<o?e[a++]:t[s++];return n};n.exports=i},function(n,e,t){var r=t(2),o=t(22),i=t(11),a=/"/g,s=r("".replace);n.exports=function(n,e,t,r){var u=i(o(n)),l="<"+e;return""!==t&&(l+=" "+t+'="'+s(i(r),a,"&quot;")+'"'),l+">"+u+"</"+e+">"}},function(n,e,t){var r=t(3);n.exports=function(n){return r((function(){var e=""[n]('"');return e!==e.toLowerCase()||e.split('"').length>3}))}},function(n,e,t){var r=t(8),o=t(0),i=t(2),a=t(100),s=t(139),u=t(34),l=t(13).f,c=t(64).f,p=t(39),d=t(133),v=t(11),m=t(137),h=t(105),f=t(17),g=t(3),b=t(12),x=t(36).enforce,y=t(172),j=t(6),w=t(138),k=t(192),T=j("match"),V=o.RegExp,S=V.prototype,_=o.SyntaxError,I=i(m),A=i(S.exec),z=i("".charAt),C=i("".replace),E=i("".indexOf),P=i("".slice),O=/^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/,M=/a/g,q=/a/g,R=new V(M)!==M,D=h.MISSED_STICKY,L=h.UNSUPPORTED_Y,$=r&&(!R||D||w||k||g((function(){return q[T]=!1,V(M)!=M||V(q)==q||"/a/i"!=V(M,"i")})));if(a("RegExp",$)){for(var N=function(n,e){var t,r,o,i,a,l,c=p(S,this),m=d(n),h=void 0===e,f=[],g=n;if(!c&&m&&h&&n.constructor===N)return n;if((m||p(S,n))&&(n=n.source,h&&(e="flags"in g?g.flags:I(g))),n=void 0===n?"":v(n),e=void 0===e?"":v(e),g=n,w&&"dotAll"in M&&(r=!!e&&E(e,"s")>-1)&&(e=C(e,/s/g,"")),t=e,D&&"sticky"in M&&(o=!!e&&E(e,"y")>-1)&&L&&(e=C(e,/y/g,"")),k&&(n=(i=function(n){for(var e,t=n.length,r=0,o="",i=[],a={},s=!1,u=!1,l=0,c="";r<=t;r++){if("\\"===(e=z(n,r)))e+=z(n,++r);else if("]"===e)s=!1;else if(!s)switch(!0){case"["===e:s=!0;break;case"("===e:A(O,P(n,r+1))&&(r+=2,u=!0),o+=e,l++;continue;case">"===e&&u:if(""===c||b(a,c))throw new _("Invalid capture group name");a[c]=!0,i[i.length]=[c,l],u=!1,c="";continue}u?c+=e:o+=e}return[o,i]}(n))[0],f=i[1]),a=s(V(n,e),c?this:S,N),(r||o||f.length)&&(l=x(a),r&&(l.dotAll=!0,l.raw=N(function(n){for(var e,t=n.length,r=0,o="",i=!1;r<=t;r++)"\\"!==(e=z(n,r))?i||"."!==e?("["===e?i=!0:"]"===e&&(i=!1),o+=e):o+="[\\s\\S]":o+=e+z(n,++r);return o}(n),t)),o&&(l.sticky=!0),f.length&&(l.groups=f)),n!==g)try{u(a,"source",""===g?"(?:)":g)}catch(n){}return a},B=function(n){n in N||l(N,n,{configurable:!0,get:function(){return V[n]},set:function(e){V[n]=e}})},U=c(V),F=0;U.length>F;)B(U[F++]);S.constructor=N,N.prototype=S,f(o,"RegExp",N)}y("RegExp")},function(n,e,t){var r=t(0),o=t(8),i=t(138),a=t(33),s=t(13).f,u=t(36).get,l=RegExp.prototype,c=r.TypeError;o&&i&&s(l,"dotAll",{configurable:!0,get:function(){if(this!==l){if("RegExp"===a(this))return!!u(this).dotAll;throw c("Incompatible receiver, RegExp required")}}})},function(n,e,t){n.exports=t(397)},function(n,e,t){var r=t(0),o=t(14),i=t(7),a=t(10),s=r.TypeError;n.exports=function(n,e){var t,r;if("string"===e&&i(t=n.toString)&&!a(r=o(t,n)))return r;if(i(t=n.valueOf)&&!a(r=o(t,n)))return r;if("string"!==e&&i(t=n.toString)&&!a(r=o(t,n)))return r;throw s("Can't convert object to primitive value")}},function(n,e,t){var r=t(0),o=t(7),i=t(99),a=r.WeakMap;n.exports=o(a)&&/native code/.test(i(a))},function(n,e,t){var r=t(0),o=t(7),i=r.String,a=r.TypeError;n.exports=function(n){if("object"==typeof n||o(n))return n;throw a("Can't set "+i(n)+" as a prototype")}},function(n,e,t){"use strict";var r,o,i,a,s=t(1),u=t(32),l=t(0),c=t(24),p=t(14),d=t(171),v=t(17),m=t(234),h=t(78),f=t(68),g=t(172),b=t(45),x=t(7),y=t(10),j=t(235),w=t(99),k=t(249),T=t(175),V=t(131),S=t(177).set,_=t(250),I=t(179),A=t(253),z=t(180),C=t(254),E=t(255),P=t(36),O=t(100),M=t(6),q=t(256),R=t(102),D=t(63),L=M("species"),$="Promise",N=P.getterFor($),B=P.set,U=P.getterFor($),F=d&&d.prototype,H=d,J=F,W=l.TypeError,G=l.document,X=l.process,K=z.f,Y=K,Q=!!(G&&G.createEvent&&l.dispatchEvent),Z=x(l.PromiseRejectionEvent),nn=!1,en=O($,(function(){var n=w(H),e=n!==String(H);if(!e&&66===D)return!0;if(u&&!J.finally)return!0;if(D>=51&&/native code/.test(n))return!1;var t=new H((function(n){n(1)})),r=function(n){n((function(){}),(function(){}))};return(t.constructor={})[L]=r,!(nn=t.then((function(){}))instanceof r)||!e&&q&&!Z})),tn=en||!T((function(n){H.all(n).catch((function(){}))})),rn=function(n){var e;return!(!y(n)||!x(e=n.then))&&e},on=function(n,e){var t,r,o,i=e.value,a=1==e.state,s=a?n.ok:n.fail,u=n.resolve,l=n.reject,c=n.domain;try{s?(a||(2===e.rejection&&cn(e),e.rejection=1),!0===s?t=i:(c&&c.enter(),t=s(i),c&&(c.exit(),o=!0)),t===n.promise?l(W("Promise-chain cycle")):(r=rn(t))?p(r,t,u,l):u(t)):l(i)}catch(n){c&&!o&&c.exit(),l(n)}},an=function(n,e){n.notified||(n.notified=!0,_((function(){for(var t,r=n.reactions;t=r.get();)on(t,n);n.notified=!1,e&&!n.rejection&&un(n)})))},sn=function(n,e,t){var r,o;Q?((r=G.createEvent("Event")).promise=e,r.reason=t,r.initEvent(n,!1,!0),l.dispatchEvent(r)):r={promise:e,reason:t},!Z&&(o=l["on"+n])?o(r):"unhandledrejection"===n&&A("Unhandled promise rejection",t)},un=function(n){p(S,l,(function(){var e,t=n.facade,r=n.value;if(ln(n)&&(e=C((function(){R?X.emit("unhandledRejection",r,t):sn("unhandledrejection",t,r)})),n.rejection=R||ln(n)?2:1,e.error))throw e.value}))},ln=function(n){return 1!==n.rejection&&!n.parent},cn=function(n){p(S,l,(function(){var e=n.facade;R?X.emit("rejectionHandled",e):sn("rejectionhandled",e,n.value)}))},pn=function(n,e,t){return function(r){n(e,r,t)}},dn=function(n,e,t){n.done||(n.done=!0,t&&(n=t),n.value=e,n.state=2,an(n,!0))},vn=function(n,e,t){if(!n.done){n.done=!0,t&&(n=t);try{if(n.facade===e)throw W("Promise can't be resolved itself");var r=rn(e);r?_((function(){var t={done:!1};try{p(r,e,pn(vn,t,n),pn(dn,t,n))}catch(e){dn(t,e,n)}})):(n.value=e,n.state=1,an(n,!1))}catch(e){dn({done:!1},e,n)}}};if(en&&(J=(H=function(n){j(this,J),b(n),p(r,this);var e=N(this);try{n(pn(vn,e),pn(dn,e))}catch(n){dn(e,n)}}).prototype,(r=function(n){B(this,{type:$,done:!1,notified:!1,parent:!1,reactions:new E,rejection:!1,state:0,value:void 0})}).prototype=m(J,{then:function(n,e){var t=U(this),r=K(V(this,H));return t.parent=!0,r.ok=!x(n)||n,r.fail=x(e)&&e,r.domain=R?X.domain:void 0,0==t.state?t.reactions.add(r):_((function(){on(r,t)})),r.promise},catch:function(n){return this.then(void 0,n)}}),o=function(){var n=new r,e=N(n);this.promise=n,this.resolve=pn(vn,e),this.reject=pn(dn,e)},z.f=K=function(n){return n===H||n===i?new o(n):Y(n)},!u&&x(d)&&F!==Object.prototype)){a=F.then,nn||(v(F,"then",(function(n,e){var t=this;return new H((function(n,e){p(a,t,n,e)})).then(n,e)}),{unsafe:!0}),v(F,"catch",J.catch,{unsafe:!0}));try{delete F.constructor}catch(n){}h&&h(F,J)}s({global:!0,wrap:!0,forced:en},{Promise:H}),f(H,$,!1,!0),g($),i=c($),s({target:$,stat:!0,forced:en},{reject:function(n){var e=K(this);return p(e.reject,void 0,n),e.promise}}),s({target:$,stat:!0,forced:u||en},{resolve:function(n){return I(u&&this===i?H:this,n)}}),s({target:$,stat:!0,forced:tn},{all:function(n){var e=this,t=K(e),r=t.resolve,o=t.reject,i=C((function(){var t=b(e.resolve),i=[],a=0,s=1;k(n,(function(n){var u=a++,l=!1;s++,p(t,e,n).then((function(n){l||(l=!0,i[u]=n,--s||r(i))}),o)})),--s||r(i)}));return i.error&&o(i.value),t.promise},race:function(n){var e=this,t=K(e),r=t.reject,o=C((function(){var o=b(e.resolve);k(n,(function(n){p(o,e,n).then(t.resolve,r)}))}));return o.error&&r(o.value),t.promise}})},function(n,e,t){var r=t(0),o=t(66),i=t(14),a=t(9),s=t(96),u=t(173),l=t(28),c=t(39),p=t(155),d=t(116),v=t(174),m=r.TypeError,h=function(n,e){this.stopped=n,this.result=e},f=h.prototype;n.exports=function(n,e,t){var r,g,b,x,y,j,w,k=t&&t.that,T=!(!t||!t.AS_ENTRIES),V=!(!t||!t.IS_ITERATOR),S=!(!t||!t.INTERRUPTED),_=o(e,k),I=function(n){return r&&v(r,"normal",n),new h(!0,n)},A=function(n){return T?(a(n),S?_(n[0],n[1],I):_(n[0],n[1])):S?_(n,I):_(n)};if(V)r=n;else{if(!(g=d(n)))throw m(s(n)+" is not iterable");if(u(g)){for(b=0,x=l(n);x>b;b++)if((y=A(n[b]))&&c(f,y))return y;return new h(!1)}r=p(n,g)}for(j=r.next;!(w=i(j,r)).done;){try{y=A(w.value)}catch(n){v(r,"throw",n)}if("object"==typeof y&&y&&c(f,y))return y}return new h(!1)}},function(n,e,t){var r,o,i,a,s,u,l,c,p=t(0),d=t(66),v=t(40).f,m=t(177).set,h=t(178),f=t(251),g=t(252),b=t(102),x=p.MutationObserver||p.WebKitMutationObserver,y=p.document,j=p.process,w=p.Promise,k=v(p,"queueMicrotask"),T=k&&k.value;T||(r=function(){var n,e;for(b&&(n=j.domain)&&n.exit();o;){e=o.fn,o=o.next;try{e()}catch(n){throw o?a():i=void 0,n}}i=void 0,n&&n.enter()},h||b||g||!x||!y?!f&&w&&w.resolve?((l=w.resolve(void 0)).constructor=w,c=d(l.then,l),a=function(){c(r)}):b?a=function(){j.nextTick(r)}:(m=d(m,p),a=function(){m(r)}):(s=!0,u=y.createTextNode(""),new x(r).observe(u,{characterData:!0}),a=function(){u.data=s=!s})),n.exports=T||function(n){var e={fn:n,next:void 0};i&&(i.next=e),o||(o=e,a()),i=e}},function(n,e,t){var r=t(38),o=t(0);n.exports=/ipad|iphone|ipod/i.test(r)&&void 0!==o.Pebble},function(n,e,t){var r=t(38);n.exports=/web0s(?!.*chrome)/i.test(r)},function(n,e,t){var r=t(0);n.exports=function(n,e){var t=r.console;t&&t.error&&(1==arguments.length?t.error(n):t.error(n,e))}},function(n,e){n.exports=function(n){try{return{error:!1,value:n()}}catch(n){return{error:!0,value:n}}}},function(n,e){var t=function(){this.head=null,this.tail=null};t.prototype={add:function(n){var e={item:n,next:null};this.head?this.tail.next=e:this.head=e,this.tail=e},get:function(){var n=this.head;if(n)return this.head=n.next,this.tail===n&&(this.tail=null),n.item}},n.exports=t},function(n,e){n.exports="object"==typeof window},function(n,e,t){var r=t(1),o=t(258);r({target:"Object",stat:!0,forced:Object.assign!==o},{assign:o})},function(n,e,t){"use strict";var r=t(8),o=t(2),i=t(14),a=t(3),s=t(97),u=t(128),l=t(126),c=t(16),p=t(73),d=Object.assign,v=Object.defineProperty,m=o([].concat);n.exports=!d||a((function(){if(r&&1!==d({b:1},d(v({},"a",{enumerable:!0,get:function(){v(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var n={},e={},t=Symbol();return n[t]=7,"abcdefghijklmnopqrst".split("").forEach((function(n){e[n]=n})),7!=d({},n)[t]||"abcdefghijklmnopqrst"!=s(d({},e)).join("")}))?function(n,e){for(var t=c(n),o=arguments.length,a=1,d=u.f,v=l.f;o>a;)for(var h,f=p(arguments[a++]),g=d?m(s(f),d(f)):s(f),b=g.length,x=0;b>x;)h=g[x++],r&&!i(v,f,h)||(t[h]=f[h]);return t}:d},function(n,e,t){"use strict";var r=t(1),o=t(32),i=t(171),a=t(3),s=t(24),u=t(7),l=t(131),c=t(179),p=t(17);if(r({target:"Promise",proto:!0,real:!0,forced:!!i&&a((function(){i.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(n){var e=l(this,s("Promise")),t=u(n);return this.then(t?function(t){return c(e,n()).then((function(){return t}))}:n,t?function(t){return c(e,n()).then((function(){throw t}))}:n)}}),!o&&u(i)){var d=s("Promise").prototype.finally;i.prototype.finally!==d&&p(i.prototype,"finally",d,{unsafe:!0})}},function(n,e,t){"use strict";var r=t(130),o=t(90);n.exports=r?{}.toString:function(){return"[object "+o(this)+"]"}},function(n,e,t){var r=t(0),o=t(69),i=t(101),a=t(10),s=t(6)("species"),u=r.Array;n.exports=function(n){var e;return o(n)&&(e=n.constructor,(i(e)&&(e===u||o(e.prototype))||a(e)&&null===(e=e[s]))&&(e=void 0)),void 0===e?u:e}},function(n,e,t){"use strict";var r=t(1),o=t(263).left,i=t(58),a=t(63),s=t(102);r({target:"Array",proto:!0,forced:!i("reduce")||!s&&a>79&&a<83},{reduce:function(n){var e=arguments.length;return o(this,n,e,e>1?arguments[1]:void 0)}})},function(n,e,t){var r=t(0),o=t(45),i=t(16),a=t(73),s=t(28),u=r.TypeError,l=function(n){return function(e,t,r,l){o(t);var c=i(e),p=a(c),d=s(c),v=n?d-1:0,m=n?-1:1;if(r<2)for(;;){if(v in p){l=p[v],v+=m;break}if(v+=m,n?v<0:d<=v)throw u("Reduce of empty array with no initial value")}for(;n?v>=0:d>v;v+=m)v in p&&(l=t(l,p[v],v,c));return l}};n.exports={left:l(!1),right:l(!0)}},function(n,e,t){"use strict";var r,o=t(1),i=t(2),a=t(40).f,s=t(49),u=t(11),l=t(132),c=t(22),p=t(134),d=t(32),v=i("".startsWith),m=i("".slice),h=Math.min,f=p("startsWith");o({target:"String",proto:!0,forced:!!(d||f||(r=a(String.prototype,"startsWith"),!r||r.writable))&&!f},{startsWith:function(n){var e=u(c(this));l(n);var t=s(h(arguments.length>1?arguments[1]:void 0,e.length)),r=u(n);return v?v(e,r,t):m(e,t,t+r.length)===r}})},function(n,e,t){var r=t(1),o=t(187),i=t(3),a=t(10),s=t(266).onFreeze,u=Object.freeze;r({target:"Object",stat:!0,forced:i((function(){u(1)})),sham:!o},{freeze:function(n){return u&&a(n)?u(s(n)):n}})},function(n,e,t){var r=t(1),o=t(2),i=t(76),a=t(10),s=t(12),u=t(13).f,l=t(64),c=t(188),p=t(267),d=t(92),v=t(187),m=!1,h=d("meta"),f=0,g=function(n){u(n,h,{value:{objectID:"O"+f++,weakData:{}}})},b=n.exports={enable:function(){b.enable=function(){},m=!0;var n=l.f,e=o([].splice),t={};t[h]=1,n(t).length&&(l.f=function(t){for(var r=n(t),o=0,i=r.length;o<i;o++)if(r[o]===h){e(r,o,1);break}return r},r({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:c.f}))},fastKey:function(n,e){if(!a(n))return"symbol"==typeof n?n:("string"==typeof n?"S":"P")+n;if(!s(n,h)){if(!p(n))return"F";if(!e)return"E";g(n)}return n[h].objectID},getWeakData:function(n,e){if(!s(n,h)){if(!p(n))return!0;if(!e)return!1;g(n)}return n[h].weakData},onFreeze:function(n){return v&&m&&p(n)&&!s(n,h)&&g(n),n}};i[h]=!0},function(n,e,t){var r=t(3),o=t(10),i=t(33),a=t(268),s=Object.isExtensible,u=r((function(){s(1)}));n.exports=u||a?function(n){return!!o(n)&&((!a||"ArrayBuffer"!=i(n))&&(!s||s(n)))}:s},function(n,e,t){var r=t(3);n.exports=r((function(){if("function"==typeof ArrayBuffer){var n=new ArrayBuffer(8);Object.isExtensible(n)&&Object.defineProperty(n,"a",{value:8})}}))},function(n,e,t){var r=t(0);n.exports=r},function(n,e,t){"use strict";var r=t(0),o=t(66),i=t(14),a=t(16),s=t(271),u=t(173),l=t(101),c=t(28),p=t(65),d=t(155),v=t(116),m=r.Array;n.exports=function(n){var e=a(n),t=l(this),r=arguments.length,h=r>1?arguments[1]:void 0,f=void 0!==h;f&&(h=o(h,r>2?arguments[2]:void 0));var g,b,x,y,j,w,k=v(e),T=0;if(!k||this==m&&u(k))for(g=c(e),b=t?new this(g):m(g);g>T;T++)w=f?h(e[T],T):e[T],p(b,T,w);else for(j=(y=d(e,k)).next,b=t?new this:[];!(x=i(j,y)).done;T++)w=f?s(y,h,[x.value,T],!0):x.value,p(b,T,w);return b.length=T,b}},function(n,e,t){var r=t(9),o=t(174);n.exports=function(n,e,t,i){try{return i?e(r(t)[0],t[1]):e(t)}catch(e){o(n,"throw",e)}}},function(n,e,t){"use strict";var r=t(24),o=t(12),i=t(34),a=t(39),s=t(78),u=t(127),l=t(139),c=t(193),p=t(273),d=t(274),v=t(275),m=t(32);n.exports=function(n,e,t,h){var f=h?2:1,g=n.split("."),b=g[g.length-1],x=r.apply(null,g);if(x){var y=x.prototype;if(!m&&o(y,"cause")&&delete y.cause,!t)return x;var j=r("Error"),w=e((function(n,e){var t=c(h?e:n,void 0),r=h?new x(n):new x;return void 0!==t&&i(r,"message",t),v&&i(r,"stack",d(r.stack,2)),this&&a(y,this)&&l(r,this,w),arguments.length>f&&p(r,arguments[f]),r}));if(w.prototype=y,"Error"!==b&&(s?s(w,j):u(w,j,{name:!0})),u(w,x),!m)try{y.name!==b&&i(y,"name",b),y.constructor=w}catch(n){}return w}}},function(n,e,t){var r=t(10),o=t(34);n.exports=function(n,e){r(e)&&"cause"in e&&o(n,"cause",e.cause)}},function(n,e,t){var r=t(2)("".replace),o=String(Error("zxcasd").stack),i=/\n\s*at [^:]*:[^\n]*/,a=i.test(o);n.exports=function(n,e){if(a&&"string"==typeof n)for(;e--;)n=r(n,i,"");return n}},function(n,e,t){var r=t(3),o=t(60);n.exports=!r((function(){var n=Error("a");return!("stack"in n)||(Object.defineProperty(n,"stack",o(1,7)),7!==n.stack)}))},function(n,e,t){"use strict";var r=t(8),o=t(3),i=t(9),a=t(42),s=t(193),u=Error.prototype.toString,l=o((function(){if(r){var n=a(Object.defineProperty({},"name",{get:function(){return this===n}}));if("true"!==u.call(n))return!0}return"2: 1"!==u.call({message:1,name:2})||"Error"!==u.call({})}));n.exports=l?function(){var n=i(this),e=s(n.name,"Error"),t=s(n.message);return e?t?e+": "+t:e:t}:u},function(n,e,t){var r=t(2),o=t(16),i=Math.floor,a=r("".charAt),s=r("".replace),u=r("".slice),l=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,c=/\$([$&'`]|\d{1,2})/g;n.exports=function(n,e,t,r,p,d){var v=t+n.length,m=r.length,h=c;return void 0!==p&&(p=o(p),h=l),s(d,h,(function(o,s){var l;switch(a(s,0)){case"$":return"$";case"&":return n;case"`":return u(e,0,t);case"'":return u(e,v);case"<":l=p[u(s,1,-1)];break;default:var c=+s;if(0===c)return o;if(c>m){var d=i(c/10);return 0===d?o:d<=m?void 0===r[d-1]?a(s,1):r[d-1]+a(s,1):o}l=r[c-1]}return void 0===l?"":l}))}},function(n,e,t){var r=t(1),o=t(0),i=t(24),a=t(43),s=t(2),u=t(3),l=o.Array,c=i("JSON","stringify"),p=s(/./.exec),d=s("".charAt),v=s("".charCodeAt),m=s("".replace),h=s(1..toString),f=/[\uD800-\uDFFF]/g,g=/^[\uD800-\uDBFF]$/,b=/^[\uDC00-\uDFFF]$/,x=function(n,e,t){var r=d(t,e-1),o=d(t,e+1);return p(g,n)&&!p(b,o)||p(b,n)&&!p(g,r)?"\\u"+h(v(n,0),16):n},y=u((function(){return'"\\udf06\\ud834"'!==c("\udf06\ud834")||'"\\udead"'!==c("\udead")}));c&&r({target:"JSON",stat:!0,forced:y},{stringify:function(n,e,t){for(var r=0,o=arguments.length,i=l(o);r<o;r++)i[r]=arguments[r];var s=a(c,null,i);return"string"==typeof s?m(s,f,x):s}})},function(n,e,t){var r=t(195),o=t(280);n.exports=function n(e,t,i,a,s){var u=-1,l=e.length;for(i||(i=o),s||(s=[]);++u<l;){var c=e[u];t>0&&i(c)?t>1?n(c,t-1,i,a,s):r(s,c):a||(s[s.length]=c)}return s}},function(n,e,t){var r=t(82),o=t(141),i=t(37),a=r?r.isConcatSpreadable:void 0;n.exports=function(n){return i(n)||o(n)||!!(a&&n&&n[a])}},function(n,e,t){var r=t(71),o=t(62);n.exports=function(n){return o(n)&&"[object Arguments]"==r(n)}},function(n,e,t){var r=t(82),o=Object.prototype,i=o.hasOwnProperty,a=o.toString,s=r?r.toStringTag:void 0;n.exports=function(n){var e=i.call(n,s),t=n[s];try{n[s]=void 0;var r=!0}catch(n){}var o=a.call(n);return r&&(e?n[s]=t:delete n[s]),o}},function(n,e){var t=Object.prototype.toString;n.exports=function(n){return t.call(n)}},function(n,e,t){var r=t(285),o=t(341),i=t(149),a=t(37),s=t(352);n.exports=function(n){return"function"==typeof n?n:null==n?i:"object"==typeof n?a(n)?o(n[0],n[1]):r(n):s(n)}},function(n,e,t){var r=t(286),o=t(340),i=t(212);n.exports=function(n){var e=o(n);return 1==e.length&&e[0][2]?i(e[0][0],e[0][1]):function(t){return t===n||r(t,n,e)}}},function(n,e,t){var r=t(197),o=t(201);n.exports=function(n,e,t,i){var a=t.length,s=a,u=!i;if(null==n)return!s;for(n=Object(n);a--;){var l=t[a];if(u&&l[2]?l[1]!==n[l[0]]:!(l[0]in n))return!1}for(;++a<s;){var c=(l=t[a])[0],p=n[c],d=l[1];if(u&&l[2]){if(void 0===p&&!(c in n))return!1}else{var v=new r;if(i)var m=i(p,d,c,n,e,v);if(!(void 0===m?o(d,p,3,i,v):m))return!1}}return!0}},function(n,e){n.exports=function(){this.__data__=[],this.size=0}},function(n,e,t){var r=t(107),o=Array.prototype.splice;n.exports=function(n){var e=this.__data__,t=r(e,n);return!(t<0)&&(t==e.length-1?e.pop():o.call(e,t,1),--this.size,!0)}},function(n,e,t){var r=t(107);n.exports=function(n){var e=this.__data__,t=r(e,n);return t<0?void 0:e[t][1]}},function(n,e,t){var r=t(107);n.exports=function(n){return r(this.__data__,n)>-1}},function(n,e,t){var r=t(107);n.exports=function(n,e){var t=this.__data__,o=r(t,n);return o<0?(++this.size,t.push([n,e])):t[o][1]=e,this}},function(n,e,t){var r=t(106);n.exports=function(){this.__data__=new r,this.size=0}},function(n,e){n.exports=function(n){var e=this.__data__,t=e.delete(n);return this.size=e.size,t}},function(n,e){n.exports=function(n){return this.__data__.get(n)}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e,t){var r=t(106),o=t(142),i=t(144);n.exports=function(n,e){var t=this.__data__;if(t instanceof r){var a=t.__data__;if(!o||a.length<199)return a.push([n,e]),this.size=++t.size,this;t=this.__data__=new i(a)}return t.set(n,e),this.size=t.size,this}},function(n,e,t){var r=t(199),o=t(298),i=t(143),a=t(200),s=/^\[object .+?Constructor\]$/,u=Function.prototype,l=Object.prototype,c=u.toString,p=l.hasOwnProperty,d=RegExp("^"+c.call(p).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");n.exports=function(n){return!(!i(n)||o(n))&&(r(n)?d:s).test(a(n))}},function(n,e,t){var r,o=t(299),i=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";n.exports=function(n){return!!i&&i in n}},function(n,e,t){var r=t(41)["__core-js_shared__"];n.exports=r},function(n,e){n.exports=function(n,e){return null==n?void 0:n[e]}},function(n,e,t){var r=t(302),o=t(106),i=t(142);n.exports=function(){this.size=0,this.__data__={hash:new r,map:new(i||o),string:new r}}},function(n,e,t){var r=t(303),o=t(304),i=t(305),a=t(306),s=t(307);function u(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}u.prototype.clear=r,u.prototype.delete=o,u.prototype.get=i,u.prototype.has=a,u.prototype.set=s,n.exports=u},function(n,e,t){var r=t(108);n.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(n,e){n.exports=function(n){var e=this.has(n)&&delete this.__data__[n];return this.size-=e?1:0,e}},function(n,e,t){var r=t(108),o=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;if(r){var t=e[n];return"__lodash_hash_undefined__"===t?void 0:t}return o.call(e,n)?e[n]:void 0}},function(n,e,t){var r=t(108),o=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;return r?void 0!==e[n]:o.call(e,n)}},function(n,e,t){var r=t(108);n.exports=function(n,e){var t=this.__data__;return this.size+=this.has(n)?0:1,t[n]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},function(n,e,t){var r=t(109);n.exports=function(n){var e=r(this,n).delete(n);return this.size-=e?1:0,e}},function(n,e){n.exports=function(n){var e=typeof n;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==n:null===n}},function(n,e,t){var r=t(109);n.exports=function(n){return r(this,n).get(n)}},function(n,e,t){var r=t(109);n.exports=function(n){return r(this,n).has(n)}},function(n,e,t){var r=t(109);n.exports=function(n,e){var t=r(this,n),o=t.size;return t.set(n,e),this.size+=t.size==o?0:1,this}},function(n,e,t){var r=t(197),o=t(202),i=t(317),a=t(320),s=t(336),u=t(37),l=t(206),c=t(208),p="[object Object]",d=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,v,m,h){var f=u(n),g=u(e),b=f?"[object Array]":s(n),x=g?"[object Array]":s(e),y=(b="[object Arguments]"==b?p:b)==p,j=(x="[object Arguments]"==x?p:x)==p,w=b==x;if(w&&l(n)){if(!l(e))return!1;f=!0,y=!1}if(w&&!y)return h||(h=new r),f||c(n)?o(n,e,t,v,m,h):i(n,e,b,t,v,m,h);if(!(1&t)){var k=y&&d.call(n,"__wrapped__"),T=j&&d.call(e,"__wrapped__");if(k||T){var V=k?n.value():n,S=T?e.value():e;return h||(h=new r),m(V,S,t,v,h)}}return!!w&&(h||(h=new r),a(n,e,t,v,m,h))}},function(n,e){n.exports=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length;++t<r;)if(e(n[t],t,n))return!0;return!1}},function(n,e,t){var r=t(82),o=t(318),i=t(198),a=t(202),s=t(319),u=t(145),l=r?r.prototype:void 0,c=l?l.valueOf:void 0;n.exports=function(n,e,t,r,l,p,d){switch(t){case"[object DataView]":if(n.byteLength!=e.byteLength||n.byteOffset!=e.byteOffset)return!1;n=n.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(n.byteLength!=e.byteLength||!p(new o(n),new o(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+n,+e);case"[object Error]":return n.name==e.name&&n.message==e.message;case"[object RegExp]":case"[object String]":return n==e+"";case"[object Map]":var v=s;case"[object Set]":var m=1&r;if(v||(v=u),n.size!=e.size&&!m)return!1;var h=d.get(n);if(h)return h==e;r|=2,d.set(n,e);var f=a(v(n),v(e),r,l,p,d);return d.delete(n),f;case"[object Symbol]":if(c)return c.call(n)==c.call(e)}return!1}},function(n,e,t){var r=t(41).Uint8Array;n.exports=r},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n,r){t[++e]=[r,n]})),t}},function(n,e,t){var r=t(321),o=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,i,a,s){var u=1&t,l=r(n),c=l.length;if(c!=r(e).length&&!u)return!1;for(var p=c;p--;){var d=l[p];if(!(u?d in e:o.call(e,d)))return!1}var v=s.get(n),m=s.get(e);if(v&&m)return v==e&&m==n;var h=!0;s.set(n,e),s.set(e,n);for(var f=u;++p<c;){var g=n[d=l[p]],b=e[d];if(i)var x=u?i(b,g,d,e,n,s):i(g,b,d,n,e,s);if(!(void 0===x?g===b||a(g,b,t,i,s):x)){h=!1;break}f||(f="constructor"==d)}if(h&&!f){var y=n.constructor,j=e.constructor;y==j||!("constructor"in n)||!("constructor"in e)||"function"==typeof y&&y instanceof y&&"function"==typeof j&&j instanceof j||(h=!1)}return s.delete(n),s.delete(e),h}},function(n,e,t){var r=t(322),o=t(323),i=t(205);n.exports=function(n){return r(n,i,o)}},function(n,e,t){var r=t(195),o=t(37);n.exports=function(n,e,t){var i=e(n);return o(n)?i:r(i,t(n))}},function(n,e,t){var r=t(324),o=t(325),i=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,s=a?function(n){return null==n?[]:(n=Object(n),r(a(n),(function(e){return i.call(n,e)})))}:o;n.exports=s},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,o=0,i=[];++t<r;){var a=n[t];e(a,t,n)&&(i[o++]=a)}return i}},function(n,e){n.exports=function(){return[]}},function(n,e,t){var r=t(327),o=t(141),i=t(37),a=t(206),s=t(207),u=t(208),l=Object.prototype.hasOwnProperty;n.exports=function(n,e){var t=i(n),c=!t&&o(n),p=!t&&!c&&a(n),d=!t&&!c&&!p&&u(n),v=t||c||p||d,m=v?r(n.length,String):[],h=m.length;for(var f in n)!e&&!l.call(n,f)||v&&("length"==f||p&&("offset"==f||"parent"==f)||d&&("buffer"==f||"byteLength"==f||"byteOffset"==f)||s(f,h))||m.push(f);return m}},function(n,e){n.exports=function(n,e){for(var t=-1,r=Array(n);++t<n;)r[t]=e(t);return r}},function(n,e){n.exports=function(){return!1}},function(n,e,t){var r=t(71),o=t(146),i=t(62),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,n.exports=function(n){return i(n)&&o(n.length)&&!!a[r(n)]}},function(n,e){n.exports=function(n){return function(e){return n(e)}}},function(n,e,t){(function(n){var r=t(196),o=e&&!e.nodeType&&e,i=o&&"object"==typeof n&&n&&!n.nodeType&&n,a=i&&i.exports===o&&r.process,s=function(){try{var n=i&&i.require&&i.require("util").types;return n||a&&a.binding&&a.binding("util")}catch(n){}}();n.exports=s}).call(this,t(158)(n))},function(n,e,t){var r=t(333),o=t(334),i=Object.prototype.hasOwnProperty;n.exports=function(n){if(!r(n))return o(n);var e=[];for(var t in Object(n))i.call(n,t)&&"constructor"!=t&&e.push(t);return e}},function(n,e){var t=Object.prototype;n.exports=function(n){var e=n&&n.constructor;return n===("function"==typeof e&&e.prototype||t)}},function(n,e,t){var r=t(335)(Object.keys,Object);n.exports=r},function(n,e){n.exports=function(n,e){return function(t){return n(e(t))}}},function(n,e,t){var r=t(337),o=t(142),i=t(338),a=t(210),s=t(339),u=t(71),l=t(200),c=l(r),p=l(o),d=l(i),v=l(a),m=l(s),h=u;(r&&"[object DataView]"!=h(new r(new ArrayBuffer(1)))||o&&"[object Map]"!=h(new o)||i&&"[object Promise]"!=h(i.resolve())||a&&"[object Set]"!=h(new a)||s&&"[object WeakMap]"!=h(new s))&&(h=function(n){var e=u(n),t="[object Object]"==e?n.constructor:void 0,r=t?l(t):"";if(r)switch(r){case c:return"[object DataView]";case p:return"[object Map]";case d:return"[object Promise]";case v:return"[object Set]";case m:return"[object WeakMap]"}return e}),n.exports=h},function(n,e,t){var r=t(51)(t(41),"DataView");n.exports=r},function(n,e,t){var r=t(51)(t(41),"Promise");n.exports=r},function(n,e,t){var r=t(51)(t(41),"WeakMap");n.exports=r},function(n,e,t){var r=t(211),o=t(205);n.exports=function(n){for(var e=o(n),t=e.length;t--;){var i=e[t],a=n[i];e[t]=[i,a,r(a)]}return e}},function(n,e,t){var r=t(201),o=t(342),i=t(349),a=t(147),s=t(211),u=t(212),l=t(110);n.exports=function(n,e){return a(n)&&s(e)?u(l(n),e):function(t){var a=o(t,n);return void 0===a&&a===e?i(t,n):r(e,a,3)}}},function(n,e,t){var r=t(213);n.exports=function(n,e,t){var o=null==n?void 0:r(n,e);return void 0===o?t:o}},function(n,e,t){var r=t(344),o=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,a=r((function(n){var e=[];return 46===n.charCodeAt(0)&&e.push(""),n.replace(o,(function(n,t,r,o){e.push(r?o.replace(i,"$1"):t||n)})),e}));n.exports=a},function(n,e,t){var r=t(345);n.exports=function(n){var e=r(n,(function(n){return 500===t.size&&t.clear(),n})),t=e.cache;return e}},function(n,e,t){var r=t(144);function o(n,e){if("function"!=typeof n||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var t=function(){var r=arguments,o=e?e.apply(this,r):r[0],i=t.cache;if(i.has(o))return i.get(o);var a=n.apply(this,r);return t.cache=i.set(o,a)||i,a};return t.cache=new(o.Cache||r),t}o.Cache=r,n.exports=o},function(n,e,t){var r=t(347);n.exports=function(n){return null==n?"":r(n)}},function(n,e,t){var r=t(82),o=t(348),i=t(37),a=t(148),s=r?r.prototype:void 0,u=s?s.toString:void 0;n.exports=function n(e){if("string"==typeof e)return e;if(i(e))return o(e,n)+"";if(a(e))return u?u.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,o=Array(r);++t<r;)o[t]=e(n[t],t,n);return o}},function(n,e,t){var r=t(350),o=t(351);n.exports=function(n,e){return null!=n&&o(n,e,r)}},function(n,e){n.exports=function(n,e){return null!=n&&e in Object(n)}},function(n,e,t){var r=t(214),o=t(141),i=t(37),a=t(207),s=t(146),u=t(110);n.exports=function(n,e,t){for(var l=-1,c=(e=r(e,n)).length,p=!1;++l<c;){var d=u(e[l]);if(!(p=null!=n&&t(n,d)))break;n=n[d]}return p||++l!=c?p:!!(c=null==n?0:n.length)&&s(c)&&a(d,c)&&(i(n)||o(n))}},function(n,e,t){var r=t(353),o=t(354),i=t(147),a=t(110);n.exports=function(n){return i(n)?r(a(n)):o(n)}},function(n,e){n.exports=function(n){return function(e){return null==e?void 0:e[n]}}},function(n,e,t){var r=t(213);n.exports=function(n){return function(e){return r(e,n)}}},function(n,e,t){var r=t(149),o=t(356),i=t(358);n.exports=function(n,e){return i(o(n,e,r),n+"")}},function(n,e,t){var r=t(357),o=Math.max;n.exports=function(n,e,t){return e=o(void 0===e?n.length-1:e,0),function(){for(var i=arguments,a=-1,s=o(i.length-e,0),u=Array(s);++a<s;)u[a]=i[e+a];a=-1;for(var l=Array(e+1);++a<e;)l[a]=i[a];return l[e]=t(u),r(n,this,l)}}},function(n,e){n.exports=function(n,e,t){switch(t.length){case 0:return n.call(e);case 1:return n.call(e,t[0]);case 2:return n.call(e,t[0],t[1]);case 3:return n.call(e,t[0],t[1],t[2])}return n.apply(e,t)}},function(n,e,t){var r=t(359),o=t(362)(r);n.exports=o},function(n,e,t){var r=t(360),o=t(361),i=t(149),a=o?function(n,e){return o(n,"toString",{configurable:!0,enumerable:!1,value:r(e),writable:!0})}:i;n.exports=a},function(n,e){n.exports=function(n){return function(){return n}}},function(n,e,t){var r=t(51),o=function(){try{var n=r(Object,"defineProperty");return n({},"",{}),n}catch(n){}}();n.exports=o},function(n,e){var t=Date.now;n.exports=function(n){var e=0,r=0;return function(){var o=t(),i=16-(o-r);if(r=o,i>0){if(++e>=800)return arguments[0]}else e=0;return n.apply(void 0,arguments)}}},function(n,e,t){var r=t(203),o=t(364),i=t(369),a=t(204),s=t(370),u=t(145);n.exports=function(n,e,t){var l=-1,c=o,p=n.length,d=!0,v=[],m=v;if(t)d=!1,c=i;else if(p>=200){var h=e?null:s(n);if(h)return u(h);d=!1,c=a,m=new r}else m=e?[]:v;n:for(;++l<p;){var f=n[l],g=e?e(f):f;if(f=t||0!==f?f:0,d&&g==g){for(var b=m.length;b--;)if(m[b]===g)continue n;e&&m.push(g),v.push(f)}else c(m,g,t)||(m!==v&&m.push(g),v.push(f))}return v}},function(n,e,t){var r=t(365);n.exports=function(n,e){return!!(null==n?0:n.length)&&r(n,e,0)>-1}},function(n,e,t){var r=t(366),o=t(367),i=t(368);n.exports=function(n,e,t){return e==e?i(n,e,t):r(n,o,t)}},function(n,e){n.exports=function(n,e,t,r){for(var o=n.length,i=t+(r?1:-1);r?i--:++i<o;)if(e(n[i],i,n))return i;return-1}},function(n,e){n.exports=function(n){return n!=n}},function(n,e){n.exports=function(n,e,t){for(var r=t-1,o=n.length;++r<o;)if(n[r]===e)return r;return-1}},function(n,e){n.exports=function(n,e,t){for(var r=-1,o=null==n?0:n.length;++r<o;)if(t(e,n[r]))return!0;return!1}},function(n,e,t){var r=t(210),o=t(371),i=t(145),a=r&&1/i(new r([,-0]))[1]==1/0?function(n){return new r(n)}:o;n.exports=a},function(n,e){n.exports=function(){}},function(n,e,t){var r=t(209),o=t(62);n.exports=function(n){return o(n)&&r(n)}},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(2);n.exports=r(1..valueOf)},function(n,e,t){var r=t(2),o=t(49),i=t(11),a=t(377),s=t(22),u=r(a),l=r("".slice),c=Math.ceil,p=function(n){return function(e,t,r){var a,p,d=i(s(e)),v=o(t),m=d.length,h=void 0===r?" ":i(r);return v<=m||""==h?d:((p=u(h,c((a=v-m)/h.length))).length>a&&(p=l(p,0,a)),n?d+p:p+d)}};n.exports={start:p(!1),end:p(!0)}},function(n,e,t){"use strict";var r=t(0),o=t(57),i=t(11),a=t(22),s=r.RangeError;n.exports=function(n){var e=i(a(this)),t="",r=o(n);if(r<0||r==1/0)throw s("Wrong number of repetitions");for(;r>0;(r>>>=1)&&(e+=e))1&r&&(t+=e);return t}},function(n,e,t){var r=t(38);n.exports=/Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(r)},function(n,e,t){"use strict";t(215)},function(n,e,t){"use strict";t(216)},function(n,e,t){"use strict";var r=t(1),o=t(2),i=t(45),a=t(16),s=t(28),u=t(11),l=t(3),c=t(239),p=t(58),d=t(382),v=t(383),m=t(63),h=t(384),f=[],g=o(f.sort),b=o(f.push),x=l((function(){f.sort(void 0)})),y=l((function(){f.sort(null)})),j=p("sort"),w=!l((function(){if(m)return m<70;if(!(d&&d>3)){if(v)return!0;if(h)return h<603;var n,e,t,r,o="";for(n=65;n<76;n++){switch(e=String.fromCharCode(n),n){case 66:case 69:case 70:case 72:t=3;break;case 68:case 71:t=4;break;default:t=2}for(r=0;r<47;r++)f.push({k:e+r,v:t})}for(f.sort((function(n,e){return e.v-n.v})),r=0;r<f.length;r++)e=f[r].k.charAt(0),o.charAt(o.length-1)!==e&&(o+=e);return"DGBEFHACIJK"!==o}}));r({target:"Array",proto:!0,forced:x||!y||!j||!w},{sort:function(n){void 0!==n&&i(n);var e=a(this);if(w)return void 0===n?g(e):g(e,n);var t,r,o=[],l=s(e);for(r=0;r<l;r++)r in e&&b(o,e[r]);for(c(o,function(n){return function(e,t){return void 0===t?-1:void 0===e?1:void 0!==n?+n(e,t)||0:u(e)>u(t)?1:-1}}(n)),t=o.length,r=0;r<t;)e[r]=o[r++];for(;r<l;)delete e[r++];return e}})},function(n,e,t){var r=t(38).match(/firefox\/(\d+)/i);n.exports=!!r&&+r[1]},function(n,e,t){var r=t(38);n.exports=/MSIE|Trident/.test(r)},function(n,e,t){var r=t(38).match(/AppleWebKit\/(\d+)\./);n.exports=!!r&&+r[1]},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(1),o=t(3),i=t(29),a=t(40).f,s=t(8),u=o((function(){a(1)}));r({target:"Object",stat:!0,forced:!s||u,sham:!s},{getOwnPropertyDescriptor:function(n,e){return a(i(n),e)}})},function(n,e,t){var r=t(1),o=t(8),i=t(123).f;r({target:"Object",stat:!0,forced:Object.defineProperties!==i,sham:!o},{defineProperties:i})},function(n,e,t){n.exports=t.p+"assets/img/sakura.5e4a2cfb.png"},function(n,e,t){"use strict";t(221)},function(n,e,t){"use strict";var r=t(16),o=t(75),i=t(28);n.exports=function(n){for(var e=r(this),t=i(e),a=arguments.length,s=o(a>1?arguments[1]:void 0,t),u=a>2?arguments[2]:void 0,l=void 0===u?t:o(u,t);l>s;)e[s++]=n;return e}},function(n,e,t){"use strict";t.r(e);var r=t(53);t(70),t(393),t(25),t(72),t(4),t(67),t(20),t(56),t(222),t(394);"object"===("undefined"==typeof window?"undefined":Object(r.a)(window))&&(window.Ribbons=function(){var n=window,e=document.body,t=document.documentElement,o=function n(){if(1===arguments.length){if(Array.isArray(arguments[0])){var e=Math.round(n(0,arguments[0].length-1));return arguments[0][e]}return n(0,arguments[0])}return 2===arguments.length?Math.random()*(arguments[1]-arguments[0])+arguments[0]:0},i=function(r){var o=Math.max(0,n.innerWidth||t.clientWidth||e.clientWidth||0),i=Math.max(0,n.innerHeight||t.clientHeight||e.clientHeight||0);return{width:o,height:i,ratio:o/i,centerx:o/2,centery:i/2,scrollx:Math.max(0,n.pageXOffset||t.scrollLeft||e.scrollLeft||0)-(t.clientLeft||0),scrolly:Math.max(0,n.pageYOffset||t.scrollTop||e.scrollTop||0)-(t.clientTop||0)}},a=function(n,e){this.x=0,this.y=0,this.set(n,e)};a.prototype={constructor:a,set:function(n,e){this.x=n||0,this.y=e||0},copy:function(n){return this.x=n.x||0,this.y=n.y||0,this},multiply:function(n,e){return this.x*=n||1,this.y*=e||1,this},divide:function(n,e){return this.x/=n||1,this.y/=e||1,this},add:function(n,e){return this.x+=n||0,this.y+=e||0,this},subtract:function(n,e){return this.x-=n||0,this.y-=e||0,this},clampX:function(n,e){return this.x=Math.max(n,Math.min(this.x,e)),this},clampY:function(n,e){return this.y=Math.max(n,Math.min(this.y,e)),this},flipX:function(){return this.x*=-1,this},flipY:function(){return this.y*=-1,this}};var s=function(n){this._canvas=null,this._context=null,this._sto=null,this._width=0,this._height=0,this._scroll=0,this._ribbons=[],this._options=n,this._onDraw=this._onDraw.bind(this),this._onResize=this._onResize.bind(this),this._onScroll=this._onScroll.bind(this),this.setOptions(n),this.init()};return s.prototype={constructor:s,setOptions:function(n){if("object"===Object(r.a)(n))for(var e in n)n.hasOwnProperty(e)&&(this._options[e]=n[e])},init:function(){try{this._canvas=document.createElement("canvas"),this._canvas.style.display="block",this._canvas.style.position="fixed",this._canvas.style.margin="0",this._canvas.style.padding="0",this._canvas.style.border="0",this._canvas.style.outline="0",this._canvas.style.left="0",this._canvas.style.top="0",this._canvas.style.width="100%",this._canvas.style.height="100%",this._canvas.style["z-index"]="-1",this._canvas.id="bgCanvas",this._onResize(),this._context=this._canvas.getContext("2d"),this._context.clearRect(0,0,this._width,this._height),this._context.globalAlpha=this._options.colorAlpha,window.addEventListener("resize",this._onResize),window.addEventListener("scroll",this._onScroll),document.body.appendChild(this._canvas)}catch(n){return void console.warn("Canvas Context Error: "+n.toString())}this._onDraw()},addRibbon:function(){var n=Math.round(o(1,9))>5?"right":"left",e=1e3,t=this._width+200,r=0,i=0,s="right"===n?-200:t,u=Math.round(o(0,this._height));/^(top|min)$/i.test(this._options.verticalPosition)?u=200:/^(middle|center)$/i.test(this._options.verticalPosition)?u=this._height/2:/^(bottom|max)$/i.test(this._options.verticalPosition)&&(u=this._height-200);for(var l=[],c=new a(s,u),p=new a(s,u),d=null,v=Math.round(o(0,360)),m=0;!(e<=0);){if(e--,r=Math.round((1*Math.random()-.2)*this._options.horizontalSpeed),i=Math.round((1*Math.random()-.5)*(.25*this._height)),(d=new a).copy(p),"right"===n){if(d.add(r,i),p.x>=t)break}else if("left"===n&&(d.subtract(r,i),p.x<=-200))break;l.push({point1:new a(c.x,c.y),point2:new a(p.x,p.y),point3:d,color:v,delay:m,dir:n,alpha:0,phase:0}),c.copy(p),p.copy(d),m+=4,v+=this._options.colorCycleSpeed}this._ribbons.push(l)},_drawRibbonSection:function(n){if(n){if(n.phase>=1&&n.alpha<=0)return!0;if(n.delay<=0){if(n.phase+=.02,n.alpha=1*Math.sin(n.phase),n.alpha=n.alpha<=0?0:n.alpha,n.alpha=n.alpha>=1?1:n.alpha,this._options.animateSections){var e=.1*Math.sin(1+n.phase*Math.PI/2);"right"===n.dir?(n.point1.add(e,0),n.point2.add(e,0),n.point3.add(e,0)):(n.point1.subtract(e,0),n.point2.subtract(e,0),n.point3.subtract(e,0)),n.point1.add(0,e),n.point2.add(0,e),n.point3.add(0,e)}}else n.delay-=.5;var t=this._options.colorSaturation,r=this._options.colorBrightness,o="hsla("+n.color+", "+t+", "+r+", "+n.alpha+" )";this._context.save(),0!==this._options.parallaxAmount&&this._context.translate(0,this._scroll*this._options.parallaxAmount),this._context.beginPath(),this._context.moveTo(n.point1.x,n.point1.y),this._context.lineTo(n.point2.x,n.point2.y),this._context.lineTo(n.point3.x,n.point3.y),this._context.fillStyle=o,this._context.fill(),this._options.strokeSize>0&&(this._context.lineWidth=this._options.strokeSize,this._context.strokeStyle=o,this._context.lineCap="round",this._context.stroke()),this._context.restore()}return!1},_onDraw:function(){for(var n=0,e=this._ribbons.length;n<e;++n)this._ribbons[n]||this._ribbons.splice(n,1);this._context.clearRect(0,0,this._width,this._height);for(var t=0;t<this._ribbons.length;++t){for(var r=this._ribbons[t],o=r.length,i=0,a=0;a<o;++a)this._drawRibbonSection(r[a])&&i++;i>=o&&(this._ribbons[t]=null)}this._ribbons.length<this._options.ribbonCount&&this.addRibbon(),requestAnimationFrame(this._onDraw)},_onResize:function(n){var e=i();this._width=e.width,this._height=e.height,this._canvas&&(this._canvas.width=this._width,this._canvas.height=this._height,this._context&&(this._context.globalAlpha=this._options.colorAlpha))},_onScroll:function(n){var e=i();this._scroll=e.scrolly}},s}()),e.default=Ribbons},function(n,e,t){var r=t(1),o=t(219);r({target:"Function",proto:!0,forced:Function.bind!==o},{bind:o})},function(n,e,t){"use strict";var r=t(1),o=t(0),i=t(75),a=t(57),s=t(28),u=t(16),l=t(117),c=t(65),p=t(80)("splice"),d=o.TypeError,v=Math.max,m=Math.min;r({target:"Array",proto:!0,forced:!p},{splice:function(n,e){var t,r,o,p,h,f,g=u(this),b=s(g),x=i(n,b),y=arguments.length;if(0===y?t=r=0:1===y?(t=0,r=b-x):(t=y-2,r=m(v(a(e),0),b-x)),b+t-r>9007199254740991)throw d("Maximum allowed length exceeded");for(o=l(g,r),p=0;p<r;p++)(h=x+p)in g&&c(o,p,g[h]);if(o.length=r,t<r){for(p=x;p<b-r;p++)f=p+t,(h=p+r)in g?g[f]=g[h]:delete g[f];for(p=b;p>b-r+t;p--)delete g[p-1]}else if(t>r)for(p=b-r;p>x;p--)f=p+t-1,(h=p+r-1)in g?g[f]=g[h]:delete g[f];for(p=0;p<t;p++)g[p+x]=arguments[p+2];return g.length=b-r+t,o}})},function(n,e,t){"use strict";t(223)},function(n,e,t){"use strict";t(224)},function(n,e,t){"use strict";t.r(e);t(154),t(248),t(257),t(259);var r=t(5),o=(t(23),t(85),t(4),t(18),t(21),t(46),t(35),Object.freeze({}));function i(n){return null==n}function a(n){return null!=n}function s(n){return!0===n}function u(n){return"string"==typeof n||"number"==typeof n||"symbol"==typeof n||"boolean"==typeof n}function l(n){return null!==n&&"object"==typeof n}var c=Object.prototype.toString;function p(n){return"[object Object]"===c.call(n)}function d(n){return"[object RegExp]"===c.call(n)}function v(n){var e=parseFloat(String(n));return e>=0&&Math.floor(e)===e&&isFinite(n)}function m(n){return a(n)&&"function"==typeof n.then&&"function"==typeof n.catch}function h(n){return null==n?"":Array.isArray(n)||p(n)&&n.toString===c?JSON.stringify(n,null,2):String(n)}function f(n){var e=parseFloat(n);return isNaN(e)?n:e}function g(n,e){for(var t=Object.create(null),r=n.split(","),o=0;o<r.length;o++)t[r[o]]=!0;return e?function(n){return t[n.toLowerCase()]}:function(n){return t[n]}}g("slot,component",!0);var b=g("key,ref,slot,slot-scope,is");function x(n,e){if(n.length){var t=n.indexOf(e);if(t>-1)return n.splice(t,1)}}var y=Object.prototype.hasOwnProperty;function j(n,e){return y.call(n,e)}function w(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var k=/-(\w)/g,T=w((function(n){return n.replace(k,(function(n,e){return e?e.toUpperCase():""}))})),V=w((function(n){return n.charAt(0).toUpperCase()+n.slice(1)})),S=/\B([A-Z])/g,_=w((function(n){return n.replace(S,"-$1").toLowerCase()}));var I=Function.prototype.bind?function(n,e){return n.bind(e)}:function(n,e){function t(t){var r=arguments.length;return r?r>1?n.apply(e,arguments):n.call(e,t):n.call(e)}return t._length=n.length,t};function A(n,e){e=e||0;for(var t=n.length-e,r=new Array(t);t--;)r[t]=n[t+e];return r}function z(n,e){for(var t in e)n[t]=e[t];return n}function C(n){for(var e={},t=0;t<n.length;t++)n[t]&&z(e,n[t]);return e}function E(n,e,t){}var P=function(n,e,t){return!1},O=function(n){return n};function M(n,e){if(n===e)return!0;var t=l(n),r=l(e);if(!t||!r)return!t&&!r&&String(n)===String(e);try{var o=Array.isArray(n),i=Array.isArray(e);if(o&&i)return n.length===e.length&&n.every((function(n,t){return M(n,e[t])}));if(n instanceof Date&&e instanceof Date)return n.getTime()===e.getTime();if(o||i)return!1;var a=Object.keys(n),s=Object.keys(e);return a.length===s.length&&a.every((function(t){return M(n[t],e[t])}))}catch(n){return!1}}function q(n,e){for(var t=0;t<n.length;t++)if(M(n[t],e))return t;return-1}function R(n){var e=!1;return function(){e||(e=!0,n.apply(this,arguments))}}var D=["component","directive","filter"],L=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],$={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:P,isReservedAttr:P,isUnknownElement:P,getTagNamespace:E,parsePlatformTagName:O,mustUseProp:P,async:!0,_lifecycleHooks:L},N=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function B(n,e,t,r){Object.defineProperty(n,e,{value:t,enumerable:!!r,writable:!0,configurable:!0})}var U=new RegExp("[^"+N.source+".$_\\d]");var F,H="__proto__"in{},J="undefined"!=typeof window,W="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,G=W&&WXEnvironment.platform.toLowerCase(),X=J&&window.navigator.userAgent.toLowerCase(),K=X&&/msie|trident/.test(X),Y=X&&X.indexOf("msie 9.0")>0,Q=X&&X.indexOf("edge/")>0,Z=(X&&X.indexOf("android"),X&&/iphone|ipad|ipod|ios/.test(X)||"ios"===G),nn=(X&&/chrome\/\d+/.test(X),X&&/phantomjs/.test(X),X&&X.match(/firefox\/(\d+)/)),en={}.watch,tn=!1;if(J)try{var rn={};Object.defineProperty(rn,"passive",{get:function(){tn=!0}}),window.addEventListener("test-passive",null,rn)}catch(n){}var on=function(){return void 0===F&&(F=!J&&!W&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),F},an=J&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function sn(n){return"function"==typeof n&&/native code/.test(n.toString())}var un,ln="undefined"!=typeof Symbol&&sn(Symbol)&&"undefined"!=typeof Reflect&&sn(Reflect.ownKeys);un="undefined"!=typeof Set&&sn(Set)?Set:function(){function n(){this.set=Object.create(null)}return n.prototype.has=function(n){return!0===this.set[n]},n.prototype.add=function(n){this.set[n]=!0},n.prototype.clear=function(){this.set=Object.create(null)},n}();var cn=E,pn=0,dn=function(){this.id=pn++,this.subs=[]};dn.prototype.addSub=function(n){this.subs.push(n)},dn.prototype.removeSub=function(n){x(this.subs,n)},dn.prototype.depend=function(){dn.target&&dn.target.addDep(this)},dn.prototype.notify=function(){var n=this.subs.slice();for(var e=0,t=n.length;e<t;e++)n[e].update()},dn.target=null;var vn=[];function mn(n){vn.push(n),dn.target=n}function hn(){vn.pop(),dn.target=vn[vn.length-1]}var fn=function(n,e,t,r,o,i,a,s){this.tag=n,this.data=e,this.children=t,this.text=r,this.elm=o,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},gn={child:{configurable:!0}};gn.child.get=function(){return this.componentInstance},Object.defineProperties(fn.prototype,gn);var bn=function(n){void 0===n&&(n="");var e=new fn;return e.text=n,e.isComment=!0,e};function xn(n){return new fn(void 0,void 0,void 0,String(n))}function yn(n){var e=new fn(n.tag,n.data,n.children&&n.children.slice(),n.text,n.elm,n.context,n.componentOptions,n.asyncFactory);return e.ns=n.ns,e.isStatic=n.isStatic,e.key=n.key,e.isComment=n.isComment,e.fnContext=n.fnContext,e.fnOptions=n.fnOptions,e.fnScopeId=n.fnScopeId,e.asyncMeta=n.asyncMeta,e.isCloned=!0,e}var jn=Array.prototype,wn=Object.create(jn);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(n){var e=jn[n];B(wn,n,(function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];var o,i=e.apply(this,t),a=this.__ob__;switch(n){case"push":case"unshift":o=t;break;case"splice":o=t.slice(2)}return o&&a.observeArray(o),a.dep.notify(),i}))}));var kn=Object.getOwnPropertyNames(wn),Tn=!0;function Vn(n){Tn=n}var Sn=function(n){this.value=n,this.dep=new dn,this.vmCount=0,B(n,"__ob__",this),Array.isArray(n)?(H?function(n,e){n.__proto__=e}(n,wn):function(n,e,t){for(var r=0,o=t.length;r<o;r++){var i=t[r];B(n,i,e[i])}}(n,wn,kn),this.observeArray(n)):this.walk(n)};function _n(n,e){var t;if(l(n)&&!(n instanceof fn))return j(n,"__ob__")&&n.__ob__ instanceof Sn?t=n.__ob__:Tn&&!on()&&(Array.isArray(n)||p(n))&&Object.isExtensible(n)&&!n._isVue&&(t=new Sn(n)),e&&t&&t.vmCount++,t}function In(n,e,t,r,o){var i=new dn,a=Object.getOwnPropertyDescriptor(n,e);if(!a||!1!==a.configurable){var s=a&&a.get,u=a&&a.set;s&&!u||2!==arguments.length||(t=n[e]);var l=!o&&_n(t);Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(n):t;return dn.target&&(i.depend(),l&&(l.dep.depend(),Array.isArray(e)&&Cn(e))),e},set:function(e){var r=s?s.call(n):t;e===r||e!=e&&r!=r||s&&!u||(u?u.call(n,e):t=e,l=!o&&_n(e),i.notify())}})}}function An(n,e,t){if(Array.isArray(n)&&v(e))return n.length=Math.max(n.length,e),n.splice(e,1,t),t;if(e in n&&!(e in Object.prototype))return n[e]=t,t;var r=n.__ob__;return n._isVue||r&&r.vmCount?t:r?(In(r.value,e,t),r.dep.notify(),t):(n[e]=t,t)}function zn(n,e){if(Array.isArray(n)&&v(e))n.splice(e,1);else{var t=n.__ob__;n._isVue||t&&t.vmCount||j(n,e)&&(delete n[e],t&&t.dep.notify())}}function Cn(n){for(var e=void 0,t=0,r=n.length;t<r;t++)(e=n[t])&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&Cn(e)}Sn.prototype.walk=function(n){for(var e=Object.keys(n),t=0;t<e.length;t++)In(n,e[t])},Sn.prototype.observeArray=function(n){for(var e=0,t=n.length;e<t;e++)_n(n[e])};var En=$.optionMergeStrategies;function Pn(n,e){if(!e)return n;for(var t,r,o,i=ln?Reflect.ownKeys(e):Object.keys(e),a=0;a<i.length;a++)"__ob__"!==(t=i[a])&&(r=n[t],o=e[t],j(n,t)?r!==o&&p(r)&&p(o)&&Pn(r,o):An(n,t,o));return n}function On(n,e,t){return t?function(){var r="function"==typeof e?e.call(t,t):e,o="function"==typeof n?n.call(t,t):n;return r?Pn(r,o):o}:e?n?function(){return Pn("function"==typeof e?e.call(this,this):e,"function"==typeof n?n.call(this,this):n)}:e:n}function Mn(n,e){var t=e?n?n.concat(e):Array.isArray(e)?e:[e]:n;return t?function(n){for(var e=[],t=0;t<n.length;t++)-1===e.indexOf(n[t])&&e.push(n[t]);return e}(t):t}function qn(n,e,t,r){var o=Object.create(n||null);return e?z(o,e):o}En.data=function(n,e,t){return t?On(n,e,t):e&&"function"!=typeof e?n:On(n,e)},L.forEach((function(n){En[n]=Mn})),D.forEach((function(n){En[n+"s"]=qn})),En.watch=function(n,e,t,r){if(n===en&&(n=void 0),e===en&&(e=void 0),!e)return Object.create(n||null);if(!n)return e;var o={};for(var i in z(o,n),e){var a=o[i],s=e[i];a&&!Array.isArray(a)&&(a=[a]),o[i]=a?a.concat(s):Array.isArray(s)?s:[s]}return o},En.props=En.methods=En.inject=En.computed=function(n,e,t,r){if(!n)return e;var o=Object.create(null);return z(o,n),e&&z(o,e),o},En.provide=On;var Rn=function(n,e){return void 0===e?n:e};function Dn(n,e,t){if("function"==typeof e&&(e=e.options),function(n,e){var t=n.props;if(t){var r,o,i={};if(Array.isArray(t))for(r=t.length;r--;)"string"==typeof(o=t[r])&&(i[T(o)]={type:null});else if(p(t))for(var a in t)o=t[a],i[T(a)]=p(o)?o:{type:o};else 0;n.props=i}}(e),function(n,e){var t=n.inject;if(t){var r=n.inject={};if(Array.isArray(t))for(var o=0;o<t.length;o++)r[t[o]]={from:t[o]};else if(p(t))for(var i in t){var a=t[i];r[i]=p(a)?z({from:i},a):{from:a}}else 0}}(e),function(n){var e=n.directives;if(e)for(var t in e){var r=e[t];"function"==typeof r&&(e[t]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(n=Dn(n,e.extends,t)),e.mixins))for(var r=0,o=e.mixins.length;r<o;r++)n=Dn(n,e.mixins[r],t);var i,a={};for(i in n)s(i);for(i in e)j(n,i)||s(i);function s(r){var o=En[r]||Rn;a[r]=o(n[r],e[r],t,r)}return a}function Ln(n,e,t,r){if("string"==typeof t){var o=n[e];if(j(o,t))return o[t];var i=T(t);if(j(o,i))return o[i];var a=V(i);return j(o,a)?o[a]:o[t]||o[i]||o[a]}}function $n(n,e,t,r){var o=e[n],i=!j(t,n),a=t[n],s=Fn(Boolean,o.type);if(s>-1)if(i&&!j(o,"default"))a=!1;else if(""===a||a===_(n)){var u=Fn(String,o.type);(u<0||s<u)&&(a=!0)}if(void 0===a){a=function(n,e,t){if(!j(e,"default"))return;var r=e.default;0;if(n&&n.$options.propsData&&void 0===n.$options.propsData[t]&&void 0!==n._props[t])return n._props[t];return"function"==typeof r&&"Function"!==Bn(e.type)?r.call(n):r}(r,o,n);var l=Tn;Vn(!0),_n(a),Vn(l)}return a}var Nn=/^\s*function (\w+)/;function Bn(n){var e=n&&n.toString().match(Nn);return e?e[1]:""}function Un(n,e){return Bn(n)===Bn(e)}function Fn(n,e){if(!Array.isArray(e))return Un(e,n)?0:-1;for(var t=0,r=e.length;t<r;t++)if(Un(e[t],n))return t;return-1}function Hn(n,e,t){mn();try{if(e)for(var r=e;r=r.$parent;){var o=r.$options.errorCaptured;if(o)for(var i=0;i<o.length;i++)try{if(!1===o[i].call(r,n,e,t))return}catch(n){Wn(n,r,"errorCaptured hook")}}Wn(n,e,t)}finally{hn()}}function Jn(n,e,t,r,o){var i;try{(i=t?n.apply(e,t):n.call(e))&&!i._isVue&&m(i)&&!i._handled&&(i.catch((function(n){return Hn(n,r,o+" (Promise/async)")})),i._handled=!0)}catch(n){Hn(n,r,o)}return i}function Wn(n,e,t){if($.errorHandler)try{return $.errorHandler.call(null,n,e,t)}catch(e){e!==n&&Gn(e,null,"config.errorHandler")}Gn(n,e,t)}function Gn(n,e,t){if(!J&&!W||"undefined"==typeof console)throw n;console.error(n)}var Xn,Kn=!1,Yn=[],Qn=!1;function Zn(){Qn=!1;var n=Yn.slice(0);Yn.length=0;for(var e=0;e<n.length;e++)n[e]()}if("undefined"!=typeof Promise&&sn(Promise)){var ne=Promise.resolve();Xn=function(){ne.then(Zn),Z&&setTimeout(E)},Kn=!0}else if(K||"undefined"==typeof MutationObserver||!sn(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Xn="undefined"!=typeof setImmediate&&sn(setImmediate)?function(){setImmediate(Zn)}:function(){setTimeout(Zn,0)};else{var ee=1,te=new MutationObserver(Zn),re=document.createTextNode(String(ee));te.observe(re,{characterData:!0}),Xn=function(){ee=(ee+1)%2,re.data=String(ee)},Kn=!0}function oe(n,e){var t;if(Yn.push((function(){if(n)try{n.call(e)}catch(n){Hn(n,e,"nextTick")}else t&&t(e)})),Qn||(Qn=!0,Xn()),!n&&"undefined"!=typeof Promise)return new Promise((function(n){t=n}))}var ie=new un;function ae(n){!function n(e,t){var r,o,i=Array.isArray(e);if(!i&&!l(e)||Object.isFrozen(e)||e instanceof fn)return;if(e.__ob__){var a=e.__ob__.dep.id;if(t.has(a))return;t.add(a)}if(i)for(r=e.length;r--;)n(e[r],t);else for(o=Object.keys(e),r=o.length;r--;)n(e[o[r]],t)}(n,ie),ie.clear()}var se=w((function(n){var e="&"===n.charAt(0),t="~"===(n=e?n.slice(1):n).charAt(0),r="!"===(n=t?n.slice(1):n).charAt(0);return{name:n=r?n.slice(1):n,once:t,capture:r,passive:e}}));function ue(n,e){function t(){var n=arguments,r=t.fns;if(!Array.isArray(r))return Jn(r,null,arguments,e,"v-on handler");for(var o=r.slice(),i=0;i<o.length;i++)Jn(o[i],null,n,e,"v-on handler")}return t.fns=n,t}function le(n,e,t,r,o,a){var u,l,c,p;for(u in n)l=n[u],c=e[u],p=se(u),i(l)||(i(c)?(i(l.fns)&&(l=n[u]=ue(l,a)),s(p.once)&&(l=n[u]=o(p.name,l,p.capture)),t(p.name,l,p.capture,p.passive,p.params)):l!==c&&(c.fns=l,n[u]=c));for(u in e)i(n[u])&&r((p=se(u)).name,e[u],p.capture)}function ce(n,e,t){var r;n instanceof fn&&(n=n.data.hook||(n.data.hook={}));var o=n[e];function u(){t.apply(this,arguments),x(r.fns,u)}i(o)?r=ue([u]):a(o.fns)&&s(o.merged)?(r=o).fns.push(u):r=ue([o,u]),r.merged=!0,n[e]=r}function pe(n,e,t,r,o){if(a(e)){if(j(e,t))return n[t]=e[t],o||delete e[t],!0;if(j(e,r))return n[t]=e[r],o||delete e[r],!0}return!1}function de(n){return u(n)?[xn(n)]:Array.isArray(n)?function n(e,t){var r,o,l,c,p=[];for(r=0;r<e.length;r++)i(o=e[r])||"boolean"==typeof o||(l=p.length-1,c=p[l],Array.isArray(o)?o.length>0&&(ve((o=n(o,(t||"")+"_"+r))[0])&&ve(c)&&(p[l]=xn(c.text+o[0].text),o.shift()),p.push.apply(p,o)):u(o)?ve(c)?p[l]=xn(c.text+o):""!==o&&p.push(xn(o)):ve(o)&&ve(c)?p[l]=xn(c.text+o.text):(s(e._isVList)&&a(o.tag)&&i(o.key)&&a(t)&&(o.key="__vlist"+t+"_"+r+"__"),p.push(o)));return p}(n):void 0}function ve(n){return a(n)&&a(n.text)&&!1===n.isComment}function me(n,e){if(n){for(var t=Object.create(null),r=ln?Reflect.ownKeys(n):Object.keys(n),o=0;o<r.length;o++){var i=r[o];if("__ob__"!==i){for(var a=n[i].from,s=e;s;){if(s._provided&&j(s._provided,a)){t[i]=s._provided[a];break}s=s.$parent}if(!s)if("default"in n[i]){var u=n[i].default;t[i]="function"==typeof u?u.call(e):u}else 0}}return t}}function he(n,e){if(!n||!n.length)return{};for(var t={},r=0,o=n.length;r<o;r++){var i=n[r],a=i.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,i.context!==e&&i.fnContext!==e||!a||null==a.slot)(t.default||(t.default=[])).push(i);else{var s=a.slot,u=t[s]||(t[s]=[]);"template"===i.tag?u.push.apply(u,i.children||[]):u.push(i)}}for(var l in t)t[l].every(fe)&&delete t[l];return t}function fe(n){return n.isComment&&!n.asyncFactory||" "===n.text}function ge(n){return n.isComment&&n.asyncFactory}function be(n,e,t){var r,i=Object.keys(e).length>0,a=n?!!n.$stable:!i,s=n&&n.$key;if(n){if(n._normalized)return n._normalized;if(a&&t&&t!==o&&s===t.$key&&!i&&!t.$hasNormal)return t;for(var u in r={},n)n[u]&&"$"!==u[0]&&(r[u]=xe(e,u,n[u]))}else r={};for(var l in e)l in r||(r[l]=ye(e,l));return n&&Object.isExtensible(n)&&(n._normalized=r),B(r,"$stable",a),B(r,"$key",s),B(r,"$hasNormal",i),r}function xe(n,e,t){var r=function(){var n=arguments.length?t.apply(null,arguments):t({}),e=(n=n&&"object"==typeof n&&!Array.isArray(n)?[n]:de(n))&&n[0];return n&&(!e||1===n.length&&e.isComment&&!ge(e))?void 0:n};return t.proxy&&Object.defineProperty(n,e,{get:r,enumerable:!0,configurable:!0}),r}function ye(n,e){return function(){return n[e]}}function je(n,e){var t,r,o,i,s;if(Array.isArray(n)||"string"==typeof n)for(t=new Array(n.length),r=0,o=n.length;r<o;r++)t[r]=e(n[r],r);else if("number"==typeof n)for(t=new Array(n),r=0;r<n;r++)t[r]=e(r+1,r);else if(l(n))if(ln&&n[Symbol.iterator]){t=[];for(var u=n[Symbol.iterator](),c=u.next();!c.done;)t.push(e(c.value,t.length)),c=u.next()}else for(i=Object.keys(n),t=new Array(i.length),r=0,o=i.length;r<o;r++)s=i[r],t[r]=e(n[s],s,r);return a(t)||(t=[]),t._isVList=!0,t}function we(n,e,t,r){var o,i=this.$scopedSlots[n];i?(t=t||{},r&&(t=z(z({},r),t)),o=i(t)||("function"==typeof e?e():e)):o=this.$slots[n]||("function"==typeof e?e():e);var a=t&&t.slot;return a?this.$createElement("template",{slot:a},o):o}function ke(n){return Ln(this.$options,"filters",n)||O}function Te(n,e){return Array.isArray(n)?-1===n.indexOf(e):n!==e}function Ve(n,e,t,r,o){var i=$.keyCodes[e]||t;return o&&r&&!$.keyCodes[e]?Te(o,r):i?Te(i,n):r?_(r)!==e:void 0===n}function Se(n,e,t,r,o){if(t)if(l(t)){var i;Array.isArray(t)&&(t=C(t));var a=function(a){if("class"===a||"style"===a||b(a))i=n;else{var s=n.attrs&&n.attrs.type;i=r||$.mustUseProp(e,s,a)?n.domProps||(n.domProps={}):n.attrs||(n.attrs={})}var u=T(a),l=_(a);u in i||l in i||(i[a]=t[a],o&&((n.on||(n.on={}))["update:"+a]=function(n){t[a]=n}))};for(var s in t)a(s)}else;return n}function _e(n,e){var t=this._staticTrees||(this._staticTrees=[]),r=t[n];return r&&!e||Ae(r=t[n]=this.$options.staticRenderFns[n].call(this._renderProxy,null,this),"__static__"+n,!1),r}function Ie(n,e,t){return Ae(n,"__once__"+e+(t?"_"+t:""),!0),n}function Ae(n,e,t){if(Array.isArray(n))for(var r=0;r<n.length;r++)n[r]&&"string"!=typeof n[r]&&ze(n[r],e+"_"+r,t);else ze(n,e,t)}function ze(n,e,t){n.isStatic=!0,n.key=e,n.isOnce=t}function Ce(n,e){if(e)if(p(e)){var t=n.on=n.on?z({},n.on):{};for(var r in e){var o=t[r],i=e[r];t[r]=o?[].concat(o,i):i}}else;return n}function Ee(n,e,t,r){e=e||{$stable:!t};for(var o=0;o<n.length;o++){var i=n[o];Array.isArray(i)?Ee(i,e,t):i&&(i.proxy&&(i.fn.proxy=!0),e[i.key]=i.fn)}return r&&(e.$key=r),e}function Pe(n,e){for(var t=0;t<e.length;t+=2){var r=e[t];"string"==typeof r&&r&&(n[e[t]]=e[t+1])}return n}function Oe(n,e){return"string"==typeof n?e+n:n}function Me(n){n._o=Ie,n._n=f,n._s=h,n._l=je,n._t=we,n._q=M,n._i=q,n._m=_e,n._f=ke,n._k=Ve,n._b=Se,n._v=xn,n._e=bn,n._u=Ee,n._g=Ce,n._d=Pe,n._p=Oe}function qe(n,e,t,r,i){var a,u=this,l=i.options;j(r,"_uid")?(a=Object.create(r))._original=r:(a=r,r=r._original);var c=s(l._compiled),p=!c;this.data=n,this.props=e,this.children=t,this.parent=r,this.listeners=n.on||o,this.injections=me(l.inject,r),this.slots=function(){return u.$slots||be(n.scopedSlots,u.$slots=he(t,r)),u.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return be(n.scopedSlots,this.slots())}}),c&&(this.$options=l,this.$slots=this.slots(),this.$scopedSlots=be(n.scopedSlots,this.$slots)),l._scopeId?this._c=function(n,e,t,o){var i=Ue(a,n,e,t,o,p);return i&&!Array.isArray(i)&&(i.fnScopeId=l._scopeId,i.fnContext=r),i}:this._c=function(n,e,t,r){return Ue(a,n,e,t,r,p)}}function Re(n,e,t,r,o){var i=yn(n);return i.fnContext=t,i.fnOptions=r,e.slot&&((i.data||(i.data={})).slot=e.slot),i}function De(n,e){for(var t in e)n[T(t)]=e[t]}Me(qe.prototype);var Le={init:function(n,e){if(n.componentInstance&&!n.componentInstance._isDestroyed&&n.data.keepAlive){var t=n;Le.prepatch(t,t)}else{(n.componentInstance=function(n,e){var t={_isComponent:!0,_parentVnode:n,parent:e},r=n.data.inlineTemplate;a(r)&&(t.render=r.render,t.staticRenderFns=r.staticRenderFns);return new n.componentOptions.Ctor(t)}(n,Qe)).$mount(e?n.elm:void 0,e)}},prepatch:function(n,e){var t=e.componentOptions;!function(n,e,t,r,i){0;var a=r.data.scopedSlots,s=n.$scopedSlots,u=!!(a&&!a.$stable||s!==o&&!s.$stable||a&&n.$scopedSlots.$key!==a.$key||!a&&n.$scopedSlots.$key),l=!!(i||n.$options._renderChildren||u);n.$options._parentVnode=r,n.$vnode=r,n._vnode&&(n._vnode.parent=r);if(n.$options._renderChildren=i,n.$attrs=r.data.attrs||o,n.$listeners=t||o,e&&n.$options.props){Vn(!1);for(var c=n._props,p=n.$options._propKeys||[],d=0;d<p.length;d++){var v=p[d],m=n.$options.props;c[v]=$n(v,m,e,n)}Vn(!0),n.$options.propsData=e}t=t||o;var h=n.$options._parentListeners;n.$options._parentListeners=t,Ye(n,t,h),l&&(n.$slots=he(i,r.context),n.$forceUpdate());0}(e.componentInstance=n.componentInstance,t.propsData,t.listeners,e,t.children)},insert:function(n){var e,t=n.context,r=n.componentInstance;r._isMounted||(r._isMounted=!0,tt(r,"mounted")),n.data.keepAlive&&(t._isMounted?((e=r)._inactive=!1,ot.push(e)):et(r,!0))},destroy:function(n){var e=n.componentInstance;e._isDestroyed||(n.data.keepAlive?function n(e,t){if(t&&(e._directInactive=!0,nt(e)))return;if(!e._inactive){e._inactive=!0;for(var r=0;r<e.$children.length;r++)n(e.$children[r]);tt(e,"deactivated")}}(e,!0):e.$destroy())}},$e=Object.keys(Le);function Ne(n,e,t,r,u){if(!i(n)){var c=t.$options._base;if(l(n)&&(n=c.extend(n)),"function"==typeof n){var p;if(i(n.cid)&&void 0===(n=function(n,e){if(s(n.error)&&a(n.errorComp))return n.errorComp;if(a(n.resolved))return n.resolved;var t=He;t&&a(n.owners)&&-1===n.owners.indexOf(t)&&n.owners.push(t);if(s(n.loading)&&a(n.loadingComp))return n.loadingComp;if(t&&!a(n.owners)){var r=n.owners=[t],o=!0,u=null,c=null;t.$on("hook:destroyed",(function(){return x(r,t)}));var p=function(n){for(var e=0,t=r.length;e<t;e++)r[e].$forceUpdate();n&&(r.length=0,null!==u&&(clearTimeout(u),u=null),null!==c&&(clearTimeout(c),c=null))},d=R((function(t){n.resolved=Je(t,e),o?r.length=0:p(!0)})),v=R((function(e){a(n.errorComp)&&(n.error=!0,p(!0))})),h=n(d,v);return l(h)&&(m(h)?i(n.resolved)&&h.then(d,v):m(h.component)&&(h.component.then(d,v),a(h.error)&&(n.errorComp=Je(h.error,e)),a(h.loading)&&(n.loadingComp=Je(h.loading,e),0===h.delay?n.loading=!0:u=setTimeout((function(){u=null,i(n.resolved)&&i(n.error)&&(n.loading=!0,p(!1))}),h.delay||200)),a(h.timeout)&&(c=setTimeout((function(){c=null,i(n.resolved)&&v(null)}),h.timeout)))),o=!1,n.loading?n.loadingComp:n.resolved}}(p=n,c)))return function(n,e,t,r,o){var i=bn();return i.asyncFactory=n,i.asyncMeta={data:e,context:t,children:r,tag:o},i}(p,e,t,r,u);e=e||{},Tt(n),a(e.model)&&function(n,e){var t=n.model&&n.model.prop||"value",r=n.model&&n.model.event||"input";(e.attrs||(e.attrs={}))[t]=e.model.value;var o=e.on||(e.on={}),i=o[r],s=e.model.callback;a(i)?(Array.isArray(i)?-1===i.indexOf(s):i!==s)&&(o[r]=[s].concat(i)):o[r]=s}(n.options,e);var d=function(n,e,t){var r=e.options.props;if(!i(r)){var o={},s=n.attrs,u=n.props;if(a(s)||a(u))for(var l in r){var c=_(l);pe(o,u,l,c,!0)||pe(o,s,l,c,!1)}return o}}(e,n);if(s(n.options.functional))return function(n,e,t,r,i){var s=n.options,u={},l=s.props;if(a(l))for(var c in l)u[c]=$n(c,l,e||o);else a(t.attrs)&&De(u,t.attrs),a(t.props)&&De(u,t.props);var p=new qe(t,u,i,r,n),d=s.render.call(null,p._c,p);if(d instanceof fn)return Re(d,t,p.parent,s,p);if(Array.isArray(d)){for(var v=de(d)||[],m=new Array(v.length),h=0;h<v.length;h++)m[h]=Re(v[h],t,p.parent,s,p);return m}}(n,d,e,t,r);var v=e.on;if(e.on=e.nativeOn,s(n.options.abstract)){var h=e.slot;e={},h&&(e.slot=h)}!function(n){for(var e=n.hook||(n.hook={}),t=0;t<$e.length;t++){var r=$e[t],o=e[r],i=Le[r];o===i||o&&o._merged||(e[r]=o?Be(i,o):i)}}(e);var f=n.options.name||u;return new fn("vue-component-"+n.cid+(f?"-"+f:""),e,void 0,void 0,void 0,t,{Ctor:n,propsData:d,listeners:v,tag:u,children:r},p)}}}function Be(n,e){var t=function(t,r){n(t,r),e(t,r)};return t._merged=!0,t}function Ue(n,e,t,r,o,c){return(Array.isArray(t)||u(t))&&(o=r,r=t,t=void 0),s(c)&&(o=2),function(n,e,t,r,o){if(a(t)&&a(t.__ob__))return bn();a(t)&&a(t.is)&&(e=t.is);if(!e)return bn();0;Array.isArray(r)&&"function"==typeof r[0]&&((t=t||{}).scopedSlots={default:r[0]},r.length=0);2===o?r=de(r):1===o&&(r=function(n){for(var e=0;e<n.length;e++)if(Array.isArray(n[e]))return Array.prototype.concat.apply([],n);return n}(r));var u,c;if("string"==typeof e){var p;c=n.$vnode&&n.$vnode.ns||$.getTagNamespace(e),u=$.isReservedTag(e)?new fn($.parsePlatformTagName(e),t,r,void 0,void 0,n):t&&t.pre||!a(p=Ln(n.$options,"components",e))?new fn(e,t,r,void 0,void 0,n):Ne(p,t,n,r,e)}else u=Ne(e,t,n,r);return Array.isArray(u)?u:a(u)?(a(c)&&function n(e,t,r){e.ns=t,"foreignObject"===e.tag&&(t=void 0,r=!0);if(a(e.children))for(var o=0,u=e.children.length;o<u;o++){var l=e.children[o];a(l.tag)&&(i(l.ns)||s(r)&&"svg"!==l.tag)&&n(l,t,r)}}(u,c),a(t)&&function(n){l(n.style)&&ae(n.style);l(n.class)&&ae(n.class)}(t),u):bn()}(n,e,t,r,o)}var Fe,He=null;function Je(n,e){return(n.__esModule||ln&&"Module"===n[Symbol.toStringTag])&&(n=n.default),l(n)?e.extend(n):n}function We(n){if(Array.isArray(n))for(var e=0;e<n.length;e++){var t=n[e];if(a(t)&&(a(t.componentOptions)||ge(t)))return t}}function Ge(n,e){Fe.$on(n,e)}function Xe(n,e){Fe.$off(n,e)}function Ke(n,e){var t=Fe;return function r(){var o=e.apply(null,arguments);null!==o&&t.$off(n,r)}}function Ye(n,e,t){Fe=n,le(e,t||{},Ge,Xe,Ke,n),Fe=void 0}var Qe=null;function Ze(n){var e=Qe;return Qe=n,function(){Qe=e}}function nt(n){for(;n&&(n=n.$parent);)if(n._inactive)return!0;return!1}function et(n,e){if(e){if(n._directInactive=!1,nt(n))return}else if(n._directInactive)return;if(n._inactive||null===n._inactive){n._inactive=!1;for(var t=0;t<n.$children.length;t++)et(n.$children[t]);tt(n,"activated")}}function tt(n,e){mn();var t=n.$options[e],r=e+" hook";if(t)for(var o=0,i=t.length;o<i;o++)Jn(t[o],n,null,n,r);n._hasHookEvent&&n.$emit("hook:"+e),hn()}var rt=[],ot=[],it={},at=!1,st=!1,ut=0;var lt=0,ct=Date.now;if(J&&!K){var pt=window.performance;pt&&"function"==typeof pt.now&&ct()>document.createEvent("Event").timeStamp&&(ct=function(){return pt.now()})}function dt(){var n,e;for(lt=ct(),st=!0,rt.sort((function(n,e){return n.id-e.id})),ut=0;ut<rt.length;ut++)(n=rt[ut]).before&&n.before(),e=n.id,it[e]=null,n.run();var t=ot.slice(),r=rt.slice();ut=rt.length=ot.length=0,it={},at=st=!1,function(n){for(var e=0;e<n.length;e++)n[e]._inactive=!0,et(n[e],!0)}(t),function(n){var e=n.length;for(;e--;){var t=n[e],r=t.vm;r._watcher===t&&r._isMounted&&!r._isDestroyed&&tt(r,"updated")}}(r),an&&$.devtools&&an.emit("flush")}var vt=0,mt=function(n,e,t,r,o){this.vm=n,o&&(n._watcher=this),n._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++vt,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new un,this.newDepIds=new un,this.expression="","function"==typeof e?this.getter=e:(this.getter=function(n){if(!U.test(n)){var e=n.split(".");return function(n){for(var t=0;t<e.length;t++){if(!n)return;n=n[e[t]]}return n}}}(e),this.getter||(this.getter=E)),this.value=this.lazy?void 0:this.get()};mt.prototype.get=function(){var n;mn(this);var e=this.vm;try{n=this.getter.call(e,e)}catch(n){if(!this.user)throw n;Hn(n,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&ae(n),hn(),this.cleanupDeps()}return n},mt.prototype.addDep=function(n){var e=n.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(n),this.depIds.has(e)||n.addSub(this))},mt.prototype.cleanupDeps=function(){for(var n=this.deps.length;n--;){var e=this.deps[n];this.newDepIds.has(e.id)||e.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},mt.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(n){var e=n.id;if(null==it[e]){if(it[e]=!0,st){for(var t=rt.length-1;t>ut&&rt[t].id>n.id;)t--;rt.splice(t+1,0,n)}else rt.push(n);at||(at=!0,oe(dt))}}(this)},mt.prototype.run=function(){if(this.active){var n=this.get();if(n!==this.value||l(n)||this.deep){var e=this.value;if(this.value=n,this.user){var t='callback for watcher "'+this.expression+'"';Jn(this.cb,this.vm,[n,e],this.vm,t)}else this.cb.call(this.vm,n,e)}}},mt.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},mt.prototype.depend=function(){for(var n=this.deps.length;n--;)this.deps[n].depend()},mt.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||x(this.vm._watchers,this);for(var n=this.deps.length;n--;)this.deps[n].removeSub(this);this.active=!1}};var ht={enumerable:!0,configurable:!0,get:E,set:E};function ft(n,e,t){ht.get=function(){return this[e][t]},ht.set=function(n){this[e][t]=n},Object.defineProperty(n,t,ht)}function gt(n){n._watchers=[];var e=n.$options;e.props&&function(n,e){var t=n.$options.propsData||{},r=n._props={},o=n.$options._propKeys=[];n.$parent&&Vn(!1);var i=function(i){o.push(i);var a=$n(i,e,t,n);In(r,i,a),i in n||ft(n,"_props",i)};for(var a in e)i(a);Vn(!0)}(n,e.props),e.methods&&function(n,e){n.$options.props;for(var t in e)n[t]="function"!=typeof e[t]?E:I(e[t],n)}(n,e.methods),e.data?function(n){var e=n.$options.data;p(e=n._data="function"==typeof e?function(n,e){mn();try{return n.call(e,e)}catch(n){return Hn(n,e,"data()"),{}}finally{hn()}}(e,n):e||{})||(e={});var t=Object.keys(e),r=n.$options.props,o=(n.$options.methods,t.length);for(;o--;){var i=t[o];0,r&&j(r,i)||(a=void 0,36!==(a=(i+"").charCodeAt(0))&&95!==a&&ft(n,"_data",i))}var a;_n(e,!0)}(n):_n(n._data={},!0),e.computed&&function(n,e){var t=n._computedWatchers=Object.create(null),r=on();for(var o in e){var i=e[o],a="function"==typeof i?i:i.get;0,r||(t[o]=new mt(n,a||E,E,bt)),o in n||xt(n,o,i)}}(n,e.computed),e.watch&&e.watch!==en&&function(n,e){for(var t in e){var r=e[t];if(Array.isArray(r))for(var o=0;o<r.length;o++)wt(n,t,r[o]);else wt(n,t,r)}}(n,e.watch)}var bt={lazy:!0};function xt(n,e,t){var r=!on();"function"==typeof t?(ht.get=r?yt(e):jt(t),ht.set=E):(ht.get=t.get?r&&!1!==t.cache?yt(e):jt(t.get):E,ht.set=t.set||E),Object.defineProperty(n,e,ht)}function yt(n){return function(){var e=this._computedWatchers&&this._computedWatchers[n];if(e)return e.dirty&&e.evaluate(),dn.target&&e.depend(),e.value}}function jt(n){return function(){return n.call(this,this)}}function wt(n,e,t,r){return p(t)&&(r=t,t=t.handler),"string"==typeof t&&(t=n[t]),n.$watch(e,t,r)}var kt=0;function Tt(n){var e=n.options;if(n.super){var t=Tt(n.super);if(t!==n.superOptions){n.superOptions=t;var r=function(n){var e,t=n.options,r=n.sealedOptions;for(var o in t)t[o]!==r[o]&&(e||(e={}),e[o]=t[o]);return e}(n);r&&z(n.extendOptions,r),(e=n.options=Dn(t,n.extendOptions)).name&&(e.components[e.name]=n)}}return e}function Vt(n){this._init(n)}function St(n){n.cid=0;var e=1;n.extend=function(n){n=n||{};var t=this,r=t.cid,o=n._Ctor||(n._Ctor={});if(o[r])return o[r];var i=n.name||t.options.name;var a=function(n){this._init(n)};return(a.prototype=Object.create(t.prototype)).constructor=a,a.cid=e++,a.options=Dn(t.options,n),a.super=t,a.options.props&&function(n){var e=n.options.props;for(var t in e)ft(n.prototype,"_props",t)}(a),a.options.computed&&function(n){var e=n.options.computed;for(var t in e)xt(n.prototype,t,e[t])}(a),a.extend=t.extend,a.mixin=t.mixin,a.use=t.use,D.forEach((function(n){a[n]=t[n]})),i&&(a.options.components[i]=a),a.superOptions=t.options,a.extendOptions=n,a.sealedOptions=z({},a.options),o[r]=a,a}}function _t(n){return n&&(n.Ctor.options.name||n.tag)}function It(n,e){return Array.isArray(n)?n.indexOf(e)>-1:"string"==typeof n?n.split(",").indexOf(e)>-1:!!d(n)&&n.test(e)}function At(n,e){var t=n.cache,r=n.keys,o=n._vnode;for(var i in t){var a=t[i];if(a){var s=a.name;s&&!e(s)&&zt(t,i,r,o)}}}function zt(n,e,t,r){var o=n[e];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),n[e]=null,x(t,e)}Vt.prototype._init=function(n){var e=this;e._uid=kt++,e._isVue=!0,n&&n._isComponent?function(n,e){var t=n.$options=Object.create(n.constructor.options),r=e._parentVnode;t.parent=e.parent,t._parentVnode=r;var o=r.componentOptions;t.propsData=o.propsData,t._parentListeners=o.listeners,t._renderChildren=o.children,t._componentTag=o.tag,e.render&&(t.render=e.render,t.staticRenderFns=e.staticRenderFns)}(e,n):e.$options=Dn(Tt(e.constructor),n||{},e),e._renderProxy=e,e._self=e,function(n){var e=n.$options,t=e.parent;if(t&&!e.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(n)}n.$parent=t,n.$root=t?t.$root:n,n.$children=[],n.$refs={},n._watcher=null,n._inactive=null,n._directInactive=!1,n._isMounted=!1,n._isDestroyed=!1,n._isBeingDestroyed=!1}(e),function(n){n._events=Object.create(null),n._hasHookEvent=!1;var e=n.$options._parentListeners;e&&Ye(n,e)}(e),function(n){n._vnode=null,n._staticTrees=null;var e=n.$options,t=n.$vnode=e._parentVnode,r=t&&t.context;n.$slots=he(e._renderChildren,r),n.$scopedSlots=o,n._c=function(e,t,r,o){return Ue(n,e,t,r,o,!1)},n.$createElement=function(e,t,r,o){return Ue(n,e,t,r,o,!0)};var i=t&&t.data;In(n,"$attrs",i&&i.attrs||o,null,!0),In(n,"$listeners",e._parentListeners||o,null,!0)}(e),tt(e,"beforeCreate"),function(n){var e=me(n.$options.inject,n);e&&(Vn(!1),Object.keys(e).forEach((function(t){In(n,t,e[t])})),Vn(!0))}(e),gt(e),function(n){var e=n.$options.provide;e&&(n._provided="function"==typeof e?e.call(n):e)}(e),tt(e,"created"),e.$options.el&&e.$mount(e.$options.el)},function(n){var e={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(n.prototype,"$data",e),Object.defineProperty(n.prototype,"$props",t),n.prototype.$set=An,n.prototype.$delete=zn,n.prototype.$watch=function(n,e,t){if(p(e))return wt(this,n,e,t);(t=t||{}).user=!0;var r=new mt(this,n,e,t);if(t.immediate){var o='callback for immediate watcher "'+r.expression+'"';mn(),Jn(e,this,[r.value],this,o),hn()}return function(){r.teardown()}}}(Vt),function(n){var e=/^hook:/;n.prototype.$on=function(n,t){var r=this;if(Array.isArray(n))for(var o=0,i=n.length;o<i;o++)r.$on(n[o],t);else(r._events[n]||(r._events[n]=[])).push(t),e.test(n)&&(r._hasHookEvent=!0);return r},n.prototype.$once=function(n,e){var t=this;function r(){t.$off(n,r),e.apply(t,arguments)}return r.fn=e,t.$on(n,r),t},n.prototype.$off=function(n,e){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(Array.isArray(n)){for(var r=0,o=n.length;r<o;r++)t.$off(n[r],e);return t}var i,a=t._events[n];if(!a)return t;if(!e)return t._events[n]=null,t;for(var s=a.length;s--;)if((i=a[s])===e||i.fn===e){a.splice(s,1);break}return t},n.prototype.$emit=function(n){var e=this,t=e._events[n];if(t){t=t.length>1?A(t):t;for(var r=A(arguments,1),o='event handler for "'+n+'"',i=0,a=t.length;i<a;i++)Jn(t[i],e,r,e,o)}return e}}(Vt),function(n){n.prototype._update=function(n,e){var t=this,r=t.$el,o=t._vnode,i=Ze(t);t._vnode=n,t.$el=o?t.__patch__(o,n):t.__patch__(t.$el,n,e,!1),i(),r&&(r.__vue__=null),t.$el&&(t.$el.__vue__=t),t.$vnode&&t.$parent&&t.$vnode===t.$parent._vnode&&(t.$parent.$el=t.$el)},n.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},n.prototype.$destroy=function(){var n=this;if(!n._isBeingDestroyed){tt(n,"beforeDestroy"),n._isBeingDestroyed=!0;var e=n.$parent;!e||e._isBeingDestroyed||n.$options.abstract||x(e.$children,n),n._watcher&&n._watcher.teardown();for(var t=n._watchers.length;t--;)n._watchers[t].teardown();n._data.__ob__&&n._data.__ob__.vmCount--,n._isDestroyed=!0,n.__patch__(n._vnode,null),tt(n,"destroyed"),n.$off(),n.$el&&(n.$el.__vue__=null),n.$vnode&&(n.$vnode.parent=null)}}}(Vt),function(n){Me(n.prototype),n.prototype.$nextTick=function(n){return oe(n,this)},n.prototype._render=function(){var n,e=this,t=e.$options,r=t.render,o=t._parentVnode;o&&(e.$scopedSlots=be(o.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=o;try{He=e,n=r.call(e._renderProxy,e.$createElement)}catch(t){Hn(t,e,"render"),n=e._vnode}finally{He=null}return Array.isArray(n)&&1===n.length&&(n=n[0]),n instanceof fn||(n=bn()),n.parent=o,n}}(Vt);var Ct=[String,RegExp,Array],Et={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Ct,exclude:Ct,max:[String,Number]},methods:{cacheVNode:function(){var n=this.cache,e=this.keys,t=this.vnodeToCache,r=this.keyToCache;if(t){var o=t.tag,i=t.componentInstance,a=t.componentOptions;n[r]={name:_t(a),tag:o,componentInstance:i},e.push(r),this.max&&e.length>parseInt(this.max)&&zt(n,e[0],e,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var n in this.cache)zt(this.cache,n,this.keys)},mounted:function(){var n=this;this.cacheVNode(),this.$watch("include",(function(e){At(n,(function(n){return It(e,n)}))})),this.$watch("exclude",(function(e){At(n,(function(n){return!It(e,n)}))}))},updated:function(){this.cacheVNode()},render:function(){var n=this.$slots.default,e=We(n),t=e&&e.componentOptions;if(t){var r=_t(t),o=this.include,i=this.exclude;if(o&&(!r||!It(o,r))||i&&r&&It(i,r))return e;var a=this.cache,s=this.keys,u=null==e.key?t.Ctor.cid+(t.tag?"::"+t.tag:""):e.key;a[u]?(e.componentInstance=a[u].componentInstance,x(s,u),s.push(u)):(this.vnodeToCache=e,this.keyToCache=u),e.data.keepAlive=!0}return e||n&&n[0]}}};!function(n){var e={get:function(){return $}};Object.defineProperty(n,"config",e),n.util={warn:cn,extend:z,mergeOptions:Dn,defineReactive:In},n.set=An,n.delete=zn,n.nextTick=oe,n.observable=function(n){return _n(n),n},n.options=Object.create(null),D.forEach((function(e){n.options[e+"s"]=Object.create(null)})),n.options._base=n,z(n.options.components,Et),function(n){n.use=function(n){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(n)>-1)return this;var t=A(arguments,1);return t.unshift(this),"function"==typeof n.install?n.install.apply(n,t):"function"==typeof n&&n.apply(null,t),e.push(n),this}}(n),function(n){n.mixin=function(n){return this.options=Dn(this.options,n),this}}(n),St(n),function(n){D.forEach((function(e){n[e]=function(n,t){return t?("component"===e&&p(t)&&(t.name=t.name||n,t=this.options._base.extend(t)),"directive"===e&&"function"==typeof t&&(t={bind:t,update:t}),this.options[e+"s"][n]=t,t):this.options[e+"s"][n]}}))}(n)}(Vt),Object.defineProperty(Vt.prototype,"$isServer",{get:on}),Object.defineProperty(Vt.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Vt,"FunctionalRenderContext",{value:qe}),Vt.version="2.6.14";var Pt=g("style,class"),Ot=g("input,textarea,option,select,progress"),Mt=g("contenteditable,draggable,spellcheck"),qt=g("events,caret,typing,plaintext-only"),Rt=g("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),Dt="http://www.w3.org/1999/xlink",Lt=function(n){return":"===n.charAt(5)&&"xlink"===n.slice(0,5)},$t=function(n){return Lt(n)?n.slice(6,n.length):""},Nt=function(n){return null==n||!1===n};function Bt(n){for(var e=n.data,t=n,r=n;a(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=Ut(r.data,e));for(;a(t=t.parent);)t&&t.data&&(e=Ut(e,t.data));return function(n,e){if(a(n)||a(e))return Ft(n,Ht(e));return""}(e.staticClass,e.class)}function Ut(n,e){return{staticClass:Ft(n.staticClass,e.staticClass),class:a(n.class)?[n.class,e.class]:e.class}}function Ft(n,e){return n?e?n+" "+e:n:e||""}function Ht(n){return Array.isArray(n)?function(n){for(var e,t="",r=0,o=n.length;r<o;r++)a(e=Ht(n[r]))&&""!==e&&(t&&(t+=" "),t+=e);return t}(n):l(n)?function(n){var e="";for(var t in n)n[t]&&(e&&(e+=" "),e+=t);return e}(n):"string"==typeof n?n:""}var Jt={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Wt=g("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Gt=g("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Xt=function(n){return Wt(n)||Gt(n)};var Kt=Object.create(null);var Yt=g("text,number,password,search,email,tel,url");var Qt=Object.freeze({createElement:function(n,e){var t=document.createElement(n);return"select"!==n||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(n,e){return document.createElementNS(Jt[n],e)},createTextNode:function(n){return document.createTextNode(n)},createComment:function(n){return document.createComment(n)},insertBefore:function(n,e,t){n.insertBefore(e,t)},removeChild:function(n,e){n.removeChild(e)},appendChild:function(n,e){n.appendChild(e)},parentNode:function(n){return n.parentNode},nextSibling:function(n){return n.nextSibling},tagName:function(n){return n.tagName},setTextContent:function(n,e){n.textContent=e},setStyleScope:function(n,e){n.setAttribute(e,"")}}),Zt={create:function(n,e){nr(e)},update:function(n,e){n.data.ref!==e.data.ref&&(nr(n,!0),nr(e))},destroy:function(n){nr(n,!0)}};function nr(n,e){var t=n.data.ref;if(a(t)){var r=n.context,o=n.componentInstance||n.elm,i=r.$refs;e?Array.isArray(i[t])?x(i[t],o):i[t]===o&&(i[t]=void 0):n.data.refInFor?Array.isArray(i[t])?i[t].indexOf(o)<0&&i[t].push(o):i[t]=[o]:i[t]=o}}var er=new fn("",{},[]),tr=["create","activate","update","remove","destroy"];function rr(n,e){return n.key===e.key&&n.asyncFactory===e.asyncFactory&&(n.tag===e.tag&&n.isComment===e.isComment&&a(n.data)===a(e.data)&&function(n,e){if("input"!==n.tag)return!0;var t,r=a(t=n.data)&&a(t=t.attrs)&&t.type,o=a(t=e.data)&&a(t=t.attrs)&&t.type;return r===o||Yt(r)&&Yt(o)}(n,e)||s(n.isAsyncPlaceholder)&&i(e.asyncFactory.error))}function or(n,e,t){var r,o,i={};for(r=e;r<=t;++r)a(o=n[r].key)&&(i[o]=r);return i}var ir={create:ar,update:ar,destroy:function(n){ar(n,er)}};function ar(n,e){(n.data.directives||e.data.directives)&&function(n,e){var t,r,o,i=n===er,a=e===er,s=ur(n.data.directives,n.context),u=ur(e.data.directives,e.context),l=[],c=[];for(t in u)r=s[t],o=u[t],r?(o.oldValue=r.value,o.oldArg=r.arg,cr(o,"update",e,n),o.def&&o.def.componentUpdated&&c.push(o)):(cr(o,"bind",e,n),o.def&&o.def.inserted&&l.push(o));if(l.length){var p=function(){for(var t=0;t<l.length;t++)cr(l[t],"inserted",e,n)};i?ce(e,"insert",p):p()}c.length&&ce(e,"postpatch",(function(){for(var t=0;t<c.length;t++)cr(c[t],"componentUpdated",e,n)}));if(!i)for(t in s)u[t]||cr(s[t],"unbind",n,n,a)}(n,e)}var sr=Object.create(null);function ur(n,e){var t,r,o=Object.create(null);if(!n)return o;for(t=0;t<n.length;t++)(r=n[t]).modifiers||(r.modifiers=sr),o[lr(r)]=r,r.def=Ln(e.$options,"directives",r.name);return o}function lr(n){return n.rawName||n.name+"."+Object.keys(n.modifiers||{}).join(".")}function cr(n,e,t,r,o){var i=n.def&&n.def[e];if(i)try{i(t.elm,n,t,r,o)}catch(r){Hn(r,t.context,"directive "+n.name+" "+e+" hook")}}var pr=[Zt,ir];function dr(n,e){var t=e.componentOptions;if(!(a(t)&&!1===t.Ctor.options.inheritAttrs||i(n.data.attrs)&&i(e.data.attrs))){var r,o,s=e.elm,u=n.data.attrs||{},l=e.data.attrs||{};for(r in a(l.__ob__)&&(l=e.data.attrs=z({},l)),l)o=l[r],u[r]!==o&&vr(s,r,o,e.data.pre);for(r in(K||Q)&&l.value!==u.value&&vr(s,"value",l.value),u)i(l[r])&&(Lt(r)?s.removeAttributeNS(Dt,$t(r)):Mt(r)||s.removeAttribute(r))}}function vr(n,e,t,r){r||n.tagName.indexOf("-")>-1?mr(n,e,t):Rt(e)?Nt(t)?n.removeAttribute(e):(t="allowfullscreen"===e&&"EMBED"===n.tagName?"true":e,n.setAttribute(e,t)):Mt(e)?n.setAttribute(e,function(n,e){return Nt(e)||"false"===e?"false":"contenteditable"===n&&qt(e)?e:"true"}(e,t)):Lt(e)?Nt(t)?n.removeAttributeNS(Dt,$t(e)):n.setAttributeNS(Dt,e,t):mr(n,e,t)}function mr(n,e,t){if(Nt(t))n.removeAttribute(e);else{if(K&&!Y&&"TEXTAREA"===n.tagName&&"placeholder"===e&&""!==t&&!n.__ieph){var r=function(e){e.stopImmediatePropagation(),n.removeEventListener("input",r)};n.addEventListener("input",r),n.__ieph=!0}n.setAttribute(e,t)}}var hr={create:dr,update:dr};function fr(n,e){var t=e.elm,r=e.data,o=n.data;if(!(i(r.staticClass)&&i(r.class)&&(i(o)||i(o.staticClass)&&i(o.class)))){var s=Bt(e),u=t._transitionClasses;a(u)&&(s=Ft(s,Ht(u))),s!==t._prevClass&&(t.setAttribute("class",s),t._prevClass=s)}}var gr,br={create:fr,update:fr};function xr(n,e,t){var r=gr;return function o(){var i=e.apply(null,arguments);null!==i&&wr(n,o,t,r)}}var yr=Kn&&!(nn&&Number(nn[1])<=53);function jr(n,e,t,r){if(yr){var o=lt,i=e;e=i._wrapper=function(n){if(n.target===n.currentTarget||n.timeStamp>=o||n.timeStamp<=0||n.target.ownerDocument!==document)return i.apply(this,arguments)}}gr.addEventListener(n,e,tn?{capture:t,passive:r}:t)}function wr(n,e,t,r){(r||gr).removeEventListener(n,e._wrapper||e,t)}function kr(n,e){if(!i(n.data.on)||!i(e.data.on)){var t=e.data.on||{},r=n.data.on||{};gr=e.elm,function(n){if(a(n.__r)){var e=K?"change":"input";n[e]=[].concat(n.__r,n[e]||[]),delete n.__r}a(n.__c)&&(n.change=[].concat(n.__c,n.change||[]),delete n.__c)}(t),le(t,r,jr,wr,xr,e.context),gr=void 0}}var Tr,Vr={create:kr,update:kr};function Sr(n,e){if(!i(n.data.domProps)||!i(e.data.domProps)){var t,r,o=e.elm,s=n.data.domProps||{},u=e.data.domProps||{};for(t in a(u.__ob__)&&(u=e.data.domProps=z({},u)),s)t in u||(o[t]="");for(t in u){if(r=u[t],"textContent"===t||"innerHTML"===t){if(e.children&&(e.children.length=0),r===s[t])continue;1===o.childNodes.length&&o.removeChild(o.childNodes[0])}if("value"===t&&"PROGRESS"!==o.tagName){o._value=r;var l=i(r)?"":String(r);_r(o,l)&&(o.value=l)}else if("innerHTML"===t&&Gt(o.tagName)&&i(o.innerHTML)){(Tr=Tr||document.createElement("div")).innerHTML="<svg>"+r+"</svg>";for(var c=Tr.firstChild;o.firstChild;)o.removeChild(o.firstChild);for(;c.firstChild;)o.appendChild(c.firstChild)}else if(r!==s[t])try{o[t]=r}catch(n){}}}}function _r(n,e){return!n.composing&&("OPTION"===n.tagName||function(n,e){var t=!0;try{t=document.activeElement!==n}catch(n){}return t&&n.value!==e}(n,e)||function(n,e){var t=n.value,r=n._vModifiers;if(a(r)){if(r.number)return f(t)!==f(e);if(r.trim)return t.trim()!==e.trim()}return t!==e}(n,e))}var Ir={create:Sr,update:Sr},Ar=w((function(n){var e={},t=/:(.+)/;return n.split(/;(?![^(]*\))/g).forEach((function(n){if(n){var r=n.split(t);r.length>1&&(e[r[0].trim()]=r[1].trim())}})),e}));function zr(n){var e=Cr(n.style);return n.staticStyle?z(n.staticStyle,e):e}function Cr(n){return Array.isArray(n)?C(n):"string"==typeof n?Ar(n):n}var Er,Pr=/^--/,Or=/\s*!important$/,Mr=function(n,e,t){if(Pr.test(e))n.style.setProperty(e,t);else if(Or.test(t))n.style.setProperty(_(e),t.replace(Or,""),"important");else{var r=Rr(e);if(Array.isArray(t))for(var o=0,i=t.length;o<i;o++)n.style[r]=t[o];else n.style[r]=t}},qr=["Webkit","Moz","ms"],Rr=w((function(n){if(Er=Er||document.createElement("div").style,"filter"!==(n=T(n))&&n in Er)return n;for(var e=n.charAt(0).toUpperCase()+n.slice(1),t=0;t<qr.length;t++){var r=qr[t]+e;if(r in Er)return r}}));function Dr(n,e){var t=e.data,r=n.data;if(!(i(t.staticStyle)&&i(t.style)&&i(r.staticStyle)&&i(r.style))){var o,s,u=e.elm,l=r.staticStyle,c=r.normalizedStyle||r.style||{},p=l||c,d=Cr(e.data.style)||{};e.data.normalizedStyle=a(d.__ob__)?z({},d):d;var v=function(n,e){var t,r={};if(e)for(var o=n;o.componentInstance;)(o=o.componentInstance._vnode)&&o.data&&(t=zr(o.data))&&z(r,t);(t=zr(n.data))&&z(r,t);for(var i=n;i=i.parent;)i.data&&(t=zr(i.data))&&z(r,t);return r}(e,!0);for(s in p)i(v[s])&&Mr(u,s,"");for(s in v)(o=v[s])!==p[s]&&Mr(u,s,null==o?"":o)}}var Lr={create:Dr,update:Dr},$r=/\s+/;function Nr(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split($r).forEach((function(e){return n.classList.add(e)})):n.classList.add(e);else{var t=" "+(n.getAttribute("class")||"")+" ";t.indexOf(" "+e+" ")<0&&n.setAttribute("class",(t+e).trim())}}function Br(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split($r).forEach((function(e){return n.classList.remove(e)})):n.classList.remove(e),n.classList.length||n.removeAttribute("class");else{for(var t=" "+(n.getAttribute("class")||"")+" ",r=" "+e+" ";t.indexOf(r)>=0;)t=t.replace(r," ");(t=t.trim())?n.setAttribute("class",t):n.removeAttribute("class")}}function Ur(n){if(n){if("object"==typeof n){var e={};return!1!==n.css&&z(e,Fr(n.name||"v")),z(e,n),e}return"string"==typeof n?Fr(n):void 0}}var Fr=w((function(n){return{enterClass:n+"-enter",enterToClass:n+"-enter-to",enterActiveClass:n+"-enter-active",leaveClass:n+"-leave",leaveToClass:n+"-leave-to",leaveActiveClass:n+"-leave-active"}})),Hr=J&&!Y,Jr="transition",Wr="transitionend",Gr="animation",Xr="animationend";Hr&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Jr="WebkitTransition",Wr="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Gr="WebkitAnimation",Xr="webkitAnimationEnd"));var Kr=J?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(n){return n()};function Yr(n){Kr((function(){Kr(n)}))}function Qr(n,e){var t=n._transitionClasses||(n._transitionClasses=[]);t.indexOf(e)<0&&(t.push(e),Nr(n,e))}function Zr(n,e){n._transitionClasses&&x(n._transitionClasses,e),Br(n,e)}function no(n,e,t){var r=to(n,e),o=r.type,i=r.timeout,a=r.propCount;if(!o)return t();var s="transition"===o?Wr:Xr,u=0,l=function(){n.removeEventListener(s,c),t()},c=function(e){e.target===n&&++u>=a&&l()};setTimeout((function(){u<a&&l()}),i+1),n.addEventListener(s,c)}var eo=/\b(transform|all)(,|$)/;function to(n,e){var t,r=window.getComputedStyle(n),o=(r[Jr+"Delay"]||"").split(", "),i=(r[Jr+"Duration"]||"").split(", "),a=ro(o,i),s=(r[Gr+"Delay"]||"").split(", "),u=(r[Gr+"Duration"]||"").split(", "),l=ro(s,u),c=0,p=0;return"transition"===e?a>0&&(t="transition",c=a,p=i.length):"animation"===e?l>0&&(t="animation",c=l,p=u.length):p=(t=(c=Math.max(a,l))>0?a>l?"transition":"animation":null)?"transition"===t?i.length:u.length:0,{type:t,timeout:c,propCount:p,hasTransform:"transition"===t&&eo.test(r[Jr+"Property"])}}function ro(n,e){for(;n.length<e.length;)n=n.concat(n);return Math.max.apply(null,e.map((function(e,t){return oo(e)+oo(n[t])})))}function oo(n){return 1e3*Number(n.slice(0,-1).replace(",","."))}function io(n,e){var t=n.elm;a(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var r=Ur(n.data.transition);if(!i(r)&&!a(t._enterCb)&&1===t.nodeType){for(var o=r.css,s=r.type,u=r.enterClass,c=r.enterToClass,p=r.enterActiveClass,d=r.appearClass,v=r.appearToClass,m=r.appearActiveClass,h=r.beforeEnter,g=r.enter,b=r.afterEnter,x=r.enterCancelled,y=r.beforeAppear,j=r.appear,w=r.afterAppear,k=r.appearCancelled,T=r.duration,V=Qe,S=Qe.$vnode;S&&S.parent;)V=S.context,S=S.parent;var _=!V._isMounted||!n.isRootInsert;if(!_||j||""===j){var I=_&&d?d:u,A=_&&m?m:p,z=_&&v?v:c,C=_&&y||h,E=_&&"function"==typeof j?j:g,P=_&&w||b,O=_&&k||x,M=f(l(T)?T.enter:T);0;var q=!1!==o&&!Y,D=uo(E),L=t._enterCb=R((function(){q&&(Zr(t,z),Zr(t,A)),L.cancelled?(q&&Zr(t,I),O&&O(t)):P&&P(t),t._enterCb=null}));n.data.show||ce(n,"insert",(function(){var e=t.parentNode,r=e&&e._pending&&e._pending[n.key];r&&r.tag===n.tag&&r.elm._leaveCb&&r.elm._leaveCb(),E&&E(t,L)})),C&&C(t),q&&(Qr(t,I),Qr(t,A),Yr((function(){Zr(t,I),L.cancelled||(Qr(t,z),D||(so(M)?setTimeout(L,M):no(t,s,L)))}))),n.data.show&&(e&&e(),E&&E(t,L)),q||D||L()}}}function ao(n,e){var t=n.elm;a(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var r=Ur(n.data.transition);if(i(r)||1!==t.nodeType)return e();if(!a(t._leaveCb)){var o=r.css,s=r.type,u=r.leaveClass,c=r.leaveToClass,p=r.leaveActiveClass,d=r.beforeLeave,v=r.leave,m=r.afterLeave,h=r.leaveCancelled,g=r.delayLeave,b=r.duration,x=!1!==o&&!Y,y=uo(v),j=f(l(b)?b.leave:b);0;var w=t._leaveCb=R((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[n.key]=null),x&&(Zr(t,c),Zr(t,p)),w.cancelled?(x&&Zr(t,u),h&&h(t)):(e(),m&&m(t)),t._leaveCb=null}));g?g(k):k()}function k(){w.cancelled||(!n.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[n.key]=n),d&&d(t),x&&(Qr(t,u),Qr(t,p),Yr((function(){Zr(t,u),w.cancelled||(Qr(t,c),y||(so(j)?setTimeout(w,j):no(t,s,w)))}))),v&&v(t,w),x||y||w())}}function so(n){return"number"==typeof n&&!isNaN(n)}function uo(n){if(i(n))return!1;var e=n.fns;return a(e)?uo(Array.isArray(e)?e[0]:e):(n._length||n.length)>1}function lo(n,e){!0!==e.data.show&&io(e)}var co=function(n){var e,t,r={},o=n.modules,l=n.nodeOps;for(e=0;e<tr.length;++e)for(r[tr[e]]=[],t=0;t<o.length;++t)a(o[t][tr[e]])&&r[tr[e]].push(o[t][tr[e]]);function c(n){var e=l.parentNode(n);a(e)&&l.removeChild(e,n)}function p(n,e,t,o,i,u,c){if(a(n.elm)&&a(u)&&(n=u[c]=yn(n)),n.isRootInsert=!i,!function(n,e,t,o){var i=n.data;if(a(i)){var u=a(n.componentInstance)&&i.keepAlive;if(a(i=i.hook)&&a(i=i.init)&&i(n,!1),a(n.componentInstance))return d(n,e),v(t,n.elm,o),s(u)&&function(n,e,t,o){var i,s=n;for(;s.componentInstance;)if(s=s.componentInstance._vnode,a(i=s.data)&&a(i=i.transition)){for(i=0;i<r.activate.length;++i)r.activate[i](er,s);e.push(s);break}v(t,n.elm,o)}(n,e,t,o),!0}}(n,e,t,o)){var p=n.data,h=n.children,g=n.tag;a(g)?(n.elm=n.ns?l.createElementNS(n.ns,g):l.createElement(g,n),b(n),m(n,h,e),a(p)&&f(n,e),v(t,n.elm,o)):s(n.isComment)?(n.elm=l.createComment(n.text),v(t,n.elm,o)):(n.elm=l.createTextNode(n.text),v(t,n.elm,o))}}function d(n,e){a(n.data.pendingInsert)&&(e.push.apply(e,n.data.pendingInsert),n.data.pendingInsert=null),n.elm=n.componentInstance.$el,h(n)?(f(n,e),b(n)):(nr(n),e.push(n))}function v(n,e,t){a(n)&&(a(t)?l.parentNode(t)===n&&l.insertBefore(n,e,t):l.appendChild(n,e))}function m(n,e,t){if(Array.isArray(e)){0;for(var r=0;r<e.length;++r)p(e[r],t,n.elm,null,!0,e,r)}else u(n.text)&&l.appendChild(n.elm,l.createTextNode(String(n.text)))}function h(n){for(;n.componentInstance;)n=n.componentInstance._vnode;return a(n.tag)}function f(n,t){for(var o=0;o<r.create.length;++o)r.create[o](er,n);a(e=n.data.hook)&&(a(e.create)&&e.create(er,n),a(e.insert)&&t.push(n))}function b(n){var e;if(a(e=n.fnScopeId))l.setStyleScope(n.elm,e);else for(var t=n;t;)a(e=t.context)&&a(e=e.$options._scopeId)&&l.setStyleScope(n.elm,e),t=t.parent;a(e=Qe)&&e!==n.context&&e!==n.fnContext&&a(e=e.$options._scopeId)&&l.setStyleScope(n.elm,e)}function x(n,e,t,r,o,i){for(;r<=o;++r)p(t[r],i,n,e,!1,t,r)}function y(n){var e,t,o=n.data;if(a(o))for(a(e=o.hook)&&a(e=e.destroy)&&e(n),e=0;e<r.destroy.length;++e)r.destroy[e](n);if(a(e=n.children))for(t=0;t<n.children.length;++t)y(n.children[t])}function j(n,e,t){for(;e<=t;++e){var r=n[e];a(r)&&(a(r.tag)?(w(r),y(r)):c(r.elm))}}function w(n,e){if(a(e)||a(n.data)){var t,o=r.remove.length+1;for(a(e)?e.listeners+=o:e=function(n,e){function t(){0==--t.listeners&&c(n)}return t.listeners=e,t}(n.elm,o),a(t=n.componentInstance)&&a(t=t._vnode)&&a(t.data)&&w(t,e),t=0;t<r.remove.length;++t)r.remove[t](n,e);a(t=n.data.hook)&&a(t=t.remove)?t(n,e):e()}else c(n.elm)}function k(n,e,t,r){for(var o=t;o<r;o++){var i=e[o];if(a(i)&&rr(n,i))return o}}function T(n,e,t,o,u,c){if(n!==e){a(e.elm)&&a(o)&&(e=o[u]=yn(e));var d=e.elm=n.elm;if(s(n.isAsyncPlaceholder))a(e.asyncFactory.resolved)?_(n.elm,e,t):e.isAsyncPlaceholder=!0;else if(s(e.isStatic)&&s(n.isStatic)&&e.key===n.key&&(s(e.isCloned)||s(e.isOnce)))e.componentInstance=n.componentInstance;else{var v,m=e.data;a(m)&&a(v=m.hook)&&a(v=v.prepatch)&&v(n,e);var f=n.children,g=e.children;if(a(m)&&h(e)){for(v=0;v<r.update.length;++v)r.update[v](n,e);a(v=m.hook)&&a(v=v.update)&&v(n,e)}i(e.text)?a(f)&&a(g)?f!==g&&function(n,e,t,r,o){var s,u,c,d=0,v=0,m=e.length-1,h=e[0],f=e[m],g=t.length-1,b=t[0],y=t[g],w=!o;for(0;d<=m&&v<=g;)i(h)?h=e[++d]:i(f)?f=e[--m]:rr(h,b)?(T(h,b,r,t,v),h=e[++d],b=t[++v]):rr(f,y)?(T(f,y,r,t,g),f=e[--m],y=t[--g]):rr(h,y)?(T(h,y,r,t,g),w&&l.insertBefore(n,h.elm,l.nextSibling(f.elm)),h=e[++d],y=t[--g]):rr(f,b)?(T(f,b,r,t,v),w&&l.insertBefore(n,f.elm,h.elm),f=e[--m],b=t[++v]):(i(s)&&(s=or(e,d,m)),i(u=a(b.key)?s[b.key]:k(b,e,d,m))?p(b,r,n,h.elm,!1,t,v):rr(c=e[u],b)?(T(c,b,r,t,v),e[u]=void 0,w&&l.insertBefore(n,c.elm,h.elm)):p(b,r,n,h.elm,!1,t,v),b=t[++v]);d>m?x(n,i(t[g+1])?null:t[g+1].elm,t,v,g,r):v>g&&j(e,d,m)}(d,f,g,t,c):a(g)?(a(n.text)&&l.setTextContent(d,""),x(d,null,g,0,g.length-1,t)):a(f)?j(f,0,f.length-1):a(n.text)&&l.setTextContent(d,""):n.text!==e.text&&l.setTextContent(d,e.text),a(m)&&a(v=m.hook)&&a(v=v.postpatch)&&v(n,e)}}}function V(n,e,t){if(s(t)&&a(n.parent))n.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var S=g("attrs,class,staticClass,staticStyle,key");function _(n,e,t,r){var o,i=e.tag,u=e.data,l=e.children;if(r=r||u&&u.pre,e.elm=n,s(e.isComment)&&a(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(a(u)&&(a(o=u.hook)&&a(o=o.init)&&o(e,!0),a(o=e.componentInstance)))return d(e,t),!0;if(a(i)){if(a(l))if(n.hasChildNodes())if(a(o=u)&&a(o=o.domProps)&&a(o=o.innerHTML)){if(o!==n.innerHTML)return!1}else{for(var c=!0,p=n.firstChild,v=0;v<l.length;v++){if(!p||!_(p,l[v],t,r)){c=!1;break}p=p.nextSibling}if(!c||p)return!1}else m(e,l,t);if(a(u)){var h=!1;for(var g in u)if(!S(g)){h=!0,f(e,t);break}!h&&u.class&&ae(u.class)}}else n.data!==e.text&&(n.data=e.text);return!0}return function(n,e,t,o){if(!i(e)){var u,c=!1,d=[];if(i(n))c=!0,p(e,d);else{var v=a(n.nodeType);if(!v&&rr(n,e))T(n,e,d,null,null,o);else{if(v){if(1===n.nodeType&&n.hasAttribute("data-server-rendered")&&(n.removeAttribute("data-server-rendered"),t=!0),s(t)&&_(n,e,d))return V(e,d,!0),n;u=n,n=new fn(l.tagName(u).toLowerCase(),{},[],void 0,u)}var m=n.elm,f=l.parentNode(m);if(p(e,d,m._leaveCb?null:f,l.nextSibling(m)),a(e.parent))for(var g=e.parent,b=h(e);g;){for(var x=0;x<r.destroy.length;++x)r.destroy[x](g);if(g.elm=e.elm,b){for(var w=0;w<r.create.length;++w)r.create[w](er,g);var k=g.data.hook.insert;if(k.merged)for(var S=1;S<k.fns.length;S++)k.fns[S]()}else nr(g);g=g.parent}a(f)?j([n],0,0):a(n.tag)&&y(n)}}return V(e,d,c),e.elm}a(n)&&y(n)}}({nodeOps:Qt,modules:[hr,br,Vr,Ir,Lr,J?{create:lo,activate:lo,remove:function(n,e){!0!==n.data.show?ao(n,e):e()}}:{}].concat(pr)});Y&&document.addEventListener("selectionchange",(function(){var n=document.activeElement;n&&n.vmodel&&xo(n,"input")}));var po={inserted:function(n,e,t,r){"select"===t.tag?(r.elm&&!r.elm._vOptions?ce(t,"postpatch",(function(){po.componentUpdated(n,e,t)})):vo(n,e,t.context),n._vOptions=[].map.call(n.options,fo)):("textarea"===t.tag||Yt(n.type))&&(n._vModifiers=e.modifiers,e.modifiers.lazy||(n.addEventListener("compositionstart",go),n.addEventListener("compositionend",bo),n.addEventListener("change",bo),Y&&(n.vmodel=!0)))},componentUpdated:function(n,e,t){if("select"===t.tag){vo(n,e,t.context);var r=n._vOptions,o=n._vOptions=[].map.call(n.options,fo);if(o.some((function(n,e){return!M(n,r[e])})))(n.multiple?e.value.some((function(n){return ho(n,o)})):e.value!==e.oldValue&&ho(e.value,o))&&xo(n,"change")}}};function vo(n,e,t){mo(n,e,t),(K||Q)&&setTimeout((function(){mo(n,e,t)}),0)}function mo(n,e,t){var r=e.value,o=n.multiple;if(!o||Array.isArray(r)){for(var i,a,s=0,u=n.options.length;s<u;s++)if(a=n.options[s],o)i=q(r,fo(a))>-1,a.selected!==i&&(a.selected=i);else if(M(fo(a),r))return void(n.selectedIndex!==s&&(n.selectedIndex=s));o||(n.selectedIndex=-1)}}function ho(n,e){return e.every((function(e){return!M(e,n)}))}function fo(n){return"_value"in n?n._value:n.value}function go(n){n.target.composing=!0}function bo(n){n.target.composing&&(n.target.composing=!1,xo(n.target,"input"))}function xo(n,e){var t=document.createEvent("HTMLEvents");t.initEvent(e,!0,!0),n.dispatchEvent(t)}function yo(n){return!n.componentInstance||n.data&&n.data.transition?n:yo(n.componentInstance._vnode)}var jo={model:po,show:{bind:function(n,e,t){var r=e.value,o=(t=yo(t)).data&&t.data.transition,i=n.__vOriginalDisplay="none"===n.style.display?"":n.style.display;r&&o?(t.data.show=!0,io(t,(function(){n.style.display=i}))):n.style.display=r?i:"none"},update:function(n,e,t){var r=e.value;!r!=!e.oldValue&&((t=yo(t)).data&&t.data.transition?(t.data.show=!0,r?io(t,(function(){n.style.display=n.__vOriginalDisplay})):ao(t,(function(){n.style.display="none"}))):n.style.display=r?n.__vOriginalDisplay:"none")},unbind:function(n,e,t,r,o){o||(n.style.display=n.__vOriginalDisplay)}}},wo={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function ko(n){var e=n&&n.componentOptions;return e&&e.Ctor.options.abstract?ko(We(e.children)):n}function To(n){var e={},t=n.$options;for(var r in t.propsData)e[r]=n[r];var o=t._parentListeners;for(var i in o)e[T(i)]=o[i];return e}function Vo(n,e){if(/\d-keep-alive$/.test(e.tag))return n("keep-alive",{props:e.componentOptions.propsData})}var So=function(n){return n.tag||ge(n)},_o=function(n){return"show"===n.name},Io={name:"transition",props:wo,abstract:!0,render:function(n){var e=this,t=this.$slots.default;if(t&&(t=t.filter(So)).length){0;var r=this.mode;0;var o=t[0];if(function(n){for(;n=n.parent;)if(n.data.transition)return!0}(this.$vnode))return o;var i=ko(o);if(!i)return o;if(this._leaving)return Vo(n,o);var a="__transition-"+this._uid+"-";i.key=null==i.key?i.isComment?a+"comment":a+i.tag:u(i.key)?0===String(i.key).indexOf(a)?i.key:a+i.key:i.key;var s=(i.data||(i.data={})).transition=To(this),l=this._vnode,c=ko(l);if(i.data.directives&&i.data.directives.some(_o)&&(i.data.show=!0),c&&c.data&&!function(n,e){return e.key===n.key&&e.tag===n.tag}(i,c)&&!ge(c)&&(!c.componentInstance||!c.componentInstance._vnode.isComment)){var p=c.data.transition=z({},s);if("out-in"===r)return this._leaving=!0,ce(p,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),Vo(n,o);if("in-out"===r){if(ge(i))return l;var d,v=function(){d()};ce(s,"afterEnter",v),ce(s,"enterCancelled",v),ce(p,"delayLeave",(function(n){d=n}))}}return o}}},Ao=z({tag:String,moveClass:String},wo);function zo(n){n.elm._moveCb&&n.elm._moveCb(),n.elm._enterCb&&n.elm._enterCb()}function Co(n){n.data.newPos=n.elm.getBoundingClientRect()}function Eo(n){var e=n.data.pos,t=n.data.newPos,r=e.left-t.left,o=e.top-t.top;if(r||o){n.data.moved=!0;var i=n.elm.style;i.transform=i.WebkitTransform="translate("+r+"px,"+o+"px)",i.transitionDuration="0s"}}delete Ao.mode;var Po={Transition:Io,TransitionGroup:{props:Ao,beforeMount:function(){var n=this,e=this._update;this._update=function(t,r){var o=Ze(n);n.__patch__(n._vnode,n.kept,!1,!0),n._vnode=n.kept,o(),e.call(n,t,r)}},render:function(n){for(var e=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],i=this.children=[],a=To(this),s=0;s<o.length;s++){var u=o[s];if(u.tag)if(null!=u.key&&0!==String(u.key).indexOf("__vlist"))i.push(u),t[u.key]=u,(u.data||(u.data={})).transition=a;else;}if(r){for(var l=[],c=[],p=0;p<r.length;p++){var d=r[p];d.data.transition=a,d.data.pos=d.elm.getBoundingClientRect(),t[d.key]?l.push(d):c.push(d)}this.kept=n(e,null,l),this.removed=c}return n(e,null,i)},updated:function(){var n=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";n.length&&this.hasMove(n[0].elm,e)&&(n.forEach(zo),n.forEach(Co),n.forEach(Eo),this._reflow=document.body.offsetHeight,n.forEach((function(n){if(n.data.moved){var t=n.elm,r=t.style;Qr(t,e),r.transform=r.WebkitTransform=r.transitionDuration="",t.addEventListener(Wr,t._moveCb=function n(r){r&&r.target!==t||r&&!/transform$/.test(r.propertyName)||(t.removeEventListener(Wr,n),t._moveCb=null,Zr(t,e))})}})))},methods:{hasMove:function(n,e){if(!Hr)return!1;if(this._hasMove)return this._hasMove;var t=n.cloneNode();n._transitionClasses&&n._transitionClasses.forEach((function(n){Br(t,n)})),Nr(t,e),t.style.display="none",this.$el.appendChild(t);var r=to(t);return this.$el.removeChild(t),this._hasMove=r.hasTransform}}}};Vt.config.mustUseProp=function(n,e,t){return"value"===t&&Ot(n)&&"button"!==e||"selected"===t&&"option"===n||"checked"===t&&"input"===n||"muted"===t&&"video"===n},Vt.config.isReservedTag=Xt,Vt.config.isReservedAttr=Pt,Vt.config.getTagNamespace=function(n){return Gt(n)?"svg":"math"===n?"math":void 0},Vt.config.isUnknownElement=function(n){if(!J)return!0;if(Xt(n))return!1;if(n=n.toLowerCase(),null!=Kt[n])return Kt[n];var e=document.createElement(n);return n.indexOf("-")>-1?Kt[n]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:Kt[n]=/HTMLUnknownElement/.test(e.toString())},z(Vt.options.directives,jo),z(Vt.options.components,Po),Vt.prototype.__patch__=J?co:E,Vt.prototype.$mount=function(n,e){return function(n,e,t){var r;return n.$el=e,n.$options.render||(n.$options.render=bn),tt(n,"beforeMount"),r=function(){n._update(n._render(),t)},new mt(n,r,E,{before:function(){n._isMounted&&!n._isDestroyed&&tt(n,"beforeUpdate")}},!0),t=!1,null==n.$vnode&&(n._isMounted=!0,tt(n,"mounted")),n}(this,n=n&&J?function(n){if("string"==typeof n){var e=document.querySelector(n);return e||document.createElement("div")}return n}(n):void 0,e)},J&&setTimeout((function(){$.devtools&&an&&an.emit("init",Vt)}),0);var Oo=Vt;
/*!
  * vue-router v3.5.3
  * (c) 2021 Evan You
  * @license MIT
  */function Mo(n,e){for(var t in e)n[t]=e[t];return n}var qo=/[!'()*]/g,Ro=function(n){return"%"+n.charCodeAt(0).toString(16)},Do=/%2C/g,Lo=function(n){return encodeURIComponent(n).replace(qo,Ro).replace(Do,",")};function $o(n){try{return decodeURIComponent(n)}catch(n){0}return n}var No=function(n){return null==n||"object"==typeof n?n:String(n)};function Bo(n){var e={};return(n=n.trim().replace(/^(\?|#|&)/,""))?(n.split("&").forEach((function(n){var t=n.replace(/\+/g," ").split("="),r=$o(t.shift()),o=t.length>0?$o(t.join("=")):null;void 0===e[r]?e[r]=o:Array.isArray(e[r])?e[r].push(o):e[r]=[e[r],o]})),e):e}function Uo(n){var e=n?Object.keys(n).map((function(e){var t=n[e];if(void 0===t)return"";if(null===t)return Lo(e);if(Array.isArray(t)){var r=[];return t.forEach((function(n){void 0!==n&&(null===n?r.push(Lo(e)):r.push(Lo(e)+"="+Lo(n)))})),r.join("&")}return Lo(e)+"="+Lo(t)})).filter((function(n){return n.length>0})).join("&"):null;return e?"?"+e:""}var Fo=/\/?$/;function Ho(n,e,t,r){var o=r&&r.options.stringifyQuery,i=e.query||{};try{i=Jo(i)}catch(n){}var a={name:e.name||n&&n.name,meta:n&&n.meta||{},path:e.path||"/",hash:e.hash||"",query:i,params:e.params||{},fullPath:Xo(e,o),matched:n?Go(n):[]};return t&&(a.redirectedFrom=Xo(t,o)),Object.freeze(a)}function Jo(n){if(Array.isArray(n))return n.map(Jo);if(n&&"object"==typeof n){var e={};for(var t in n)e[t]=Jo(n[t]);return e}return n}var Wo=Ho(null,{path:"/"});function Go(n){for(var e=[];n;)e.unshift(n),n=n.parent;return e}function Xo(n,e){var t=n.path,r=n.query;void 0===r&&(r={});var o=n.hash;return void 0===o&&(o=""),(t||"/")+(e||Uo)(r)+o}function Ko(n,e,t){return e===Wo?n===e:!!e&&(n.path&&e.path?n.path.replace(Fo,"")===e.path.replace(Fo,"")&&(t||n.hash===e.hash&&Yo(n.query,e.query)):!(!n.name||!e.name)&&(n.name===e.name&&(t||n.hash===e.hash&&Yo(n.query,e.query)&&Yo(n.params,e.params))))}function Yo(n,e){if(void 0===n&&(n={}),void 0===e&&(e={}),!n||!e)return n===e;var t=Object.keys(n).sort(),r=Object.keys(e).sort();return t.length===r.length&&t.every((function(t,o){var i=n[t];if(r[o]!==t)return!1;var a=e[t];return null==i||null==a?i===a:"object"==typeof i&&"object"==typeof a?Yo(i,a):String(i)===String(a)}))}function Qo(n){for(var e=0;e<n.matched.length;e++){var t=n.matched[e];for(var r in t.instances){var o=t.instances[r],i=t.enteredCbs[r];if(o&&i){delete t.enteredCbs[r];for(var a=0;a<i.length;a++)o._isBeingDestroyed||i[a](o)}}}}var Zo={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(n,e){var t=e.props,r=e.children,o=e.parent,i=e.data;i.routerView=!0;for(var a=o.$createElement,s=t.name,u=o.$route,l=o._routerViewCache||(o._routerViewCache={}),c=0,p=!1;o&&o._routerRoot!==o;){var d=o.$vnode?o.$vnode.data:{};d.routerView&&c++,d.keepAlive&&o._directInactive&&o._inactive&&(p=!0),o=o.$parent}if(i.routerViewDepth=c,p){var v=l[s],m=v&&v.component;return m?(v.configProps&&ni(m,i,v.route,v.configProps),a(m,i,r)):a()}var h=u.matched[c],f=h&&h.components[s];if(!h||!f)return l[s]=null,a();l[s]={component:f},i.registerRouteInstance=function(n,e){var t=h.instances[s];(e&&t!==n||!e&&t===n)&&(h.instances[s]=e)},(i.hook||(i.hook={})).prepatch=function(n,e){h.instances[s]=e.componentInstance},i.hook.init=function(n){n.data.keepAlive&&n.componentInstance&&n.componentInstance!==h.instances[s]&&(h.instances[s]=n.componentInstance),Qo(u)};var g=h.props&&h.props[s];return g&&(Mo(l[s],{route:u,configProps:g}),ni(f,i,u,g)),a(f,i,r)}};function ni(n,e,t,r){var o=e.props=function(n,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(n);case"boolean":return e?n.params:void 0;default:0}}(t,r);if(o){o=e.props=Mo({},o);var i=e.attrs=e.attrs||{};for(var a in o)n.props&&a in n.props||(i[a]=o[a],delete o[a])}}function ei(n,e,t){var r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;var o=e.split("/");t&&o[o.length-1]||o.pop();for(var i=n.replace(/^\//,"").split("/"),a=0;a<i.length;a++){var s=i[a];".."===s?o.pop():"."!==s&&o.push(s)}return""!==o[0]&&o.unshift(""),o.join("/")}function ti(n){return n.replace(/\/+/g,"/")}var ri=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)},oi=bi,ii=ci,ai=function(n,e){return di(ci(n,e),e)},si=di,ui=gi,li=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function ci(n,e){for(var t,r=[],o=0,i=0,a="",s=e&&e.delimiter||"/";null!=(t=li.exec(n));){var u=t[0],l=t[1],c=t.index;if(a+=n.slice(i,c),i=c+u.length,l)a+=l[1];else{var p=n[i],d=t[2],v=t[3],m=t[4],h=t[5],f=t[6],g=t[7];a&&(r.push(a),a="");var b=null!=d&&null!=p&&p!==d,x="+"===f||"*"===f,y="?"===f||"*"===f,j=t[2]||s,w=m||h;r.push({name:v||o++,prefix:d||"",delimiter:j,optional:y,repeat:x,partial:b,asterisk:!!g,pattern:w?mi(w):g?".*":"[^"+vi(j)+"]+?"})}}return i<n.length&&(a+=n.substr(i)),a&&r.push(a),r}function pi(n){return encodeURI(n).replace(/[\/?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}))}function di(n,e){for(var t=new Array(n.length),r=0;r<n.length;r++)"object"==typeof n[r]&&(t[r]=new RegExp("^(?:"+n[r].pattern+")$",fi(e)));return function(e,r){for(var o="",i=e||{},a=(r||{}).pretty?pi:encodeURIComponent,s=0;s<n.length;s++){var u=n[s];if("string"!=typeof u){var l,c=i[u.name];if(null==c){if(u.optional){u.partial&&(o+=u.prefix);continue}throw new TypeError('Expected "'+u.name+'" to be defined')}if(ri(c)){if(!u.repeat)throw new TypeError('Expected "'+u.name+'" to not repeat, but received `'+JSON.stringify(c)+"`");if(0===c.length){if(u.optional)continue;throw new TypeError('Expected "'+u.name+'" to not be empty')}for(var p=0;p<c.length;p++){if(l=a(c[p]),!t[s].test(l))throw new TypeError('Expected all "'+u.name+'" to match "'+u.pattern+'", but received `'+JSON.stringify(l)+"`");o+=(0===p?u.prefix:u.delimiter)+l}}else{if(l=u.asterisk?encodeURI(c).replace(/[?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})):a(c),!t[s].test(l))throw new TypeError('Expected "'+u.name+'" to match "'+u.pattern+'", but received "'+l+'"');o+=u.prefix+l}}else o+=u}return o}}function vi(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function mi(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function hi(n,e){return n.keys=e,n}function fi(n){return n&&n.sensitive?"":"i"}function gi(n,e,t){ri(e)||(t=e||t,e=[]);for(var r=(t=t||{}).strict,o=!1!==t.end,i="",a=0;a<n.length;a++){var s=n[a];if("string"==typeof s)i+=vi(s);else{var u=vi(s.prefix),l="(?:"+s.pattern+")";e.push(s),s.repeat&&(l+="(?:"+u+l+")*"),i+=l=s.optional?s.partial?u+"("+l+")?":"(?:"+u+"("+l+"))?":u+"("+l+")"}}var c=vi(t.delimiter||"/"),p=i.slice(-c.length)===c;return r||(i=(p?i.slice(0,-c.length):i)+"(?:"+c+"(?=$))?"),i+=o?"$":r&&p?"":"(?="+c+"|$)",hi(new RegExp("^"+i,fi(t)),e)}function bi(n,e,t){return ri(e)||(t=e||t,e=[]),t=t||{},n instanceof RegExp?function(n,e){var t=n.source.match(/\((?!\?)/g);if(t)for(var r=0;r<t.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return hi(n,e)}(n,e):ri(n)?function(n,e,t){for(var r=[],o=0;o<n.length;o++)r.push(bi(n[o],e,t).source);return hi(new RegExp("(?:"+r.join("|")+")",fi(t)),e)}(n,e,t):function(n,e,t){return gi(ci(n,t),e,t)}(n,e,t)}oi.parse=ii,oi.compile=ai,oi.tokensToFunction=si,oi.tokensToRegExp=ui;var xi=Object.create(null);function yi(n,e,t){e=e||{};try{var r=xi[n]||(xi[n]=oi.compile(n));return"string"==typeof e.pathMatch&&(e[0]=e.pathMatch),r(e,{pretty:!0})}catch(n){return""}finally{delete e[0]}}function ji(n,e,t,r){var o="string"==typeof n?{path:n}:n;if(o._normalized)return o;if(o.name){var i=(o=Mo({},n)).params;return i&&"object"==typeof i&&(o.params=Mo({},i)),o}if(!o.path&&o.params&&e){(o=Mo({},o))._normalized=!0;var a=Mo(Mo({},e.params),o.params);if(e.name)o.name=e.name,o.params=a;else if(e.matched.length){var s=e.matched[e.matched.length-1].path;o.path=yi(s,a,e.path)}else 0;return o}var u=function(n){var e="",t="",r=n.indexOf("#");r>=0&&(e=n.slice(r),n=n.slice(0,r));var o=n.indexOf("?");return o>=0&&(t=n.slice(o+1),n=n.slice(0,o)),{path:n,query:t,hash:e}}(o.path||""),l=e&&e.path||"/",c=u.path?ei(u.path,l,t||o.append):l,p=function(n,e,t){void 0===e&&(e={});var r,o=t||Bo;try{r=o(n||"")}catch(n){r={}}for(var i in e){var a=e[i];r[i]=Array.isArray(a)?a.map(No):No(a)}return r}(u.query,o.query,r&&r.options.parseQuery),d=o.hash||u.hash;return d&&"#"!==d.charAt(0)&&(d="#"+d),{_normalized:!0,path:c,query:p,hash:d}}var wi,ki=function(){},Ti={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(n){var e=this,t=this.$router,r=this.$route,o=t.resolve(this.to,r,this.append),i=o.location,a=o.route,s=o.href,u={},l=t.options.linkActiveClass,c=t.options.linkExactActiveClass,p=null==l?"router-link-active":l,d=null==c?"router-link-exact-active":c,v=null==this.activeClass?p:this.activeClass,m=null==this.exactActiveClass?d:this.exactActiveClass,h=a.redirectedFrom?Ho(null,ji(a.redirectedFrom),null,t):a;u[m]=Ko(r,h,this.exactPath),u[v]=this.exact||this.exactPath?u[m]:function(n,e){return 0===n.path.replace(Fo,"/").indexOf(e.path.replace(Fo,"/"))&&(!e.hash||n.hash===e.hash)&&function(n,e){for(var t in e)if(!(t in n))return!1;return!0}(n.query,e.query)}(r,h);var f=u[m]?this.ariaCurrentValue:null,g=function(n){Vi(n)&&(e.replace?t.replace(i,ki):t.push(i,ki))},b={click:Vi};Array.isArray(this.event)?this.event.forEach((function(n){b[n]=g})):b[this.event]=g;var x={class:u},y=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:s,route:a,navigate:g,isActive:u[v],isExactActive:u[m]});if(y){if(1===y.length)return y[0];if(y.length>1||!y.length)return 0===y.length?n():n("span",{},y)}if("a"===this.tag)x.on=b,x.attrs={href:s,"aria-current":f};else{var j=function n(e){var t;if(e)for(var r=0;r<e.length;r++){if("a"===(t=e[r]).tag)return t;if(t.children&&(t=n(t.children)))return t}}(this.$slots.default);if(j){j.isStatic=!1;var w=j.data=Mo({},j.data);for(var k in w.on=w.on||{},w.on){var T=w.on[k];k in b&&(w.on[k]=Array.isArray(T)?T:[T])}for(var V in b)V in w.on?w.on[V].push(b[V]):w.on[V]=g;var S=j.data.attrs=Mo({},j.data.attrs);S.href=s,S["aria-current"]=f}else x.on=b}return n(this.tag,x,this.$slots.default)}};function Vi(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey||n.defaultPrevented||void 0!==n.button&&0!==n.button)){if(n.currentTarget&&n.currentTarget.getAttribute){var e=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return n.preventDefault&&n.preventDefault(),!0}}var Si="undefined"!=typeof window;function _i(n,e,t,r,o){var i=e||[],a=t||Object.create(null),s=r||Object.create(null);n.forEach((function(n){!function n(e,t,r,o,i,a){var s=o.path,u=o.name;0;var l=o.pathToRegexpOptions||{},c=function(n,e,t){t||(n=n.replace(/\/$/,""));if("/"===n[0])return n;if(null==e)return n;return ti(e.path+"/"+n)}(s,i,l.strict);"boolean"==typeof o.caseSensitive&&(l.sensitive=o.caseSensitive);var p={path:c,regex:Ii(c,l),components:o.components||{default:o.component},alias:o.alias?"string"==typeof o.alias?[o.alias]:o.alias:[],instances:{},enteredCbs:{},name:u,parent:i,matchAs:a,redirect:o.redirect,beforeEnter:o.beforeEnter,meta:o.meta||{},props:null==o.props?{}:o.components?o.props:{default:o.props}};o.children&&o.children.forEach((function(o){var i=a?ti(a+"/"+o.path):void 0;n(e,t,r,o,p,i)}));t[p.path]||(e.push(p.path),t[p.path]=p);if(void 0!==o.alias)for(var d=Array.isArray(o.alias)?o.alias:[o.alias],v=0;v<d.length;++v){0;var m={path:d[v],children:o.children};n(e,t,r,m,i,p.path||"/")}u&&(r[u]||(r[u]=p))}(i,a,s,n,o)}));for(var u=0,l=i.length;u<l;u++)"*"===i[u]&&(i.push(i.splice(u,1)[0]),l--,u--);return{pathList:i,pathMap:a,nameMap:s}}function Ii(n,e){return oi(n,[],e)}function Ai(n,e){var t=_i(n),r=t.pathList,o=t.pathMap,i=t.nameMap;function a(n,t,a){var s=ji(n,t,!1,e),l=s.name;if(l){var c=i[l];if(!c)return u(null,s);var p=c.regex.keys.filter((function(n){return!n.optional})).map((function(n){return n.name}));if("object"!=typeof s.params&&(s.params={}),t&&"object"==typeof t.params)for(var d in t.params)!(d in s.params)&&p.indexOf(d)>-1&&(s.params[d]=t.params[d]);return s.path=yi(c.path,s.params),u(c,s,a)}if(s.path){s.params={};for(var v=0;v<r.length;v++){var m=r[v],h=o[m];if(zi(h.regex,s.path,s.params))return u(h,s,a)}}return u(null,s)}function s(n,t){var r=n.redirect,o="function"==typeof r?r(Ho(n,t,null,e)):r;if("string"==typeof o&&(o={path:o}),!o||"object"!=typeof o)return u(null,t);var s=o,l=s.name,c=s.path,p=t.query,d=t.hash,v=t.params;if(p=s.hasOwnProperty("query")?s.query:p,d=s.hasOwnProperty("hash")?s.hash:d,v=s.hasOwnProperty("params")?s.params:v,l){i[l];return a({_normalized:!0,name:l,query:p,hash:d,params:v},void 0,t)}if(c){var m=function(n,e){return ei(n,e.parent?e.parent.path:"/",!0)}(c,n);return a({_normalized:!0,path:yi(m,v),query:p,hash:d},void 0,t)}return u(null,t)}function u(n,t,r){return n&&n.redirect?s(n,r||t):n&&n.matchAs?function(n,e,t){var r=a({_normalized:!0,path:yi(t,e.params)});if(r){var o=r.matched,i=o[o.length-1];return e.params=r.params,u(i,e)}return u(null,e)}(0,t,n.matchAs):Ho(n,t,r,e)}return{match:a,addRoute:function(n,e){var t="object"!=typeof n?i[n]:void 0;_i([e||n],r,o,i,t),t&&t.alias.length&&_i(t.alias.map((function(n){return{path:n,children:[e]}})),r,o,i,t)},getRoutes:function(){return r.map((function(n){return o[n]}))},addRoutes:function(n){_i(n,r,o,i)}}}function zi(n,e,t){var r=e.match(n);if(!r)return!1;if(!t)return!0;for(var o=1,i=r.length;o<i;++o){var a=n.keys[o-1];a&&(t[a.name||"pathMatch"]="string"==typeof r[o]?$o(r[o]):r[o])}return!0}var Ci=Si&&window.performance&&window.performance.now?window.performance:Date;function Ei(){return Ci.now().toFixed(3)}var Pi=Ei();function Oi(){return Pi}function Mi(n){return Pi=n}var qi=Object.create(null);function Ri(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var n=window.location.protocol+"//"+window.location.host,e=window.location.href.replace(n,""),t=Mo({},window.history.state);return t.key=Oi(),window.history.replaceState(t,"",e),window.addEventListener("popstate",$i),function(){window.removeEventListener("popstate",$i)}}function Di(n,e,t,r){if(n.app){var o=n.options.scrollBehavior;o&&n.app.$nextTick((function(){var i=function(){var n=Oi();if(n)return qi[n]}(),a=o.call(n,e,t,r?i:null);a&&("function"==typeof a.then?a.then((function(n){Hi(n,i)})).catch((function(n){0})):Hi(a,i))}))}}function Li(){var n=Oi();n&&(qi[n]={x:window.pageXOffset,y:window.pageYOffset})}function $i(n){Li(),n.state&&n.state.key&&Mi(n.state.key)}function Ni(n){return Ui(n.x)||Ui(n.y)}function Bi(n){return{x:Ui(n.x)?n.x:window.pageXOffset,y:Ui(n.y)?n.y:window.pageYOffset}}function Ui(n){return"number"==typeof n}var Fi=/^#\d/;function Hi(n,e){var t,r="object"==typeof n;if(r&&"string"==typeof n.selector){var o=Fi.test(n.selector)?document.getElementById(n.selector.slice(1)):document.querySelector(n.selector);if(o){var i=n.offset&&"object"==typeof n.offset?n.offset:{};e=function(n,e){var t=document.documentElement.getBoundingClientRect(),r=n.getBoundingClientRect();return{x:r.left-t.left-e.x,y:r.top-t.top-e.y}}(o,i={x:Ui((t=i).x)?t.x:0,y:Ui(t.y)?t.y:0})}else Ni(n)&&(e=Bi(n))}else r&&Ni(n)&&(e=Bi(n));e&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:e.x,top:e.y,behavior:n.behavior}):window.scrollTo(e.x,e.y))}var Ji,Wi=Si&&((-1===(Ji=window.navigator.userAgent).indexOf("Android 2.")&&-1===Ji.indexOf("Android 4.0")||-1===Ji.indexOf("Mobile Safari")||-1!==Ji.indexOf("Chrome")||-1!==Ji.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function Gi(n,e){Li();var t=window.history;try{if(e){var r=Mo({},t.state);r.key=Oi(),t.replaceState(r,"",n)}else t.pushState({key:Mi(Ei())},"",n)}catch(t){window.location[e?"replace":"assign"](n)}}function Xi(n){Gi(n,!0)}function Ki(n,e,t){var r=function(o){o>=n.length?t():n[o]?e(n[o],(function(){r(o+1)})):r(o+1)};r(0)}var Yi={redirected:2,aborted:4,cancelled:8,duplicated:16};function Qi(n,e){return na(n,e,Yi.redirected,'Redirected when going from "'+n.fullPath+'" to "'+function(n){if("string"==typeof n)return n;if("path"in n)return n.path;var e={};return ea.forEach((function(t){t in n&&(e[t]=n[t])})),JSON.stringify(e,null,2)}(e)+'" via a navigation guard.')}function Zi(n,e){return na(n,e,Yi.cancelled,'Navigation cancelled from "'+n.fullPath+'" to "'+e.fullPath+'" with a new navigation.')}function na(n,e,t,r){var o=new Error(r);return o._isRouter=!0,o.from=n,o.to=e,o.type=t,o}var ea=["params","query","hash"];function ta(n){return Object.prototype.toString.call(n).indexOf("Error")>-1}function ra(n,e){return ta(n)&&n._isRouter&&(null==e||n.type===e)}function oa(n){return function(e,t,r){var o=!1,i=0,a=null;ia(n,(function(n,e,t,s){if("function"==typeof n&&void 0===n.cid){o=!0,i++;var u,l=ua((function(e){var o;((o=e).__esModule||sa&&"Module"===o[Symbol.toStringTag])&&(e=e.default),n.resolved="function"==typeof e?e:wi.extend(e),t.components[s]=e,--i<=0&&r()})),c=ua((function(n){var e="Failed to resolve async component "+s+": "+n;a||(a=ta(n)?n:new Error(e),r(a))}));try{u=n(l,c)}catch(n){c(n)}if(u)if("function"==typeof u.then)u.then(l,c);else{var p=u.component;p&&"function"==typeof p.then&&p.then(l,c)}}})),o||r()}}function ia(n,e){return aa(n.map((function(n){return Object.keys(n.components).map((function(t){return e(n.components[t],n.instances[t],n,t)}))})))}function aa(n){return Array.prototype.concat.apply([],n)}var sa="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function ua(n){var e=!1;return function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];if(!e)return e=!0,n.apply(this,t)}}var la=function(n,e){this.router=n,this.base=function(n){if(!n)if(Si){var e=document.querySelector("base");n=(n=e&&e.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else n="/";"/"!==n.charAt(0)&&(n="/"+n);return n.replace(/\/$/,"")}(e),this.current=Wo,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function ca(n,e,t,r){var o=ia(n,(function(n,r,o,i){var a=function(n,e){"function"!=typeof n&&(n=wi.extend(n));return n.options[e]}(n,e);if(a)return Array.isArray(a)?a.map((function(n){return t(n,r,o,i)})):t(a,r,o,i)}));return aa(r?o.reverse():o)}function pa(n,e){if(e)return function(){return n.apply(e,arguments)}}la.prototype.listen=function(n){this.cb=n},la.prototype.onReady=function(n,e){this.ready?n():(this.readyCbs.push(n),e&&this.readyErrorCbs.push(e))},la.prototype.onError=function(n){this.errorCbs.push(n)},la.prototype.transitionTo=function(n,e,t){var r,o=this;try{r=this.router.match(n,this.current)}catch(n){throw this.errorCbs.forEach((function(e){e(n)})),n}var i=this.current;this.confirmTransition(r,(function(){o.updateRoute(r),e&&e(r),o.ensureURL(),o.router.afterHooks.forEach((function(n){n&&n(r,i)})),o.ready||(o.ready=!0,o.readyCbs.forEach((function(n){n(r)})))}),(function(n){t&&t(n),n&&!o.ready&&(ra(n,Yi.redirected)&&i===Wo||(o.ready=!0,o.readyErrorCbs.forEach((function(e){e(n)}))))}))},la.prototype.confirmTransition=function(n,e,t){var r=this,o=this.current;this.pending=n;var i,a,s=function(n){!ra(n)&&ta(n)&&(r.errorCbs.length?r.errorCbs.forEach((function(e){e(n)})):console.error(n)),t&&t(n)},u=n.matched.length-1,l=o.matched.length-1;if(Ko(n,o)&&u===l&&n.matched[u]===o.matched[l])return this.ensureURL(),n.hash&&Di(this.router,o,n,!1),s(((a=na(i=o,n,Yi.duplicated,'Avoided redundant navigation to current location: "'+i.fullPath+'".')).name="NavigationDuplicated",a));var c=function(n,e){var t,r=Math.max(n.length,e.length);for(t=0;t<r&&n[t]===e[t];t++);return{updated:e.slice(0,t),activated:e.slice(t),deactivated:n.slice(t)}}(this.current.matched,n.matched),p=c.updated,d=c.deactivated,v=c.activated,m=[].concat(function(n){return ca(n,"beforeRouteLeave",pa,!0)}(d),this.router.beforeHooks,function(n){return ca(n,"beforeRouteUpdate",pa)}(p),v.map((function(n){return n.beforeEnter})),oa(v)),h=function(e,t){if(r.pending!==n)return s(Zi(o,n));try{e(n,o,(function(e){!1===e?(r.ensureURL(!0),s(function(n,e){return na(n,e,Yi.aborted,'Navigation aborted from "'+n.fullPath+'" to "'+e.fullPath+'" via a navigation guard.')}(o,n))):ta(e)?(r.ensureURL(!0),s(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(s(Qi(o,n)),"object"==typeof e&&e.replace?r.replace(e):r.push(e)):t(e)}))}catch(n){s(n)}};Ki(m,h,(function(){Ki(function(n){return ca(n,"beforeRouteEnter",(function(n,e,t,r){return function(n,e,t){return function(r,o,i){return n(r,o,(function(n){"function"==typeof n&&(e.enteredCbs[t]||(e.enteredCbs[t]=[]),e.enteredCbs[t].push(n)),i(n)}))}}(n,t,r)}))}(v).concat(r.router.resolveHooks),h,(function(){if(r.pending!==n)return s(Zi(o,n));r.pending=null,e(n),r.router.app&&r.router.app.$nextTick((function(){Qo(n)}))}))}))},la.prototype.updateRoute=function(n){this.current=n,this.cb&&this.cb(n)},la.prototype.setupListeners=function(){},la.prototype.teardown=function(){this.listeners.forEach((function(n){n()})),this.listeners=[],this.current=Wo,this.pending=null};var da=function(n){function e(e,t){n.call(this,e,t),this._startLocation=va(this.base)}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router,t=e.options.scrollBehavior,r=Wi&&t;r&&this.listeners.push(Ri());var o=function(){var t=n.current,o=va(n.base);n.current===Wo&&o===n._startLocation||n.transitionTo(o,(function(n){r&&Di(e,n,t,!0)}))};window.addEventListener("popstate",o),this.listeners.push((function(){window.removeEventListener("popstate",o)}))}},e.prototype.go=function(n){window.history.go(n)},e.prototype.push=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){Gi(ti(r.base+n.fullPath)),Di(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){Xi(ti(r.base+n.fullPath)),Di(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.ensureURL=function(n){if(va(this.base)!==this.current.fullPath){var e=ti(this.base+this.current.fullPath);n?Gi(e):Xi(e)}},e.prototype.getCurrentLocation=function(){return va(this.base)},e}(la);function va(n){var e=window.location.pathname,t=e.toLowerCase(),r=n.toLowerCase();return!n||t!==r&&0!==t.indexOf(ti(r+"/"))||(e=e.slice(n.length)),(e||"/")+window.location.search+window.location.hash}var ma=function(n){function e(e,t,r){n.call(this,e,t),r&&function(n){var e=va(n);if(!/^\/#/.test(e))return window.location.replace(ti(n+"/#"+e)),!0}(this.base)||ha()}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router.options.scrollBehavior,t=Wi&&e;t&&this.listeners.push(Ri());var r=function(){var e=n.current;ha()&&n.transitionTo(fa(),(function(r){t&&Di(n.router,r,e,!0),Wi||xa(r.fullPath)}))},o=Wi?"popstate":"hashchange";window.addEventListener(o,r),this.listeners.push((function(){window.removeEventListener(o,r)}))}},e.prototype.push=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){ba(n.fullPath),Di(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,o=this.current;this.transitionTo(n,(function(n){xa(n.fullPath),Di(r.router,n,o,!1),e&&e(n)}),t)},e.prototype.go=function(n){window.history.go(n)},e.prototype.ensureURL=function(n){var e=this.current.fullPath;fa()!==e&&(n?ba(e):xa(e))},e.prototype.getCurrentLocation=function(){return fa()},e}(la);function ha(){var n=fa();return"/"===n.charAt(0)||(xa("/"+n),!1)}function fa(){var n=window.location.href,e=n.indexOf("#");return e<0?"":n=n.slice(e+1)}function ga(n){var e=window.location.href,t=e.indexOf("#");return(t>=0?e.slice(0,t):e)+"#"+n}function ba(n){Wi?Gi(ga(n)):window.location.hash=n}function xa(n){Wi?Xi(ga(n)):window.location.replace(ga(n))}var ya=function(n){function e(e,t){n.call(this,e,t),this.stack=[],this.index=-1}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.push=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index+1).concat(n),r.index++,e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index).concat(n),e&&e(n)}),t)},e.prototype.go=function(n){var e=this,t=this.index+n;if(!(t<0||t>=this.stack.length)){var r=this.stack[t];this.confirmTransition(r,(function(){var n=e.current;e.index=t,e.updateRoute(r),e.router.afterHooks.forEach((function(e){e&&e(r,n)}))}),(function(n){ra(n,Yi.duplicated)&&(e.index=t)}))}},e.prototype.getCurrentLocation=function(){var n=this.stack[this.stack.length-1];return n?n.fullPath:"/"},e.prototype.ensureURL=function(){},e}(la),ja=function(n){void 0===n&&(n={}),this.app=null,this.apps=[],this.options=n,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Ai(n.routes||[],this);var e=n.mode||"hash";switch(this.fallback="history"===e&&!Wi&&!1!==n.fallback,this.fallback&&(e="hash"),Si||(e="abstract"),this.mode=e,e){case"history":this.history=new da(this,n.base);break;case"hash":this.history=new ma(this,n.base,this.fallback);break;case"abstract":this.history=new ya(this,n.base);break;default:0}},wa={currentRoute:{configurable:!0}};function ka(n,e){return n.push(e),function(){var t=n.indexOf(e);t>-1&&n.splice(t,1)}}ja.prototype.match=function(n,e,t){return this.matcher.match(n,e,t)},wa.currentRoute.get=function(){return this.history&&this.history.current},ja.prototype.init=function(n){var e=this;if(this.apps.push(n),n.$once("hook:destroyed",(function(){var t=e.apps.indexOf(n);t>-1&&e.apps.splice(t,1),e.app===n&&(e.app=e.apps[0]||null),e.app||e.history.teardown()})),!this.app){this.app=n;var t=this.history;if(t instanceof da||t instanceof ma){var r=function(n){t.setupListeners(),function(n){var r=t.current,o=e.options.scrollBehavior;Wi&&o&&"fullPath"in n&&Di(e,n,r,!1)}(n)};t.transitionTo(t.getCurrentLocation(),r,r)}t.listen((function(n){e.apps.forEach((function(e){e._route=n}))}))}},ja.prototype.beforeEach=function(n){return ka(this.beforeHooks,n)},ja.prototype.beforeResolve=function(n){return ka(this.resolveHooks,n)},ja.prototype.afterEach=function(n){return ka(this.afterHooks,n)},ja.prototype.onReady=function(n,e){this.history.onReady(n,e)},ja.prototype.onError=function(n){this.history.onError(n)},ja.prototype.push=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.push(n,e,t)}));this.history.push(n,e,t)},ja.prototype.replace=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.replace(n,e,t)}));this.history.replace(n,e,t)},ja.prototype.go=function(n){this.history.go(n)},ja.prototype.back=function(){this.go(-1)},ja.prototype.forward=function(){this.go(1)},ja.prototype.getMatchedComponents=function(n){var e=n?n.matched?n:this.resolve(n).route:this.currentRoute;return e?[].concat.apply([],e.matched.map((function(n){return Object.keys(n.components).map((function(e){return n.components[e]}))}))):[]},ja.prototype.resolve=function(n,e,t){var r=ji(n,e=e||this.history.current,t,this),o=this.match(r,e),i=o.redirectedFrom||o.fullPath;return{location:r,route:o,href:function(n,e,t){var r="hash"===t?"#"+e:e;return n?ti(n+"/"+r):r}(this.history.base,i,this.mode),normalizedTo:r,resolved:o}},ja.prototype.getRoutes=function(){return this.matcher.getRoutes()},ja.prototype.addRoute=function(n,e){this.matcher.addRoute(n,e),this.history.current!==Wo&&this.history.transitionTo(this.history.getCurrentLocation())},ja.prototype.addRoutes=function(n){this.matcher.addRoutes(n),this.history.current!==Wo&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(ja.prototype,wa),ja.install=function n(e){if(!n.installed||wi!==e){n.installed=!0,wi=e;var t=function(n){return void 0!==n},r=function(n,e){var r=n.$options._parentVnode;t(r)&&t(r=r.data)&&t(r=r.registerRouteInstance)&&r(n,e)};e.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),e.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,r(this,this)},destroyed:function(){r(this)}}),Object.defineProperty(e.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(e.prototype,"$route",{get:function(){return this._routerRoot._route}}),e.component("RouterView",Zo),e.component("RouterLink",Ti);var o=e.config.optionMergeStrategies;o.beforeRouteEnter=o.beforeRouteLeave=o.beforeRouteUpdate=o.created}},ja.version="3.5.3",ja.isNavigationFailure=ra,ja.NavigationFailureType=Yi,ja.START_LOCATION=Wo,Si&&window.Vue&&window.Vue.use(ja);var Ta=ja;t(184),t(185),t(262),t(48),t(264),t(30),t(31),t(265);function Va(n){n.locales&&Object.keys(n.locales).forEach((function(e){n.locales[e].path=e})),Object.freeze(n)}var Sa=t(53),_a=t(83),Ia=(t(194),t(20),t(47),t(236),t(237),t(50),t(25),{NotFound:function(){return Promise.all([t.e(1),t.e(13)]).then(t.bind(null,499))},Layout:function(){return Promise.all([t.e(1),t.e(11)]).then(t.bind(null,498))}}),Aa={"v-f62d8df6":function(){return t.e(14).then(t.bind(null,500))},"v-786a7465":function(){return t.e(15).then(t.bind(null,501))},"v-6cd7c2f6":function(){return t.e(16).then(t.bind(null,502))},"v-7fbbcf1e":function(){return t.e(17).then(t.bind(null,503))},"v-d6c6c636":function(){return t.e(18).then(t.bind(null,504))},"v-7b7a2cae":function(){return t.e(19).then(t.bind(null,505))},"v-f3292544":function(){return t.e(20).then(t.bind(null,506))},"v-6995df16":function(){return t.e(21).then(t.bind(null,507))},"v-a66894a8":function(){return t.e(22).then(t.bind(null,508))},"v-010f3164":function(){return t.e(23).then(t.bind(null,509))},"v-32412db8":function(){return t.e(24).then(t.bind(null,510))},"v-6ca63b0e":function(){return t.e(25).then(t.bind(null,511))},"v-fba36468":function(){return t.e(26).then(t.bind(null,512))},"v-0c611ae8":function(){return t.e(27).then(t.bind(null,513))},"v-2c29d0a8":function(){return t.e(28).then(t.bind(null,514))},"v-2745488c":function(){return t.e(29).then(t.bind(null,515))},"v-313e0a6c":function(){return t.e(30).then(t.bind(null,516))},"v-77deca2b":function(){return t.e(31).then(t.bind(null,517))},"v-37d5778b":function(){return t.e(32).then(t.bind(null,518))},"v-67b80e2c":function(){return t.e(33).then(t.bind(null,519))},"v-09e44d8c":function(){return t.e(34).then(t.bind(null,520))},"v-3451f656":function(){return t.e(35).then(t.bind(null,521))},"v-35e8d6f5":function(){return t.e(36).then(t.bind(null,522))},"v-15200237":function(){return t.e(37).then(t.bind(null,523))},"v-a8d784d4":function(){return t.e(38).then(t.bind(null,524))},"v-8d5acd68":function(){return t.e(39).then(t.bind(null,525))},"v-1fb6a18a":function(){return t.e(40).then(t.bind(null,526))},"v-cd5c72dc":function(){return t.e(41).then(t.bind(null,527))},"v-17e6fd65":function(){return t.e(42).then(t.bind(null,528))},"v-719fae6a":function(){return t.e(43).then(t.bind(null,529))},"v-08080aae":function(){return t.e(44).then(t.bind(null,530))},"v-681aa372":function(){return t.e(45).then(t.bind(null,531))},"v-5f3aa21a":function(){return t.e(46).then(t.bind(null,532))},"v-43c814b9":function(){return t.e(47).then(t.bind(null,533))},"v-028a6853":function(){return t.e(48).then(t.bind(null,534))},"v-02e7991c":function(){return t.e(49).then(t.bind(null,535))},"v-103bdf26":function(){return t.e(50).then(t.bind(null,536))},"v-3a43f612":function(){return t.e(51).then(t.bind(null,537))},"v-04bb221c":function(){return t.e(52).then(t.bind(null,538))},"v-c75e5df8":function(){return t.e(53).then(t.bind(null,539))},"v-4f41d284":function(){return t.e(54).then(t.bind(null,540))},"v-14b8cce8":function(){return t.e(55).then(t.bind(null,541))},"v-9a4b90e2":function(){return t.e(56).then(t.bind(null,542))},"v-f15cedf6":function(){return t.e(57).then(t.bind(null,543))},"v-18baa86e":function(){return t.e(58).then(t.bind(null,544))}};function za(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var Ca=/-(\w)/g,Ea=za((function(n){return n.replace(Ca,(function(n,e){return e?e.toUpperCase():""}))})),Pa=/\B([A-Z])/g,Oa=za((function(n){return n.replace(Pa,"-$1").toLowerCase()})),Ma=za((function(n){return n.charAt(0).toUpperCase()+n.slice(1)}));function qa(n,e){if(e)return n(e)?n(e):e.includes("-")?n(Ma(Ea(e))):n(Ma(e))||n(Oa(e))}var Ra=Object.assign({},Ia,Aa),Da=function(n){return Ra[n]},La=function(n){return Aa[n]},$a=function(n){return Ia[n]},Na=function(n){return Oo.component(n)};function Ba(n){return qa(La,n)}function Ua(n){return qa($a,n)}function Fa(n){return qa(Da,n)}function Ha(n){return qa(Na,n)}function Ja(){for(var n=arguments.length,e=new Array(n),t=0;t<n;t++)e[t]=arguments[t];return Promise.all(e.filter((function(n){return n})).map(function(){var n=Object(r.a)(regeneratorRuntime.mark((function n(e){var t;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(Ha(e)||!Fa(e)){n.next=5;break}return n.next=3,Fa(e)();case 3:t=n.sent,Oo.component(e,t.default);case 5:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}()))}function Wa(n,e){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[n]=e)}var Ga=t(52),Xa=(t(278),t(157),t(54),t(225)),Ka=t.n(Xa),Ya=t(226),Qa=t.n(Ya),Za={created:function(){if(this.siteMeta=this.$site.headTags.filter((function(n){return"meta"===Object(Ga.a)(n,1)[0]})).map((function(n){var e=Object(Ga.a)(n,2);e[0];return e[1]})),this.$ssrContext){var n=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(e=n)?e.map((function(n){var e="<meta";return Object.keys(n).forEach((function(t){e+=" ".concat(t,'="').concat(Qa()(n[t]),'"')})),e+">"})).join("\n    "):"",this.$ssrContext.canonicalLink=es(this.$canonicalUrl)}var e},mounted:function(){this.currentMetaTags=Object(_a.a)(document.querySelectorAll("meta")),this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta:function(){document.title=this.$title,document.documentElement.lang=this.$lang;var n=this.getMergedMetaTags();this.currentMetaTags=ts(n,this.currentMetaTags)},getMergedMetaTags:function(){var n=this.$page.frontmatter.meta||[];return Ka()([{name:"description",content:this.$description}],n,this.siteMeta,rs)},updateCanonicalLink:function(){ns(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",es(this.$canonicalUrl))}},watch:{$page:function(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy:function(){ts(null,this.currentMetaTags),ns()}};function ns(){var n=document.querySelector("link[rel='canonical']");n&&n.remove()}function es(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return n?'<link href="'.concat(n,'" rel="canonical" />'):""}function ts(n,e){if(e&&Object(_a.a)(e).filter((function(n){return n.parentNode===document.head})).forEach((function(n){return document.head.removeChild(n)})),n)return n.map((function(n){var e=document.createElement("meta");return Object.keys(n).forEach((function(t){e.setAttribute(t,n[t])})),document.head.appendChild(e),e}))}function rs(n){for(var e=0,t=["name","property","itemprop"];e<t.length;e++){var r=t[e];if(n.hasOwnProperty(r))return n[r]+r}return JSON.stringify(n)}t(152);var os=t(159),is={mounted:function(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:t.n(os)()((function(){this.setActiveHash()}),300),setActiveHash:function(){for(var n=this,e=[].slice.call(document.querySelectorAll(".sidebar-link")),t=[].slice.call(document.querySelectorAll(".header-anchor")).filter((function(n){return e.some((function(e){return e.hash===n.hash}))})),r=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),o=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),i=window.innerHeight+r,a=0;a<t.length;a++){var s=t[a],u=t[a+1],l=0===a&&0===r||r>=s.parentElement.offsetTop+10&&(!u||r<u.parentElement.offsetTop-10),c=decodeURIComponent(this.$route.hash);if(l&&c!==decodeURIComponent(s.hash)){var p=s;if(i===o)for(var d=a+1;d<t.length;d++)if(c===decodeURIComponent(t[d].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(p.hash),(function(){n.$nextTick((function(){n.$vuepress.$set("disableScrollBehavior",!1)}))}))}}}},beforeDestroy:function(){window.removeEventListener("scroll",this.onScroll)}},as=(t(44),t(115)),ss=t.n(as),us={mounted:function(){var n=this;ss.a.configure({showSpinner:!1}),this.$router.beforeEach((function(n,e,t){n.path===e.path||Oo.component(n.name)||ss.a.start(),t()})),this.$router.afterEach((function(){ss.a.done(),n.isSidebarOpen=!1}))}};t(56),t(87),t(70),t(373);function ls(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}t(111);function cs(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}function ps(n,e,t){return e&&cs(n.prototype,e),t&&cs(n,t),Object.defineProperty(n,"prototype",{writable:!1}),n}t(374);var ds=function(){function n(){ls(this,n);this.containerEl=document.getElementById("message-container"),this.containerEl||(this.containerEl=document.createElement("div"),this.containerEl.id="message-container",document.body.appendChild(this.containerEl))}return ps(n,[{key:"show",value:function(n){var e=this,t=n.text,r=void 0===t?"":t,o=n.duration,i=void 0===o?3e3:o,a=document.createElement("div");a.className="message move-in",a.innerHTML='\n      <i style="fill: #06a35a;font-size: 14px;display:inline-flex;align-items: center;">\n        <svg style="fill: #06a35a;font-size: 14px;" t="1572421810237" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2323" width="16" height="16"><path d="M822.811993 824.617989c-83.075838 81.99224-188.546032 124.613757-316.049383 127.86455-122.085362-3.250794-223.943563-45.87231-305.935802-127.86455s-124.613757-184.21164-127.86455-305.935802c3.250794-127.503351 45.87231-232.973545 127.86455-316.049383 81.99224-83.075838 184.21164-126.058554 305.935802-129.309347 127.503351 3.250794 232.973545 46.23351 316.049383 129.309347 83.075838 83.075838 126.058554 188.546032 129.309347 316.049383C949.231746 640.406349 905.887831 742.62575 822.811993 824.617989zM432.716755 684.111464c3.973192 3.973192 8.307584 5.779189 13.364374 6.140388 5.05679 0.361199 9.752381-1.444797 13.364374-5.417989l292.571429-287.514638c3.973192-3.973192 5.779189-8.307584 5.779189-13.364374 0-5.05679-1.805996-9.752381-5.779189-13.364374l1.805996 1.805996c-3.973192-3.973192-8.668783-5.779189-14.086772-6.140388-5.417989-0.361199-10.47478 1.444797-14.809171 5.417989l-264.397884 220.33157c-3.973192 3.250794-8.668783 4.695591-14.447972 4.695591-5.779189 0-10.835979-1.444797-15.53157-3.973192l-94.273016-72.962257c-4.334392-3.250794-9.391182-4.334392-14.447972-3.973192s-9.391182 3.250794-12.641975 7.585185l-2.889594 3.973192c-3.250794 4.334392-4.334392 9.391182-3.973192 14.809171 0.722399 5.417989 2.528395 10.11358 5.779189 14.086772L432.716755 684.111464z" p-id="2324"></path></svg>\n      </i>\n      <div class="text">'.concat(r,"</div>\n    "),this.containerEl.appendChild(a),i>0&&setTimeout((function(){e.close(a)}),i)}},{key:"close",value:function(n){n.className=n.className.replace("move-in",""),n.className+="move-out",n.addEventListener("animationend",(function(){n.remove()}))}}]),n}(),vs={mounted:function(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},updated:function(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},methods:{updateCopy:function(){var n=this;setTimeout((function(){(['div[class*="language-"] pre','div[class*="aside-code"] aside']instanceof Array||Array.isArray(['div[class*="language-"] pre','div[class*="aside-code"] aside']))&&['div[class*="language-"] pre','div[class*="aside-code"] aside'].forEach((function(e){document.querySelectorAll(e).forEach(n.generateCopyButton)}))}),1e3)},generateCopyButton:function(n){var e=this;if(!n.classList.contains("codecopy-enabled")){var t=document.createElement("i");t.className="code-copy",t.innerHTML='<svg  style="color:#aaa;font-size:14px" t="1572422231464" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3201" width="14" height="14"><path d="M866.461538 39.384615H354.461538c-43.323077 0-78.769231 35.446154-78.76923 78.769231v39.384616h472.615384c43.323077 0 78.769231 35.446154 78.769231 78.76923v551.384616h39.384615c43.323077 0 78.769231-35.446154 78.769231-78.769231V118.153846c0-43.323077-35.446154-78.769231-78.769231-78.769231z m-118.153846 275.692308c0-43.323077-35.446154-78.769231-78.76923-78.769231H157.538462c-43.323077 0-78.769231 35.446154-78.769231 78.769231v590.769231c0 43.323077 35.446154 78.769231 78.769231 78.769231h512c43.323077 0 78.769231-35.446154 78.76923-78.769231V315.076923z m-354.461538 137.846154c0 11.815385-7.876923 19.692308-19.692308 19.692308h-157.538461c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h157.538461c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z m157.538461 315.076923c0 11.815385-7.876923 19.692308-19.692307 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h315.076923c11.815385 0 19.692308 7.876923 19.692307 19.692308v39.384615z m78.769231-157.538462c0 11.815385-7.876923 19.692308-19.692308 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h393.846153c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z" p-id="3202"></path></svg>',t.title="Copy to clipboard",t.addEventListener("click",(function(){e.copyToClipboard(n.innerText)})),n.appendChild(t),n.classList.add("codecopy-enabled")}},copyToClipboard:function(n){var e=document.createElement("textarea");e.value=n,e.setAttribute("readonly",""),e.style.position="absolute",e.style.left="-9999px",document.body.appendChild(e);var t=document.getSelection().rangeCount>0&&document.getSelection().getRangeAt(0);e.select(),document.execCommand("copy"),(new ds).show({text:"复制成功",duration:1e3}),document.body.removeChild(e),t&&(document.getSelection().removeAllRanges(),document.getSelection().addRange(t))}}},ms=(t(86),"auto"),hs="zoom-in",fs="zoom-out",gs="grab",bs="move";function xs(n,e,t){var r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],o={passive:!1};r?n.addEventListener(e,t,o):n.removeEventListener(e,t,o)}function ys(n,e){if(n){var t=new Image;t.onload=function(){e&&e(t)},t.src=n}}function js(n){return n.dataset.original?n.dataset.original:"A"===n.parentNode.tagName?n.parentNode.getAttribute("href"):null}function ws(n,e,t){!function(n){var e=ks,t=Ts;if(n.transition){var r=n.transition;delete n.transition,n[e]=r}if(n.transform){var o=n.transform;delete n.transform,n[t]=o}}(e);var r=n.style,o={};for(var i in e)t&&(o[i]=r[i]||""),r[i]=e[i];return o}var ks="transition",Ts="transform",Vs="transform",Ss="transitionend";var _s=function(){},Is={enableGrab:!0,preloadImage:!1,closeOnWindowResize:!0,transitionDuration:.4,transitionTimingFunction:"cubic-bezier(0.4, 0, 0, 1)",bgColor:"rgb(255, 255, 255)",bgOpacity:1,scaleBase:1,scaleExtra:.5,scrollThreshold:40,zIndex:998,customSize:null,onOpen:_s,onClose:_s,onGrab:_s,onMove:_s,onRelease:_s,onBeforeOpen:_s,onBeforeClose:_s,onBeforeGrab:_s,onBeforeRelease:_s,onImageLoading:_s,onImageLoaded:_s},As={init:function(n){var e,t;e=this,t=n,Object.getOwnPropertyNames(Object.getPrototypeOf(e)).forEach((function(n){e[n]=e[n].bind(t)}))},click:function(n){if(n.preventDefault(),Cs(n))return window.open(this.target.srcOriginal||n.currentTarget.src,"_blank");this.shown?this.released?this.close():this.release():this.open(n.currentTarget)},scroll:function(){var n=document.documentElement||document.body.parentNode||document.body,e=window.pageXOffset||n.scrollLeft,t=window.pageYOffset||n.scrollTop;null===this.lastScrollPosition&&(this.lastScrollPosition={x:e,y:t});var r=this.lastScrollPosition.x-e,o=this.lastScrollPosition.y-t,i=this.options.scrollThreshold;(Math.abs(o)>=i||Math.abs(r)>=i)&&(this.lastScrollPosition=null,this.close())},keydown:function(n){(function(n){return"Escape"===(n.key||n.code)||27===n.keyCode})(n)&&(this.released?this.close():this.release(this.close))},mousedown:function(n){if(zs(n)&&!Cs(n)){n.preventDefault();var e=n.clientX,t=n.clientY;this.pressTimer=setTimeout(function(){this.grab(e,t)}.bind(this),200)}},mousemove:function(n){this.released||this.move(n.clientX,n.clientY)},mouseup:function(n){zs(n)&&!Cs(n)&&(clearTimeout(this.pressTimer),this.released?this.close():this.release())},touchstart:function(n){n.preventDefault();var e=n.touches[0],t=e.clientX,r=e.clientY;this.pressTimer=setTimeout(function(){this.grab(t,r)}.bind(this),200)},touchmove:function(n){if(!this.released){var e=n.touches[0],t=e.clientX,r=e.clientY;this.move(t,r)}},touchend:function(n){(function(n){n.targetTouches.length})(n)||(clearTimeout(this.pressTimer),this.released?this.close():this.release())},clickOverlay:function(){this.close()},resizeWindow:function(){this.close()}};function zs(n){return 0===n.button}function Cs(n){return n.metaKey||n.ctrlKey}var Es={init:function(n){this.el=document.createElement("div"),this.instance=n,this.parent=document.body,ws(this.el,{position:"fixed",top:0,left:0,right:0,bottom:0,opacity:0}),this.updateStyle(n.options),xs(this.el,"click",n.handler.clickOverlay.bind(n))},updateStyle:function(n){ws(this.el,{zIndex:n.zIndex,backgroundColor:n.bgColor,transition:"opacity\n        "+n.transitionDuration+"s\n        "+n.transitionTimingFunction})},insert:function(){this.parent.appendChild(this.el)},remove:function(){this.parent.removeChild(this.el)},fadeIn:function(){this.el.offsetWidth,this.el.style.opacity=this.instance.options.bgOpacity},fadeOut:function(){this.el.style.opacity=0}},Ps="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},Os=function(){function n(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}}(),Ms=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},qs={init:function(n,e){this.el=n,this.instance=e,this.srcThumbnail=this.el.getAttribute("src"),this.srcset=this.el.getAttribute("srcset"),this.srcOriginal=js(this.el),this.rect=this.el.getBoundingClientRect(),this.translate=null,this.scale=null,this.styleOpen=null,this.styleClose=null},zoomIn:function(){var n=this.instance.options,e=n.zIndex,t=n.enableGrab,r=n.transitionDuration,o=n.transitionTimingFunction;this.translate=this.calculateTranslate(),this.scale=this.calculateScale(),this.styleOpen={position:"relative",zIndex:e+1,cursor:t?gs:fs,transition:Vs+"\n        "+r+"s\n        "+o,transform:"translate3d("+this.translate.x+"px, "+this.translate.y+"px, 0px)\n        scale("+this.scale.x+","+this.scale.y+")",height:this.rect.height+"px",width:this.rect.width+"px"},this.el.offsetWidth,this.styleClose=ws(this.el,this.styleOpen,!0)},zoomOut:function(){this.el.offsetWidth,ws(this.el,{transform:"none"})},grab:function(n,e,t){var r=Rs(),o=r.x-n,i=r.y-e;ws(this.el,{cursor:bs,transform:"translate3d(\n        "+(this.translate.x+o)+"px, "+(this.translate.y+i)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},move:function(n,e,t){var r=Rs(),o=r.x-n,i=r.y-e;ws(this.el,{transition:Vs,transform:"translate3d(\n        "+(this.translate.x+o)+"px, "+(this.translate.y+i)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},restoreCloseStyle:function(){ws(this.el,this.styleClose)},restoreOpenStyle:function(){ws(this.el,this.styleOpen)},upgradeSource:function(){if(this.srcOriginal){var n=this.el.parentNode;this.srcset&&this.el.removeAttribute("srcset");var e=this.el.cloneNode(!1);e.setAttribute("src",this.srcOriginal),e.style.position="fixed",e.style.visibility="hidden",n.appendChild(e),setTimeout(function(){this.el.setAttribute("src",this.srcOriginal),n.removeChild(e)}.bind(this),50)}},downgradeSource:function(){this.srcOriginal&&(this.srcset&&this.el.setAttribute("srcset",this.srcset),this.el.setAttribute("src",this.srcThumbnail))},calculateTranslate:function(){var n=Rs(),e=this.rect.left+this.rect.width/2,t=this.rect.top+this.rect.height/2;return{x:n.x-e,y:n.y-t}},calculateScale:function(){var n=this.el.dataset,e=n.zoomingHeight,t=n.zoomingWidth,r=this.instance.options,o=r.customSize,i=r.scaleBase;if(!o&&e&&t)return{x:t/this.rect.width,y:e/this.rect.height};if(o&&"object"===(void 0===o?"undefined":Ps(o)))return{x:o.width/this.rect.width,y:o.height/this.rect.height};var a=this.rect.width/2,s=this.rect.height/2,u=Rs(),l={x:u.x-a,y:u.y-s},c=l.x/a,p=l.y/s,d=i+Math.min(c,p);if(o&&"string"==typeof o){var v=t||this.el.naturalWidth,m=e||this.el.naturalHeight,h=parseFloat(o)*v/(100*this.rect.width),f=parseFloat(o)*m/(100*this.rect.height);if(d>h||d>f)return{x:h,y:f}}return{x:d,y:d}}};function Rs(){var n=document.documentElement;return{x:Math.min(n.clientWidth,window.innerWidth)/2,y:Math.min(n.clientHeight,window.innerHeight)/2}}function Ds(n,e,t){["mousedown","mousemove","mouseup","touchstart","touchmove","touchend"].forEach((function(r){xs(n,r,e[r],t)}))}var Ls=function(){function n(e){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.target=Object.create(qs),this.overlay=Object.create(Es),this.handler=Object.create(As),this.body=document.body,this.shown=!1,this.lock=!1,this.released=!0,this.lastScrollPosition=null,this.pressTimer=null,this.options=Ms({},Is,e),this.overlay.init(this),this.handler.init(this)}return Os(n,[{key:"listen",value:function(n){if("string"==typeof n)for(var e=document.querySelectorAll(n),t=e.length;t--;)this.listen(e[t]);else"IMG"===n.tagName&&(n.style.cursor=hs,xs(n,"click",this.handler.click),this.options.preloadImage&&ys(js(n)));return this}},{key:"config",value:function(n){return n?(Ms(this.options,n),this.overlay.updateStyle(this.options),this):this.options}},{key:"open",value:function(n){var e=this,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.options.onOpen;if(!this.shown&&!this.lock){var r="string"==typeof n?document.querySelector(n):n;if("IMG"===r.tagName){if(this.options.onBeforeOpen(r),this.target.init(r,this),!this.options.preloadImage){var o=this.target.srcOriginal;null!=o&&(this.options.onImageLoading(r),ys(o,this.options.onImageLoaded))}this.shown=!0,this.lock=!0,this.target.zoomIn(),this.overlay.insert(),this.overlay.fadeIn(),xs(document,"scroll",this.handler.scroll),xs(document,"keydown",this.handler.keydown),this.options.closeOnWindowResize&&xs(window,"resize",this.handler.resizeWindow);var i=function n(){xs(r,Ss,n,!1),e.lock=!1,e.target.upgradeSource(),e.options.enableGrab&&Ds(document,e.handler,!0),t(r)};return xs(r,Ss,i),this}}}},{key:"close",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onClose;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeClose(t),this.lock=!0,this.body.style.cursor=ms,this.overlay.fadeOut(),this.target.zoomOut(),xs(document,"scroll",this.handler.scroll,!1),xs(document,"keydown",this.handler.keydown,!1),this.options.closeOnWindowResize&&xs(window,"resize",this.handler.resizeWindow,!1);var r=function r(){xs(t,Ss,r,!1),n.shown=!1,n.lock=!1,n.target.downgradeSource(),n.options.enableGrab&&Ds(document,n.handler,!1),n.target.restoreCloseStyle(),n.overlay.remove(),e(t)};return xs(t,Ss,r),this}}},{key:"grab",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onGrab;if(this.shown&&!this.lock){var o=this.target.el;this.options.onBeforeGrab(o),this.released=!1,this.target.grab(n,e,t);var i=function n(){xs(o,Ss,n,!1),r(o)};return xs(o,Ss,i),this}}},{key:"move",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onMove;if(this.shown&&!this.lock){this.released=!1,this.body.style.cursor=bs,this.target.move(n,e,t);var o=this.target.el,i=function n(){xs(o,Ss,n,!1),r(o)};return xs(o,Ss,i),this}}},{key:"release",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onRelease;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeRelease(t),this.lock=!0,this.body.style.cursor=ms,this.target.restoreOpenStyle();var r=function r(){xs(t,Ss,r,!1),n.lock=!1,n.released=!0,e(t)};return xs(t,Ss,r),this}}}]),n}(),$s=".theme-vdoing-content img:not(.no-zoom)",Ns=JSON.parse('{"bgColor":"rgba(0,0,0,0.6)"}'),Bs=Number("500"),Us=function(){function n(){ls(this,n),this.instance=new Ls(Ns)}return ps(n,[{key:"update",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:$s;"undefined"!=typeof window&&this.instance.listen(n)}},{key:"updateDelay",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:$s,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Bs;setTimeout((function(){return n.update(e)}),t)}}]),n}(),Fs=[Za,is,us,vs,{watch:{"$page.path":function(){void 0!==this.$vuepress.zooming&&this.$vuepress.zooming.updateDelay()}},mounted:function(){this.$vuepress.zooming=new Us,this.$vuepress.zooming.updateDelay()}}],Hs={name:"GlobalLayout",computed:{layout:function(){var n=this.getLayout();return Wa("layout",n),Oo.component(n)}},methods:{getLayout:function(){if(this.$page.path){var n=this.$page.frontmatter.layout;return n&&(this.$vuepress.getLayoutAsyncComponent(n)||this.$vuepress.getVueComponent(n))?n:"Layout"}return"NotFound"}}},Js=t(15),Ws=Object(Js.a)(Hs,(function(){var n=this.$createElement;return(this._self._c||n)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(n,e,t){var r;switch(e){case"components":n[e]||(n[e]={}),Object.assign(n[e],t);break;case"mixins":n[e]||(n[e]=[]),(r=n[e]).push.apply(r,Object(_a.a)(t));break;default:throw new Error("Unknown option name.")}}(Ws,"mixins",Fs);var Gs=[{name:"v-f62d8df6",path:"/archives/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-f62d8df6").then(t)}},{path:"/archives/index.html",redirect:"/archives/"},{path:"/@pages/archivesPage.html",redirect:"/archives/"},{name:"v-786a7465",path:"/categories/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-786a7465").then(t)}},{path:"/categories/index.html",redirect:"/categories/"},{path:"/@pages/categoriesPage.html",redirect:"/categories/"},{name:"v-6cd7c2f6",path:"/tags/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-6cd7c2f6").then(t)}},{path:"/tags/index.html",redirect:"/tags/"},{path:"/@pages/tagsPage.html",redirect:"/tags/"},{name:"v-7fbbcf1e",path:"/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-7fbbcf1e").then(t)}},{path:"/index.html",redirect:"/"},{name:"v-d6c6c636",path:"/web/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-d6c6c636").then(t)}},{path:"/web/index.html",redirect:"/web/"},{path:"/views/00.目录页/01.前端.html",redirect:"/web/"},{name:"v-7b7a2cae",path:"/skill/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-7b7a2cae").then(t)}},{path:"/skill/index.html",redirect:"/skill/"},{path:"/views/00.目录页/02.技术.html",redirect:"/skill/"},{name:"v-f3292544",path:"/UI/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-f3292544").then(t)}},{path:"/UI/index.html",redirect:"/UI/"},{path:"/views/00.目录页/03.UI.html",redirect:"/UI/"},{name:"v-6995df16",path:"/collect/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-6995df16").then(t)}},{path:"/collect/index.html",redirect:"/collect/"},{path:"/views/00.目录页/04.收藏.html",redirect:"/collect/"},{name:"v-a66894a8",path:"/pages/1d1b92/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-a66894a8").then(t)}},{path:"/pages/1d1b92/index.html",redirect:"/pages/1d1b92/"},{path:"/views/01.前端/10.Http/00.http.html",redirect:"/pages/1d1b92/"},{name:"v-010f3164",path:"/pages/bdbd49/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-010f3164").then(t)}},{path:"/pages/bdbd49/index.html",redirect:"/pages/bdbd49/"},{path:"/views/01.前端/100.Uni-app/10.uni-app.html",redirect:"/pages/bdbd49/"},{name:"v-32412db8",path:"/pages/01a636/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-32412db8").then(t)}},{path:"/pages/01a636/index.html",redirect:"/pages/01a636/"},{path:"/views/01.前端/110.性能优化/10.性能优化.html",redirect:"/pages/01a636/"},{name:"v-6ca63b0e",path:"/pages/3b5bc6/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-6ca63b0e").then(t)}},{path:"/pages/3b5bc6/index.html",redirect:"/pages/3b5bc6/"},{path:"/views/01.前端/120.移动端/01.移动端适配.html",redirect:"/pages/3b5bc6/"},{name:"v-fba36468",path:"/pages/43a79d/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-fba36468").then(t)}},{path:"/pages/43a79d/index.html",redirect:"/pages/43a79d/"},{path:"/views/01.前端/20.Ajax/00.ajax.html",redirect:"/pages/43a79d/"},{name:"v-0c611ae8",path:"/pages/079821/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-0c611ae8").then(t)}},{path:"/pages/079821/index.html",redirect:"/pages/079821/"},{path:"/views/01.前端/30.Node/10.node.html",redirect:"/pages/079821/"},{name:"v-2c29d0a8",path:"/pages/934d6e/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-2c29d0a8").then(t)}},{path:"/pages/934d6e/index.html",redirect:"/pages/934d6e/"},{path:"/views/01.前端/40.MongoDB/10.mongodb.html",redirect:"/pages/934d6e/"},{name:"v-2745488c",path:"/pages/2135b2/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-2745488c").then(t)}},{path:"/pages/2135b2/index.html",redirect:"/pages/2135b2/"},{path:"/views/01.前端/50.Axios/10.axios.html",redirect:"/pages/2135b2/"},{name:"v-313e0a6c",path:"/pages/06c08b/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-313e0a6c").then(t)}},{path:"/pages/06c08b/index.html",redirect:"/pages/06c08b/"},{path:"/views/01.前端/60.Git/10.git.html",redirect:"/pages/06c08b/"},{name:"v-77deca2b",path:"/pages/df6335/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-77deca2b").then(t)}},{path:"/pages/df6335/index.html",redirect:"/pages/df6335/"},{path:"/views/01.前端/70.Webpack/10.webpack-npm环境搭建.html",redirect:"/pages/df6335/"},{name:"v-37d5778b",path:"/pages/036dbb/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-37d5778b").then(t)}},{path:"/pages/036dbb/index.html",redirect:"/pages/036dbb/"},{path:"/views/01.前端/70.Webpack/20.webpack-yarn环境搭建.html",redirect:"/pages/036dbb/"},{name:"v-67b80e2c",path:"/pages/eb18b6/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-67b80e2c").then(t)}},{path:"/pages/eb18b6/index.html",redirect:"/pages/eb18b6/"},{path:"/views/01.前端/80.React/10.react.html",redirect:"/pages/eb18b6/"},{name:"v-09e44d8c",path:"/pages/5e3b2f/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-09e44d8c").then(t)}},{path:"/pages/5e3b2f/index.html",redirect:"/pages/5e3b2f/"},{path:"/views/01.前端/90.Vue/10.vue.html",redirect:"/pages/5e3b2f/"},{name:"v-3451f656",path:"/pages/f2223/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-3451f656").then(t)}},{path:"/pages/f2223/index.html",redirect:"/pages/f2223/"},{path:"/views/02.技术/01.vue3学习记录.html",redirect:"/pages/f2223/"},{name:"v-35e8d6f5",path:"/pages/fb23314/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-35e8d6f5").then(t)}},{path:"/pages/fb23314/index.html",redirect:"/pages/fb23314/"},{path:"/views/02.技术/02.TS学习记录.html",redirect:"/pages/fb23314/"},{name:"v-15200237",path:"/pages/aa976e/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-15200237").then(t)}},{path:"/pages/aa976e/index.html",redirect:"/pages/aa976e/"},{path:"/views/02.技术/03.在浏览器输入url后都发生了什么.html",redirect:"/pages/aa976e/"},{name:"v-a8d784d4",path:"/pages/599f44/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-a8d784d4").then(t)}},{path:"/pages/599f44/index.html",redirect:"/pages/599f44/"},{path:"/views/02.技术/04.如何保证setTimeout准确性.html",redirect:"/pages/599f44/"},{name:"v-8d5acd68",path:"/pages/9d8967/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-8d5acd68").then(t)}},{path:"/pages/9d8967/index.html",redirect:"/pages/9d8967/"},{path:"/views/02.技术/05.Jenkins+nginx.html",redirect:"/pages/9d8967/"},{name:"v-1fb6a18a",path:"/pages/7dcd08/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-1fb6a18a").then(t)}},{path:"/pages/7dcd08/index.html",redirect:"/pages/7dcd08/"},{path:"/views/02.技术/06.浏览器缓存机制.html",redirect:"/pages/7dcd08/"},{name:"v-cd5c72dc",path:"/pages/9357b2/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-cd5c72dc").then(t)}},{path:"/pages/9357b2/index.html",redirect:"/pages/9357b2/"},{path:"/views/02.技术/07.requestAnimationFrame实践.html",redirect:"/pages/9357b2/"},{name:"v-17e6fd65",path:"/pages/e7b715/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-17e6fd65").then(t)}},{path:"/pages/e7b715/index.html",redirect:"/pages/e7b715/"},{path:"/views/02.技术/08.git突然连不上github解决方案.html",redirect:"/pages/e7b715/"},{name:"v-719fae6a",path:"/pages/918535/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-719fae6a").then(t)}},{path:"/pages/918535/index.html",redirect:"/pages/918535/"},{path:"/views/02.技术/09.让vue3更好用的vite插件.html",redirect:"/pages/918535/"},{name:"v-08080aae",path:"/pages/ac678c/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-08080aae").then(t)}},{path:"/pages/ac678c/index.html",redirect:"/pages/ac678c/"},{path:"/views/02.技术/10.Vue3有哪些新特性.html",redirect:"/pages/ac678c/"},{name:"v-681aa372",path:"/pages/5cf57d/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-681aa372").then(t)}},{path:"/pages/5cf57d/index.html",redirect:"/pages/5cf57d/"},{path:"/views/02.技术/11.EventLoop有哪些.html",redirect:"/pages/5cf57d/"},{name:"v-5f3aa21a",path:"/pages/597c89/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-5f3aa21a").then(t)}},{path:"/pages/597c89/index.html",redirect:"/pages/597c89/"},{path:"/views/02.技术/12.win10下关闭进程.html",redirect:"/pages/597c89/"},{name:"v-43c814b9",path:"/pages/427ffd/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-43c814b9").then(t)}},{path:"/pages/427ffd/index.html",redirect:"/pages/427ffd/"},{path:"/views/02.技术/13.JS设计模式.html",redirect:"/pages/427ffd/"},{name:"v-028a6853",path:"/pages/423757/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-028a6853").then(t)}},{path:"/pages/423757/index.html",redirect:"/pages/423757/"},{path:"/views/02.技术/14.谷歌调试快捷键.html",redirect:"/pages/423757/"},{name:"v-02e7991c",path:"/pages/a72718/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-02e7991c").then(t)}},{path:"/pages/a72718/index.html",redirect:"/pages/a72718/"},{path:"/views/02.技术/15.前端常用设计模式.html",redirect:"/pages/a72718/"},{name:"v-103bdf26",path:"/pages/43a79122/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-103bdf26").then(t)}},{path:"/pages/43a79122/index.html",redirect:"/pages/43a79122/"},{path:"/views/03.UI/01.单行多行文本超出隐藏解决方法.html",redirect:"/pages/43a79122/"},{name:"v-3a43f612",path:"/pages/44fc09/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-3a43f612").then(t)}},{path:"/pages/44fc09/index.html",redirect:"/pages/44fc09/"},{path:"/views/03.UI/02.flex布局优缺点.html",redirect:"/pages/44fc09/"},{name:"v-04bb221c",path:"/pages/7bc80c/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-04bb221c").then(t)}},{path:"/pages/7bc80c/index.html",redirect:"/pages/7bc80c/"},{path:"/views/03.UI/03.css速写.html",redirect:"/pages/7bc80c/"},{name:"v-c75e5df8",path:"/pages/beb6c0bd8a66cea6/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-c75e5df8").then(t)}},{path:"/pages/beb6c0bd8a66cea6/index.html",redirect:"/pages/beb6c0bd8a66cea6/"},{path:"/views/04.收藏/01.网站.html",redirect:"/pages/beb6c0bd8a66cea6/"},{name:"v-4f41d284",path:"/pages/eee83a9211a70f9d/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-4f41d284").then(t)}},{path:"/pages/eee83a9211a70f9d/index.html",redirect:"/pages/eee83a9211a70f9d/"},{path:"/views/04.收藏/02.资源.html",redirect:"/pages/eee83a9211a70f9d/"},{name:"v-14b8cce8",path:"/pages/12df8ace52d493f6/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-14b8cce8").then(t)}},{path:"/pages/12df8ace52d493f6/index.html",redirect:"/pages/12df8ace52d493f6/"},{path:"/views/04.收藏/03.Vue资源.html",redirect:"/pages/12df8ace52d493f6/"},{name:"v-9a4b90e2",path:"/pages/fb2914/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-9a4b90e2").then(t)}},{path:"/pages/fb2914/index.html",redirect:"/pages/fb2914/"},{path:"/views/05.随笔/01.你知道的越多，不知道的也就越多.html",redirect:"/pages/fb2914/"},{name:"v-f15cedf6",path:"/pages/cd8bde/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-f15cedf6").then(t)}},{path:"/pages/cd8bde/index.html",redirect:"/pages/cd8bde/"},{path:"/views/05.随笔/02.拥抱生活，拥抱快乐.html",redirect:"/pages/cd8bde/"},{name:"v-18baa86e",path:"/about/",component:Ws,beforeEnter:function(n,e,t){Ja("Layout","v-18baa86e").then(t)}},{path:"/about/index.html",redirect:"/about/"},{path:"/views/06.关于/01.关于.html",redirect:"/about/"},{path:"*",component:Ws}],Xs={title:"K-BOlG",description:"个人博客，学习踩坑记录",base:"/",headTags:[["link",{rel:"icon",href:"/favicon.ico"}],["meta",{name:"viewport",content:"width=device-width,initial-scale=1,user-scalable=no"}]],pages:[{title:"归档",frontmatter:{archivesPage:!0,title:"归档",permalink:"/archives/",article:!1},regularPath:"/@pages/archivesPage.html",relativePath:"@pages/archivesPage.md",key:"v-f62d8df6",path:"/archives/",lastUpdated:"4/28/2022, 6:08:46 PM",lastUpdatedTimestamp:1651169326e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"分类",frontmatter:{categoriesPage:!0,title:"分类",permalink:"/categories/",article:!1},regularPath:"/@pages/categoriesPage.html",relativePath:"@pages/categoriesPage.md",key:"v-786a7465",path:"/categories/",lastUpdated:"4/28/2022, 6:08:46 PM",lastUpdatedTimestamp:1651169326e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"标签",frontmatter:{tagsPage:!0,title:"标签",permalink:"/tags/",article:!1},regularPath:"/@pages/tagsPage.html",relativePath:"@pages/tagsPage.md",key:"v-6cd7c2f6",path:"/tags/",lastUpdated:"4/28/2022, 6:08:46 PM",lastUpdatedTimestamp:1651169326e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"Home",frontmatter:{home:!0,bannerBg:"none",features:[{title:"技术",link:"/skill/",imgUrl:"/assets/img/dragons-head.svg"},{title:"前端",link:"/web/",imgUrl:"/assets/img/girl-1.svg"},{title:"收藏",link:"/collect/",imgUrl:"/assets/img/surfing.svg"}],postList:"simple"},regularPath:"/",relativePath:"index.md",key:"v-7fbbcf1e",path:"/",lastUpdated:"4/1/2023, 12:50:49 PM",lastUpdatedTimestamp:1680353449e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"前端",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"views/01.前端",imgUrl:"/assets/img/other.png",description:"JavaScript、ES6、Vue框架等前端技术"}},title:"前端",date:"2020-03-11T21:50:53.000Z",permalink:"/web/",sidebar:!1,article:!1,comment:!1,editLink:!1,author:{name:"nengkai",link:"https://github.com/Takichange"}},regularPath:"/views/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/01.%E5%89%8D%E7%AB%AF.html",relativePath:"views/00.目录页/01.前端.md",key:"v-d6c6c636",path:"/web/",lastUpdated:"5/7/2022, 4:29:19 PM",lastUpdatedTimestamp:1651940959e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"技术",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"views/02.技术",imgUrl:"/assets/img/other.png",description:"JavaScript、ES6、Vue框架等前端技术"}},title:"技术",date:"2020-03-11T21:50:53.000Z",permalink:"/skill/",sidebar:!1,article:!1,comment:!1,editLink:!1,author:{name:"nengkai",link:"https://github.com/Takichange"}},regularPath:"/views/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/02.%E6%8A%80%E6%9C%AF.html",relativePath:"views/00.目录页/02.技术.md",key:"v-7b7a2cae",path:"/skill/",lastUpdated:"5/10/2022, 3:38:58 PM",lastUpdatedTimestamp:1652197138e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"UI",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"views/03.UI",imgUrl:"/assets/img/other.png",description:"CSS"}},title:"UI",date:"2020-03-11T21:50:53.000Z",permalink:"/UI/",sidebar:!1,article:!1,comment:!1,editLink:!1,author:{name:"nengkai",link:"https://github.com/Takichange"}},regularPath:"/views/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/03.UI.html",relativePath:"views/00.目录页/03.UI.md",key:"v-f3292544",path:"/UI/",lastUpdated:"5/10/2022, 3:38:58 PM",lastUpdatedTimestamp:1652197138e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"收藏",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"views/04.收藏",imgUrl:"/assets/img/other.png",description:"CSS"}},title:"收藏",date:"2020-03-11T21:50:53.000Z",permalink:"/collect/",sidebar:!1,article:!1,comment:!1,editLink:!1,author:{name:"nengkai",link:"https://github.com/Takichange"}},regularPath:"/views/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/04.%E6%94%B6%E8%97%8F.html",relativePath:"views/00.目录页/04.收藏.md",key:"v-6995df16",path:"/collect/",lastUpdated:"5/10/2022, 3:38:58 PM",lastUpdatedTimestamp:1652197138e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"http",frontmatter:{title:"http",date:"2021-03-17T13:47:02.000Z",permalink:"/pages/1d1b92/",categories:["前端"],tags:"http - http",author:{name:"nengkai",link:"https://github.com/Takichange"}},regularPath:"/views/01.%E5%89%8D%E7%AB%AF/10.Http/00.http.html",relativePath:"views/01.前端/10.Http/00.http.md",key:"v-a66894a8",path:"/pages/1d1b92/",headers:[{level:3,title:"常见的get请求",slug:"常见的get请求",normalizedTitle:"常见的 get 请求",charIndex:17},{level:3,title:"常见的post请求",slug:"常见的post请求",normalizedTitle:"常见的 post 请求",charIndex:114},{level:3,title:"get和post区别",slug:"get和post区别",normalizedTitle:"get 和 post 区别",charIndex:165},{level:3,title:"响应状态码",slug:"响应状态码",normalizedTitle:"响应状态码",charIndex:307}],lastUpdated:"5/7/2022, 4:29:19 PM",lastUpdatedTimestamp:1651940959e3,headersStr:"常见的get请求 常见的post请求 get和post区别 响应状态码",content:"# get 和 post\n\n\n# 常见的 get 请求\n\n 1. url地址栏发送请求\n    \n\n 2. 点击a标签发送请求\n    \n\n 3. Form表单没有填写（method: post）时发送的请求\n    \n\n\n# 常见的 post 请求\n\n 1. Form表单method: post时发送的请求\n    \n\n\n# get 和 post 区别\n\n 1. GET使用URL或Cookie传参，而POST将数据放在BODY中。\n    \n\n 2. GET方式提交的数据有长度限制，则POST的数据则可以非常大。\n    \n\n 3. POST比GET相对安全，因为数据在地址栏上不可见。\n    \n\n\n# 响应状态码\n\n响应码对浏览器来说很重要，它告诉浏览器响应的结果。\n\n 1. 200：请求成功，浏览器会把响应体内容（通常是html）显示在浏览器中；\n    \n\n 2. 301：重定向，被请求的旧资源永久移除了（不可以访问了），将会跳转到一个新资源，搜索引擎在抓取新内容的同时也将旧的网址替换为重定向之后的网址；\n    \n\n 3. 302：重定向，被请求的旧资源还在（仍然可以访问），但会临时跳转到一个新资源，搜索引擎会抓取新的内容而保存旧的网址；\n    \n\n 4. 304：请求资源未被修改，浏览器将会读取缓存；\n    \n\n 5. 404：请求的资源没有找到，说明客户端错误的请求了不存在的资源；\n    \n\n 6. 500：请求资源找到了，但服务器内部出现了错误；",normalizedContent:"# get 和 post\n\n\n# 常见的 get 请求\n\n 1. url地址栏发送请求\n    \n\n 2. 点击a标签发送请求\n    \n\n 3. form表单没有填写（method: post）时发送的请求\n    \n\n\n# 常见的 post 请求\n\n 1. form表单method: post时发送的请求\n    \n\n\n# get 和 post 区别\n\n 1. get使用url或cookie传参，而post将数据放在body中。\n    \n\n 2. get方式提交的数据有长度限制，则post的数据则可以非常大。\n    \n\n 3. post比get相对安全，因为数据在地址栏上不可见。\n    \n\n\n# 响应状态码\n\n响应码对浏览器来说很重要，它告诉浏览器响应的结果。\n\n 1. 200：请求成功，浏览器会把响应体内容（通常是html）显示在浏览器中；\n    \n\n 2. 301：重定向，被请求的旧资源永久移除了（不可以访问了），将会跳转到一个新资源，搜索引擎在抓取新内容的同时也将旧的网址替换为重定向之后的网址；\n    \n\n 3. 302：重定向，被请求的旧资源还在（仍然可以访问），但会临时跳转到一个新资源，搜索引擎会抓取新的内容而保存旧的网址；\n    \n\n 4. 304：请求资源未被修改，浏览器将会读取缓存；\n    \n\n 5. 404：请求的资源没有找到，说明客户端错误的请求了不存在的资源；\n    \n\n 6. 500：请求资源找到了，但服务器内部出现了错误；",charsets:{cjk:!0}},{title:"uni-app",frontmatter:{title:"uni-app",date:"2021-03-17T14:55:32.000Z",permalink:"/pages/bdbd49/",categories:["前端","Uni-app"],tags:[null]},regularPath:"/views/01.%E5%89%8D%E7%AB%AF/100.Uni-app/10.uni-app.html",relativePath:"views/01.前端/100.Uni-app/10.uni-app.md",key:"v-010f3164",path:"/pages/bdbd49/",headers:[{level:5,title:"uni-app官网 \thttps://uniapp.dcloud.io/resource",slug:"uni-app官网-https-uniapp-dcloud-io-resource",normalizedTitle:"uni-app 官网 \thttps://uniapp.dcloud.io/resource",charIndex:null},{level:2,title:"1.基本配置",slug:"_1-基本配置",normalizedTitle:"1. 基本配置",charIndex:170},{level:3,title:"1.1环境搭建",slug:"_1-1环境搭建",normalizedTitle:"1.1 环境搭建",charIndex:182},{level:3,title:"1.2 项目目录",slug:"_1-2-项目目录",normalizedTitle:"1.2 项目目录",charIndex:413},{level:3,title:"1.3 全局配置和页面配置",slug:"_1-3-全局配置和页面配置",normalizedTitle:"1.3 全局配置和页面配置",charIndex:809},{level:5,title:"通过globalStyle进行全局配置(pages.json)",slug:"通过globalstyle进行全局配置-pages-json",normalizedTitle:"通过 globalstyle 进行全局配置 (pages.json)",charIndex:826},{level:5,title:"通过pages进行配置页面(pages.json)",slug:"通过pages进行配置页面-pages-json",normalizedTitle:"通过 pages 进行配置页面 (pages.json)",charIndex:1468},{level:5,title:"配置tabbar",slug:"配置tabbar",normalizedTitle:"配置 tabbar",charIndex:1813},{level:5,title:"condition启动模式配置",slug:"condition启动模式配置",normalizedTitle:"condition 启动模式配置",charIndex:3524},{level:2,title:"2 基本API",slug:"_2-基本api",normalizedTitle:"2 基本 api",charIndex:4017},{level:3,title:"2.1 text",slug:"_2-1-text",normalizedTitle:"2.1 text",charIndex:4030},{level:6,title:"001 - text 组件的属性",slug:"_001-text-组件的属性",normalizedTitle:"001 - text 组件的属性",charIndex:4042},{level:6,title:"002 - 代码案例",slug:"_002-代码案例",normalizedTitle:"002 - 代码案例",charIndex:4254},{level:3,title:"2.2 view视图容器",slug:"_2-2-view视图容器",normalizedTitle:"2.2 view 视图容器",charIndex:4357},{level:6,title:"001 - 组件的属性",slug:"_001-组件的属性",normalizedTitle:"001 - 组件的属性",charIndex:4374},{level:6,title:"002 - 代码案例",slug:"_002-代码案例-2",normalizedTitle:"002 - 代码案例",charIndex:4254},{level:3,title:"2.3 button组件",slug:"_2-3-button组件",normalizedTitle:"2.3 button 组件",charIndex:4600},{level:6,title:"001 - 组件的属性",slug:"_001-组件的属性-2",normalizedTitle:"001 - 组件的属性",charIndex:4374},{level:6,title:"002 - 案例代码",slug:"_002-案例代码",normalizedTitle:"002 - 案例代码",charIndex:4919},{level:3,title:"2.4 image组件",slug:"_2-4-image组件",normalizedTitle:"2.4 image 组件",charIndex:5119},{level:3,title:"2.5 样式及图标",slug:"_2-5-样式及图标",normalizedTitle:"2.5 样式及图标",charIndex:5455},{level:3,title:"2.6 数据绑定",slug:"_2-6-数据绑定",normalizedTitle:"2.6 数据绑定",charIndex:5758},{level:5,title:"插值表达式的使用",slug:"插值表达式的使用",normalizedTitle:"插值表达式的使用",charIndex:5910},{level:5,title:"v-bind,v-for,v-if与vue中的使用一样",slug:"v-bind-v-for-v-if与vue中的使用一样",normalizedTitle:"v-bind,v-for,v-if 与 vue 中的使用一样",charIndex:5953},{level:3,title:"2.7 事件机制",slug:"_2-7-事件机制",normalizedTitle:"2.7 事件机制",charIndex:5988},{level:3,title:"2.8 生命周期",slug:"_2-8-生命周期",normalizedTitle:"2.8 生命周期",charIndex:6237},{level:5,title:"应用的生命周期",slug:"应用的生命周期",normalizedTitle:"应用的生命周期",charIndex:588},{level:5,title:"页面的生命周期",slug:"页面的生命周期",normalizedTitle:"页面的生命周期",charIndex:6693},{level:3,title:"2.9 下拉刷新",slug:"_2-9-下拉刷新",normalizedTitle:"2.9 下拉刷新",charIndex:7153},{level:5,title:"开启下拉刷新",slug:"开启下拉刷新",normalizedTitle:"开启下拉刷新",charIndex:1359},{level:5,title:"监听下拉刷新",slug:"监听下拉刷新",normalizedTitle:"监听下拉刷新",charIndex:7439},{level:5,title:"关闭下拉刷新",slug:"关闭下拉刷新",normalizedTitle:"关闭下拉刷新",charIndex:7770},{level:3,title:"2.10 上拉加载",slug:"_2-10-上拉加载",normalizedTitle:"2.10 上拉加载",charIndex:7872},{level:2,title:"3 网络请求",slug:"_3-网络请求",normalizedTitle:"3 网络请求",charIndex:8115},{level:2,title:"4 数据缓存",slug:"_4-数据缓存",normalizedTitle:"4 数据缓存",charIndex:8557},{level:2,title:"5 上传、预览图片",slug:"_5-上传、预览图片",normalizedTitle:"5 上传、预览图片",charIndex:9004},{level:5,title:"上传图片",slug:"上传图片",normalizedTitle:"上传图片",charIndex:9034},{level:5,title:"预览图片",slug:"预览图片",normalizedTitle:"预览图片",charIndex:9009},{level:2,title:"6 条件注释实现跨段兼容",slug:"_6-条件注释实现跨段兼容",normalizedTitle:"6 条件注释实现跨段兼容",charIndex:9880},{level:5,title:"组件的条件注释",slug:"组件的条件注释",normalizedTitle:"组件的条件注释",charIndex:10542},{level:5,title:"api的条件注释",slug:"api的条件注释",normalizedTitle:"api 的条件注释",charIndex:10633},{level:2,title:"7 导航跳转",slug:"_7-导航跳转",normalizedTitle:"7 导航跳转",charIndex:10867},{level:3,title:"7.1 利用navigator进行跳转",slug:"_7-1-利用navigator进行跳转",normalizedTitle:"7.1 利用 navigator 进行跳转",charIndex:10878},{level:3,title:"7.2 利用编程式导航进行跳转",slug:"_7-2-利用编程式导航进行跳转",normalizedTitle:"7.2 利用编程式导航进行跳转",charIndex:11214},{level:5,title:"导航跳转传递参数",slug:"导航跳转传递参数",normalizedTitle:"导航跳转传递参数",charIndex:12057},{level:4,title:"",slug:"",normalizedTitle:"",charIndex:0},{level:2,title:"8 组件的创建",slug:"_8-组件的创建",normalizedTitle:"8 组件的创建",charIndex:12351},{level:5,title:"基本使用",slug:"基本使用",normalizedTitle:"基本使用",charIndex:12362},{level:5,title:"生命周期函数",slug:"生命周期函数",normalizedTitle:"生命周期函数",charIndex:591},{level:5,title:"父组件给子组件传值",slug:"父组件给子组件传值",normalizedTitle:"父组件给子组件传值",charIndex:13219},{level:5,title:"子组件给父组件传值",slug:"子组件给父组件传值",normalizedTitle:"子组件给父组件传值",charIndex:13694},{level:5,title:"兄弟组件通讯",slug:"兄弟组件通讯",normalizedTitle:"兄弟组件通讯",charIndex:14379},{level:2,title:"9 uni-ui的使用",slug:"_9-uni-ui的使用",normalizedTitle:"9 uni-ui 的使用",charIndex:14498}],lastUpdated:"4/28/2022, 6:08:46 PM",lastUpdatedTimestamp:1651169326e3,headersStr:"uni-app官网 \thttps://uniapp.dcloud.io/resource 1.基本配置 1.1环境搭建 1.2 项目目录 1.3 全局配置和页面配置 通过globalStyle进行全局配置(pages.json) 通过pages进行配置页面(pages.json) 配置tabbar condition启动模式配置 2 基本API 2.1 text 001 - text 组件的属性 002 - 代码案例 2.2 view视图容器 001 - 组件的属性 002 - 代码案例 2.3 button组件 001 - 组件的属性 002 - 案例代码 2.4 image组件 2.5 样式及图标 2.6 数据绑定 插值表达式的使用 v-bind,v-for,v-if与vue中的使用一样 2.7 事件机制 2.8 生命周期 应用的生命周期 页面的生命周期 2.9 下拉刷新 开启下拉刷新 监听下拉刷新 关闭下拉刷新 2.10 上拉加载 3 网络请求 4 数据缓存 5 上传、预览图片 上传图片 预览图片 6 条件注释实现跨段兼容 组件的条件注释 api的条件注释 7 导航跳转 7.1 利用navigator进行跳转 7.2 利用编程式导航进行跳转 导航跳转传递参数  8 组件的创建 基本使用 生命周期函数 父组件给子组件传值 子组件给父组件传值 兄弟组件通讯 9 uni-ui的使用",content:'# uni-app\n\n# uni-app 官网 https://uniapp.dcloud.io/resource\n\nuni-app 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到 iOS、Android、H5、以及各种小程序（微信 / 支付宝 / 百度 / 头条 / QQ / 钉钉）等多个平台。\n\n\n# 1. 基本配置\n\n\n# 1.1 环境搭建\n\n1.安装编辑器HbuilderX\t\n//https://www.dcloud.io/hbuilderx.html\n2.安装微信开发者工具\t\t //https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html\n\n\n1\n2\n3\n\n\n第一次使用\n\n1.配置小程序ide的相关路径，才能运行成功\n2.微信开发者工具在设置中安全设置，服务端口开启\n\n\n1\n2\n\n\n\n# 1.2 项目目录\n\npages.json 文件用来对 uni-app 进行全局配置，决定页面文件的路径、窗口样式、原生的导航栏、底部的原生 tabbar 等\n\nmanifest.json 文件是应用的配置文件，用于指定应用的名称、图标、权限等。\n\nApp.vue 是我们的跟组件，所有页面都是在 App.vue 下进行切换的，是页面入口文件，可以调用应用的生命周期函数。\n\nmain.js 是我们的项目入口文件，主要作用是初始化 vue 实例并使用需要的插件。\n\nuni.scss 文件的用途是为了方便整体控制应用的风格。比如按钮颜色、边框风格， uni.scss 文件里预置了一批 scss 变量预置。\n\nunpackage 就是打包目录，在这里有各个平台的打包文件\n\npages 所有的页面存放目录\n\nstatic 静态资源目录，例如图片等\n\ncomponents 组件存放目录\n\n\n# 1.3 全局配置和页面配置\n\n# 通过 globalStyle 进行全局配置 (pages.json)\n\n用于设置应用的状态栏、导航条、标题、窗口背景色等。详细文档\n\n属性                             类型         默认值       描述\nnavigationBarBackgroundColor   HexColor   #F7F7F7   导航栏背景颜色（同状态栏背景色）\nnavigationBarTextStyle         String     white     导航栏标题颜色及状态栏前景颜色，仅支持 black/white\nnavigationBarTitleText         String               导航栏标题文字内容\nbackgroundColor                HexColor   #ffffff   窗口的背景色\nbackgroundTextStyle            String     dark      下拉 loading 的样式，仅支持 dark /light\nenablePullDownRefresh          Boolean    false     是否开启下拉刷新，详见页面生命周期。\nonReachBottomDistance          Number     50        页面上拉触底事件触发时距页面底部距离，单位只支持 px，详见页面生命周期\n\n# 通过 pages 进行配置页面 (pages.json)\n\n属性      类型       默认值   描述\npath    String         配置页面路径\nstyle   Object         配置页面窗口表现，配置项参考 pageStyle\n\npages 数组数组中第一项表示应用启动页\n\n"pages": [ \n\t\t{\n\t\t\t"path":"pages/message/message"\n\t\t},\n\t\t{\n\t\t\t"path": "pages/index/index",\n\t\t\t"style": {\n\t\t\t\t"navigationBarTitleText": "uni-app"\n\t\t\t}\n\t\t}\n\t]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n# 配置 tabbar\n\n如果应用是一个多 tab 应用，可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页。\n\nTips\n\n * 当设置 position 为 top 时，将不会显示 icon\n * tabBar 中的 list 是一个数组，只能配置最少 2 个、最多 5 个 tab，tab 按数组的顺序排序。\n\n属性说明：\n\n属性                类型         必填   默认值      描述                                       平台差异说明\ncolor             HexColor   是             tab 上的文字默认颜色                             \nselectedColor     HexColor   是             tab 上的文字选中时的颜色                           \nbackgroundColor   HexColor   是             tab 的背景色                                 \nborderStyle       String     否    black    tabbar 上边框的颜色，仅支持 black/white            App 2.3.4+ 支持其他颜色值\nlist              Array      是             tab 的列表，详见 list 属性说明，最少 2 个、最多 5 个 tab   \nposition          String     否    bottom   可选值 bottom、top                           top 值仅微信小程序支持\n\n其中 list 接收一个数组，数组中的每个项都是一个对象，其属性值如下：\n\n属性                 类型       必填   说明\npagePath           String   是    页面路径，必须在 pages 中先定义\ntext               String   是    tab 上按钮文字，在 5+APP 和 H5 平台为非必填。例如中间可放一个没有文字的 + 号图标\niconPath           String   否    图片路径，icon 大小限制为 40kb，建议尺寸为 81px * 81px，当 postion 为 top\n                                 时，此参数无效，不支持网络图片，不支持字体图标\nselectedIconPath   String   否    选中时的图片路径，icon 大小限制为 40kb，建议尺寸为 81px * 81px ，当 postion 为 top\n                                 时，此参数无效\n\n案例代码：\n\n"tabBar": {\n\t\t"list": [\n\t\t\t{\n\t\t\t\t"text": "首页",\n\t\t\t\t"pagePath":"pages/index/index",\n\t\t\t\t"iconPath":"static/tabs/home.png",\n\t\t\t\t"selectedIconPath":"static/tabs/home-active.png"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"text": "信息",\n\t\t\t\t"pagePath":"pages/message/message",\n\t\t\t\t"iconPath":"static/tabs/message.png",\n\t\t\t\t"selectedIconPath":"static/tabs/message-active.png"\n\t\t\t}\n\t\t]\n\t}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n# condition 启动模式配置\n\n启动模式配置，仅开发期间生效，用于模拟直达页面的场景，如：小程序转发后，用户点击所打开的页面。\n\n属性说明：\n\n属性        类型       是否必填   描述\ncurrent   Number   是      当前激活的模式，list 节点的索引值\nlist      Array    是      启动模式列表\n\nlist 说明：\n\n属性      类型       是否必填   描述\nname    String   是      启动模式名称\npath    String   是      启动页面路径\nquery   String   否      启动参数，可在页面的 onLoad 函数里获得\n\n案例代码：\n\n"condition":{\n\t\t"current":0,\n\t\t"list":[\n\t\t\t{\n\t\t\t\t"name":"详情页",\n\t\t\t\t"path":"pages/detail/detail",\n\t\t\t\t"query":"id=1"\n\t\t\t}\n\t\t]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 2 基本 API\n\n\n# 2.1 text\n\n# 001 - text 组件的属性\n\n属性           类型        默认值     必填   说明\nselectable   boolean   false   否    文本是否可选\nspace        string    .       否    显示连续空格，可选参数： ensp 、 emsp 、 nbsp\ndecode       boolean   false   否    是否解码\n\n# 002 - 代码案例\n\n<view>\n  \x3c!-- 长按文本是否可选 --\x3e\n  <text selectable=\'true\'>相当于行内元素</text>\n</view>\n\n\n1\n2\n3\n4\n\n\n\n# 2.2 view 视图容器\n\n# 001 - 组件的属性\n\n\n\n# 002 - 代码案例\n\n<view \n  hover-class=\'active\' \n  hover-stop-propagation \n :hover-start-time="2000" \n :hover-stay-time=\'2000\'\n>\n</view>\n<style>\n\t.active{\n\t\tcolor: red;\n\t}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 2.3 button 组件\n\n# 001 - 组件的属性\n\n属性名        类型        默认值       说明\nsize       String    default   按钮的大小\ntype       String    default   按钮的样式类型\nplain      Boolean   false     按钮是否镂空，背景色透明\ndisabled   Boolean   false     是否按钮\nloading    Boolean   false     名称是否带 loading t 图标\n\n * button 组件默认独占一行，设置 size 为 mini 时可以在一行显示多个\n\n# 002 - 案例代码\n\n<button size=\'mini\' type=\'primary\'>前端</button>\n\n<button size=\'mini\' type=\'default\' disabled=\'true\'>前端</button>\n\n<button size=\'mini\' type=\'warn\' loading=\'true\'>前端</button>\n\n\n1\n2\n3\n4\n5\n\n\n\n# 2.4 image 组件\n\n属性名    类型       默认值             说明           平台差异说明\nsrc    String                   图片资源地址       \nmode   String   \'scaleToFill\'   图片裁剪、缩放的模式   \n\nTips\n\n * <image> 组件默认宽度 300px、高度 225px；\n * src 仅支持相对路径、绝对路径，支持 base64 码；\n * 页面结构复杂，css 样式太多的情况，使用 image 可能导致样式生效较慢，出现 “闪一下” 的情况，此时设置 image{will-change: transform} , 可优化此问题。\n\n\n# 2.5 样式及图标\n\n样式\n\n1.rpx 即响应式px，一种根据屏幕宽度自适应的动态单位。以750宽的屏幕为基准，750rpx恰好为屏幕宽度。\n2.使用`@import`语句可以导入外联样式表，`@import`后跟需要导入的外联样式表的相对路径\n3.不能使用 * 选择器。\n4.page 相当于 body 节点\n\n\n1\n2\n3\n4\n\n\n图标\n\n1. 字体文件小于 40kb，`uni-app` 会自动将其转化为 base64 格式；\n\n2.字体文件大于等于 40kb， 需开发者自己转换，否则使用将不生效；\n\n3. 字体文件的引用路径推荐使用以 ~@ 开头的绝对路径。\n\n\n1\n2\n3\n4\n5\n\n\n\n# 2.6 数据绑定\n\n在页面中需要定义数据，和我们之前的 vue 一摸一样，直接在 data 中定义数据即可\n\nexport default {\n  data () {\n    return {\n      msg: \'hello-uni\'\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 插值表达式的使用\n\n<text>{{message}}</text>\n\n\n1\n\n\n# v-bind,v-for,v-if 与 vue 中的使用一样\n\n\n# 2.7 事件机制\n\n事件传参\n\t1.不传参，默认为事件对象event\n\t2.传一个参数，参数本身\n\t3.传2个参数，第一个参数为参数本身，第二个参数为事件对象，通过$event传递\n\n\n1\n2\n3\n4\n\n\n代码实例:\n\n<button @click="tapHandle(a,$event)">点我啊</button>\n\n\n1\n\n\nmethods: {\n  tapHandle (a,event) {\n    console.log(a,event)\n  }\n}\n\n\n1\n2\n3\n4\n5\n\n\n\n# 2.8 生命周期\n\n# 应用的生命周期\n\n函数名        说明\nonLaunch   当 uni-app 初始化完成时触发（全局只触发一次）\nonShow     当 uni-app 启动，或从后台进入前台显示\nonHide     当 uni-app 从前台进入后台\nonError    当 uni-app 报错时触发\n\nApp.vue\n\nexport default {\n\t\tonLaunch: function() {\n\t\t\tconsole.log(\'App Launch\')\n\t\t},\n\t\tonShow: function() {\n\t\t\tconsole.log(\'App Show\')\n\t\t},\n\t\tonHide: function() {\n\t\t\tconsole.log(\'App Hide\')\n\t\t},\n\t\tonError:function(Error) {\n\t\t\tconsole.log(Error)\n\t\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n# 页面的生命周期\n\nuni-app 支持如下页面生命周期函数：\n\n函数名        说明                                               平台差异说明   最低版本\nonLoad     监听页面加载，其参数为上个页面传递的数据，参数类型为 Object（用于页面传参），参考示例            \nonShow     监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面                     \nonReady    监听页面初次渲染完成。                                               \nonHide     监听页面隐藏                                                    \nonUnload   监听页面卸载                                                    \n\n\n# 2.9 下拉刷新\n\n# 开启下拉刷新\n\n第一步:pages.json中在pages的style配置enablePullDownRefresh\n第二步：\n\t通过调用onPullDownRefresh方法来开启下拉刷新\n    通过调用uni.startPullDownRefresh方法来开启下拉刷新\n\n\n1\n2\n3\n4\n\n\n代码实例：\n\npage.json\n\n{\n  "path":"pages/list/list",\n    "style":{\n      "enablePullDownRefresh": true\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n# 监听下拉刷新\n\nlist.vue\n\n通过 onPullDownRefresh 可以监听到下拉刷新的动作\n\nexport default {\n  data () {\n    return {\n      arr: [\'前端\',\'java\',\'ui\',\'大数据\']\n    }\n  },\n  methods: {\n    startPull () {\n      //第二种方式\n      uni.startPullDownRefresh()\n    }\n  },\n    //第一种方式\n  onPullDownRefresh () {\n    console.log(\'触发下拉刷新了\')\n      uni.stopPullDownRefresh()  //关闭下拉刷新\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n# 关闭下拉刷新\n\nuni.stopPullDownRefresh()\n\n\n# 2.10 上拉加载\n\n1.通过在pages.json文件中找到当前页面的pages节点下style中配置onReachBottomDistance可以设置距离底部开启加载的距离，默认为50px\n2.通过onReachBottom监听到触底的行为\n\n\n1\n2\n\n\n"style":{\t\t\t\t\n\t"onReachBottomDistance":100\t\t\t\t\n}\n\n\n1\n2\n3\n\n\nonReachBottom(){\n\tconsole.log(\'触底了\')\n},\n\n\n1\n2\n3\n\n\n\n# 3 网络请求\n\n在 uni 中可以调用 uni.request 方法进行请求网络请求\n\n需要注意的是：在小程序中网络相关的 API 在使用前需要配置域名白名单。\n\n发送 get 请求\n\n<template>\n\t<view>\n\t\t<button @click="sendGet">发送请求</button>\n\t</view>\n</template>\n<script>\n\texport default {\n\t\tmethods: {\n\t\t\tsendGet () {\n\t\t\t\tuni.request({\n\t\t\t\t\turl: \'http://localhost:8082/api/getlunbo\',\n\t\t\t\t\tsuccess(res) {\n\t\t\t\t\t\tconsole.log(res)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n发送 post 请求\n\n\n# 4 数据缓存\n\nuni.setStorage\t\t//将数据存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容\nuni.setStorageSync\t//将 data 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容\nuni.getStorage\t\t//从本地缓存中异步获取指定 key 对应的内容。\nuni.getStorageSync\t//从本地缓存中同步获取指定 key 对应的内容。\nuni.removeStorage\t//从本地缓存中异步移除指定 key。\nuni.removeStorageSync //从本地缓存中同步移除指定 key。\n\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n代码实例：\n\nuni.setStorage({\n    key:"user",\n    data:"hello",\n    success() {\n        console.log("存储成功")\n    }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 5 上传、预览图片\n\nuni.chooseImage\t\t//上传图片\nuni.previewImage\t//预览图片\n\n\n1\n2\n\n\n# 上传图片\n\n案例代码\n\n<template>\n\t<view>\n\t\t<button @click="chooseImg" type="primary">上传图片</button>\n\t\t<view>\n\t\t\t<image v-for="item in imgArr" :src="item" :key="index"></image>\n\t\t</view>\n\t</view>\n</template>\n\n<script>\n\texport default {\n\t\tdata () {\n\t\t\treturn {\n\t\t\t\timgArr: []\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\tchooseImg () {\n\t\t\t\tuni.chooseImage({\n\t\t\t\t\tcount: 9,\n\t\t\t\t\tsuccess: res=>{\n                        //通过tempFilePaths获取图片路径\n\t\t\t\t\t\tthis.imgArr = res.tempFilePaths\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n# 预览图片\n\n结构\n\n<view>\n\t<image v-for="item in imgArr" :src="item" @click="previewImg(item)" :key="item"></image>\n</view>\n\n\n1\n2\n3\n\n\n预览图片的方法\n\npreviewImg (current) {\n  uni.previewImage({\n    urls: this.imgArr,\n    current\n  })\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 6 条件注释实现跨段兼容\n\n条件编译是用特殊的注释作为标记，在编译时根据这些特殊的注释，将注释里面的代码编译到不同平台。\n\n写法：以 #ifdef 加平台标识 开头，以 #endif 结尾。\n\n\n1\n\n\n平台标识\n\n值            平台                                        参考文档\nAPP-PLUS     5+App                                     HTML5+ 规范\nH5           H5                                        \nMP-WEIXIN    微信小程序                                     微信小程序\nMP-ALIPAY    支付宝小程序                                    支付宝小程序\nMP-BAIDU     百度小程序                                     百度小程序\nMP-TOUTIAO   头条小程序                                     头条小程序\nMP-QQ        QQ 小程序                                    （目前仅 cli 版支持）\nMP           微信小程序 / 支付宝小程序 / 百度小程序 / 头条小程序 / QQ 小程序   \n\n# 组件的条件注释\n\n代码演示\n\n\x3c!-- #ifdef H5 --\x3e\n<view>\n  h5页面会显示\n</view>\n\x3c!-- #endif --\x3e\n\n\n1\n2\n3\n4\n5\n\n\n# api 的条件注释\n\n代码演示\n\nonLoad () {\n  //#ifdef MP-WEIXIN\n  console.log(\'微信小程序\')\n  //#endif\n}\n\n\n1\n2\n3\n4\n5\n\n\n样式的条件注释\n\n代码演示\n\n/* #ifdef H5 */\nview{\n  height: 100px;\n  line-height: 100px;\n  background: red;\n}\n/* #endif */\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 7 导航跳转\n\n\n# 7.1 利用 navigator 进行跳转\n\nnavigator 详细文档：文档地址\n\n跳转到普通页面\n\n<navigator url="/pages/about/about" hover-class="navigator-hover">\n  <button type="default">跳转到关于页面</button>\n</navigator>\n\n\n1\n2\n3\n\n\n跳转到 tabbar 页面\n\n<navigator url="/pages/message/message" open-type="switchTab">\n  <button type="default">跳转到message页面</button>\n</navigator>\n\n\n1\n2\n3\n\n\n\n# 7.2 利用编程式导航进行跳转\n\n导航跳转： https://uniapp.dcloud.io/api/router?id=navigateto\n\n利用 navigateTo 进行导航跳转\n\n保留当前页面，跳转到应用内的某个页面，使用 uni.navigateBack 可以返回到原页面。\n\n<button type="primary" @click="goAbout">跳转到关于页面</button>\n\n\n1\n\n\n通过 navigateTo 方法进行跳转到普通页面\n\ngoAbout () {\n  uni.navigateTo({\n    url: \'/pages/about/about\',\n  })\n}\n\n\n1\n2\n3\n4\n5\n\n\n通过 switchTab 跳转到 tabbar 页面\n\n跳转到 tabbar 页面\n\n<button type="primary" @click="goMessage">跳转到message页面</button>\n\n\n1\n\n\n通过 switchTab 方法进行跳转\n\ngoMessage () {\n  uni.switchTab({\n    url: \'/pages/message/message\'\n  })\n}\n\n\n1\n2\n3\n4\n5\n\n\nredirectTo 进行跳转\n\n关闭当前页面，跳转到应用内的某个页面。\n\n\x3c!-- template --\x3e\n<button type="primary" @click="goMessage">跳转到message页面</button>\n\x3c!-- js --\x3e\ngoMessage () {\n  uni.switchTab({\n    url: \'/pages/message/message\'\n  })\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n通过 onUnload 测试当前组件确实卸载\n\nonUnload () {\n  console.log(\'组件卸载了\')\n}\n\n\n1\n2\n3\n\n\n# 导航跳转传递参数\n\n在导航进行跳转到下一个页面的同时，可以给下一个页面传递相应的参数，接收参数的页面可以通过 onLoad 生命周期进行接收\n\n传递参数的页面\n\ngoAbout () {\n  uni.navigateTo({\n    url: \'/pages/about/about?id=80\',\n  });\n}\n\n\n1\n2\n3\n4\n5\n\n\n接收参数的页面\n\n<script>\n\texport default {\n\t\tonLoad (options) {\n\t\t\tconsole.log(options)\n\t\t}\n\t}\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n#\n\n\n# 8 组件的创建\n\n# 基本使用\n\n1.创建组件\n2.引入组件\n3.注册组件\n4.使用组件\n\n\n1\n2\n3\n4\n\n\n# 生命周期函数\n\nBEFORECREATE    在实例初始化之后被调用。详见                                                         \ncreated         在实例创建完成后被立即调用。详见                                                       \nbeforeMount     在挂载开始之前被调用。详见                                                          \nmounted         挂载到实例上去之后调用。详见 注意：此处并不能确定子组件被全部挂载，如果需要子组件完全挂载之后在执行操作可以使用               \n                $nextTick Vue 官方文档\nbeforeUpdate    数据更新时调用，发生在虚拟 DOM 打补丁之前。详见                                 仅 H5 平台支持   \nupdated         由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。详见                     仅 H5 平台支持   \nbeforeDestroy   实例销毁之前调用。在这一步，实例仍然完全可用。详见                                              \ndestroyed       Vue 实例销毁后调用。调用后，Vue                                                    \n                实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。详见\n\n# 父组件给子组件传值\n\n子组件\n\n<template>\n\t<view>\n\t\t这是一个自定义组件 {{msg}}\n\t</view>\n</template>\n\n<script>\n\texport default {\n\t\tprops: [\'msg\']\n\t}\n<\/script>\n\n<style>\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n父组件\n\n<template>\n\t<view>\n\t\t<test :msg="msg"></test>\n\t</view>\n</template>\n\n<script>\n\timport test from "@/components/test/test.vue"\n\texport default {\n\t\tdata () {\n\t\t\treturn {\n\t\t\t\tmsg: \'hello\'\n\t\t\t}\n\t\t},\n\t\t\n\t\tcomponents: {test}\n\t}\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n# 子组件给父组件传值\n\n通过 $emit 触发事件进行传递参数\n\n<template>\n\t<view>\n\t\t这是一个自定义组件 {{msg}}\n\t\t<button type="primary" @click="sendMsg">给父组件传值</button>\n\t</view>\n</template>\n\n<script>\n\texport default {\n\t\tdata () {\n\t\t\treturn {\n\t\t\t\tstatus: \'打篮球\'\n\t\t\t}\n\t\t}，\n\t\tmethods: {\n\t\t\tsendMsg () {\n\t\t\t\tthis.$emit(\'myEvent\',this.status)\n\t\t\t}\n\t\t}\n\t}\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n父组件定义自定义事件并接收参数\n\n<template>\n\t<view>\n\t\t<test @myEvent="getMsg"></test>\n\t</view>\n</template>\n<script>\n\timport test from "@/components/test/test.vue"\n\texport default {\n\t\tmethods: {\n\t\t\tgetMsg (res) {\n\t\t\t\tconsole.log(res)\n\t\t\t}\n\t\t},\t\t\n\t\tcomponents: {test}\n\t}\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n# 兄弟组件通讯\n\na.vue\n\n//全局定义\ncreated() {\n    uni.$on(\'函数名\',()=>{})\n}\n\n\n1\n2\n3\n4\n\n\nb.vue\n\n//调用定义的函数\nuni.$emit(\'函数名\')\n\n\n1\n2\n\n\n\n# 9 uni-ui 的使用\n\nuni-ui 文档\n\n1、进入 Grid 宫格组件\n\n2、使用 HBuilderX 导入该组件\n\n3、导入该组件\n\nimport uniGrid from "@/components/uni-grid/uni-grid.vue"\nimport uniGridItem from "@/components/uni-grid-item/uni-grid-item.vue"\n\n\n1\n2\n\n\n4、注册组件\n\ncomponents: {uniGrid,uniGridItem}\n\n\n1\n\n\n5、使用组件\n\n<uni-grid :column="3">\n  <uni-grid-item>\n    <text class="text">文本</text>\n  </uni-grid-item>\n  <uni-grid-item>\n    <text class="text">文本</text>\n  </uni-grid-item>\n  <uni-grid-item>\n    <text class="text">文本</text>\n  </uni-grid-item>\n</uni-grid>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n',normalizedContent:'# uni-app\n\n# uni-app 官网 https://uniapp.dcloud.io/resource\n\nuni-app 是一个使用 vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到 ios、android、h5、以及各种小程序（微信 / 支付宝 / 百度 / 头条 / qq / 钉钉）等多个平台。\n\n\n# 1. 基本配置\n\n\n# 1.1 环境搭建\n\n1.安装编辑器hbuilderx\t\n//https://www.dcloud.io/hbuilderx.html\n2.安装微信开发者工具\t\t //https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html\n\n\n1\n2\n3\n\n\n第一次使用\n\n1.配置小程序ide的相关路径，才能运行成功\n2.微信开发者工具在设置中安全设置，服务端口开启\n\n\n1\n2\n\n\n\n# 1.2 项目目录\n\npages.json 文件用来对 uni-app 进行全局配置，决定页面文件的路径、窗口样式、原生的导航栏、底部的原生 tabbar 等\n\nmanifest.json 文件是应用的配置文件，用于指定应用的名称、图标、权限等。\n\napp.vue 是我们的跟组件，所有页面都是在 app.vue 下进行切换的，是页面入口文件，可以调用应用的生命周期函数。\n\nmain.js 是我们的项目入口文件，主要作用是初始化 vue 实例并使用需要的插件。\n\nuni.scss 文件的用途是为了方便整体控制应用的风格。比如按钮颜色、边框风格， uni.scss 文件里预置了一批 scss 变量预置。\n\nunpackage 就是打包目录，在这里有各个平台的打包文件\n\npages 所有的页面存放目录\n\nstatic 静态资源目录，例如图片等\n\ncomponents 组件存放目录\n\n\n# 1.3 全局配置和页面配置\n\n# 通过 globalstyle 进行全局配置 (pages.json)\n\n用于设置应用的状态栏、导航条、标题、窗口背景色等。详细文档\n\n属性                             类型         默认值       描述\nnavigationbarbackgroundcolor   hexcolor   #f7f7f7   导航栏背景颜色（同状态栏背景色）\nnavigationbartextstyle         string     white     导航栏标题颜色及状态栏前景颜色，仅支持 black/white\nnavigationbartitletext         string               导航栏标题文字内容\nbackgroundcolor                hexcolor   #ffffff   窗口的背景色\nbackgroundtextstyle            string     dark      下拉 loading 的样式，仅支持 dark /light\nenablepulldownrefresh          boolean    false     是否开启下拉刷新，详见页面生命周期。\nonreachbottomdistance          number     50        页面上拉触底事件触发时距页面底部距离，单位只支持 px，详见页面生命周期\n\n# 通过 pages 进行配置页面 (pages.json)\n\n属性      类型       默认值   描述\npath    string         配置页面路径\nstyle   object         配置页面窗口表现，配置项参考 pagestyle\n\npages 数组数组中第一项表示应用启动页\n\n"pages": [ \n\t\t{\n\t\t\t"path":"pages/message/message"\n\t\t},\n\t\t{\n\t\t\t"path": "pages/index/index",\n\t\t\t"style": {\n\t\t\t\t"navigationbartitletext": "uni-app"\n\t\t\t}\n\t\t}\n\t]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n# 配置 tabbar\n\n如果应用是一个多 tab 应用，可以通过 tabbar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页。\n\ntips\n\n * 当设置 position 为 top 时，将不会显示 icon\n * tabbar 中的 list 是一个数组，只能配置最少 2 个、最多 5 个 tab，tab 按数组的顺序排序。\n\n属性说明：\n\n属性                类型         必填   默认值      描述                                       平台差异说明\ncolor             hexcolor   是             tab 上的文字默认颜色                             \nselectedcolor     hexcolor   是             tab 上的文字选中时的颜色                           \nbackgroundcolor   hexcolor   是             tab 的背景色                                 \nborderstyle       string     否    black    tabbar 上边框的颜色，仅支持 black/white            app 2.3.4+ 支持其他颜色值\nlist              array      是             tab 的列表，详见 list 属性说明，最少 2 个、最多 5 个 tab   \nposition          string     否    bottom   可选值 bottom、top                           top 值仅微信小程序支持\n\n其中 list 接收一个数组，数组中的每个项都是一个对象，其属性值如下：\n\n属性                 类型       必填   说明\npagepath           string   是    页面路径，必须在 pages 中先定义\ntext               string   是    tab 上按钮文字，在 5+app 和 h5 平台为非必填。例如中间可放一个没有文字的 + 号图标\niconpath           string   否    图片路径，icon 大小限制为 40kb，建议尺寸为 81px * 81px，当 postion 为 top\n                                 时，此参数无效，不支持网络图片，不支持字体图标\nselectediconpath   string   否    选中时的图片路径，icon 大小限制为 40kb，建议尺寸为 81px * 81px ，当 postion 为 top\n                                 时，此参数无效\n\n案例代码：\n\n"tabbar": {\n\t\t"list": [\n\t\t\t{\n\t\t\t\t"text": "首页",\n\t\t\t\t"pagepath":"pages/index/index",\n\t\t\t\t"iconpath":"static/tabs/home.png",\n\t\t\t\t"selectediconpath":"static/tabs/home-active.png"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"text": "信息",\n\t\t\t\t"pagepath":"pages/message/message",\n\t\t\t\t"iconpath":"static/tabs/message.png",\n\t\t\t\t"selectediconpath":"static/tabs/message-active.png"\n\t\t\t}\n\t\t]\n\t}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n# condition 启动模式配置\n\n启动模式配置，仅开发期间生效，用于模拟直达页面的场景，如：小程序转发后，用户点击所打开的页面。\n\n属性说明：\n\n属性        类型       是否必填   描述\ncurrent   number   是      当前激活的模式，list 节点的索引值\nlist      array    是      启动模式列表\n\nlist 说明：\n\n属性      类型       是否必填   描述\nname    string   是      启动模式名称\npath    string   是      启动页面路径\nquery   string   否      启动参数，可在页面的 onload 函数里获得\n\n案例代码：\n\n"condition":{\n\t\t"current":0,\n\t\t"list":[\n\t\t\t{\n\t\t\t\t"name":"详情页",\n\t\t\t\t"path":"pages/detail/detail",\n\t\t\t\t"query":"id=1"\n\t\t\t}\n\t\t]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 2 基本 api\n\n\n# 2.1 text\n\n# 001 - text 组件的属性\n\n属性           类型        默认值     必填   说明\nselectable   boolean   false   否    文本是否可选\nspace        string    .       否    显示连续空格，可选参数： ensp 、 emsp 、 nbsp\ndecode       boolean   false   否    是否解码\n\n# 002 - 代码案例\n\n<view>\n  \x3c!-- 长按文本是否可选 --\x3e\n  <text selectable=\'true\'>相当于行内元素</text>\n</view>\n\n\n1\n2\n3\n4\n\n\n\n# 2.2 view 视图容器\n\n# 001 - 组件的属性\n\n\n\n# 002 - 代码案例\n\n<view \n  hover-class=\'active\' \n  hover-stop-propagation \n :hover-start-time="2000" \n :hover-stay-time=\'2000\'\n>\n</view>\n<style>\n\t.active{\n\t\tcolor: red;\n\t}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 2.3 button 组件\n\n# 001 - 组件的属性\n\n属性名        类型        默认值       说明\nsize       string    default   按钮的大小\ntype       string    default   按钮的样式类型\nplain      boolean   false     按钮是否镂空，背景色透明\ndisabled   boolean   false     是否按钮\nloading    boolean   false     名称是否带 loading t 图标\n\n * button 组件默认独占一行，设置 size 为 mini 时可以在一行显示多个\n\n# 002 - 案例代码\n\n<button size=\'mini\' type=\'primary\'>前端</button>\n\n<button size=\'mini\' type=\'default\' disabled=\'true\'>前端</button>\n\n<button size=\'mini\' type=\'warn\' loading=\'true\'>前端</button>\n\n\n1\n2\n3\n4\n5\n\n\n\n# 2.4 image 组件\n\n属性名    类型       默认值             说明           平台差异说明\nsrc    string                   图片资源地址       \nmode   string   \'scaletofill\'   图片裁剪、缩放的模式   \n\ntips\n\n * <image> 组件默认宽度 300px、高度 225px；\n * src 仅支持相对路径、绝对路径，支持 base64 码；\n * 页面结构复杂，css 样式太多的情况，使用 image 可能导致样式生效较慢，出现 “闪一下” 的情况，此时设置 image{will-change: transform} , 可优化此问题。\n\n\n# 2.5 样式及图标\n\n样式\n\n1.rpx 即响应式px，一种根据屏幕宽度自适应的动态单位。以750宽的屏幕为基准，750rpx恰好为屏幕宽度。\n2.使用`@import`语句可以导入外联样式表，`@import`后跟需要导入的外联样式表的相对路径\n3.不能使用 * 选择器。\n4.page 相当于 body 节点\n\n\n1\n2\n3\n4\n\n\n图标\n\n1. 字体文件小于 40kb，`uni-app` 会自动将其转化为 base64 格式；\n\n2.字体文件大于等于 40kb， 需开发者自己转换，否则使用将不生效；\n\n3. 字体文件的引用路径推荐使用以 ~@ 开头的绝对路径。\n\n\n1\n2\n3\n4\n5\n\n\n\n# 2.6 数据绑定\n\n在页面中需要定义数据，和我们之前的 vue 一摸一样，直接在 data 中定义数据即可\n\nexport default {\n  data () {\n    return {\n      msg: \'hello-uni\'\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 插值表达式的使用\n\n<text>{{message}}</text>\n\n\n1\n\n\n# v-bind,v-for,v-if 与 vue 中的使用一样\n\n\n# 2.7 事件机制\n\n事件传参\n\t1.不传参，默认为事件对象event\n\t2.传一个参数，参数本身\n\t3.传2个参数，第一个参数为参数本身，第二个参数为事件对象，通过$event传递\n\n\n1\n2\n3\n4\n\n\n代码实例:\n\n<button @click="taphandle(a,$event)">点我啊</button>\n\n\n1\n\n\nmethods: {\n  taphandle (a,event) {\n    console.log(a,event)\n  }\n}\n\n\n1\n2\n3\n4\n5\n\n\n\n# 2.8 生命周期\n\n# 应用的生命周期\n\n函数名        说明\nonlaunch   当 uni-app 初始化完成时触发（全局只触发一次）\nonshow     当 uni-app 启动，或从后台进入前台显示\nonhide     当 uni-app 从前台进入后台\nonerror    当 uni-app 报错时触发\n\napp.vue\n\nexport default {\n\t\tonlaunch: function() {\n\t\t\tconsole.log(\'app launch\')\n\t\t},\n\t\tonshow: function() {\n\t\t\tconsole.log(\'app show\')\n\t\t},\n\t\tonhide: function() {\n\t\t\tconsole.log(\'app hide\')\n\t\t},\n\t\tonerror:function(error) {\n\t\t\tconsole.log(error)\n\t\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n# 页面的生命周期\n\nuni-app 支持如下页面生命周期函数：\n\n函数名        说明                                               平台差异说明   最低版本\nonload     监听页面加载，其参数为上个页面传递的数据，参数类型为 object（用于页面传参），参考示例            \nonshow     监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面                     \nonready    监听页面初次渲染完成。                                               \nonhide     监听页面隐藏                                                    \nonunload   监听页面卸载                                                    \n\n\n# 2.9 下拉刷新\n\n# 开启下拉刷新\n\n第一步:pages.json中在pages的style配置enablepulldownrefresh\n第二步：\n\t通过调用onpulldownrefresh方法来开启下拉刷新\n    通过调用uni.startpulldownrefresh方法来开启下拉刷新\n\n\n1\n2\n3\n4\n\n\n代码实例：\n\npage.json\n\n{\n  "path":"pages/list/list",\n    "style":{\n      "enablepulldownrefresh": true\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n# 监听下拉刷新\n\nlist.vue\n\n通过 onpulldownrefresh 可以监听到下拉刷新的动作\n\nexport default {\n  data () {\n    return {\n      arr: [\'前端\',\'java\',\'ui\',\'大数据\']\n    }\n  },\n  methods: {\n    startpull () {\n      //第二种方式\n      uni.startpulldownrefresh()\n    }\n  },\n    //第一种方式\n  onpulldownrefresh () {\n    console.log(\'触发下拉刷新了\')\n      uni.stoppulldownrefresh()  //关闭下拉刷新\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n# 关闭下拉刷新\n\nuni.stoppulldownrefresh()\n\n\n# 2.10 上拉加载\n\n1.通过在pages.json文件中找到当前页面的pages节点下style中配置onreachbottomdistance可以设置距离底部开启加载的距离，默认为50px\n2.通过onreachbottom监听到触底的行为\n\n\n1\n2\n\n\n"style":{\t\t\t\t\n\t"onreachbottomdistance":100\t\t\t\t\n}\n\n\n1\n2\n3\n\n\nonreachbottom(){\n\tconsole.log(\'触底了\')\n},\n\n\n1\n2\n3\n\n\n\n# 3 网络请求\n\n在 uni 中可以调用 uni.request 方法进行请求网络请求\n\n需要注意的是：在小程序中网络相关的 api 在使用前需要配置域名白名单。\n\n发送 get 请求\n\n<template>\n\t<view>\n\t\t<button @click="sendget">发送请求</button>\n\t</view>\n</template>\n<script>\n\texport default {\n\t\tmethods: {\n\t\t\tsendget () {\n\t\t\t\tuni.request({\n\t\t\t\t\turl: \'http://localhost:8082/api/getlunbo\',\n\t\t\t\t\tsuccess(res) {\n\t\t\t\t\t\tconsole.log(res)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n发送 post 请求\n\n\n# 4 数据缓存\n\nuni.setstorage\t\t//将数据存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容\nuni.setstoragesync\t//将 data 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容\nuni.getstorage\t\t//从本地缓存中异步获取指定 key 对应的内容。\nuni.getstoragesync\t//从本地缓存中同步获取指定 key 对应的内容。\nuni.removestorage\t//从本地缓存中异步移除指定 key。\nuni.removestoragesync //从本地缓存中同步移除指定 key。\n\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n代码实例：\n\nuni.setstorage({\n    key:"user",\n    data:"hello",\n    success() {\n        console.log("存储成功")\n    }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 5 上传、预览图片\n\nuni.chooseimage\t\t//上传图片\nuni.previewimage\t//预览图片\n\n\n1\n2\n\n\n# 上传图片\n\n案例代码\n\n<template>\n\t<view>\n\t\t<button @click="chooseimg" type="primary">上传图片</button>\n\t\t<view>\n\t\t\t<image v-for="item in imgarr" :src="item" :key="index"></image>\n\t\t</view>\n\t</view>\n</template>\n\n<script>\n\texport default {\n\t\tdata () {\n\t\t\treturn {\n\t\t\t\timgarr: []\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\tchooseimg () {\n\t\t\t\tuni.chooseimage({\n\t\t\t\t\tcount: 9,\n\t\t\t\t\tsuccess: res=>{\n                        //通过tempfilepaths获取图片路径\n\t\t\t\t\t\tthis.imgarr = res.tempfilepaths\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n# 预览图片\n\n结构\n\n<view>\n\t<image v-for="item in imgarr" :src="item" @click="previewimg(item)" :key="item"></image>\n</view>\n\n\n1\n2\n3\n\n\n预览图片的方法\n\npreviewimg (current) {\n  uni.previewimage({\n    urls: this.imgarr,\n    current\n  })\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 6 条件注释实现跨段兼容\n\n条件编译是用特殊的注释作为标记，在编译时根据这些特殊的注释，将注释里面的代码编译到不同平台。\n\n写法：以 #ifdef 加平台标识 开头，以 #endif 结尾。\n\n\n1\n\n\n平台标识\n\n值            平台                                        参考文档\napp-plus     5+app                                     html5+ 规范\nh5           h5                                        \nmp-weixin    微信小程序                                     微信小程序\nmp-alipay    支付宝小程序                                    支付宝小程序\nmp-baidu     百度小程序                                     百度小程序\nmp-toutiao   头条小程序                                     头条小程序\nmp-qq        qq 小程序                                    （目前仅 cli 版支持）\nmp           微信小程序 / 支付宝小程序 / 百度小程序 / 头条小程序 / qq 小程序   \n\n# 组件的条件注释\n\n代码演示\n\n\x3c!-- #ifdef h5 --\x3e\n<view>\n  h5页面会显示\n</view>\n\x3c!-- #endif --\x3e\n\n\n1\n2\n3\n4\n5\n\n\n# api 的条件注释\n\n代码演示\n\nonload () {\n  //#ifdef mp-weixin\n  console.log(\'微信小程序\')\n  //#endif\n}\n\n\n1\n2\n3\n4\n5\n\n\n样式的条件注释\n\n代码演示\n\n/* #ifdef h5 */\nview{\n  height: 100px;\n  line-height: 100px;\n  background: red;\n}\n/* #endif */\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 7 导航跳转\n\n\n# 7.1 利用 navigator 进行跳转\n\nnavigator 详细文档：文档地址\n\n跳转到普通页面\n\n<navigator url="/pages/about/about" hover-class="navigator-hover">\n  <button type="default">跳转到关于页面</button>\n</navigator>\n\n\n1\n2\n3\n\n\n跳转到 tabbar 页面\n\n<navigator url="/pages/message/message" open-type="switchtab">\n  <button type="default">跳转到message页面</button>\n</navigator>\n\n\n1\n2\n3\n\n\n\n# 7.2 利用编程式导航进行跳转\n\n导航跳转： https://uniapp.dcloud.io/api/router?id=navigateto\n\n利用 navigateto 进行导航跳转\n\n保留当前页面，跳转到应用内的某个页面，使用 uni.navigateback 可以返回到原页面。\n\n<button type="primary" @click="goabout">跳转到关于页面</button>\n\n\n1\n\n\n通过 navigateto 方法进行跳转到普通页面\n\ngoabout () {\n  uni.navigateto({\n    url: \'/pages/about/about\',\n  })\n}\n\n\n1\n2\n3\n4\n5\n\n\n通过 switchtab 跳转到 tabbar 页面\n\n跳转到 tabbar 页面\n\n<button type="primary" @click="gomessage">跳转到message页面</button>\n\n\n1\n\n\n通过 switchtab 方法进行跳转\n\ngomessage () {\n  uni.switchtab({\n    url: \'/pages/message/message\'\n  })\n}\n\n\n1\n2\n3\n4\n5\n\n\nredirectto 进行跳转\n\n关闭当前页面，跳转到应用内的某个页面。\n\n\x3c!-- template --\x3e\n<button type="primary" @click="gomessage">跳转到message页面</button>\n\x3c!-- js --\x3e\ngomessage () {\n  uni.switchtab({\n    url: \'/pages/message/message\'\n  })\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n通过 onunload 测试当前组件确实卸载\n\nonunload () {\n  console.log(\'组件卸载了\')\n}\n\n\n1\n2\n3\n\n\n# 导航跳转传递参数\n\n在导航进行跳转到下一个页面的同时，可以给下一个页面传递相应的参数，接收参数的页面可以通过 onload 生命周期进行接收\n\n传递参数的页面\n\ngoabout () {\n  uni.navigateto({\n    url: \'/pages/about/about?id=80\',\n  });\n}\n\n\n1\n2\n3\n4\n5\n\n\n接收参数的页面\n\n<script>\n\texport default {\n\t\tonload (options) {\n\t\t\tconsole.log(options)\n\t\t}\n\t}\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n#\n\n\n# 8 组件的创建\n\n# 基本使用\n\n1.创建组件\n2.引入组件\n3.注册组件\n4.使用组件\n\n\n1\n2\n3\n4\n\n\n# 生命周期函数\n\nbeforecreate    在实例初始化之后被调用。详见                                                         \ncreated         在实例创建完成后被立即调用。详见                                                       \nbeforemount     在挂载开始之前被调用。详见                                                          \nmounted         挂载到实例上去之后调用。详见 注意：此处并不能确定子组件被全部挂载，如果需要子组件完全挂载之后在执行操作可以使用               \n                $nexttick vue 官方文档\nbeforeupdate    数据更新时调用，发生在虚拟 dom 打补丁之前。详见                                 仅 h5 平台支持   \nupdated         由于数据更改导致的虚拟 dom 重新渲染和打补丁，在这之后会调用该钩子。详见                     仅 h5 平台支持   \nbeforedestroy   实例销毁之前调用。在这一步，实例仍然完全可用。详见                                              \ndestroyed       vue 实例销毁后调用。调用后，vue                                                    \n                实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。详见\n\n# 父组件给子组件传值\n\n子组件\n\n<template>\n\t<view>\n\t\t这是一个自定义组件 {{msg}}\n\t</view>\n</template>\n\n<script>\n\texport default {\n\t\tprops: [\'msg\']\n\t}\n<\/script>\n\n<style>\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n父组件\n\n<template>\n\t<view>\n\t\t<test :msg="msg"></test>\n\t</view>\n</template>\n\n<script>\n\timport test from "@/components/test/test.vue"\n\texport default {\n\t\tdata () {\n\t\t\treturn {\n\t\t\t\tmsg: \'hello\'\n\t\t\t}\n\t\t},\n\t\t\n\t\tcomponents: {test}\n\t}\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n# 子组件给父组件传值\n\n通过 $emit 触发事件进行传递参数\n\n<template>\n\t<view>\n\t\t这是一个自定义组件 {{msg}}\n\t\t<button type="primary" @click="sendmsg">给父组件传值</button>\n\t</view>\n</template>\n\n<script>\n\texport default {\n\t\tdata () {\n\t\t\treturn {\n\t\t\t\tstatus: \'打篮球\'\n\t\t\t}\n\t\t}，\n\t\tmethods: {\n\t\t\tsendmsg () {\n\t\t\t\tthis.$emit(\'myevent\',this.status)\n\t\t\t}\n\t\t}\n\t}\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n父组件定义自定义事件并接收参数\n\n<template>\n\t<view>\n\t\t<test @myevent="getmsg"></test>\n\t</view>\n</template>\n<script>\n\timport test from "@/components/test/test.vue"\n\texport default {\n\t\tmethods: {\n\t\t\tgetmsg (res) {\n\t\t\t\tconsole.log(res)\n\t\t\t}\n\t\t},\t\t\n\t\tcomponents: {test}\n\t}\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n# 兄弟组件通讯\n\na.vue\n\n//全局定义\ncreated() {\n    uni.$on(\'函数名\',()=>{})\n}\n\n\n1\n2\n3\n4\n\n\nb.vue\n\n//调用定义的函数\nuni.$emit(\'函数名\')\n\n\n1\n2\n\n\n\n# 9 uni-ui 的使用\n\nuni-ui 文档\n\n1、进入 grid 宫格组件\n\n2、使用 hbuilderx 导入该组件\n\n3、导入该组件\n\nimport unigrid from "@/components/uni-grid/uni-grid.vue"\nimport unigriditem from "@/components/uni-grid-item/uni-grid-item.vue"\n\n\n1\n2\n\n\n4、注册组件\n\ncomponents: {unigrid,unigriditem}\n\n\n1\n\n\n5、使用组件\n\n<uni-grid :column="3">\n  <uni-grid-item>\n    <text class="text">文本</text>\n  </uni-grid-item>\n  <uni-grid-item>\n    <text class="text">文本</text>\n  </uni-grid-item>\n  <uni-grid-item>\n    <text class="text">文本</text>\n  </uni-grid-item>\n</uni-grid>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n',charsets:{cjk:!0}},{title:"性能优化",frontmatter:{title:"性能优化",date:"2021-03-17T14:57:08.000Z",permalink:"/pages/01a636/",categories:["前端","性能优化"],tags:[null]},regularPath:"/views/01.%E5%89%8D%E7%AB%AF/110.%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/10.%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html",relativePath:"views/01.前端/110.性能优化/10.性能优化.md",key:"v-32412db8",path:"/pages/01a636/",headers:[{level:2,title:"一.浏览器应该有的功能",slug:"一-浏览器应该有的功能",normalizedTitle:"一。浏览器应该有的功能",charIndex:2},{level:2,title:"二、浏览器渲染引擎",slug:"二、浏览器渲染引擎",normalizedTitle:"二、浏览器渲染引擎",charIndex:1504},{level:3,title:"主要模块",slug:"主要模块",normalizedTitle:"主要模块",charIndex:1518},{level:3,title:"大致的渲染过程",slug:"大致的渲染过程",normalizedTitle:"大致的渲染过程",charIndex:2014},{level:3,title:"阻塞渲染",slug:"阻塞渲染",normalizedTitle:"阻塞渲染",charIndex:2469},{level:2,title:"三.图层与重绘重排",slug:"三-图层与重绘重排",normalizedTitle:"三。图层与重绘重排",charIndex:3902},{level:2,title:"四.CDN",slug:"四-cdn",normalizedTitle:"四.cdn",charIndex:7802},{level:2,title:"五.浏览器存储",slug:"五-浏览器存储",normalizedTitle:"五。浏览器存储",charIndex:8511},{level:3,title:"Web Storage",slug:"web-storage",normalizedTitle:"web storage",charIndex:8705},{level:2,title:"六.缓存",slug:"六-缓存",normalizedTitle:"六。缓存",charIndex:9723},{level:2,title:"1. 缓存理解",slug:"_1-缓存理解",normalizedTitle:"1. 缓存理解",charIndex:9732},{level:2,title:"2. 缓存分类",slug:"_2-缓存分类",normalizedTitle:"2. 缓存分类",charIndex:9971},{level:2,title:"3. 缓存使用示意图",slug:"_3-缓存使用示意图",normalizedTitle:"3. 缓存使用示意图",charIndex:10290},{level:2,title:"4. 缓存中的header参数",slug:"_4-缓存中的header参数",normalizedTitle:"4. 缓存中的 header 参数",charIndex:10307},{level:3,title:"1、强缓存的header参数",slug:"_1、强缓存的header参数",normalizedTitle:"1、强缓存的 header 参数",charIndex:10329},{level:3,title:"2、协商缓存的header参数",slug:"_2、协商缓存的header参数",normalizedTitle:"2、协商缓存的 header 参数",charIndex:11118},{level:2,title:"5. 强缓存如何重新加载新的资源",slug:"_5-强缓存如何重新加载新的资源",normalizedTitle:"5. 强缓存如何重新加载新的资源",charIndex:12692},{level:2,title:"七.函数防抖和节流",slug:"七-函数防抖和节流",normalizedTitle:"七。函数防抖和节流",charIndex:12909}],lastUpdated:"4/28/2022, 6:08:46 PM",lastUpdatedTimestamp:1651169326e3,headersStr:"一.浏览器应该有的功能 二、浏览器渲染引擎 主要模块 大致的渲染过程 阻塞渲染 三.图层与重绘重排 四.CDN 五.浏览器存储 Web Storage 六.缓存 1. 缓存理解 2. 缓存分类 3. 缓存使用示意图 4. 缓存中的header参数 1、强缓存的header参数 2、协商缓存的header参数 5. 强缓存如何重新加载新的资源 七.函数防抖和节流",content:'# 一。浏览器应该有的功能\n\n浏览器内核总结：\nIE----------\x3eTrident\n\nSafari------\x3eWebKit\n\tWebKit本身主要是由两个小引擎构成的，\n\t\t一个正是渲染引擎“WebCore”，\n\t\t另一个则是javascript解释引擎“JSCore”，\n\t\t它们均是从KDE的渲染引擎KHTML及javascript解释引擎KJS衍生而来。\n\t\t\nChrome------\x3eWebKit的分支引擎-----\x3eBlink\n\t 在13年发布的Chrome 28.0.1469.0版本开始，Chrome放弃Chromium引擎转\n\t 而使用最新的Blink引擎（基于WebKit2——苹果公司于2010年推出的新的WebKit引擎），\n\t Blink对比上一代的引擎精简了代码、改善了DOM框架，也提升了安全性。\n\t \nOpera\n\t旧版Opera 4至6版本 :Elektra排版引擎\n\tOpera7.0\t:Presto渲染引擎\n\tOpera在2013年2月宣布放弃Presto:\n\t\t\t\t采用Chromium引擎;\n\t\t\t\t又转为Blink引擎;\n\t\t\t\t\nFirefox------\x3eGecko\n\n\n### 进程与线程\n进程：程序的一次执行，它占有一片独有的内存空间。是操作系统执行的基本单元。\n一个进程中至少有一个运行的线程：主线程，进程启动后自动创建\n一个进程中也可以同时运行多个线程，我们会说程序是多线程运行的\n一个进程内的数据可以供其中的多个线程直接共享，多个进程之间的数据是不能直接共享的\n\n线程：是进程内的一个独立执行单元,是CPU调度的最小单元。程序运行的基本单元\n\t线程池(thread pool): 保存多个线程对象的容器, 实现线程对象的反复利用\n\nJS引擎是单线程运行的！（回忆事件轮询机制）\n\n\n### 现代浏览器：多进程、多线程模型\n1. 不堪回首的过去:\n当你通过浏览器打开很多页面的时候，如果其中一个页面不响应了或者崩溃了，\n那么随之而来的将会是更不幸的事情，你开打的所有页面都会得不到响应，\n最让人不能忍受的是，其中的一些页面可能还包含了未保存或者未发送的信息\n\n2.浏览器产商如何解决？\n\t采用多进程模型,该模型可以带来的好处\n\t①.避免因单个页面的不响应或者崩溃影响整个浏览器的稳定性\n\t②.当第三方插件崩溃时,也不会影响整个浏览器的稳定性\n\t③.安全\n\t\n3.浏览器到底有些什么进程\n\t①.Browser进程:\n\t\t浏览器的主进程,负责浏览器界面的显示,和各个页面的管理,\n\t\t浏览器中所有其他类型进程的祖先,负责其他进程的的创建和销毁\n\t\t它有且只有一个!!!!!\n\t②.Renderer进程:\n\t\t网页渲染进程,负责页面的渲染,可以有多个\n\t\t当然渲染进程的数量不一定等于你开打网页的个数\n\t③.各种插件进程\n\t④.GPU进程\t\n\t移动设备的浏览器可能不太一样:\n\t\tAndroid不支持插件,所以就没有插件进程\n\t\tGPU演化成了Browser进程的一个线程\n\t\tRenderer进程演化成了操作系统的一个服务进程,它仍然是独立的\n\n4.每个进程内部又有很多线程\n\t多线程的目的主要是保持用户界面的高度响应\n\t例如:为了不让Browser进程的UI线程被其他耗时的操作(大文件的加载,本地文件读写)所阻塞,\n\t\t那么我们就把这些操作放到分线程中去处理。\n\t在Renderer进程中,为了不让其他操作阻止渲染线程的高速执行,我们通常会将渲染过程【管线化】,\n\t利用计算机的多核优势,让渲染的不同阶段在不同的线程中执行\n\n\n * \n\n\n# 二、浏览器渲染引擎\n\n\n# 主要模块\n\n * 一个渲染引擎主要包括：HTML 解析器，CSS 解析器，javascript 引擎，布局 layout 模块，绘图模块\n   \n   * HTML 解析器：解释 HTML 文档的解析器，主要作用是将 HTML 文本解释成 DOM 树。\n   * CSS 解析器：它的作用是为 DOM 中的各个元素对象计算出样式信息，为布局提供基础设施\n   * Javascript 引擎：使用 Javascript 代码可以修改网页的内容，也能修改 css 的信息，javascript 引擎能够解释 javascript 代码，并通过 DOM 接口和 CSS 树接口来修改网页内容和样式信息，从而改变渲染的结果。\n   * 布局（layout）：在 DOM 创建之后，Webkit 需要将其中的元素对象同样式信息结合起来，计算他们的大小位置等布局信息，形成一个能表达这所有信息的内部表示模型\n   * 绘图模块（paint）：使用图形库将布局计算后的各个网页的节点绘制成图像结果\n   \n   > 备注：文档对象模型（Document Object Model，简称 DOM）\n\n\n# 大致的渲染过程\n\n * 浏览器渲染页面的整个过程：浏览器会从上到下解析文档。\n   1. 遇见 HTML 标记，调用 HTML 解析器解析为对应的 token （一个 token 就是一个标签文本的序列化）并构建 DOM 树（就是一块内存，保存着 tokens，建立它们之间的关系）。\n   2. 遇见 style/link 标记调用相应解析器处理 CSS 标记，并构建出 CSS 样式树。\n   3. 遇见 script 标记 调用 javascript 引擎 处理 script 标记、绑定事件、修改 DOM 树 / CSS 树等\n   4. 将 DOM 树 与 CSS 树 合并成一个渲染树。\n   5. 根据渲染树来渲染，以计算每个节点的几何信息（这一过程需要依赖 GPU）。\n   6. 最终将各个节点绘制到屏幕上。\n\n> 以上这些模块依赖很多其他的基础模块，包括要使用到网络 存储 2D/3D 图像 音频视频解码器 和 图片解码器。\n> 所以渲染引擎中还会包括如何使用这些依赖模块的部分。\n\n\n# 阻塞渲染\n\n####1. 关于 css 阻塞：\n声明：只有 link 引入的外部 css 才能够产生阻塞。\n1.style 标签中的样式：\n(1). 由 html 解析器进行解析；\n(2). 不阻塞浏览器渲染（可能会产生 “闪屏现象”）；\n(3). 不阻塞 DOM 解析；\n\n2.link引入的外部css样式（推荐使用的方式）：\n    (1). 由CSS解析器进行解析。\n    (2). 阻塞浏览器渲染(可以利用这种阻塞避免“闪屏现象”)。       \n    (3). 阻塞其后面的js语句的执行：\n    (4). 不阻塞DOM的解析(绝大多数浏览器的工作方式)：\n                 \n3.优化核心理念：尽可能快的提高外部css加载速度\n    \t(1).使用CDN节点进行外部资源加速。\n\t    (2).对css进行压缩(利用打包工具，比如webpack,gulp等)。\n\t    (3).减少http请求数，将多个css文件合并。\n\t    (4).优化样式表的代码\n\n\n####2. 关于 js 阻塞：\n1. 阻塞后续 DOM 解析:\n原因：浏览器不知道后续脚本的内容，如果先去解析了下面的 DOM，而随后的 js 删除了后面所有的 DOM，\n那么浏览器就做了无用功，浏览器无法预估脚本里面具体做了什么操作，例如像 document.write\n这种操作，索性全部停住，等脚本执行完了，浏览器再继续向下解析 DOM。\n2. 阻塞页面渲染:\n原因：js 中也可以给 DOM 设置样式，浏览器等该脚本执行完毕，渲染出一个最终结果，避免做无用功。\n3. 阻塞后续 js 的执行:\n原因：维护依赖关系，例如：必须先引入 jQuery 再引入 bootstrap\n\n####3. 备注\n\n【备注1】：css的解析和js的执行是互斥的（互相排斥），css解析的时候js停止执行，js执行的时候css停止解析。\n【备注2】：无论css阻塞，还是js阻塞，都不会阻塞浏览器加载外部资源（图片、视频、样式、脚本等）\n            原因：浏览器始终处于一种：“先把请求发出去”的工作模式，只要是涉及到网络请求的内容，\n                无论是：图片、样式、脚本，都会先发送请求去获取资源，至于资源到本地之后什么时候用，\n                由浏览器自己协调。这种做法效率很高。\n                \n【备注3】：WebKit 和 Firefox 都进行了【预解析】这项优化。在执行js脚本时，浏览器的其他线程会预解析文档的其余部分，\n          找出并加载需要通过网络加载的其他资源。通过这种方式，资源可以在并行连接上加载，\n          从而提高总体速度。请注意，预解析器不会修改 DOM 树\n\n\n> 在上述的过程中，网页在加载和渲染过程中会触发 “DOMContentLoaded” 和 “onload” 事件\n> 分别是在 DOM 树构建（解析）完成之后，以及 DOM 树构建完并且网页所依赖的资源都加载完之后\n\n * 上面介绍的是一个完整的渲染过程，但现代网页很多都是动态的，这意味着在渲染完成之后，由于网页的动画或者用户的交互，\n   浏览器其实一直在不停地重复执行渲染过程。（重绘重排），以上的数字表示的是基本顺序，这不是严格一致的，\n   这个过程可能重复也可能交叉\n\n\n# 三。图层与重绘重排\n\n###css 图层\n浏览器在渲染一个页面时，会将页面分为很多个图层，图层有大有小，每个图层上有一个或多个节点。\n在渲染 DOM 的时候，浏览器所做的工作实际上是：\n\n1. 获取DOM后分割为多个图层\n   2. 对每个图层的节点计算样式结果\t\t（Recalculate style--样式重计算）\n      3. 为每个节点生成图形和位置\t\t\t（Layout--布局，重排,回流）\n      4. 将每个节点绘制填充到图层位图中\t\t（Paint--重绘）\n      5. 图层作为纹理上传至GPU\n      6. 组合多个图层到页面上生成最终屏幕图像\t（Composite Layers--图层重组）\n         ###图层创建的条件\n         Chrome浏览器满足以下任意情况就会创建图层：\n      7. 拥有具有3D变换的CSS属性\n      8. 使用加速视频解码的<video>节点\n      9. 使用<canvas>节点\n      10. CSS3动画的节点\n      11. 拥有CSS加速属性的元素(will-change)\n          ###重绘(Repaint)\n          重绘是一个元素外观的改变所触发的浏览器行为，例如改变outline、背景色等属性。浏览器会根据元素的新属性重新绘制，\n          使元素呈现新的外观。重绘不会带来重新布局，所以并不一定伴随重排。\n\n\n需要注意的是：重绘是以图层为单位，如果图层中某个元素需要重绘，那么整个图层都需要重绘。\n所以为了提高性能，我们应该让这些“变化的东西”拥有一个自己一个图层，\n不过好在绝大多数的浏览器自己会为CSS3动画的节点自动创建图层。\n\n\n1\n2\n3\n\n\n### 重排 (Reflow 又称：回流)\n渲染对象在创建完成并添加到渲染树时，并不包含位置和大小信息。计算这些值的过程称为布局或重排\n\n"重绘"不一定需要"重排"，比如改变某个网页元素的颜色，就只会触发"重绘"，不会触发"重排"，因为布局没有改变。\n"重排"大多数情况下会导致"重绘"，比如改变一个网页元素的位置，就会同时触发"重排"和"重绘"，因为布局改变了。\n\n\n1\n2\n\n\n### 触发重绘的属性\n* color * background * outline-color\n* border-style * background-image * outline\n* border-radius * background-position * outline-style\n* visibility * background-repeat * outline-width\n* text-decoration * background-size * box-shadow\n\n### 触发重排 (回流) 的属性\n* width * top * text-align\n* height * bottom * overflow-y\n* padding * left * font-weight\n* margin * right * overflow\n* display * position * font-family\n* border-width * float * line-height\n* border * clear * vertival-align\n* min-height * white-space\n\n### 常见的触发重排的操作\nReflow (重排) 的成本比 Repaint (重绘) 的成本高很多很多。\n一个结点的 Reflow 很有可能导致子结点，甚至父点以及同级结点的 Reflow。\n在一些高性能的电脑上也许还没什么，但是如果 Reflow 发生在手机上，那么这个过程是非常痛苦和耗电的。\n\n所以，下面这些动作有很大可能会是成本比较高的。\n\t当你增加、删除、修改 DOM 结点时，会导致 Reflow , Repaint。\n\t当你移动 DOM 的位置\n\t当你修改 CSS 样式的时候。\n\t当你 Resize 窗口的时候（移动端没有这个问题，因为移动端的缩放没有影响布局视口)\n\t当你修改网页的默认字体时。\n\t【获取某些属性时(width,height...)！！！！！】\n\t注：display:none 会触发 reflow，而 visibility:hidden 只会触发 repaint，因为没有发生位置变化。\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n### 优化方案\n我们已知：浏览器渲染页面时经历了如下 “细致” 的环节：\n1. 计算需要被加载到节点上的样式结果（Recalculate style-- 样式重计算）\n2. 为每个节点生成图形和位置（Layout-- 重排或回流）\n3. 将每个节点填充到图层中（Paint-- 重绘）\n4. 组合图层到页面上（Composite Layers-- 图层重组）\n如果我们需要提升性能，需要做的就是减少浏览器在运行时所需要做的工作，即：尽量减少 1234 步。\n\n【具体优化方案如下】：\n1.元素位置移动变换时尽量使用CSS3的transform来代替对top left等的操作\n\t变换（transform）和透明度（opacity）的改变仅仅影响图层的组合\n2.【使用opacity来代替visibility】\n    (1).使用visibility不触发重排，但是依然重绘。\n    (2).直接使用opacity即触发重绘，又触发重排（GPU底层设计如此！）。\n    (3).opacity配合图层使用，即不触发重绘也不触发重排。\n        原因：\n\t\t透明度的改变时，GPU在绘画时只是简单的降低之前已经画好的纹理的alpha值来达到效果，并不需要整体的重绘。\n\t\t不过这个前提是这个被修改opacity本身必须是一个图层。\n3.【不要使用table布局】\n\ttable-cell\n4.将【多次改变样式属性的操作合并成一次】操作\n\t不要一条一条地修改DOM的样式，预先定义好class，然后修改DOM的className\n5.【将DOM离线后再修改】\n\t由于display属性为none的元素不在渲染树中，对隐藏的元素操作不会引发其他元素的重排。\n\t如果要对一个元素进行复杂的操作时，可以先隐藏它，操作完成后再显示。这样只在隐藏和显示时触发2次重排。\n6.【利用文档碎片】(documentFragment)------vue使用了该种方式提升性能。\n7.【不要把获取某些DOM节点的属性值放在一个循环里当成循环的变量】\n\t当你请求向浏览器请求一些 style信息的时候，就会让浏览器flush队列，比如：\n\t\t1. offsetTop, offsetLeft, offsetWidth, offsetHeight\n\t\t2. scrollTop/Left/Width/Height\n\t\t3. clientTop/Left/Width/Height\n\t\t4. width,height\n    当你请求上面的一些属性的时候，浏览器为了给你最精确的值，需要刷新内部队列，\n    因为队列中可能会有影响到这些值的操作。即使你获取元素的布局和样式信息跟最近发生或改变的布局信息无关，\n    浏览器都会强行刷新渲染队列。\n8.动画实现过程中，启用GPU硬件加速:transform: tranlateZ(0)\n9.为动画元素新建图层,提高动画元素的z-index\n10.编写动画时，尽量使用如下的API\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n###requestAnimationFrame---- 请求动画帧\n\n1.window.requestAnimationFrame() \n    说明：该方法会告诉浏览器在下一次重绘重排之前调用你所指定的函数\n    1.参数：该方法使用一个回调函数作为参数，这个回调函数会在浏览器下一次重绘之前调用。\n            回调函数会被自动传入一个参数，DOMHighResTimeStamp，标识requestAnimationFrame()开始触发回调函数的当前时间\n\n    2.返回值：\n            一个 long 整数，请求 ID ，是回调列表中唯一的标识。是个非零值，没别的意义。你可以传这个值给 window.cancelAnimationFrame() 以取消回调函数。\n            \n备注：若你想在浏览器下次重绘之前继续更新下一帧动画，那么回调函数自身必须再次调用window.requestAnimationFrame()\n \n2.window.cancelAnimationFrame(requestID)\n    取消一个先前通过调用window.requestAnimationFrame()方法添加到计划中的动画帧请求。\n    requestID是先前调用window.requestAnimationFrame()方法时返回的值，它是一个时间标识，用法与定时器的id类似。\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n\n\n# 四.CDN\n\n### 什么是 CDN？工作原理是什么？\n网站通常将其所有的服务器都放在同一个地方，当用户群增加时，公司就必须在多个地理位置不同的服务器上部署内容\n为了缩短 http 请求的时间，我们应该把大量的静态资源放置的离用户近一点。\n\n内容发布网络 CDN（Content Delivery Networks）\nCDN 是一组分布在多个不同地理位置的 web 服务器，用于更加有效的向用户发布内容\n\n基本思路：\n    尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。\n    通过在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层智能虚拟网络，\n    CDN系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息\n    将用户的请求重新导向离用户最近的服务节点上。\n\n基础架构：最简单的CDN网络由一个DNS服务器和几台缓存服务器组成\n    1.用户输入的url，会经过DNS解析“翻译”成对应的ip地址，从而找到CDN专用的服务器。\n    2.CDN“拿到”用户的IP地址，随后和区域负载均衡设备配合，选择一台用户所属区域的区域负载均衡设备，告诉用户向这台设备发起请求。\n    3.上述步骤中的“选择”依据\n            (1).选择的依据包括：根据用户IP地址，判断哪一台服务器距用户最近；\n            (2).根据用户所请求的URL中携带的内容名称，判断哪一台服务器上有用户所需内容；\n            (3).查询各个服务器当前的负载情况，判断哪一台服务器尚有服务能力。\n\n\n\n# 五。浏览器存储\n\nCookie, SessionStorage, LocalStorage这三者都可以被用来在浏览器端存储数据，而且都是字符串类型的键值对！\n\n注意：session和SessionStorage不是一个概念！！！在服务端有一种存储方式叫做：session会话存储，常常被简称session\n后期Node课程中会对cookie和session会话存储进行详细讲解\n\n\n\n# Web Storage\n\nSessionStorage和LocalStorage都是浏览器本地存储，统称为Web Storage，存储内容大小一般支持5-10MB\n浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。\n\n相关API：\n1. localStorage.setItem(\'key\', \'value\');\n\t\t该方法接受一个键名和值作为参数，将会把键值对添加到存储中，如果键名存在，则更新其对应的值。\n\t\t\n2. var data = xxxxxStorage.getItem(\'person\');\n\t该方法接受一个键名作为参数，返回键名对应的值。\n\n3. xxxxxStorage.removeItem(\'key\');\n\t该方法接受一个键名作为参数，并把该键名从存储中删除。\n\t\n4. xxxxxStorage.clear()\n\t调用该方法会清空存储中的所有键名\n\n备注：SessionStorage存储的内容会随着浏览器窗口关闭而消失。\n      LocalStorage存储的内容，需要手动清除才会消失。\n\nstorage事件：\t\n\t1. Storage对象发生变化时触发（即创建/更新/删除数据项时，Storage.clear() 只会触发一次）\n\t2. 在同一个页面内发生的改变不会起作用\n\t3. 在相同域名下的其他页面发生的改变才会起作用。(修改的页面不会触发事件，与它共享的页面会触发事件)\n\t\tkey \t    :  修改或删除的key值，如果调用clear(),为null\n\t\tnewValue    :  新设置的值，如果调用clear(),为null\n\t\toldValue    :  调用改变前的value值,如果调用clear(),为null\n\t\turl         :  触发该脚本变化的文档的url\n\t\tstorageArea :  当前的storage对象\n使用方法：\n        window.addEventListener(\'storage\',function (event) {\n            //此处写具体业务逻辑\n          })\n\n\n### 浏览器储存量的支持\nhttp://dev-test.nemikor.com/web-storage/support-test/\n\n\n# 六。缓存\n\n\n# 1. 缓存理解\n\n1. 缓存定义:\n       1. 浏览器在本地磁盘上将用户之前请求的数据存储起来，当访问者再次需要改数据的时候无需再次发送请求，直接从浏览器本地获取数据\n2. 缓存的好处:\n       1. 减少请求的个数\n              2. 节省带宽，避免浪费不必要的网络资源\n                     3. 减轻服务器压力\n                            4. 提高浏览器网页的加载速度，提高用户体验\n\n\n\n# 2. 缓存分类\n\n1. 强缓存\n       1. 不会向服务器发送请求，直接从本地缓存中获取数据\n              2. 请求资源的的状态码为: 200 ok(from memory cache)\n2. 协商缓存\n       1. 向服务器发送请求，服务器会根据请求头的资源判断是否命中协商缓存\n              2. 如果命中，则返回304状态码通知浏览器从缓存中读取资源\n3. 强缓存 & 协商缓存的共同点\n       1. 都是从浏览器端读取资源\n4. 强缓存 VS 协商缓存的不同点\n   1. 强缓存不发请求给服务器\n   2. 协商缓存发请求给服务器，根据服务器返回的信息决定是否使用缓存\n\n\n\n# 3. 缓存使用示意图\n\n\n\n\n# 4. 缓存中的 header 参数\n\n\n# 1、强缓存的 header 参数\n\n----------------------------------------\n\n1. expires：\n       1. 这是http1.0时的规范；它的值为一个绝对时间的GMT格式的时间字符串，如```Mon, 10 Jun 2015 21:31:12 GMT```，如果发送请求的时间在expires之前，那么本地缓存始终有效，否则就会发送请求到服务器来获取资源\n2. cache-control：max-age=number\n       1. 这是http1.1时出现的header信息，主要是利用该字段的max-age值来进行判断，它是一个相对值；资源第一次的请求时间和Cache-Control设定的有效期，计算出一个资源过期时间，再拿这个过期时间跟当前的请求时间比较，如果请求时间在过期时间之前，就能命中缓存，否则就不行；\n              2. cache-control常用的值（做一个简单了解即可）：\n     2. no-cache: 不使用本地缓存，需要使用协商缓存。先与服务器确认返回的响应是否被更改，如果之前的响应中存在Etag，那么请求的额时候会与服务器端进行验证，如果资源为被更改则使用缓存。\n     3. no-store: 直接禁止游览器缓存数据，每次用户请求该资源，都会向服务器发送一个请求，每次都会下载完整的资源。\n     4. public：可以被所有的用户缓存，包括终端用户和CDN等中间代理服务器。\n     5. private：只能被终端用户的浏览器缓存，不允许CDN等中继缓存服务器对其缓存。\n        2. <font color=red>注意：当cache-control与Expires共存的时候cache-control的优先级高</font>\n\n\n\n# 2、协商缓存的 header 参数\n\n----------------------------------------\n\n重点：协商缓存都是由服务器来确定缓存资源是否可用的，所以客户端与服务器端要通过某种标识来进行通信，从而让服务器判断请求资源是否可以缓存访问\n\n * Last-Modified/If-Modified-Since: 二者的值都是 GMT 格式的时间字符串\n   \n   1. 浏览器第一次跟服务器请求一个资源，服务器在返回这个资源的同时，在 respone 的 header 加上 Last-Modified 的 header，这个 header 表示这个资源在服务器上的最后修改时间\n   2. 浏览器再次跟服务器请求这个资源时，在 request 的 header 上加上 If-Modified-Since 的 header，这个 header 的值就是上一次请求时返回的 Last-Modified 的值\n   3. 服务器再次收到资源请求时，根据浏览器传过来 If-Modified-Since 和资源在服务器上的最后修改时间判断资源是否有变化，如果没有变化则返回 304 Not Modified，但是不会返回资源内容；如果有变化，就正常返回资源内容。当服务器返回 304 Not Modified 的响应时，response header 中不会再添加 Last-Modified 的 header，因为既然资源没有变化，那么 Last-Modified 也就不会改变，这是服务器返回 304 时的 response header\n   4. 浏览器收到 304 的响应后，就会从缓存中加载资源\n   5. 如果协商缓存没有命中，浏览器直接从服务器加载资源时，Last-Modified 的 Header 在重新加载的时候会被更新，下次请求时，If-Modified-Since 会启用上次返回的 Last-Modified 值\n   6. 图例：\n\n----------------------------------------\n\n * Etag/If-None-Match\n   1. 这两个值是由服务器生成的每个资源的唯一标识字符串，只要资源有变化就这个值就会改变\n   2. 其判断过程与 Last-Modified/If-Modified-Since 类似\n\n----------------------------------------\n\n * 既生 Last-Modified 何生 Etag\n   1. HTTP1.1 中 Etag 的出现主要是为了解决几个 Last-Modified 比较难解决的问题\n   2. 一些文件也许会周期性的更改，但是他的内容并不改变 (仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新 GET\n   3. 某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说 1s 内修改了 N 次)，If-Modified-Since 能检查到的粒度是 s 级的，这种修改无法判断 (或者说 UNIX 记录 MTIME 只能精确到秒)；\n   4. 某些服务器不能精确的得到文件的最后修改时间。\n\n----------------------------------------\n\n * 小结：\n   \n   * 利用 Etag 能够更加准确的控制缓存，因为 Etag 是服务器自动生成或者由开发者生成的对应资源在服务器端的唯一标识符。\n   \n   * Last-Modified 与 ETag 是可以一起使用的，服务器会优先验证 ETag，一致的情况下，才会继续比对 Last-Modified，最后才决定是否返回 304。\n\n\n# 5. 强缓存如何重新加载新的资源\n\n * 通过更新页面中引用的资源路径，让浏览器主动放弃加载缓存去加载新的资源\n * 示例： https://www.baidu.com/s?t=7aec0h3KB3Ba8lAbuyPg0AC0eDa59IvtDSmtMQBc6eW\n * 好处：\n   * 每次文件改变后 query 的值就会发生修改，当 query 值不同的时候也就是页面引用的资源路径不同。此时浏览器会主动加载新的资源。\n\n\n# 七。函数防抖和节流\n\n函数防抖 (debounce)：\n\n * 概念： 延迟要执行的动作，若在延迟的这段时间内，再次触发了，则取消之前开启的动作，重新计时。\n * 举例： 电脑无操作 1 分钟之内如果没有操作会进入休眠，当第 40 秒时鼠标被移动一下，重新计时 1 分钟。\n * 实现： 定时器。\n * 应用：搜索时等用户完整输入内容后再发送查询请求。\n\n<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <title>函数防抖测试</title>\n</head>\n<body>\n<input type="text" id="user_input">&nbsp;\n<button id="btn">搜索</button>\n<script type="text/javascript">\n  let inputNode = document.getElementById(\'user_input\');\n  let id;\n  inputNode.addEventListener(\'keyup\',function () {\n    let value = inputNode.value;\n    if(id){\n      clearTimeout(id)\n    }\n    id = setTimeout(()=>{\n      sendAjax(value)\n    },300)\n  })\n  \n  function sendAjax(data) {\n    console.log(`发送了一次Ajax请求，内容为${data}`)\n  }\n  \n<\/script>\n</body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n函数节流 (throttle)：\n\n * 概念：设定一个特定的时间，让函数在特定的时间内只执行一次，不会频繁执行\n\n * 举例：fps 游戏，鼠标按住不松手，子弹也不会连成一条线\n\n * 实现：定时器、标识\n\n * 需求：在鼠标滚轮滚动的时候，每隔 2 秒钟，打印一次\n   \n   <!DOCTYPE html>\n   <html lang="en">\n   <head>\n     <meta charset="UTF-8">\n     <title>函数节流</title>\n     <style>\n       body {\n         height:2000px;\n       }\n     </style>\n   </head>\n   <body>\n   <script type="text/javascript">\n     let canLog = true\n     document.body.onscroll = function () {\n       if(canLog){\n         console.log(1)\n         canLog = false\n         setTimeout(()=>{\n           canLog = true\n         },2000)\n       }\n     }\n   \n   <\/script>\n   </body>\n   </html>\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   25\n   26\n   27\n   ',normalizedContent:'# 一。浏览器应该有的功能\n\n浏览器内核总结：\nie----------\x3etrident\n\nsafari------\x3ewebkit\n\twebkit本身主要是由两个小引擎构成的，\n\t\t一个正是渲染引擎“webcore”，\n\t\t另一个则是javascript解释引擎“jscore”，\n\t\t它们均是从kde的渲染引擎khtml及javascript解释引擎kjs衍生而来。\n\t\t\nchrome------\x3ewebkit的分支引擎-----\x3eblink\n\t 在13年发布的chrome 28.0.1469.0版本开始，chrome放弃chromium引擎转\n\t 而使用最新的blink引擎（基于webkit2——苹果公司于2010年推出的新的webkit引擎），\n\t blink对比上一代的引擎精简了代码、改善了dom框架，也提升了安全性。\n\t \nopera\n\t旧版opera 4至6版本 :elektra排版引擎\n\topera7.0\t:presto渲染引擎\n\topera在2013年2月宣布放弃presto:\n\t\t\t\t采用chromium引擎;\n\t\t\t\t又转为blink引擎;\n\t\t\t\t\nfirefox------\x3egecko\n\n\n### 进程与线程\n进程：程序的一次执行，它占有一片独有的内存空间。是操作系统执行的基本单元。\n一个进程中至少有一个运行的线程：主线程，进程启动后自动创建\n一个进程中也可以同时运行多个线程，我们会说程序是多线程运行的\n一个进程内的数据可以供其中的多个线程直接共享，多个进程之间的数据是不能直接共享的\n\n线程：是进程内的一个独立执行单元,是cpu调度的最小单元。程序运行的基本单元\n\t线程池(thread pool): 保存多个线程对象的容器, 实现线程对象的反复利用\n\njs引擎是单线程运行的！（回忆事件轮询机制）\n\n\n### 现代浏览器：多进程、多线程模型\n1. 不堪回首的过去:\n当你通过浏览器打开很多页面的时候，如果其中一个页面不响应了或者崩溃了，\n那么随之而来的将会是更不幸的事情，你开打的所有页面都会得不到响应，\n最让人不能忍受的是，其中的一些页面可能还包含了未保存或者未发送的信息\n\n2.浏览器产商如何解决？\n\t采用多进程模型,该模型可以带来的好处\n\t①.避免因单个页面的不响应或者崩溃影响整个浏览器的稳定性\n\t②.当第三方插件崩溃时,也不会影响整个浏览器的稳定性\n\t③.安全\n\t\n3.浏览器到底有些什么进程\n\t①.browser进程:\n\t\t浏览器的主进程,负责浏览器界面的显示,和各个页面的管理,\n\t\t浏览器中所有其他类型进程的祖先,负责其他进程的的创建和销毁\n\t\t它有且只有一个!!!!!\n\t②.renderer进程:\n\t\t网页渲染进程,负责页面的渲染,可以有多个\n\t\t当然渲染进程的数量不一定等于你开打网页的个数\n\t③.各种插件进程\n\t④.gpu进程\t\n\t移动设备的浏览器可能不太一样:\n\t\tandroid不支持插件,所以就没有插件进程\n\t\tgpu演化成了browser进程的一个线程\n\t\trenderer进程演化成了操作系统的一个服务进程,它仍然是独立的\n\n4.每个进程内部又有很多线程\n\t多线程的目的主要是保持用户界面的高度响应\n\t例如:为了不让browser进程的ui线程被其他耗时的操作(大文件的加载,本地文件读写)所阻塞,\n\t\t那么我们就把这些操作放到分线程中去处理。\n\t在renderer进程中,为了不让其他操作阻止渲染线程的高速执行,我们通常会将渲染过程【管线化】,\n\t利用计算机的多核优势,让渲染的不同阶段在不同的线程中执行\n\n\n * \n\n\n# 二、浏览器渲染引擎\n\n\n# 主要模块\n\n * 一个渲染引擎主要包括：html 解析器，css 解析器，javascript 引擎，布局 layout 模块，绘图模块\n   \n   * html 解析器：解释 html 文档的解析器，主要作用是将 html 文本解释成 dom 树。\n   * css 解析器：它的作用是为 dom 中的各个元素对象计算出样式信息，为布局提供基础设施\n   * javascript 引擎：使用 javascript 代码可以修改网页的内容，也能修改 css 的信息，javascript 引擎能够解释 javascript 代码，并通过 dom 接口和 css 树接口来修改网页内容和样式信息，从而改变渲染的结果。\n   * 布局（layout）：在 dom 创建之后，webkit 需要将其中的元素对象同样式信息结合起来，计算他们的大小位置等布局信息，形成一个能表达这所有信息的内部表示模型\n   * 绘图模块（paint）：使用图形库将布局计算后的各个网页的节点绘制成图像结果\n   \n   > 备注：文档对象模型（document object model，简称 dom）\n\n\n# 大致的渲染过程\n\n * 浏览器渲染页面的整个过程：浏览器会从上到下解析文档。\n   1. 遇见 html 标记，调用 html 解析器解析为对应的 token （一个 token 就是一个标签文本的序列化）并构建 dom 树（就是一块内存，保存着 tokens，建立它们之间的关系）。\n   2. 遇见 style/link 标记调用相应解析器处理 css 标记，并构建出 css 样式树。\n   3. 遇见 script 标记 调用 javascript 引擎 处理 script 标记、绑定事件、修改 dom 树 / css 树等\n   4. 将 dom 树 与 css 树 合并成一个渲染树。\n   5. 根据渲染树来渲染，以计算每个节点的几何信息（这一过程需要依赖 gpu）。\n   6. 最终将各个节点绘制到屏幕上。\n\n> 以上这些模块依赖很多其他的基础模块，包括要使用到网络 存储 2d/3d 图像 音频视频解码器 和 图片解码器。\n> 所以渲染引擎中还会包括如何使用这些依赖模块的部分。\n\n\n# 阻塞渲染\n\n####1. 关于 css 阻塞：\n声明：只有 link 引入的外部 css 才能够产生阻塞。\n1.style 标签中的样式：\n(1). 由 html 解析器进行解析；\n(2). 不阻塞浏览器渲染（可能会产生 “闪屏现象”）；\n(3). 不阻塞 dom 解析；\n\n2.link引入的外部css样式（推荐使用的方式）：\n    (1). 由css解析器进行解析。\n    (2). 阻塞浏览器渲染(可以利用这种阻塞避免“闪屏现象”)。       \n    (3). 阻塞其后面的js语句的执行：\n    (4). 不阻塞dom的解析(绝大多数浏览器的工作方式)：\n                 \n3.优化核心理念：尽可能快的提高外部css加载速度\n    \t(1).使用cdn节点进行外部资源加速。\n\t    (2).对css进行压缩(利用打包工具，比如webpack,gulp等)。\n\t    (3).减少http请求数，将多个css文件合并。\n\t    (4).优化样式表的代码\n\n\n####2. 关于 js 阻塞：\n1. 阻塞后续 dom 解析:\n原因：浏览器不知道后续脚本的内容，如果先去解析了下面的 dom，而随后的 js 删除了后面所有的 dom，\n那么浏览器就做了无用功，浏览器无法预估脚本里面具体做了什么操作，例如像 document.write\n这种操作，索性全部停住，等脚本执行完了，浏览器再继续向下解析 dom。\n2. 阻塞页面渲染:\n原因：js 中也可以给 dom 设置样式，浏览器等该脚本执行完毕，渲染出一个最终结果，避免做无用功。\n3. 阻塞后续 js 的执行:\n原因：维护依赖关系，例如：必须先引入 jquery 再引入 bootstrap\n\n####3. 备注\n\n【备注1】：css的解析和js的执行是互斥的（互相排斥），css解析的时候js停止执行，js执行的时候css停止解析。\n【备注2】：无论css阻塞，还是js阻塞，都不会阻塞浏览器加载外部资源（图片、视频、样式、脚本等）\n            原因：浏览器始终处于一种：“先把请求发出去”的工作模式，只要是涉及到网络请求的内容，\n                无论是：图片、样式、脚本，都会先发送请求去获取资源，至于资源到本地之后什么时候用，\n                由浏览器自己协调。这种做法效率很高。\n                \n【备注3】：webkit 和 firefox 都进行了【预解析】这项优化。在执行js脚本时，浏览器的其他线程会预解析文档的其余部分，\n          找出并加载需要通过网络加载的其他资源。通过这种方式，资源可以在并行连接上加载，\n          从而提高总体速度。请注意，预解析器不会修改 dom 树\n\n\n> 在上述的过程中，网页在加载和渲染过程中会触发 “domcontentloaded” 和 “onload” 事件\n> 分别是在 dom 树构建（解析）完成之后，以及 dom 树构建完并且网页所依赖的资源都加载完之后\n\n * 上面介绍的是一个完整的渲染过程，但现代网页很多都是动态的，这意味着在渲染完成之后，由于网页的动画或者用户的交互，\n   浏览器其实一直在不停地重复执行渲染过程。（重绘重排），以上的数字表示的是基本顺序，这不是严格一致的，\n   这个过程可能重复也可能交叉\n\n\n# 三。图层与重绘重排\n\n###css 图层\n浏览器在渲染一个页面时，会将页面分为很多个图层，图层有大有小，每个图层上有一个或多个节点。\n在渲染 dom 的时候，浏览器所做的工作实际上是：\n\n1. 获取dom后分割为多个图层\n   2. 对每个图层的节点计算样式结果\t\t（recalculate style--样式重计算）\n      3. 为每个节点生成图形和位置\t\t\t（layout--布局，重排,回流）\n      4. 将每个节点绘制填充到图层位图中\t\t（paint--重绘）\n      5. 图层作为纹理上传至gpu\n      6. 组合多个图层到页面上生成最终屏幕图像\t（composite layers--图层重组）\n         ###图层创建的条件\n         chrome浏览器满足以下任意情况就会创建图层：\n      7. 拥有具有3d变换的css属性\n      8. 使用加速视频解码的<video>节点\n      9. 使用<canvas>节点\n      10. css3动画的节点\n      11. 拥有css加速属性的元素(will-change)\n          ###重绘(repaint)\n          重绘是一个元素外观的改变所触发的浏览器行为，例如改变outline、背景色等属性。浏览器会根据元素的新属性重新绘制，\n          使元素呈现新的外观。重绘不会带来重新布局，所以并不一定伴随重排。\n\n\n需要注意的是：重绘是以图层为单位，如果图层中某个元素需要重绘，那么整个图层都需要重绘。\n所以为了提高性能，我们应该让这些“变化的东西”拥有一个自己一个图层，\n不过好在绝大多数的浏览器自己会为css3动画的节点自动创建图层。\n\n\n1\n2\n3\n\n\n### 重排 (reflow 又称：回流)\n渲染对象在创建完成并添加到渲染树时，并不包含位置和大小信息。计算这些值的过程称为布局或重排\n\n"重绘"不一定需要"重排"，比如改变某个网页元素的颜色，就只会触发"重绘"，不会触发"重排"，因为布局没有改变。\n"重排"大多数情况下会导致"重绘"，比如改变一个网页元素的位置，就会同时触发"重排"和"重绘"，因为布局改变了。\n\n\n1\n2\n\n\n### 触发重绘的属性\n* color * background * outline-color\n* border-style * background-image * outline\n* border-radius * background-position * outline-style\n* visibility * background-repeat * outline-width\n* text-decoration * background-size * box-shadow\n\n### 触发重排 (回流) 的属性\n* width * top * text-align\n* height * bottom * overflow-y\n* padding * left * font-weight\n* margin * right * overflow\n* display * position * font-family\n* border-width * float * line-height\n* border * clear * vertival-align\n* min-height * white-space\n\n### 常见的触发重排的操作\nreflow (重排) 的成本比 repaint (重绘) 的成本高很多很多。\n一个结点的 reflow 很有可能导致子结点，甚至父点以及同级结点的 reflow。\n在一些高性能的电脑上也许还没什么，但是如果 reflow 发生在手机上，那么这个过程是非常痛苦和耗电的。\n\n所以，下面这些动作有很大可能会是成本比较高的。\n\t当你增加、删除、修改 dom 结点时，会导致 reflow , repaint。\n\t当你移动 dom 的位置\n\t当你修改 css 样式的时候。\n\t当你 resize 窗口的时候（移动端没有这个问题，因为移动端的缩放没有影响布局视口)\n\t当你修改网页的默认字体时。\n\t【获取某些属性时(width,height...)！！！！！】\n\t注：display:none 会触发 reflow，而 visibility:hidden 只会触发 repaint，因为没有发生位置变化。\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n### 优化方案\n我们已知：浏览器渲染页面时经历了如下 “细致” 的环节：\n1. 计算需要被加载到节点上的样式结果（recalculate style-- 样式重计算）\n2. 为每个节点生成图形和位置（layout-- 重排或回流）\n3. 将每个节点填充到图层中（paint-- 重绘）\n4. 组合图层到页面上（composite layers-- 图层重组）\n如果我们需要提升性能，需要做的就是减少浏览器在运行时所需要做的工作，即：尽量减少 1234 步。\n\n【具体优化方案如下】：\n1.元素位置移动变换时尽量使用css3的transform来代替对top left等的操作\n\t变换（transform）和透明度（opacity）的改变仅仅影响图层的组合\n2.【使用opacity来代替visibility】\n    (1).使用visibility不触发重排，但是依然重绘。\n    (2).直接使用opacity即触发重绘，又触发重排（gpu底层设计如此！）。\n    (3).opacity配合图层使用，即不触发重绘也不触发重排。\n        原因：\n\t\t透明度的改变时，gpu在绘画时只是简单的降低之前已经画好的纹理的alpha值来达到效果，并不需要整体的重绘。\n\t\t不过这个前提是这个被修改opacity本身必须是一个图层。\n3.【不要使用table布局】\n\ttable-cell\n4.将【多次改变样式属性的操作合并成一次】操作\n\t不要一条一条地修改dom的样式，预先定义好class，然后修改dom的classname\n5.【将dom离线后再修改】\n\t由于display属性为none的元素不在渲染树中，对隐藏的元素操作不会引发其他元素的重排。\n\t如果要对一个元素进行复杂的操作时，可以先隐藏它，操作完成后再显示。这样只在隐藏和显示时触发2次重排。\n6.【利用文档碎片】(documentfragment)------vue使用了该种方式提升性能。\n7.【不要把获取某些dom节点的属性值放在一个循环里当成循环的变量】\n\t当你请求向浏览器请求一些 style信息的时候，就会让浏览器flush队列，比如：\n\t\t1. offsettop, offsetleft, offsetwidth, offsetheight\n\t\t2. scrolltop/left/width/height\n\t\t3. clienttop/left/width/height\n\t\t4. width,height\n    当你请求上面的一些属性的时候，浏览器为了给你最精确的值，需要刷新内部队列，\n    因为队列中可能会有影响到这些值的操作。即使你获取元素的布局和样式信息跟最近发生或改变的布局信息无关，\n    浏览器都会强行刷新渲染队列。\n8.动画实现过程中，启用gpu硬件加速:transform: tranlatez(0)\n9.为动画元素新建图层,提高动画元素的z-index\n10.编写动画时，尽量使用如下的api\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n###requestanimationframe---- 请求动画帧\n\n1.window.requestanimationframe() \n    说明：该方法会告诉浏览器在下一次重绘重排之前调用你所指定的函数\n    1.参数：该方法使用一个回调函数作为参数，这个回调函数会在浏览器下一次重绘之前调用。\n            回调函数会被自动传入一个参数，domhighrestimestamp，标识requestanimationframe()开始触发回调函数的当前时间\n\n    2.返回值：\n            一个 long 整数，请求 id ，是回调列表中唯一的标识。是个非零值，没别的意义。你可以传这个值给 window.cancelanimationframe() 以取消回调函数。\n            \n备注：若你想在浏览器下次重绘之前继续更新下一帧动画，那么回调函数自身必须再次调用window.requestanimationframe()\n \n2.window.cancelanimationframe(requestid)\n    取消一个先前通过调用window.requestanimationframe()方法添加到计划中的动画帧请求。\n    requestid是先前调用window.requestanimationframe()方法时返回的值，它是一个时间标识，用法与定时器的id类似。\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n\n\n# 四.cdn\n\n### 什么是 cdn？工作原理是什么？\n网站通常将其所有的服务器都放在同一个地方，当用户群增加时，公司就必须在多个地理位置不同的服务器上部署内容\n为了缩短 http 请求的时间，我们应该把大量的静态资源放置的离用户近一点。\n\n内容发布网络 cdn（content delivery networks）\ncdn 是一组分布在多个不同地理位置的 web 服务器，用于更加有效的向用户发布内容\n\n基本思路：\n    尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。\n    通过在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层智能虚拟网络，\n    cdn系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息\n    将用户的请求重新导向离用户最近的服务节点上。\n\n基础架构：最简单的cdn网络由一个dns服务器和几台缓存服务器组成\n    1.用户输入的url，会经过dns解析“翻译”成对应的ip地址，从而找到cdn专用的服务器。\n    2.cdn“拿到”用户的ip地址，随后和区域负载均衡设备配合，选择一台用户所属区域的区域负载均衡设备，告诉用户向这台设备发起请求。\n    3.上述步骤中的“选择”依据\n            (1).选择的依据包括：根据用户ip地址，判断哪一台服务器距用户最近；\n            (2).根据用户所请求的url中携带的内容名称，判断哪一台服务器上有用户所需内容；\n            (3).查询各个服务器当前的负载情况，判断哪一台服务器尚有服务能力。\n\n\n\n# 五。浏览器存储\n\ncookie, sessionstorage, localstorage这三者都可以被用来在浏览器端存储数据，而且都是字符串类型的键值对！\n\n注意：session和sessionstorage不是一个概念！！！在服务端有一种存储方式叫做：session会话存储，常常被简称session\n后期node课程中会对cookie和session会话存储进行详细讲解\n\n\n\n# web storage\n\nsessionstorage和localstorage都是浏览器本地存储，统称为web storage，存储内容大小一般支持5-10mb\n浏览器端通过 window.sessionstorage 和 window.localstorage 属性来实现本地存储机制。\n\n相关api：\n1. localstorage.setitem(\'key\', \'value\');\n\t\t该方法接受一个键名和值作为参数，将会把键值对添加到存储中，如果键名存在，则更新其对应的值。\n\t\t\n2. var data = xxxxxstorage.getitem(\'person\');\n\t该方法接受一个键名作为参数，返回键名对应的值。\n\n3. xxxxxstorage.removeitem(\'key\');\n\t该方法接受一个键名作为参数，并把该键名从存储中删除。\n\t\n4. xxxxxstorage.clear()\n\t调用该方法会清空存储中的所有键名\n\n备注：sessionstorage存储的内容会随着浏览器窗口关闭而消失。\n      localstorage存储的内容，需要手动清除才会消失。\n\nstorage事件：\t\n\t1. storage对象发生变化时触发（即创建/更新/删除数据项时，storage.clear() 只会触发一次）\n\t2. 在同一个页面内发生的改变不会起作用\n\t3. 在相同域名下的其他页面发生的改变才会起作用。(修改的页面不会触发事件，与它共享的页面会触发事件)\n\t\tkey \t    :  修改或删除的key值，如果调用clear(),为null\n\t\tnewvalue    :  新设置的值，如果调用clear(),为null\n\t\toldvalue    :  调用改变前的value值,如果调用clear(),为null\n\t\turl         :  触发该脚本变化的文档的url\n\t\tstoragearea :  当前的storage对象\n使用方法：\n        window.addeventlistener(\'storage\',function (event) {\n            //此处写具体业务逻辑\n          })\n\n\n### 浏览器储存量的支持\nhttp://dev-test.nemikor.com/web-storage/support-test/\n\n\n# 六。缓存\n\n\n# 1. 缓存理解\n\n1. 缓存定义:\n       1. 浏览器在本地磁盘上将用户之前请求的数据存储起来，当访问者再次需要改数据的时候无需再次发送请求，直接从浏览器本地获取数据\n2. 缓存的好处:\n       1. 减少请求的个数\n              2. 节省带宽，避免浪费不必要的网络资源\n                     3. 减轻服务器压力\n                            4. 提高浏览器网页的加载速度，提高用户体验\n\n\n\n# 2. 缓存分类\n\n1. 强缓存\n       1. 不会向服务器发送请求，直接从本地缓存中获取数据\n              2. 请求资源的的状态码为: 200 ok(from memory cache)\n2. 协商缓存\n       1. 向服务器发送请求，服务器会根据请求头的资源判断是否命中协商缓存\n              2. 如果命中，则返回304状态码通知浏览器从缓存中读取资源\n3. 强缓存 & 协商缓存的共同点\n       1. 都是从浏览器端读取资源\n4. 强缓存 vs 协商缓存的不同点\n   1. 强缓存不发请求给服务器\n   2. 协商缓存发请求给服务器，根据服务器返回的信息决定是否使用缓存\n\n\n\n# 3. 缓存使用示意图\n\n\n\n\n# 4. 缓存中的 header 参数\n\n\n# 1、强缓存的 header 参数\n\n----------------------------------------\n\n1. expires：\n       1. 这是http1.0时的规范；它的值为一个绝对时间的gmt格式的时间字符串，如```mon, 10 jun 2015 21:31:12 gmt```，如果发送请求的时间在expires之前，那么本地缓存始终有效，否则就会发送请求到服务器来获取资源\n2. cache-control：max-age=number\n       1. 这是http1.1时出现的header信息，主要是利用该字段的max-age值来进行判断，它是一个相对值；资源第一次的请求时间和cache-control设定的有效期，计算出一个资源过期时间，再拿这个过期时间跟当前的请求时间比较，如果请求时间在过期时间之前，就能命中缓存，否则就不行；\n              2. cache-control常用的值（做一个简单了解即可）：\n     2. no-cache: 不使用本地缓存，需要使用协商缓存。先与服务器确认返回的响应是否被更改，如果之前的响应中存在etag，那么请求的额时候会与服务器端进行验证，如果资源为被更改则使用缓存。\n     3. no-store: 直接禁止游览器缓存数据，每次用户请求该资源，都会向服务器发送一个请求，每次都会下载完整的资源。\n     4. public：可以被所有的用户缓存，包括终端用户和cdn等中间代理服务器。\n     5. private：只能被终端用户的浏览器缓存，不允许cdn等中继缓存服务器对其缓存。\n        2. <font color=red>注意：当cache-control与expires共存的时候cache-control的优先级高</font>\n\n\n\n# 2、协商缓存的 header 参数\n\n----------------------------------------\n\n重点：协商缓存都是由服务器来确定缓存资源是否可用的，所以客户端与服务器端要通过某种标识来进行通信，从而让服务器判断请求资源是否可以缓存访问\n\n * last-modified/if-modified-since: 二者的值都是 gmt 格式的时间字符串\n   \n   1. 浏览器第一次跟服务器请求一个资源，服务器在返回这个资源的同时，在 respone 的 header 加上 last-modified 的 header，这个 header 表示这个资源在服务器上的最后修改时间\n   2. 浏览器再次跟服务器请求这个资源时，在 request 的 header 上加上 if-modified-since 的 header，这个 header 的值就是上一次请求时返回的 last-modified 的值\n   3. 服务器再次收到资源请求时，根据浏览器传过来 if-modified-since 和资源在服务器上的最后修改时间判断资源是否有变化，如果没有变化则返回 304 not modified，但是不会返回资源内容；如果有变化，就正常返回资源内容。当服务器返回 304 not modified 的响应时，response header 中不会再添加 last-modified 的 header，因为既然资源没有变化，那么 last-modified 也就不会改变，这是服务器返回 304 时的 response header\n   4. 浏览器收到 304 的响应后，就会从缓存中加载资源\n   5. 如果协商缓存没有命中，浏览器直接从服务器加载资源时，last-modified 的 header 在重新加载的时候会被更新，下次请求时，if-modified-since 会启用上次返回的 last-modified 值\n   6. 图例：\n\n----------------------------------------\n\n * etag/if-none-match\n   1. 这两个值是由服务器生成的每个资源的唯一标识字符串，只要资源有变化就这个值就会改变\n   2. 其判断过程与 last-modified/if-modified-since 类似\n\n----------------------------------------\n\n * 既生 last-modified 何生 etag\n   1. http1.1 中 etag 的出现主要是为了解决几个 last-modified 比较难解决的问题\n   2. 一些文件也许会周期性的更改，但是他的内容并不改变 (仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新 get\n   3. 某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说 1s 内修改了 n 次)，if-modified-since 能检查到的粒度是 s 级的，这种修改无法判断 (或者说 unix 记录 mtime 只能精确到秒)；\n   4. 某些服务器不能精确的得到文件的最后修改时间。\n\n----------------------------------------\n\n * 小结：\n   \n   * 利用 etag 能够更加准确的控制缓存，因为 etag 是服务器自动生成或者由开发者生成的对应资源在服务器端的唯一标识符。\n   \n   * last-modified 与 etag 是可以一起使用的，服务器会优先验证 etag，一致的情况下，才会继续比对 last-modified，最后才决定是否返回 304。\n\n\n# 5. 强缓存如何重新加载新的资源\n\n * 通过更新页面中引用的资源路径，让浏览器主动放弃加载缓存去加载新的资源\n * 示例： https://www.baidu.com/s?t=7aec0h3kb3ba8labuypg0ac0eda59ivtdsmtmqbc6ew\n * 好处：\n   * 每次文件改变后 query 的值就会发生修改，当 query 值不同的时候也就是页面引用的资源路径不同。此时浏览器会主动加载新的资源。\n\n\n# 七。函数防抖和节流\n\n函数防抖 (debounce)：\n\n * 概念： 延迟要执行的动作，若在延迟的这段时间内，再次触发了，则取消之前开启的动作，重新计时。\n * 举例： 电脑无操作 1 分钟之内如果没有操作会进入休眠，当第 40 秒时鼠标被移动一下，重新计时 1 分钟。\n * 实现： 定时器。\n * 应用：搜索时等用户完整输入内容后再发送查询请求。\n\n<!doctype html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n  <title>函数防抖测试</title>\n</head>\n<body>\n<input type="text" id="user_input">&nbsp;\n<button id="btn">搜索</button>\n<script type="text/javascript">\n  let inputnode = document.getelementbyid(\'user_input\');\n  let id;\n  inputnode.addeventlistener(\'keyup\',function () {\n    let value = inputnode.value;\n    if(id){\n      cleartimeout(id)\n    }\n    id = settimeout(()=>{\n      sendajax(value)\n    },300)\n  })\n  \n  function sendajax(data) {\n    console.log(`发送了一次ajax请求，内容为${data}`)\n  }\n  \n<\/script>\n</body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n函数节流 (throttle)：\n\n * 概念：设定一个特定的时间，让函数在特定的时间内只执行一次，不会频繁执行\n\n * 举例：fps 游戏，鼠标按住不松手，子弹也不会连成一条线\n\n * 实现：定时器、标识\n\n * 需求：在鼠标滚轮滚动的时候，每隔 2 秒钟，打印一次\n   \n   <!doctype html>\n   <html lang="en">\n   <head>\n     <meta charset="utf-8">\n     <title>函数节流</title>\n     <style>\n       body {\n         height:2000px;\n       }\n     </style>\n   </head>\n   <body>\n   <script type="text/javascript">\n     let canlog = true\n     document.body.onscroll = function () {\n       if(canlog){\n         console.log(1)\n         canlog = false\n         settimeout(()=>{\n           canlog = true\n         },2000)\n       }\n     }\n   \n   <\/script>\n   </body>\n   </html>\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   25\n   26\n   27\n   ',charsets:{cjk:!0}},{title:"移动端适配",frontmatter:{title:"移动端适配",date:"2021-04-18T15:05:53.000Z",permalink:"/pages/3b5bc6/",categories:["前端","移动端"],tags:[null]},regularPath:"/views/01.%E5%89%8D%E7%AB%AF/120.%E7%A7%BB%E5%8A%A8%E7%AB%AF/01.%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D.html",relativePath:"views/01.前端/120.移动端/01.移动端适配.md",key:"v-6ca63b0e",path:"/pages/3b5bc6/",headers:[{level:2,title:"移动端适配",slug:"移动端适配",normalizedTitle:"移动端适配",charIndex:2},{level:2,title:"vue脚手架中使用第三方库适配",slug:"vue脚手架中使用第三方库适配",normalizedTitle:"vue 脚手架中使用第三方库适配",charIndex:548},{level:3,title:"vue2脚手架",slug:"vue2脚手架",normalizedTitle:"vue2 脚手架",charIndex:569},{level:3,title:"vue3脚手架配置",slug:"vue3脚手架配置",normalizedTitle:"vue3 脚手架配置",charIndex:2371}],lastUpdated:"4/28/2022, 6:08:46 PM",lastUpdatedTimestamp:1651169326e3,headersStr:"移动端适配 vue脚手架中使用第三方库适配 vue2脚手架 vue3脚手架配置",content:"# 移动端适配\n\n 1. 为什么要做适配\n    \n    1. 机型不一样\n    2. 屏幕大小不一样\n    3. 屏幕的 dpr 不一样\n\n 2. 适配的终极目标\n    \n    1. 让一张设计稿的内容在不同的机型上呈现的效果一致\n    2. 内容在不同的机型上 ‘等比’\n\n 3. 常用适配方案\n    \n    1. viewport 适配\n    2. rem 适配\n\n 4. viewport 适配\n    \n    1. 内容:\n       \n       meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0,user-scalable=no\">\n       \n       \n       1\n       \n    \n    2. 目的\n       \n       1. 布局视口 = 设备视口\n\n 5. rem 适配\n    \n    1. 原理:\n       \n       1. 根据不同屏幕大小控制根节点 rem 字体大小\n       2. 页面中的内容大小设置用 rem 从而达到适配的目的\n    \n    2. 实现：\n       第三方库，参考下方\n\n\n# vue 脚手架中使用第三方库适配\n\n\n# vue2 脚手架\n\n 1. 安装依赖\n    \n    1. npm install px2rem-loader lib-flexible --save\n\n 2. 配置说明\n    \n    1. 在项目入口文件 main.js 里 引入 lib-flexible， flexible 会自动根据设备情况动态设置 rem 的值的大小\n       \n       import 'lib-flexible/flexible'\n       \n       \n       1\n       \n    \n    2. 在 build 文件夹下的 util.js 中添加\n       \n       //  新增内容开始\n       // 全局定义px2remLoader\n       const px2remLoader = {\n           loader: 'px2rem-loader',\n           options: {\n           remUnit: 37.5  // UI设计图的10等分大小\n           }\n       }\n       // 新增内容结束\n       \n       // 在该函数的loaders中添加\n        function generateLoaders (loader, loaderOptions) {\n            // 添加使用 px2remLoader\n       // 修改代码开始\n            \n            const loaders = options.usePostCSS ? [cssLoader, postcssLoader,px2remLoader] : [cssLoader, px2remLoader]\n       // 修改结束\n       \n           if (loader) {\n           loaders.push({\n           loader: loader + '-loader',\n           options: Object.assign({}, loaderOptions, {\n           sourceMap: options.sourceMap\n           })\n           })\n           }\n       \n           // Extract CSS when that option is specified\n           // (which is the case during production build)\n           if (options.extract) {\n           return ExtractTextPlugin.extract({\n           use: loaders,\n           fallback: 'vue-style-loader'\n        })\n           } else {\n           return ['vue-style-loader'].concat(loaders)\n           }\n       }\n       \n       \n       1\n       2\n       3\n       4\n       5\n       6\n       7\n       8\n       9\n       10\n       11\n       12\n       13\n       14\n       15\n       16\n       17\n       18\n       19\n       20\n       21\n       22\n       23\n       24\n       25\n       26\n       27\n       28\n       29\n       30\n       31\n       32\n       33\n       34\n       35\n       36\n       37\n       38\n       \n\n\n# vue3 脚手架配置\n\n 1. 安装依赖\n    \n    1. npm install postcss-px2rem lib-flexible --save\n\n 2. 配置说明\n    \n    1. 在项目入口文件 main.js 里 引入 lib-flexible， flexible 会自动根据设备情况动态设置 rem 的值的大小\n    \n      import 'lib-flexible/flexible'\n    \n    \n    1\n    \n    \n    2. 在 vue.config.js 中添加配置\n       \n       const px2rem = require('postcss-px2rem')\n       // 配置postcs-px2rem\n       const postcss = px2rem({\n         remUnit: 37.5   //UI设计图的10等分大小\n       })\n       css: { // 添加postcss配置\n           loaderOptions: {\n             postcss: {\n               plugins: [\n                 postcss\n               ]\n             }\n           }\n       }\n       \n       \n       \n       \n       \n       1\n       2\n       3\n       4\n       5\n       6\n       7\n       8\n       9\n       10\n       11\n       12\n       13\n       14\n       15\n       16\n       17\n       ",normalizedContent:"# 移动端适配\n\n 1. 为什么要做适配\n    \n    1. 机型不一样\n    2. 屏幕大小不一样\n    3. 屏幕的 dpr 不一样\n\n 2. 适配的终极目标\n    \n    1. 让一张设计稿的内容在不同的机型上呈现的效果一致\n    2. 内容在不同的机型上 ‘等比’\n\n 3. 常用适配方案\n    \n    1. viewport 适配\n    2. rem 适配\n\n 4. viewport 适配\n    \n    1. 内容:\n       \n       meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0,user-scalable=no\">\n       \n       \n       1\n       \n    \n    2. 目的\n       \n       1. 布局视口 = 设备视口\n\n 5. rem 适配\n    \n    1. 原理:\n       \n       1. 根据不同屏幕大小控制根节点 rem 字体大小\n       2. 页面中的内容大小设置用 rem 从而达到适配的目的\n    \n    2. 实现：\n       第三方库，参考下方\n\n\n# vue 脚手架中使用第三方库适配\n\n\n# vue2 脚手架\n\n 1. 安装依赖\n    \n    1. npm install px2rem-loader lib-flexible --save\n\n 2. 配置说明\n    \n    1. 在项目入口文件 main.js 里 引入 lib-flexible， flexible 会自动根据设备情况动态设置 rem 的值的大小\n       \n       import 'lib-flexible/flexible'\n       \n       \n       1\n       \n    \n    2. 在 build 文件夹下的 util.js 中添加\n       \n       //  新增内容开始\n       // 全局定义px2remloader\n       const px2remloader = {\n           loader: 'px2rem-loader',\n           options: {\n           remunit: 37.5  // ui设计图的10等分大小\n           }\n       }\n       // 新增内容结束\n       \n       // 在该函数的loaders中添加\n        function generateloaders (loader, loaderoptions) {\n            // 添加使用 px2remloader\n       // 修改代码开始\n            \n            const loaders = options.usepostcss ? [cssloader, postcssloader,px2remloader] : [cssloader, px2remloader]\n       // 修改结束\n       \n           if (loader) {\n           loaders.push({\n           loader: loader + '-loader',\n           options: object.assign({}, loaderoptions, {\n           sourcemap: options.sourcemap\n           })\n           })\n           }\n       \n           // extract css when that option is specified\n           // (which is the case during production build)\n           if (options.extract) {\n           return extracttextplugin.extract({\n           use: loaders,\n           fallback: 'vue-style-loader'\n        })\n           } else {\n           return ['vue-style-loader'].concat(loaders)\n           }\n       }\n       \n       \n       1\n       2\n       3\n       4\n       5\n       6\n       7\n       8\n       9\n       10\n       11\n       12\n       13\n       14\n       15\n       16\n       17\n       18\n       19\n       20\n       21\n       22\n       23\n       24\n       25\n       26\n       27\n       28\n       29\n       30\n       31\n       32\n       33\n       34\n       35\n       36\n       37\n       38\n       \n\n\n# vue3 脚手架配置\n\n 1. 安装依赖\n    \n    1. npm install postcss-px2rem lib-flexible --save\n\n 2. 配置说明\n    \n    1. 在项目入口文件 main.js 里 引入 lib-flexible， flexible 会自动根据设备情况动态设置 rem 的值的大小\n    \n      import 'lib-flexible/flexible'\n    \n    \n    1\n    \n    \n    2. 在 vue.config.js 中添加配置\n       \n       const px2rem = require('postcss-px2rem')\n       // 配置postcs-px2rem\n       const postcss = px2rem({\n         remunit: 37.5   //ui设计图的10等分大小\n       })\n       css: { // 添加postcss配置\n           loaderoptions: {\n             postcss: {\n               plugins: [\n                 postcss\n               ]\n             }\n           }\n       }\n       \n       \n       \n       \n       \n       1\n       2\n       3\n       4\n       5\n       6\n       7\n       8\n       9\n       10\n       11\n       12\n       13\n       14\n       15\n       16\n       17\n       ",charsets:{cjk:!0}},{title:"ajax",frontmatter:{title:"ajax",date:"2021-03-17T13:48:13.000Z",permalink:"/pages/43a79d/",categories:["前端","AJAX"],tags:"AJAX -"},regularPath:"/views/01.%E5%89%8D%E7%AB%AF/20.Ajax/00.ajax.html",relativePath:"views/01.前端/20.Ajax/00.ajax.md",key:"v-fba36468",path:"/pages/43a79d/",headers:[{level:2,title:"1.1 AJAX 简介",slug:"_1-1-ajax-简介",normalizedTitle:"1.1 ajax 简介",charIndex:14},{level:2,title:"1.2 XML简介",slug:"_1-2-xml简介",normalizedTitle:"1.2 xml 简介",charIndex:130},{level:2,title:"1.3 AJAX的特点",slug:"_1-3-ajax的特点",normalizedTitle:"1.3 ajax 的特点",charIndex:208},{level:3,title:"1.3.1 AJAX的优点",slug:"_1-3-1-ajax的优点",normalizedTitle:"1.3.1 ajax 的优点",charIndex:225},{level:3,title:"1.3.2 AJAX的缺点",slug:"_1-3-2-ajax的缺点",normalizedTitle:"1.3.2 ajax 的缺点",charIndex:304},{level:2,title:"1.5 AJAX的使用",slug:"_1-5-ajax的使用",normalizedTitle:"1.5 ajax 的使用",charIndex:379},{level:3,title:"1.5.1 核心对象",slug:"_1-5-1-核心对象",normalizedTitle:"1.5.1 核心对象",charIndex:396},{level:3,title:"1.5.2 使用步骤",slug:"_1-5-2-使用步骤",normalizedTitle:"1.5.2 使用步骤",charIndex:449},{level:3,title:"1.5.2.1 get的使用",slug:"_1-5-2-1-get的使用",normalizedTitle:"1.5.2.1 get 的使用",charIndex:1022},{level:3,title:"1.5.2.2  post的使用",slug:"_1-5-2-2-post的使用",normalizedTitle:"1.5.2.2  post 的使用",charIndex:null},{level:3,title:"1.5.3 解决IE缓存问题（只有get请求存在这个问题）",slug:"_1-5-3-解决ie缓存问题-只有get请求存在这个问题",normalizedTitle:"1.5.3 解决 ie 缓存问题（只有 get 请求存在这个问题）",charIndex:2398},{level:3,title:"1.5.4 AJAX请求状态",slug:"_1-5-4-ajax请求状态",normalizedTitle:"1.5.4 ajax 请求状态",charIndex:2610},{level:3,title:"1.5.5  取消上一次请求",slug:"_1-5-5-取消上一次请求",normalizedTitle:"1.5.5  取消上一次请求",charIndex:null},{level:2,title:"2.1 get请求",slug:"_2-1-get请求",normalizedTitle:"2.1 get 请求",charIndex:3067},{level:2,title:"2.2 post请求",slug:"_2-2-post请求",normalizedTitle:"2.2 post 请求",charIndex:3253},{level:2,title:"3.1同源(同域)",slug:"_3-1同源-同域",normalizedTitle:"3.1 同源 (同域)",charIndex:3453},{level:2,title:"3.2非同源受到哪些限制？",slug:"_3-2非同源受到哪些限制",normalizedTitle:"3.2 非同源受到哪些限制？",charIndex:3492},{level:2,title:"3.3ajax和form表单的跨域问题",slug:"_3-3ajax和form表单的跨域问题",normalizedTitle:"3.3ajax 和 form 表单的跨域问题",charIndex:3564},{level:2,title:"3.4如何解决跨域",slug:"_3-4如何解决跨域",normalizedTitle:"3.4 如何解决跨域",charIndex:3663},{level:3,title:"3.4.1 JSONP（只能解决get请求）",slug:"_3-4-1-jsonp-只能解决get请求",normalizedTitle:"3.4.1 jsonp（只能解决 get 请求）",charIndex:3678},{level:3,title:"3.4.2 CORS",slug:"_3-4-2-cors",normalizedTitle:"3.4.2 cors",charIndex:5791}],lastUpdated:"4/28/2022, 6:08:46 PM",lastUpdatedTimestamp:1651169326e3,headersStr:"1.1 AJAX 简介 1.2 XML简介 1.3 AJAX的特点 1.3.1 AJAX的优点 1.3.2 AJAX的缺点 1.5 AJAX的使用 1.5.1 核心对象 1.5.2 使用步骤 1.5.2.1 get的使用 1.5.2.2  post的使用 1.5.3 解决IE缓存问题（只有get请求存在这个问题） 1.5.4 AJAX请求状态 1.5.5  取消上一次请求 2.1 get请求 2.2 post请求 3.1同源(同域) 3.2非同源受到哪些限制？ 3.3ajax和form表单的跨域问题 3.4如何解决跨域 3.4.1 JSONP（只能解决get请求） 3.4.2 CORS",content:"# 原生 AJAX\n\n\n# 1.1 AJAX 简介\n\nAJAX 就是异步的 JS 和 XML，最大的优势：异步刷新。通过 AJAX 可以在浏览器中向服务器发送异步请求，AJAX 不是新的编程语言，不是新的一门独立的技术，而是一种使用现有标准的新方法。\n\n\n# 1.2 XML 简介\n\nXML 可扩展标记语言。XML 被设计用来传输和存储数据。都是自定义标签，用来表示一些数据。现在已经被 JSON 取代了。\n\n\n# 1.3 AJAX 的特点\n\n\n# 1.3.1 AJAX 的优点\n\n 1. 可以无需刷新页面而与服务器端进行通信。\n    \n\n 2. 允许你根据用户事件来更新部分页面内容。\n    \n\n\n# 1.3.2 AJAX 的缺点\n\n 1. 没有浏览历史，不能回退\n    \n\n 2. 存在跨域问题\n    \n\n 3. SEO不友好\n    \n\n\n# 1.5 AJAX 的使用\n\n\n# 1.5.1 核心对象\n\nXMLHttpRequest，AJAX 的所有操作都是通过该对象进行的。\n\n\n# 1.5.2 使用步骤\n\n//1.创建XMLHttpRequest对象\nvar xhr = new XMLHttpRequest();\n//2.调用open方法,设置请求方法和url\nxhr.open(method, url);\n//可以设置请求头，一般不设置\nxhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n//3.发送请求\nxhr.send(body) //get请求不传body参数，只有post请求使用\n//4.接收响应\nxhr.onreadystatechange = function (){\n  if(xhr.readyState == 4 && xhr.status == 200){\n\t\tvar text = xhr.response;\n\t\tconsole.log(text);\n      //xhr.response       //接收返回的响应数据\n\t  //xhr.responseXML    //接收xml格式的响应数据\n\t  //xhr.responseText   //接收文本格式的响应数据\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 1.5.2.1 get 的使用\n\nserver.js\n\nconst express=require(\"express\")\n\nconst app=express()\napp.use(express.static(__dirname+\"/public\"))\napp.get(\"/get\",(req,res)=>{\n    res.send(\"get请求\")\n})\napp.listen(3000,()=>{\n    console.log(\"run\")\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nget.html\n\n<script>\n    //1.创建XMLHttpRequest对象\n    let xhr=new XMLHttpRequest()\n\t//2.调用open方法,设置请求方法和url  (get请求要带参数在?后面写)\n    xhr.open(\"get\",\"http://localhost:3000/get?name=zhangsan\")\n\t//3.发送请求\n    xhr.send()\n\t//4.接收响应\n    xhr.onreadystatechange=()=>{\n        if(xhr.readyState===4 && xhr.status===200){\n            console.log(xhr.response)\n        }\n    }\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 1.5.2.2 post 的使用\n\nserver.js\n\nconst express=require(\"express\")\nconst app=express()\napp.use(express.static(__dirname+\"/public\"))\napp.post(\"/post\",(req,res)=>{\n    res.send(\"post请求\")\n})\n\napp.listen(3000,()=>{\n    console.log(\"run\")\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\npost.html\n\n<script>\n    let xhr=new XMLHttpRequest()\n    xhr.open(\"post\",\"http://localhost:3000/post\")\n    //post请求必须设置请求头,并且设置在send()前\n    xhr.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\")\n    //post请求的参数在send()设置\n    xhr.send(\"name=zhangsan\")\n\n    xhr.onreadystatechange=()=>{\n        if(xhr.readyState===4 && xhr.status===200){\n            console.log(xhr.response)\n        }\n    }\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 1.5.3 解决 IE 缓存问题（只有 get 请求存在这个问题）\n\n问题：在一些浏览器中 (IE), 由于缓存机制的存在，ajax 只会发送的第一次请求，剩余多次请求不会在发送给浏览器而是直接加载缓存中的数据。\n\n解决方式：浏览器的缓存是根据 url 地址来记录的，所以我们只需要修改 url 地址即可避免缓存问题\n\nxhr.open(\"get\",\"/testAJAX?t=\"+Date.now());\n\n\n1\n\n\n\n# 1.5.4 AJAX 请求状态\n\nxhr.readyState 可以用来查看请求当前的状态\n\n0: 对应常量 UNSENT，表示 XMLHttpRequest 实例已经生成，但是 open () 方法还没有被调用。\n\n1: 对应常量 OPENED，表示 send () 方法还没有被调用，仍然可以使用 setRequestHeader ()，设定 HTTP 请求的头信息。\n\n2: 对应常量 HEADERS_RECEIVED，表示 send () 方法已经执行，并且头信息和状态码已经收到。\n\n3: 对应常量 LOADING，表示正在接收服务器传来的 body 部分的数据，如果 responseType 属性是 text 或者空字符串，responseText 就会包含已经收到的部分信息。\n\n4: 对应常量 DONE，表示服务器数据已经完全接收，或者本次接收已经失败了\n\n\n# 1.5.5 取消上一次请求\n\nxhr.abort()\n\n\n1\n\n\n\n# 第 2 章：jQuery 中的 AJAX (简写)\n\n\n# 2.1 get 请求\n\n$.get(url, [data], [callback], [type])     //一般用前三个\n\n\n1\n\n\nurl: 请求的 URL 地址。\n\ndata: 请求携带的参数。\n\ncallback: 载入成功时回调函数。\n\ntype: 设置返回内容格式，xml, html, script, json, text, _default。\n\n\n# 2.2 post 请求\n\n$.post(url, [data], [callback], [type])    //一般用前三个\n\n\n1\n\n\nurl: 请求的 URL 地址。\n\ndata: 请求携带的参数。\n\ncallback: 载入成功时回调函数。\n\ntype: 设置返回内容格式，xml, html, script, json, text, _default。\n\n\n# 第 3 章：跨域\n\n\n# 3.1 同源 (同域)\n\n同源： 协议、域名、端口号 必须完全相同。\n\n\n# 3.2 非同源受到哪些限制？\n\n1. Cookie不能读取；\n2. DOM无法获得；\n3. Ajax请求不能获取数据\n\n\n1\n2\n3\n\n\n\n# 3.3ajax 和 form 表单的跨域问题\n\najax----ajax引擎-----遵守同源策略\nform----浏览器其他模块-----不遵守同源策略，但是返回的是新页面\n\n\n1\n2\n\n\n\n# 3.4 如何解决跨域\n\n\n# 3.4.1 JSONP（只能解决 get 请求）\n\n 1. JSONP是什么\n    \n\nJSONP (JSON with Padding)，是一个非官方的跨域解决方案，纯粹凭借程序员的聪明才智开发出来，只支持 get 请求。\n\n2）\n\n关于 jsonp 解决跨域\n\n * 1.原理：利用了script标签发请求不受同源策略的限制。所以不会产生跨域问题\n   \n\n * 2.套路：动态构建script节点，利用节点的src属性，发出get请求，从而绕开ajax引擎\n   \n\n * 3.弊端：(1).只能解决get请求跨域的问题。(2).后端工程师必须配合前端\n   \n\n * 4.备注：有这样一种感觉：前端定义函数，后端“调用”。后端返回的数据，前端以js格式解析，并且运行。\n   \n\n3）原生 JSONP\n\n前端页面写法：\n\n<script>\nlet btn = document.getElementById('btn')\n  btn.onclick = function () {\n    //1.提前定义好一个等待被调用的函数\n    window.getData = function(result) {\n      console.log(result)\n    }\n    //2.创建一个script节点\n    const scriptNode = document.createElement('script')\n    //3.为节点指定src地址，同时指定好回调函数的名字\n    scriptNode.src = 'http://localhost:3000/test?callback=getData'\n    //4.将节点插入页面\n    document.body.appendChild(scriptNode)\n  }\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n后端页面写法：\n\nlet express = require('express')\nlet app = express()\napp.get('/test',function (req,res) {\n  let {callback} = req.query\n  console.log(callback)\n  let personArr = [{name:'peiqi',age:12},{name:'suxi',age:16}]\n  res.send(`${callback}(${JSON.stringify(personArr)})`)\n})\n\napp.listen(3000,function (err) {\n  if(err) console.log(err)\n  else {\n    console.log('演示jsonp解决跨域服务器，启动成功了！')\n    \n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n 4. jQuery中的JSONP  \n    \n\n前端页面写法：(设置 jsonp 格式)\n\n<script>\n    $.ajax({\n      url:'http://localhost:3000/test',\n      method:'get',\n      dataType:'jsonp', //该属性，控制了上面的4步\n      data:{name:'zhangsan',age:18},\n      success:function (result) {\n        console.log(result)\n      },\n      error:function (err) {\n        console.log(err)\n      }\n    })\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n后端页面写法：(和原生一样)\n\nlet express = require('express')\nlet app = express()\napp.get('/test',function (req,res) {\n  let {callback} = req.query\n  console.log(callback)\n  let personArr = [{name:'peiqi',age:12},{name:'suxi',age:16}]\n  res.send(`${callback}(${JSON.stringify(personArr)})`)\n})\n\napp.listen(3000,function (err) {\n  if(err) console.log(err)\n  else {\n    console.log('演示jsonp解决跨域服务器，启动成功了！')\n    \n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 3.4.2 CORS\n\n 1. CORS是什么？\n    \n\nCORS（Cross-Origin Resource Sharing），跨域资源共享。CORS 是官方的跨域解决方案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持 get 和 post 请求。\n\n 2. CORS怎么工作的？\n    \n\nCORS 是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应以后就会对响应放行。\n\n 3. CORS的使用\n    \n\n前端页面：(发送正常的 ajax 请求，不需要任何操作)\n\n后端页面：（以 Node 为例：）\n\n//配置CORS\nres.setHeader('Access-Control-Allow-Origin', 'http://localhost:63342'); //第一个参数是固定语法，第二个参数是前端请求过来的url\n\n\n1\n2\n",normalizedContent:"# 原生 ajax\n\n\n# 1.1 ajax 简介\n\najax 就是异步的 js 和 xml，最大的优势：异步刷新。通过 ajax 可以在浏览器中向服务器发送异步请求，ajax 不是新的编程语言，不是新的一门独立的技术，而是一种使用现有标准的新方法。\n\n\n# 1.2 xml 简介\n\nxml 可扩展标记语言。xml 被设计用来传输和存储数据。都是自定义标签，用来表示一些数据。现在已经被 json 取代了。\n\n\n# 1.3 ajax 的特点\n\n\n# 1.3.1 ajax 的优点\n\n 1. 可以无需刷新页面而与服务器端进行通信。\n    \n\n 2. 允许你根据用户事件来更新部分页面内容。\n    \n\n\n# 1.3.2 ajax 的缺点\n\n 1. 没有浏览历史，不能回退\n    \n\n 2. 存在跨域问题\n    \n\n 3. seo不友好\n    \n\n\n# 1.5 ajax 的使用\n\n\n# 1.5.1 核心对象\n\nxmlhttprequest，ajax 的所有操作都是通过该对象进行的。\n\n\n# 1.5.2 使用步骤\n\n//1.创建xmlhttprequest对象\nvar xhr = new xmlhttprequest();\n//2.调用open方法,设置请求方法和url\nxhr.open(method, url);\n//可以设置请求头，一般不设置\nxhr.setrequestheader('content-type', 'application/x-www-form-urlencoded');\n//3.发送请求\nxhr.send(body) //get请求不传body参数，只有post请求使用\n//4.接收响应\nxhr.onreadystatechange = function (){\n  if(xhr.readystate == 4 && xhr.status == 200){\n\t\tvar text = xhr.response;\n\t\tconsole.log(text);\n      //xhr.response       //接收返回的响应数据\n\t  //xhr.responsexml    //接收xml格式的响应数据\n\t  //xhr.responsetext   //接收文本格式的响应数据\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 1.5.2.1 get 的使用\n\nserver.js\n\nconst express=require(\"express\")\n\nconst app=express()\napp.use(express.static(__dirname+\"/public\"))\napp.get(\"/get\",(req,res)=>{\n    res.send(\"get请求\")\n})\napp.listen(3000,()=>{\n    console.log(\"run\")\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nget.html\n\n<script>\n    //1.创建xmlhttprequest对象\n    let xhr=new xmlhttprequest()\n\t//2.调用open方法,设置请求方法和url  (get请求要带参数在?后面写)\n    xhr.open(\"get\",\"http://localhost:3000/get?name=zhangsan\")\n\t//3.发送请求\n    xhr.send()\n\t//4.接收响应\n    xhr.onreadystatechange=()=>{\n        if(xhr.readystate===4 && xhr.status===200){\n            console.log(xhr.response)\n        }\n    }\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 1.5.2.2 post 的使用\n\nserver.js\n\nconst express=require(\"express\")\nconst app=express()\napp.use(express.static(__dirname+\"/public\"))\napp.post(\"/post\",(req,res)=>{\n    res.send(\"post请求\")\n})\n\napp.listen(3000,()=>{\n    console.log(\"run\")\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\npost.html\n\n<script>\n    let xhr=new xmlhttprequest()\n    xhr.open(\"post\",\"http://localhost:3000/post\")\n    //post请求必须设置请求头,并且设置在send()前\n    xhr.setrequestheader(\"content-type\",\"application/x-www-form-urlencoded\")\n    //post请求的参数在send()设置\n    xhr.send(\"name=zhangsan\")\n\n    xhr.onreadystatechange=()=>{\n        if(xhr.readystate===4 && xhr.status===200){\n            console.log(xhr.response)\n        }\n    }\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 1.5.3 解决 ie 缓存问题（只有 get 请求存在这个问题）\n\n问题：在一些浏览器中 (ie), 由于缓存机制的存在，ajax 只会发送的第一次请求，剩余多次请求不会在发送给浏览器而是直接加载缓存中的数据。\n\n解决方式：浏览器的缓存是根据 url 地址来记录的，所以我们只需要修改 url 地址即可避免缓存问题\n\nxhr.open(\"get\",\"/testajax?t=\"+date.now());\n\n\n1\n\n\n\n# 1.5.4 ajax 请求状态\n\nxhr.readystate 可以用来查看请求当前的状态\n\n0: 对应常量 unsent，表示 xmlhttprequest 实例已经生成，但是 open () 方法还没有被调用。\n\n1: 对应常量 opened，表示 send () 方法还没有被调用，仍然可以使用 setrequestheader ()，设定 http 请求的头信息。\n\n2: 对应常量 headers_received，表示 send () 方法已经执行，并且头信息和状态码已经收到。\n\n3: 对应常量 loading，表示正在接收服务器传来的 body 部分的数据，如果 responsetype 属性是 text 或者空字符串，responsetext 就会包含已经收到的部分信息。\n\n4: 对应常量 done，表示服务器数据已经完全接收，或者本次接收已经失败了\n\n\n# 1.5.5 取消上一次请求\n\nxhr.abort()\n\n\n1\n\n\n\n# 第 2 章：jquery 中的 ajax (简写)\n\n\n# 2.1 get 请求\n\n$.get(url, [data], [callback], [type])     //一般用前三个\n\n\n1\n\n\nurl: 请求的 url 地址。\n\ndata: 请求携带的参数。\n\ncallback: 载入成功时回调函数。\n\ntype: 设置返回内容格式，xml, html, script, json, text, _default。\n\n\n# 2.2 post 请求\n\n$.post(url, [data], [callback], [type])    //一般用前三个\n\n\n1\n\n\nurl: 请求的 url 地址。\n\ndata: 请求携带的参数。\n\ncallback: 载入成功时回调函数。\n\ntype: 设置返回内容格式，xml, html, script, json, text, _default。\n\n\n# 第 3 章：跨域\n\n\n# 3.1 同源 (同域)\n\n同源： 协议、域名、端口号 必须完全相同。\n\n\n# 3.2 非同源受到哪些限制？\n\n1. cookie不能读取；\n2. dom无法获得；\n3. ajax请求不能获取数据\n\n\n1\n2\n3\n\n\n\n# 3.3ajax 和 form 表单的跨域问题\n\najax----ajax引擎-----遵守同源策略\nform----浏览器其他模块-----不遵守同源策略，但是返回的是新页面\n\n\n1\n2\n\n\n\n# 3.4 如何解决跨域\n\n\n# 3.4.1 jsonp（只能解决 get 请求）\n\n 1. jsonp是什么\n    \n\njsonp (json with padding)，是一个非官方的跨域解决方案，纯粹凭借程序员的聪明才智开发出来，只支持 get 请求。\n\n2）\n\n关于 jsonp 解决跨域\n\n * 1.原理：利用了script标签发请求不受同源策略的限制。所以不会产生跨域问题\n   \n\n * 2.套路：动态构建script节点，利用节点的src属性，发出get请求，从而绕开ajax引擎\n   \n\n * 3.弊端：(1).只能解决get请求跨域的问题。(2).后端工程师必须配合前端\n   \n\n * 4.备注：有这样一种感觉：前端定义函数，后端“调用”。后端返回的数据，前端以js格式解析，并且运行。\n   \n\n3）原生 jsonp\n\n前端页面写法：\n\n<script>\nlet btn = document.getelementbyid('btn')\n  btn.onclick = function () {\n    //1.提前定义好一个等待被调用的函数\n    window.getdata = function(result) {\n      console.log(result)\n    }\n    //2.创建一个script节点\n    const scriptnode = document.createelement('script')\n    //3.为节点指定src地址，同时指定好回调函数的名字\n    scriptnode.src = 'http://localhost:3000/test?callback=getdata'\n    //4.将节点插入页面\n    document.body.appendchild(scriptnode)\n  }\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n后端页面写法：\n\nlet express = require('express')\nlet app = express()\napp.get('/test',function (req,res) {\n  let {callback} = req.query\n  console.log(callback)\n  let personarr = [{name:'peiqi',age:12},{name:'suxi',age:16}]\n  res.send(`${callback}(${json.stringify(personarr)})`)\n})\n\napp.listen(3000,function (err) {\n  if(err) console.log(err)\n  else {\n    console.log('演示jsonp解决跨域服务器，启动成功了！')\n    \n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n 4. jquery中的jsonp  \n    \n\n前端页面写法：(设置 jsonp 格式)\n\n<script>\n    $.ajax({\n      url:'http://localhost:3000/test',\n      method:'get',\n      datatype:'jsonp', //该属性，控制了上面的4步\n      data:{name:'zhangsan',age:18},\n      success:function (result) {\n        console.log(result)\n      },\n      error:function (err) {\n        console.log(err)\n      }\n    })\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n后端页面写法：(和原生一样)\n\nlet express = require('express')\nlet app = express()\napp.get('/test',function (req,res) {\n  let {callback} = req.query\n  console.log(callback)\n  let personarr = [{name:'peiqi',age:12},{name:'suxi',age:16}]\n  res.send(`${callback}(${json.stringify(personarr)})`)\n})\n\napp.listen(3000,function (err) {\n  if(err) console.log(err)\n  else {\n    console.log('演示jsonp解决跨域服务器，启动成功了！')\n    \n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 3.4.2 cors\n\n 1. cors是什么？\n    \n\ncors（cross-origin resource sharing），跨域资源共享。cors 是官方的跨域解决方案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持 get 和 post 请求。\n\n 2. cors怎么工作的？\n    \n\ncors 是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应以后就会对响应放行。\n\n 3. cors的使用\n    \n\n前端页面：(发送正常的 ajax 请求，不需要任何操作)\n\n后端页面：（以 node 为例：）\n\n//配置cors\nres.setheader('access-control-allow-origin', 'http://localhost:63342'); //第一个参数是固定语法，第二个参数是前端请求过来的url\n\n\n1\n2\n",charsets:{cjk:!0}},{title:"node",frontmatter:{title:"node",date:"2021-03-17T13:52:29.000Z",permalink:"/pages/079821/",categories:["前端","Node"],tags:"node -"},regularPath:"/views/01.%E5%89%8D%E7%AB%AF/30.Node/10.node.html",relativePath:"views/01.前端/30.Node/10.node.md",key:"v-0c611ae8",path:"/pages/079821/",headers:[{level:2,title:"为什么要学习Node.js",slug:"为什么要学习node-js",normalizedTitle:"为什么要学习 node.js",charIndex:14},{level:2,title:"Node能做什么",slug:"node能做什么",normalizedTitle:"node 能做什么",charIndex:159},{level:2,title:"安装Node环境",slug:"安装node环境",normalizedTitle:"安装 node 环境",charIndex:341},{level:2,title:"解析执行JavaScript",slug:"解析执行javascript",normalizedTitle:"解析执行 javascript",charIndex:433},{level:3,title:"创建Buffer",slug:"创建buffer",normalizedTitle:"创建 buffer",charIndex:592},{level:3,title:"转换",slug:"转换",normalizedTitle:"转换",charIndex:778},{level:3,title:"fs的使用",slug:"fs的使用",normalizedTitle:"fs 的使用",charIndex:1093},{level:3,title:"文件的写入",slug:"文件的写入",normalizedTitle:"文件的写入",charIndex:1325},{level:4,title:"简单写入",slug:"简单写入",normalizedTitle:"简单写入",charIndex:1334},{level:4,title:"流式写入",slug:"流式写入",normalizedTitle:"流式写入",charIndex:2159},{level:3,title:"文件的读取",slug:"文件的读取",normalizedTitle:"文件的读取",charIndex:2447},{level:4,title:"简单读取文件",slug:"简单读取文件",normalizedTitle:"简单读取文件",charIndex:2456},{level:4,title:"流式读取文件",slug:"流式读取文件",normalizedTitle:"流式读取文件",charIndex:2720},{level:2,title:"模块标识符中的/和文件操作路径中的/",slug:"模块标识符中的-和文件操作路径中的",normalizedTitle:"模块标识符中的 / 和文件操作路径中的 /",charIndex:3899},{level:3,title:"npm命令行工具",slug:"npm命令行工具",normalizedTitle:"npm 命令行工具",charIndex:4545},{level:3,title:"常用命令",slug:"常用命令",normalizedTitle:"常用命令",charIndex:4688},{level:3,title:"解决npm被墙问题",slug:"解决npm被墙问题",normalizedTitle:"解决 npm 被墙问题",charIndex:4998},{level:3,title:"yarn常用命令",slug:"yarn常用命令",normalizedTitle:"yarn 常用命令",charIndex:5499},{level:2,title:"1.1 Express是什么",slug:"_1-1-express是什么",normalizedTitle:"1.1 express 是什么",charIndex:6682},{level:2,title:"1.2 Express的使用",slug:"_1-2-express的使用",normalizedTitle:"1.2 express 的使用",charIndex:6820},{level:3,title:"1.2.1 下载",slug:"_1-2-1-下载",normalizedTitle:"1.2.1 下载",charIndex:6840},{level:3,title:"1.2.2 第一个服务器",slug:"_1-2-2-第一个服务器",normalizedTitle:"1.2.2 第一个服务器",charIndex:6950},{level:2,title:"2.1 Route是什么",slug:"_2-1-route是什么",normalizedTitle:"2.1 route 是什么",charIndex:7321},{level:2,title:"2.2 Route的定义",slug:"_2-2-route的定义",normalizedTitle:"2.2 route 的定义",charIndex:7415},{level:2,title:"2.3 Route的实现",slug:"_2-3-route的实现",normalizedTitle:"2.3 route 的实现",charIndex:7503},{level:2,title:"2.4 Request对象",slug:"_2-4-request对象",normalizedTitle:"2.4 request 对象",charIndex:7740},{level:3,title:"Request对象属性和方法",slug:"request对象属性和方法",normalizedTitle:"request 对象属性和方法",charIndex:7759},{level:2,title:"2.5 Response对象",slug:"_2-5-response对象",normalizedTitle:"2.5 response 对象",charIndex:7990},{level:3,title:"Response对象的属性和方法",slug:"response对象的属性和方法",normalizedTitle:"response 对象的属性和方法",charIndex:8010},{level:2,title:"2.6 路由实例",slug:"_2-6-路由实例",normalizedTitle:"2.6 路由实例",charIndex:8408},{level:2,title:"3.1中间件简介",slug:"_3-1中间件简介",normalizedTitle:"3.1 中间件简介",charIndex:8836},{level:2,title:"3.2中间件功能",slug:"_3-2中间件功能",normalizedTitle:"3.2 中间件功能",charIndex:8893},{level:2,title:"3.3 中间件的分类",slug:"_3-3-中间件的分类",normalizedTitle:"3.3 中间件的分类",charIndex:8991},{level:2,title:"3.4中间件实例",slug:"_3-4中间件实例",normalizedTitle:"3.4 中间件实例",charIndex:9438},{level:3,title:"3.4.1应用级",slug:"_3-4-1应用级",normalizedTitle:"3.4.1 应用级",charIndex:9452},{level:3,title:"3.4.2内置中间件(处理request.body)",slug:"_3-4-2内置中间件-处理request-body",normalizedTitle:"3.4.2 内置中间件 (处理 request.body)",charIndex:10573},{level:3,title:"暴露静态资源",slug:"暴露静态资源",normalizedTitle:"暴露静态资源",charIndex:9387},{level:2,title:"4.1 Router是什么",slug:"_4-1-router是什么",normalizedTitle:"4.1 router 是什么",charIndex:11460},{level:2,title:"4.2 为什么使用Router",slug:"_4-2-为什么使用router",normalizedTitle:"4.2 为什么使用 router",charIndex:11522},{level:2,title:"4.3 Router的使用",slug:"_4-3-router的使用",normalizedTitle:"4.3 router 的使用",charIndex:11560},{level:2,title:"5.1 使用EJS",slug:"_5-1-使用ejs",normalizedTitle:"5.1 使用 ejs",charIndex:11778},{level:2,title:"5.2 EJS语法",slug:"_5-2-ejs语法",normalizedTitle:"5.2 ejs 语法",charIndex:12076},{level:2,title:"5.3 EJS具体使用",slug:"_5-3-ejs具体使用",normalizedTitle:"5.3 ejs 具体使用",charIndex:12246},{level:2,title:"6.1art-templete的使用",slug:"_6-1art-templete的使用",normalizedTitle:"6.1art-templete 的使用",charIndex:12689},{level:2,title:"6.2子模板和模板的继承（模板引擎高级语法）【include，extend，block】",slug:"_6-2子模板和模板的继承-模板引擎高级语法-【include-extend-block】",normalizedTitle:"6.2 子模板和模板的继承（模板引擎高级语法）【include，extend，block】",charIndex:13201},{level:2,title:"7.1会话控制是什么",slug:"_7-1会话控制是什么",normalizedTitle:"7.1 会话控制是什么",charIndex:14764},{level:2,title:"7.2 cookie",slug:"_7-2-cookie",normalizedTitle:"7.2 cookie",charIndex:14819},{level:3,title:"7.2.1 cookie是什么",slug:"_7-2-1-cookie是什么",normalizedTitle:"7.2.1 cookie 是什么",charIndex:14834},{level:3,title:"7.2.2 cookie的不足",slug:"_7-2-2-cookie的不足",normalizedTitle:"7.2.2 cookie 的不足",charIndex:15519},{level:3,title:"7.2.3 cookie的使用",slug:"_7-2-3-cookie的使用",normalizedTitle:"7.2.3 cookie 的使用",charIndex:15691},{level:2,title:"7.3 session",slug:"_7-3-session",normalizedTitle:"7.3 session",charIndex:16960},{level:3,title:"7.3.1 session是什么",slug:"_7-3-1-session是什么",normalizedTitle:"7.3.1 session 是什么",charIndex:16976},{level:3,title:"7.3.2 session运作流程",slug:"_7-3-2-session运作流程",normalizedTitle:"7.3.2 session 运作流程",charIndex:17651},{level:3,title:"7.3.3 session的使用",slug:"_7-3-3-session的使用",normalizedTitle:"7.3.3 session 的使用",charIndex:17815},{level:3,title:"7.3.4 cookie和session的区别",slug:"_7-3-4-cookie和session的区别",normalizedTitle:"7.3.4 cookie 和 session 的区别",charIndex:18556}],lastUpdated:"4/28/2022, 6:08:46 PM",lastUpdatedTimestamp:1651169326e3,headersStr:"为什么要学习Node.js Node能做什么 安装Node环境 解析执行JavaScript 创建Buffer 转换 fs的使用 文件的写入 简单写入 流式写入 文件的读取 简单读取文件 流式读取文件 模块标识符中的/和文件操作路径中的/ npm命令行工具 常用命令 解决npm被墙问题 yarn常用命令 1.1 Express是什么 1.2 Express的使用 1.2.1 下载 1.2.2 第一个服务器 2.1 Route是什么 2.2 Route的定义 2.3 Route的实现 2.4 Request对象 Request对象属性和方法 2.5 Response对象 Response对象的属性和方法 2.6 路由实例 3.1中间件简介 3.2中间件功能 3.3 中间件的分类 3.4中间件实例 3.4.1应用级 3.4.2内置中间件(处理request.body) 暴露静态资源 4.1 Router是什么 4.2 为什么使用Router 4.3 Router的使用 5.1 使用EJS 5.2 EJS语法 5.3 EJS具体使用 6.1art-templete的使用 6.2子模板和模板的继承（模板引擎高级语法）【include，extend，block】 7.1会话控制是什么 7.2 cookie 7.2.1 cookie是什么 7.2.2 cookie的不足 7.2.3 cookie的使用 7.3 session 7.3.1 session是什么 7.3.2 session运作流程 7.3.3 session的使用 7.3.4 cookie和session的区别",content:'# Node 介绍\n\n\n# 为什么要学习 Node.js\n\n * 企业需求\n   * 具有服务端开发经验更改\n   * front-end\n   * back-end\n   * 全栈开发工程师\n   * 基本的网站开发能力\n     * 服务端\n     * 前端\n     * 运维部署\n   * 多人社区\n\n\n# Node 能做什么\n\n * web 服务器后台\n * 命令行工具\n   * npm(node)\n   * git (c 语言)\n   * hexo（node）\n   * ...\n * 对于前端工程师来讲，接触最多的是它的命令行工具\n   * 自己写的很少，主要是用别人第三方的\n   * webpack\n   * gulp\n   * npm\n\n\n# 起步\n\n\n# 安装 Node 环境\n\n * 下载：https://nodejs.org/en/\n\n * 确认 Node 环境是否安装成功\n   \n   node -v\n\n * 配置环境变量\n\n\n# 解析执行 JavaScript\n\n 1. 创建编写 JavaScript 脚本文件\n 2. 打开终端，定位脚本文件的所属目录\n 3. 输入 node 文件名 执行对应的文件\n\n注意：文件名不要用 node.js 来命名，也就是说除了 node 这个名字随便起，最好不要使用中文。\n\n\n# Buffer 的使用\n\n\n# 创建 Buffer\n\n// 创建一个指定size大小的Buffer\nvar buf = Buffer.alloc(size);  //安全，里面全是0\nvar buf = Buffer.allocUnsafe(size);   //不安全，可能包含旧数据，需要重写所有数据\n\n// 获取Buffer的长度\nbuf.length\n\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 转换\n\n// 相当于Buffer.alloc(size);\nvar buf = Buffer.allocUnsafe(size);\nbuf.fill(0)   //将可能出现的敏感数据用0全部填充\n\n// 将一个字符串转换为Buffer\nvar buf = Buffer.from(str);\n\n// 将一个Buffer转换为字符串\nvar str = buf.toString();\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# fs 文件系统\n\n全称为 file system，所谓的文件系统，就是对计算机中的文件进行增删改查等操作。它是一个服务器的基础，在 Node 中通过 fs 模块来操作文件系统。\n\n\n# fs 的使用\n\n 1. fs模块是Node的核心模块，不需要下载，直接引入即可使用\n    \n\nconst fs = require("fs");\n\n\n1\n\n\n 2. fs中的大部分方法都为我们提供了两个版本：\n    \n\na. 同步方法：带 sync 的方法\n\na) 同步方法会阻塞程序的执行\n\nb) 同步方法通过返回值返回结果\n\nb. 异步方法：不带 sync 的方法\n\na) 异步方法不会阻塞程序的执行\n\nb) 异步方法都是通过回调函数来返回结果的\n\n\n# 文件的写入\n\n# 简单写入\n\n同步方法：fs.writeFileSync(file, data[, options])\n异步方法：fs.writeFile(file, data[, options], callback)\n参数：\nfile 要写入的文件的路径\ndata 要写入的内容，可以是一个String也可以是一个Buffer\noptions 配置对象，需要一个对象作为参数，默认如下：\n\t\t\t{encoding:"utf8",flag:"w",mode:0666}\n\t\t\t --encoding:设置文件的编码方式，默认值：utf8(万国码)\n               --mode:设置文件的操作权限，默认值是：0o666 = 0o222 + 0o444\n                     --0o111:文件可被执行的权限  \n                     --0o222:文件可被写入的权限\n                     --0o444:文件可别读取的权限\n                 --flag:打开文件要执行的操作，默认值是\'w\'\n                      --a ：追加\n                      --w ：写入\ncallback 回调函数\n\t--err：错误对象\n\t\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n//引入内置的fs模块\nlet fs = require(\'fs\')\n\n//调用writeFile方法\nfs.writeFile(__dirname+\'/demo.txt\',\'kobe,123\',err => {\n    if(err) console.log(\'文件写入失败\',err)\n    else console.log(\'文件写入成功\')\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n# 流式写入\n\n流式文件写入适用于一些比较大的文件，可以分多次向文件中写入内容，有效避免内存溢出的问题\n\n1.创建一个可写流\n  var ws = fs.createWriteStream(path);\n2.监听流的状态\n  ws.once("open",function(){});\n  ws.once("close",function(){});\n3.向流中写入内容\n  ws.write(...);\n  ws.write(...);\n  ws.write(...);\n4.关闭流\n  ws.end();\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 文件的读取\n\n# 简单读取文件\n\nfs.readFileSync(path[, options])\nfs.readFile(path[, options], callback)\n参数：\npath 读取文件的路径\n\t \toptions 配置对象\n \t\tencoding 指定打开文件的编码，默认是null\n \t\tflag 文件的操作类型，默认是 r\ncallback 回调函数，通过回调函数返回读取到的数据\n \t\t    err 错误对象\n \t\t\tdata 返回的数据（Buffer）\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n# 流式读取文件\n\n适合较大的文件\n\n// 方式一：\n//创建一个可读流\nvar rs = fs.createReadStream("C:\\\\other\\\\MP3\\\\笔记.mp3");\n//创建一个可写流\nvar ws = fs.createWriteStream("biji.mp3");\n\n//监听可读流，可读流读取完毕后会自动关闭\nrs.once("open" , function () {\n  console.log("流打开了");\n});\nrs.once("close" , function () {\n  console.log("流关闭了");\n//数据读取完毕，可以关闭可写流\n  ws.end();\n});\n//监听可写流\nws.once("open" , function () {\n  console.log("可写流打开了");\n});\nws.once("close" , function () {\n  console.log("可写流关闭了");\n});\n//要通过可读流读取一个文件，必须为流绑定一个data事件，当绑定了data事件以后，流会自动读取\nrs.on("data",function (data) {\n//console.log(data);\n//将数据写入到可写流中\n  ws.write(data);\n});\n\n//方式二：\n//创建一个可读流\nvar rs = fs.createReadStream("C:\\\\other\\\\MP3\\\\笔记.mp3");\n//创建一个可写流\nvar ws = fs.createWriteStream("biji.mp3");\n/*\n pipe()\n  - 可以将一个可读流中的内容写入到一个可写流中\n */\nrs.pipe(ws);\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n\n\n\n# http\n\nhttp 搭建服务器服务器：\n\n// 1.加载http核心模块\nconst http=require("http");\n\n// 2.使用http.createServer()创建一个web服务器\nlet server=http.createServer(function (request,response) {\n\tresponse.end("ok")\n})\n// 4.绑定端口号，启动服务\nserver.listen(3000,function(){\n    console.log(\'runing...\')\n})\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 模块标识符中的 / 和文件操作路径中的 /\n\n文件操作路径：\n\n// 咱们所使用的所有文件操作的API都是异步的\n// 就像ajax请求一样\n// 读取文件\n// 文件操作中 ./ 相当于当前模块所处磁盘根目录\n// ./index.txt    相对于当前目录\n// /index.txt    相对于当前目录\n// /index.txt   绝对路径,当前文件模块所处根目录\n// d:express/index.txt   绝对路径\nfs.readFile(\'./index.txt\',function(err,data){\n    if(err){\n       return  console.log(\'读取失败\');\n    }\n    console.log(data.toString());\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n模块操作路径：\n\n// 在模块加载中，相对路径中的./不能省略\n// 这里省略了.也是磁盘根目录\nrequire(\'./index\')(\'hello\')\n\n\n1\n2\n3\n\n\n\n# npm,cnpm,yarn\n\n * node package manage (node 包管理器)\n * 通过 npm 命令安装 jQuery 包（npm install --save jquery），在安装时加上 --save 会主动生成说明书文件信息（将安装文件的信息添加到 package.json 里面）\n\n\n# npm 命令行工具\n\nnpm 是一个命令行工具，只要安装了 node 就已经安装了 npm。\n\nnpm 也有版本概念，可以通过 npm --version 来查看 npm 的版本\n\n升级 npm (自己升级自己)：\n\nnpm install --global npm\n\n\n1\n\n\n\n# 常用命令\n\nnpm init -y   //可以跳过向导，快速生成\n\n\n1\n\n\nnpm install   //一次性把dependencies选项中的依赖项全部安装\nnpm i\t\t  //简写\n\n\n1\n2\n\n\nnpm install 包名   //下载第三方包\n\n\n1\n\n\nnpm install --save 包名   //下载并且保存依赖项（package.json文件中的dependencies选项）\n\n\n1\n\n\nnpm uninstall 包名  \t\t//只删除，如果有依赖项会依然保存\n\n\n1\n\n\nnpm uninstall --save 包名   //删除的同时也会把依赖信息全部删除\n\n\n1\n\n\n\n# 解决 npm 被墙问题\n\n###1. 国内使用 npm 存在的问题\n\nnpm 的远程服务器在国外，所以有时候难免出现访问过慢，甚至无法访问的情况。\n\nnpm config get registry    //查看当前npm远程仓库地址\n\n\n1\n\n\n###2. 使用淘宝的 cpm 代替 npm\n\n#### 第一种使用方法：直接安装 cnpm\n\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\n\n1\n\n\n#### 第二种使用方法：替换 npm 仓库地址为淘宝镜像地址\n\nnpm config set registry https://registry.npm.taobao.org   \n\n\n1\n\n\n###3. 使用 yarn 代替 npm\n\nnpm install yarn -g    //全局安装yarn\n\n\n1\n\n\n#### 第二种使用方法：替换 yarn 仓库地址为淘宝镜像地址\n\nyarn config set registry https://registry.npm.taobao.org\n\n\n1\n\n\n\n# yarn 常用命令\n\nyarn --version   \t\t//查看yarn版本\n\nyarn init \t\t\t\t//生成package.json  ！！！注意生成的包名不能有中文，大写\n\nyarn global package     //全局安装  \n\nyarn add package \t    //局部安装\n\nyarn add package --dev  //相当于npm中的--save-dev\n\nyarn remove package     //移除包\n\nyarn list \t\t\t\t//列出已经安装的包名\n\nyarn info package       //获取包的有关信息\n\nyarn \t\t\t\t\t//安装package.json中的所有依赖\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# path 路径操作模块\n\n> 参考文档：https://nodejs.org/docs/latest-v13.x/api/path.html\n\n * path.basename：获取路径的文件名，默认包含扩展名\n * path.dirname：获取路径中的目录部分\n * path.extname：获取一个路径中的扩展名部分\n * path.parse：把路径转换为对象\n   * root：根路径\n   * dir：目录\n   * base：包含后缀名的文件名\n   * ext：后缀名\n   * name：不包含后缀名的文件名\n * path.join：拼接路径\n * path.isAbsolute：判断一个路径是否为绝对路径\n\n\n# Node 中的其它成员 (__dirname,__filename)\n\n__dirname\t\t//可以用来**动态**获取当前文件模块所属目录的绝对路径\n\n\n1\n\n\n__filename\t\t//可以用来**动态**获取当前文件的绝对路径（包含文件名）\n\n\n1\n\n\n在拼接路径的过程中，为了避免手动拼接带来的一些低级错误，推荐使用 path.join() 来辅助拼接\n\nvar fs = require(\'fs\');\nvar path = require(\'path\');\n// console.log(__dirname + \'a.txt\');\n// path.join方法会将文件操作中的相对路径都统一的转为动态的绝对路径\nfs.readFile(path.join(__dirname + \'/a.txt\'),\'utf8\',function(err,data){\n\tif(err){\n\t\tthrow err\n\t}\n\tconsole.log(data);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 第 1 章：Express 简介\n\n\n# 1.1 Express 是什么\n\nExpress 是一个基于 Node.js 平台的极简、灵活的 web 应用开发框架，它提供一系列强大的特性，帮助你快速创建各种 Web 和移动设备应用。\n\n简单来说 Express 就是运行在 node 中的用来搭建服务器的模块。\n\n\n# 1.2 Express 的使用\n\n\n# 1.2.1 下载\n\nnpm i express --save  //使用npm安装express并添加到依赖项\nyarn add express\t //使用yarn安装express并添加到依赖项\n\n\n1\n2\n\n\n\n# 1.2.2 第一个服务器\n\n//1.引入express模块\nconst  express=require("express")\n//2.创建应用对象\nconst app = express()\n//3.配置路由\napp.get("/index",function (request,response) {\n     //接受地址栏发送的请求,格式为对象\n    console.log(request.query)\n    //设置响应\n\tresponse.send("ok")\n})\n//4.监听端口\napp.listen(3000,function () {\n    console.log("run")\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 第 2 章：路由（Route）\n\n\n# 2.1 Route 是什么\n\n路由是指如何定义应用的端点（URIs）以及如何响应客户端的请求。\n\n路由是由一个 URI、HTTP 请求（GET、POST 等）和若干个句柄组成的。\n\n\n# 2.2 Route 的定义\n\n我们可以将路由定义为三个部分：\n\n第一部分：HTTP 请求的方法（get 或 post）\n\n第二部分：URI 路径\n\n第三部分：回调函数\n\n\n# 2.3 Route 的实现\n\nExpress 中提供了一系列函数，可以让我们很方便的实现路由：\n\napp.<method>(path，callback)    \n//method指的是HTTP请求方法，比如：  app.get()  app.post(),express中app.all()方法，可以处理两种请求\n//path指要通过回调函数来处理的URL地址  \n//callback参数是应该处理该请求并把响应发回客户端的请求处理程序  \n\n\n1\n2\n3\n4\n\n\n\n# 2.4 Request 对象\n\n\n# Request 对象属性和方法\n\n** 属性 /** 方法        描述\nrequest.query       获取 get 请求查询字符串的参数，拿到的是一个对象\nrequest.params      获取 get 请求参数路由的参数，拿到的是一个对象\nrequest.body        获取 post 请求体，拿到的是一个对象（要借助一个中间件）\nrequest.get(xxxx)   获取请求头中指定 key 对应的 value\n\n\n# 2.5 Response 对象\n\n\n# Response 对象的属性和方法\n\n** 属性 /** 方法                 描述\nresponse.send()              给浏览器做出一个响应\nresponse.end()               给浏览器做出一个响应（不会自动追加响应头）\nresponse.download()          告诉浏览器下载一个文件\nresponse.sendFile()          给浏览器发送一个文件\nresponse.redirect()          重定向到一个新的地址（url）\nresponse.set(header,value)   自定义响应头内容\nresponse.get()               获取响应头指定 key 对应的 value\nres.status(code)             设置响应状态码\n\n\n# 2.6 路由实例\n\nconst express = require("express")\nlet app = express()\napp.get("/", function (request, response) {\n    //接受地址栏发送的请求,格式为对象\n    // console.log(request.params);\n    //console.log(request.params)\n    //response.send("ok")\n    // response.download("./demo.zip")\n    // response.redirect("https://www.baidu.com")\n})\napp.listen(3000, function () {\n    console.log("run")\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 第 3 章：中间件\n\n\n# 3.1 中间件简介\n\n概念：本质上就是一个函数，包含三个参数：request、response、next\n\n\n# 3.2 中间件功能\n\n 1. 执行任何代码。\n    \n\n 2. 修改请求和响应对象。\n    \n\n 3. 终结请求-响应循环。\n    \n\n 4. 调用堆栈中的下一个中间件。\n    \n\n\n# 3.3 中间件的分类\n\n1)\t应用(全局)级中间件（过滤非法的请求，例如防盗链）\n              --第一种写法：app.use((request,response,next)=>{})\n              --第二种写法：使用函数定义\n2)\t第三方中间件，即：不是Node内置的，也不是express内置的（通过npm下载的中间件，例如body-parser）\n              --app.use(bodyParser.urlencoded({extended:true}))\n3)\t内置中间件（express内部封装好的中间件）\n              --app.use(express.urlencoded({extended:true}))\n              --app.use(express.static(\'public\')) //暴露静态资源\n4)\t路由器中间件 （Router）\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 3.4 中间件实例\n\n\n# 3.4.1 应用级\n\nconst express = require("express")\nlet app = express()\n/*【第一种】使用应用级(全局)中间件------所有请求的第一扇门\n-------所有请求都要经过某些处理的时候用此种写法*/\napp.use((request,response,next)=>{\n    response.send("全局中间件")\n    next()   //跳过此中间件，到下一个中间件或下一个路由\n})\napp.get("/", function (request, response) {\n   response.send("index")\n})\napp.get("/login", function (request, response) {\n    response.send("login")\n})\napp.get("/register", function (request, response) {\n    response.send("register")\n})\napp.listen(3000, function () {\n    console.log("run")\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n//第二种写法：使用函数定义\nconst express = require("express")\nlet app = express()\nfunction guard(request,response,next){\n    response.send("函数中间件")\n    \n}\napp.get("/", function (request, response) {\n   response.send("index")\n})\n//在此路由上添加中间件，就不会拦截所有的路由了，guard是自己定义的函数\napp.get("/login", guard,function (request, response) {\n    response.send("login")\n})\napp.get("/register", function (request, response) {\n    response.send("register")\n})\napp.listen(3000, function () {\n    console.log("run")\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 3.4.2 内置中间件 (处理 request.body)\n\nconst express = require("express")\nlet app = express()\n// 解析post请求请求体中所携带的urlencoded编码形式的参数为一个对象，随后挂载到request对象上\napp.use(express.urlencoded({extended:true}))\napp.get("/", function (request, response) {\n   response.send("index")\n})\n\napp.post("/login",function (request, response) {\n    console.log(request.body)\n    response.send("login")\n})\napp.get("/register", function (request, response) {\n    response.send("register")\n})\napp.listen(3000, function () {\n    console.log("run")\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 暴露静态资源\n\nconst express = require("express")\nlet app = express()\n//将public中的静态文件暴露出去，避免了使用多个路由\napp.use(express.static(__dirname+"/public"))\napp.get("/", function (request, response) {\n   response.send("index")\n})\n\napp.listen(3000, function () {\n    console.log("run")\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 第 4 章：Router 路由器\n\n\n# 4.1 Router 是什么\n\nRouter 是一个完整的中间件和路由系统，也可以看做是一个小型的 app 对象。\n\n\n# 4.2 为什么使用 Router\n\n为了更好的分类管理 route\n\n\n# 4.3 Router 的使用\n\n//创建路由器\nconst {Router}=require("express")\nlet router=new Router()\n//使用路由\nrouter.app("/",()=>{})\nrouter.use()\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 第 5 章：EJS 模板\n\nEJS 是一个高效的 JavaScript 模板引擎，动态渲染数据，使得前后端分离，是基于 express 的\n\n\n# 5.1 使用 EJS\n\n使用 ejs 前必须有 express 模版\n\n 1. 下载安装\n    \n\nnpm i ejs -S\nyarn add ejs -S\n\n\n1\n2\n\n\n 2. 配置模板引擎\n    \n\napp.set("view engine" , "ejs")\n\n\n1\n\n\n 3. 配置模板的存放目录（目录为后面的）\n    \n\napp.set("views","./views")\n\n\n1\n\n\n 4. 在views目录下创建模板文件\n    \n\n模板名称.ejs\n\n 5. 使用模板，通过response来渲染模板\n    \n\nresponse (‘模板名称’, 数据对象)\n\n\n# 5.2 EJS 语法\n\nejs 语法：\n1.<% %> 里面能写任意 js 代码，但是不会向浏览器输出任何东西。\n2.<%- %> 能够将后端传递过来对象指定 key 所对应 value 渲染的页面， 渲染 html 标签\n3.<%= %> 能够将后端传递过来对象指定 key 所对应 value 渲染的页面不渲染 html 标签\n\n\n# 5.3 EJS 具体使用\n\nserver.js\n\nconst express=require("express")\nconst app=express()\n//配置模版引擎\napp.set("view engine","ejs")\n//配置模版路径\napp.set("views","./views")\napp.get("/",(req,res)=>{\n\n    res.render("index",{data:"hello"})\n})\napp.listen(3000,()=>{\n    console.log("run")\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nindex.ejs\n\n<%-data%>\n\n\n1\n\n\n\n# 第 6 章：art-templete 模版的使用\n\n在 node 中，有很多第三方模板引擎都可以使用，不是只有 art-template ，还有 ejs，jade（pug），handlebars，nunjucks\n\n\n# 6.1art-templete 的使用\n\nnpm install --save art-template\nnpm install --save express-art-template\n\n//1.两个一起安装\nnpm i --save art-template express-art-template\n//2.引用art-template模版，第一个参数设置后缀名  \napp.engine(\'html\', require(\'express-art-template\'));\n//3.使用art-template\napp.get(\'/\',function(req,res){\n// express默认会去views目录找index.html（如果希望修改默认的`views`视图渲染存储目录，可以使用app.set(\'views\',目录路径)来修改，第一个参数views千万不要修改;）\n    res.render(\'index.html\',{\n           title:\'hello world\'     \n    });\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 6.2 子模板和模板的继承（模板引擎高级语法）【include，extend，block】\n\n模板页：\n\n<!DOCTYPE html>\n<html lang="zh">\n<head>\n\t<meta charset="UTF-8">\n\t<meta name="viewport" content="width=device-width, initial-scale=1.0">\n\t<meta http-equiv="X-UA-Compatible" content="ie=edge">\n\t<title>模板页</title>\n\t<link rel="stylesheet" href="/node_modules/bootstrap/dist/css/bootstrap.css"/>\n\t{{ block \'head\' }}{{ /block }}\n</head>\n<body>\n\t\x3c!-- 通过include导入公共部分 --\x3e\n\t{{include \'./header.html\'}}\n\t\n\t\x3c!-- 留一个位置 让别的内容去填充 --\x3e\n\t{{ block  \'content\' }}\n\t\t<h1>默认内容</h1>\n\t{{ /block }}\n\t\n\t\x3c!-- 通过include导入公共部分 --\x3e\n\t{{include \'./footer.html\'}}\n\t\n\t\x3c!-- 公共样式 --\x3e\n\t<script src="/node_modules/jquery/dist/jquery.js" ><\/script>\n\t<script src="/node_modules/bootstrap/dist/js/bootstrap.js" ><\/script>\n\t{{ block \'script\' }}{{ /block }}\n</body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n模板的继承：\n\nheader 页面：\n\n<div id="">\n\t<h1>公共的头部</h1>\n</div>\n\n\n1\n2\n3\n\n\nfooter 页面：\n\n<div id="">\n\t<h1>公共的底部</h1>\n</div>\n\n\n1\n2\n3\n\n\n模板页的使用：\n\n\x3c!-- 继承(extend:延伸，扩展)模板也layout.html --\x3e\n\x3c!-- 把layout.html页面的内容都拿进来作为index.html页面的内容 --\x3e\n{{extend \'./layout.html\'}}\n\n\x3c!-- 向模板页面填充新的数据 --\x3e\n\x3c!-- 填充后就会替换掉layout页面content中的数据 --\x3e\n\x3c!-- style样式方面的内容 --\x3e\n{{ block \'head\' }}\n\t<style type="text/css">\n\t\tbody{\n\t\t\tbackground-color: skyblue;\n\t\t}\n\t</style>\n{{ /block }}\n{{ block \'content\' }}\n\t<div id="">\n\t\t<h1>Index页面的内容</h1>\n\t</div>\n{{ /block }}\n\x3c!-- js部分的内容 --\x3e\n{{ block \'script\' }}\n\t<script type="text/javascript">\n\t\t\n\t<\/script>\n{{ /block }}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# 第 7 章：会话控制\n\n\n# 7.1 会话控制是什么\n\nHTTP 协议是一个无状态的协议，它无法区分多次请求是否发送自同一客户端。\n\n\n# 7.2 cookie\n\n\n# 7.2.1 cookie 是什么\n\n关于 cookie:\n\n1. 是什么？\n\n本质就是一个【字符串】，里面包含着浏览器和服务器交互的信息。\n\n存储的形式以：【key-value】的形式存储。\n\n浏览器会自动携带该网站的 cookie，只要是该网站下的 cookie，全部携带。\n\n 2. 分类：\n    \n    会话 cookie（关闭浏览器后，会话 cookie 会自动消失，会话 cookie 存储在浏览器运行的那块【内存】上）。\n    \n    持久化 cookie：（看过期时间，一旦到了过期时间，自动销毁，存储在用户的硬盘上，备注：如果没有到过期时间，同时用户清理了浏览器的缓存，持久化 cookie 也会消失）。\n\n3. 工作原理：\n\n当浏览器第一次请求服务器的时候，服务器可能返回一个或多个 cookie 给浏览器，当浏览器以后请求该网站的时候，自动携带上该网站的所有 cookie（无法进行干预），并判断 cookie 种类，服务器拿到之前自己 “种” 下 cookie，分析里面的内容，校验 cookie 的合法性，根据 cookie 里保存的内容，进行具体的业务逻辑。\n\n4. 应用：\n\n解决 http 无状态的问题（一般来说不会单独使用 cookie，一般配合后台的 session 存储使用）\n\n5. 不同的语言、不同的后端架构 cookie 的具体语法是不一样的，但是 cookie 原理和工作过程是不变的。\n\n备注：cookie 不一定只由服务器生成，前端同样可以生成 cookie，但是前端生成的 cookie 几乎没有意义。\n\n\n# 7.2.2 cookie 的不足\n\n各个浏览器对 cookie 的数量和大小都有不同的限制，这样就导致我们不能在 Cookie 中保存过多的信息。一般数量不超过 50 个，单个大小不超过 4kb。\n\ncookie 是由服务器发送给浏览器，再由浏览器将 cookie 发回，如果 cookie 较大会导致发送速度非常慢，降低用户的体验。\n\n\n# 7.2.3 cookie 的使用\n\n在 node 中 express 库下使用 cookie\n\n1. 创建 cookie\n\nconst express=require("express")\nconst  app=express()\n//创建一个回话cookie(cookie必须以键值对的字符串传递)\napp.get("/demo1",(req,res)=>{\n    let obj={name:"zhangsan"}\n    res.cookie("data",JSON.stringify(obj))\n    res.send("创建一个回话cookie")\n})\n//创建一个持久化cookie\napp.get("/demo2",(req,res)=>{\n    let obj={name:"lisi"}\n    res.cookie("data",JSON.stringify(obj),{maxAge:1000*60})\n    res.send("创建一个持久化cookie")\n})\napp.listen(3000,()=>{\n    console.log("run")\n})\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n2. 读取 cookie, 需要借助第三方中间件 cookie-parser\n\n//下载cookie-parse\nnpm i cookie-parser --save\n\n\n1\n2\n\n\nconst express=require("express")\n//引入cookie-parser\nconst cookieParser = require("cookie-parser")\nconst  app=express()\n//配置cookieParser\napp.use(cookieParser());\n//接受浏览器返回的cookie(不区分会话和持久化)\napp.get("/demo3",(req,res)=>{\n    let {data}=req.cookies   //注意接收的是req.cookies(不是cookie)\n    console.log(JSON.parse(data))\n    res.send("返回cookie到服务器的控制台")\n})\napp.listen(3000,()=>{\n    console.log("run")\n})\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n3. 修改和删除 cookie\n\nres.cookie("data","hahha");   //可以使用同名的cookie来替换已有cookie\nres.cookie("data","",{maxAge:0});   //value为空，maxAge为0\nres.clearCookie(“data”)       //用来删除一个指定cookie\n\n\n1\n2\n3\n\n\n\n# 7.3 session\n\n\n# 7.3.1 session 是什么\n\n1. 是什么？\n\n后端人员常常把【session 会话存储】简称为：session\n\n2. 特点：\n\n1. 存在于服务端\n\n2. 存储的是浏览器和服务器之间交互产生的一些信息\n\n3. 默认 session 的存储在服务器的内存中，每当一个新客户端发来请求，服务器都会新开辟出一块空间，供 session 会话存储使用。\n\n4. 工作流程：\n\n（1）第一次浏览器请求服务器的时候，服务器会开辟出一块内存空间，供 session 会话存储使用。返回响应的时候，会自动返回一个 cookie（有时候会返回多个，为了安全），cookie 里包含着会话存储的编号（id）\n\n（2）浏览器以后请求的时候，会自动携带这个 cookie，给服务器。服务器从该 cookie 中拿到对应的 session 的 id，去服务器中匹配。\n\n（3）服务器会根据匹配信息，决定下一步逻辑\n\n5. 备注：\n\n1. 一般来说 cookie 一定会配合 session 使用。\n\n2. 服务端一般会做 session 的持久化，防止由于服务器重启，造成 session 的丢失。\n\n3.session 什么时候销毁？\n\n(1). 服务器没有做 session 的持久化的同时，服务器重启了。\n\n(2). 给客户端种下的那个用于保存 session 编号的 cookie 销毁了，随之服务器保存的 session 销毁 (不管是否做了 session 的持久化)。\n\n(3). 用户主动在网页上点击了 “注销” “退出登录” 等等按钮。\n\n\n# 7.3.2 session 运作流程\n\n我们可以在服务器中为每一次会话创建一个对象，然后每个对象都设置一个唯一的 id，并将该 id 以 cookie 的形式发送给浏览器，然后将会话中产生的数据统一保存到这个对象中，这样我们就可以将用户的数据全都保存到服务器中，而不需要保存到客户端，客户端只需要保存一个 id 即可。\n\n\n# 7.3.3 session 的使用\n\n 1. 下载安装\n    \n\nnpm i connect-mongo express-session --save\n\n\n1\n\n\n 2. 引入模块\n    \n\nvar session = require("express-session");\n\n\n1\n\n\n 3. 将其配置为express-session的默认的持久化仓库\n    \n\nvar MongoStore = require(\'connect-mongo\')(session);\n\n\n1\n\n\n 4. 设置为中间件\n    \n\napp.use(session({\n  name: \'id22\',   //设置cookie的name，默认值是：connect.sid\n  secret: \'atguigu\', //参与加密的字符串（又称签名）\n  saveUninitialized: false, //是否为每次请求都设置一个cookie用来存储session的id\n  resave: true ,//是否在每次请求时重新保存session\n  store: new MongoStore({\n    url: \'mongodb://localhost:27017/test-app\',\n    touchAfter: 24 * 3600 // 24小时之内只修改一次\n  }),\n  cookie: {\n    httpOnly: true, // 开启后前端无法通过 JS 操作\n    maxAge: 1000*30 // 这一条 是控制 sessionID 的过期时间的！！！\n  },\n}));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 7.3.4 cookie 和 session 的区别\n\n 1. 存在的位置：\n    \n\ncookie 存在于客户端，临时文件夹中\n\nsession 存在于服务器的内存中，一个 session 域对象为一个用户浏览器服务\n\n 2. 安全性：\n    \n\ncookie 是以明文的方式存放在客户端的，安全性低，可以通过一个加密算法进行加密后存放\n\nsession 存放于服务器的内存中，所以安全性好\n\n 3. 网络传输量：\n    \n\ncookie 会传递消息给服务器\n\nsession 本身存放于服务器，但是通过 cookie 传递 id，会有少量的传送流量\n\n 4. 生命周期(以20分钟为例)：\n    \n\ncookie 的生命周期是累计的，从创建时，就开始计时，20 分钟后，cookie 生命周期结束\n\nsession 的生命周期是间隔的，从创建时，开始计时如在 20 分钟，没有访问 session，那么 session 生命周期被销毁；但是，如果在 20 分钟内（如在第 19 分钟时）访问过 session，那么，将重新计算 session 的生命周期；关机会造成 session 生命周期的结束，但是对 cookie 没有影响\n\n 5. 访问范围：\n    \n\nsession 为一个用户浏览器独享\n\ncookie 为多个用户浏览器共享\n\n 6. 大小：\n    \n\ncookie 保存的数据不能超过 4K，很多浏览器都限制一个站点最多保存 50 个 cookie\n\nsession 保存数据理论上没有任何限制（内存有多大就能有多大）',normalizedContent:'# node 介绍\n\n\n# 为什么要学习 node.js\n\n * 企业需求\n   * 具有服务端开发经验更改\n   * front-end\n   * back-end\n   * 全栈开发工程师\n   * 基本的网站开发能力\n     * 服务端\n     * 前端\n     * 运维部署\n   * 多人社区\n\n\n# node 能做什么\n\n * web 服务器后台\n * 命令行工具\n   * npm(node)\n   * git (c 语言)\n   * hexo（node）\n   * ...\n * 对于前端工程师来讲，接触最多的是它的命令行工具\n   * 自己写的很少，主要是用别人第三方的\n   * webpack\n   * gulp\n   * npm\n\n\n# 起步\n\n\n# 安装 node 环境\n\n * 下载：https://nodejs.org/en/\n\n * 确认 node 环境是否安装成功\n   \n   node -v\n\n * 配置环境变量\n\n\n# 解析执行 javascript\n\n 1. 创建编写 javascript 脚本文件\n 2. 打开终端，定位脚本文件的所属目录\n 3. 输入 node 文件名 执行对应的文件\n\n注意：文件名不要用 node.js 来命名，也就是说除了 node 这个名字随便起，最好不要使用中文。\n\n\n# buffer 的使用\n\n\n# 创建 buffer\n\n// 创建一个指定size大小的buffer\nvar buf = buffer.alloc(size);  //安全，里面全是0\nvar buf = buffer.allocunsafe(size);   //不安全，可能包含旧数据，需要重写所有数据\n\n// 获取buffer的长度\nbuf.length\n\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 转换\n\n// 相当于buffer.alloc(size);\nvar buf = buffer.allocunsafe(size);\nbuf.fill(0)   //将可能出现的敏感数据用0全部填充\n\n// 将一个字符串转换为buffer\nvar buf = buffer.from(str);\n\n// 将一个buffer转换为字符串\nvar str = buf.tostring();\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# fs 文件系统\n\n全称为 file system，所谓的文件系统，就是对计算机中的文件进行增删改查等操作。它是一个服务器的基础，在 node 中通过 fs 模块来操作文件系统。\n\n\n# fs 的使用\n\n 1. fs模块是node的核心模块，不需要下载，直接引入即可使用\n    \n\nconst fs = require("fs");\n\n\n1\n\n\n 2. fs中的大部分方法都为我们提供了两个版本：\n    \n\na. 同步方法：带 sync 的方法\n\na) 同步方法会阻塞程序的执行\n\nb) 同步方法通过返回值返回结果\n\nb. 异步方法：不带 sync 的方法\n\na) 异步方法不会阻塞程序的执行\n\nb) 异步方法都是通过回调函数来返回结果的\n\n\n# 文件的写入\n\n# 简单写入\n\n同步方法：fs.writefilesync(file, data[, options])\n异步方法：fs.writefile(file, data[, options], callback)\n参数：\nfile 要写入的文件的路径\ndata 要写入的内容，可以是一个string也可以是一个buffer\noptions 配置对象，需要一个对象作为参数，默认如下：\n\t\t\t{encoding:"utf8",flag:"w",mode:0666}\n\t\t\t --encoding:设置文件的编码方式，默认值：utf8(万国码)\n               --mode:设置文件的操作权限，默认值是：0o666 = 0o222 + 0o444\n                     --0o111:文件可被执行的权限  \n                     --0o222:文件可被写入的权限\n                     --0o444:文件可别读取的权限\n                 --flag:打开文件要执行的操作，默认值是\'w\'\n                      --a ：追加\n                      --w ：写入\ncallback 回调函数\n\t--err：错误对象\n\t\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n//引入内置的fs模块\nlet fs = require(\'fs\')\n\n//调用writefile方法\nfs.writefile(__dirname+\'/demo.txt\',\'kobe,123\',err => {\n    if(err) console.log(\'文件写入失败\',err)\n    else console.log(\'文件写入成功\')\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n# 流式写入\n\n流式文件写入适用于一些比较大的文件，可以分多次向文件中写入内容，有效避免内存溢出的问题\n\n1.创建一个可写流\n  var ws = fs.createwritestream(path);\n2.监听流的状态\n  ws.once("open",function(){});\n  ws.once("close",function(){});\n3.向流中写入内容\n  ws.write(...);\n  ws.write(...);\n  ws.write(...);\n4.关闭流\n  ws.end();\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 文件的读取\n\n# 简单读取文件\n\nfs.readfilesync(path[, options])\nfs.readfile(path[, options], callback)\n参数：\npath 读取文件的路径\n\t \toptions 配置对象\n \t\tencoding 指定打开文件的编码，默认是null\n \t\tflag 文件的操作类型，默认是 r\ncallback 回调函数，通过回调函数返回读取到的数据\n \t\t    err 错误对象\n \t\t\tdata 返回的数据（buffer）\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n# 流式读取文件\n\n适合较大的文件\n\n// 方式一：\n//创建一个可读流\nvar rs = fs.createreadstream("c:\\\\other\\\\mp3\\\\笔记.mp3");\n//创建一个可写流\nvar ws = fs.createwritestream("biji.mp3");\n\n//监听可读流，可读流读取完毕后会自动关闭\nrs.once("open" , function () {\n  console.log("流打开了");\n});\nrs.once("close" , function () {\n  console.log("流关闭了");\n//数据读取完毕，可以关闭可写流\n  ws.end();\n});\n//监听可写流\nws.once("open" , function () {\n  console.log("可写流打开了");\n});\nws.once("close" , function () {\n  console.log("可写流关闭了");\n});\n//要通过可读流读取一个文件，必须为流绑定一个data事件，当绑定了data事件以后，流会自动读取\nrs.on("data",function (data) {\n//console.log(data);\n//将数据写入到可写流中\n  ws.write(data);\n});\n\n//方式二：\n//创建一个可读流\nvar rs = fs.createreadstream("c:\\\\other\\\\mp3\\\\笔记.mp3");\n//创建一个可写流\nvar ws = fs.createwritestream("biji.mp3");\n/*\n pipe()\n  - 可以将一个可读流中的内容写入到一个可写流中\n */\nrs.pipe(ws);\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n\n\n\n# http\n\nhttp 搭建服务器服务器：\n\n// 1.加载http核心模块\nconst http=require("http");\n\n// 2.使用http.createserver()创建一个web服务器\nlet server=http.createserver(function (request,response) {\n\tresponse.end("ok")\n})\n// 4.绑定端口号，启动服务\nserver.listen(3000,function(){\n    console.log(\'runing...\')\n})\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 模块标识符中的 / 和文件操作路径中的 /\n\n文件操作路径：\n\n// 咱们所使用的所有文件操作的api都是异步的\n// 就像ajax请求一样\n// 读取文件\n// 文件操作中 ./ 相当于当前模块所处磁盘根目录\n// ./index.txt    相对于当前目录\n// /index.txt    相对于当前目录\n// /index.txt   绝对路径,当前文件模块所处根目录\n// d:express/index.txt   绝对路径\nfs.readfile(\'./index.txt\',function(err,data){\n    if(err){\n       return  console.log(\'读取失败\');\n    }\n    console.log(data.tostring());\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n模块操作路径：\n\n// 在模块加载中，相对路径中的./不能省略\n// 这里省略了.也是磁盘根目录\nrequire(\'./index\')(\'hello\')\n\n\n1\n2\n3\n\n\n\n# npm,cnpm,yarn\n\n * node package manage (node 包管理器)\n * 通过 npm 命令安装 jquery 包（npm install --save jquery），在安装时加上 --save 会主动生成说明书文件信息（将安装文件的信息添加到 package.json 里面）\n\n\n# npm 命令行工具\n\nnpm 是一个命令行工具，只要安装了 node 就已经安装了 npm。\n\nnpm 也有版本概念，可以通过 npm --version 来查看 npm 的版本\n\n升级 npm (自己升级自己)：\n\nnpm install --global npm\n\n\n1\n\n\n\n# 常用命令\n\nnpm init -y   //可以跳过向导，快速生成\n\n\n1\n\n\nnpm install   //一次性把dependencies选项中的依赖项全部安装\nnpm i\t\t  //简写\n\n\n1\n2\n\n\nnpm install 包名   //下载第三方包\n\n\n1\n\n\nnpm install --save 包名   //下载并且保存依赖项（package.json文件中的dependencies选项）\n\n\n1\n\n\nnpm uninstall 包名  \t\t//只删除，如果有依赖项会依然保存\n\n\n1\n\n\nnpm uninstall --save 包名   //删除的同时也会把依赖信息全部删除\n\n\n1\n\n\n\n# 解决 npm 被墙问题\n\n###1. 国内使用 npm 存在的问题\n\nnpm 的远程服务器在国外，所以有时候难免出现访问过慢，甚至无法访问的情况。\n\nnpm config get registry    //查看当前npm远程仓库地址\n\n\n1\n\n\n###2. 使用淘宝的 cpm 代替 npm\n\n#### 第一种使用方法：直接安装 cnpm\n\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\n\n1\n\n\n#### 第二种使用方法：替换 npm 仓库地址为淘宝镜像地址\n\nnpm config set registry https://registry.npm.taobao.org   \n\n\n1\n\n\n###3. 使用 yarn 代替 npm\n\nnpm install yarn -g    //全局安装yarn\n\n\n1\n\n\n#### 第二种使用方法：替换 yarn 仓库地址为淘宝镜像地址\n\nyarn config set registry https://registry.npm.taobao.org\n\n\n1\n\n\n\n# yarn 常用命令\n\nyarn --version   \t\t//查看yarn版本\n\nyarn init \t\t\t\t//生成package.json  ！！！注意生成的包名不能有中文，大写\n\nyarn global package     //全局安装  \n\nyarn add package \t    //局部安装\n\nyarn add package --dev  //相当于npm中的--save-dev\n\nyarn remove package     //移除包\n\nyarn list \t\t\t\t//列出已经安装的包名\n\nyarn info package       //获取包的有关信息\n\nyarn \t\t\t\t\t//安装package.json中的所有依赖\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# path 路径操作模块\n\n> 参考文档：https://nodejs.org/docs/latest-v13.x/api/path.html\n\n * path.basename：获取路径的文件名，默认包含扩展名\n * path.dirname：获取路径中的目录部分\n * path.extname：获取一个路径中的扩展名部分\n * path.parse：把路径转换为对象\n   * root：根路径\n   * dir：目录\n   * base：包含后缀名的文件名\n   * ext：后缀名\n   * name：不包含后缀名的文件名\n * path.join：拼接路径\n * path.isabsolute：判断一个路径是否为绝对路径\n\n\n# node 中的其它成员 (__dirname,__filename)\n\n__dirname\t\t//可以用来**动态**获取当前文件模块所属目录的绝对路径\n\n\n1\n\n\n__filename\t\t//可以用来**动态**获取当前文件的绝对路径（包含文件名）\n\n\n1\n\n\n在拼接路径的过程中，为了避免手动拼接带来的一些低级错误，推荐使用 path.join() 来辅助拼接\n\nvar fs = require(\'fs\');\nvar path = require(\'path\');\n// console.log(__dirname + \'a.txt\');\n// path.join方法会将文件操作中的相对路径都统一的转为动态的绝对路径\nfs.readfile(path.join(__dirname + \'/a.txt\'),\'utf8\',function(err,data){\n\tif(err){\n\t\tthrow err\n\t}\n\tconsole.log(data);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 第 1 章：express 简介\n\n\n# 1.1 express 是什么\n\nexpress 是一个基于 node.js 平台的极简、灵活的 web 应用开发框架，它提供一系列强大的特性，帮助你快速创建各种 web 和移动设备应用。\n\n简单来说 express 就是运行在 node 中的用来搭建服务器的模块。\n\n\n# 1.2 express 的使用\n\n\n# 1.2.1 下载\n\nnpm i express --save  //使用npm安装express并添加到依赖项\nyarn add express\t //使用yarn安装express并添加到依赖项\n\n\n1\n2\n\n\n\n# 1.2.2 第一个服务器\n\n//1.引入express模块\nconst  express=require("express")\n//2.创建应用对象\nconst app = express()\n//3.配置路由\napp.get("/index",function (request,response) {\n     //接受地址栏发送的请求,格式为对象\n    console.log(request.query)\n    //设置响应\n\tresponse.send("ok")\n})\n//4.监听端口\napp.listen(3000,function () {\n    console.log("run")\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 第 2 章：路由（route）\n\n\n# 2.1 route 是什么\n\n路由是指如何定义应用的端点（uris）以及如何响应客户端的请求。\n\n路由是由一个 uri、http 请求（get、post 等）和若干个句柄组成的。\n\n\n# 2.2 route 的定义\n\n我们可以将路由定义为三个部分：\n\n第一部分：http 请求的方法（get 或 post）\n\n第二部分：uri 路径\n\n第三部分：回调函数\n\n\n# 2.3 route 的实现\n\nexpress 中提供了一系列函数，可以让我们很方便的实现路由：\n\napp.<method>(path，callback)    \n//method指的是http请求方法，比如：  app.get()  app.post(),express中app.all()方法，可以处理两种请求\n//path指要通过回调函数来处理的url地址  \n//callback参数是应该处理该请求并把响应发回客户端的请求处理程序  \n\n\n1\n2\n3\n4\n\n\n\n# 2.4 request 对象\n\n\n# request 对象属性和方法\n\n** 属性 /** 方法        描述\nrequest.query       获取 get 请求查询字符串的参数，拿到的是一个对象\nrequest.params      获取 get 请求参数路由的参数，拿到的是一个对象\nrequest.body        获取 post 请求体，拿到的是一个对象（要借助一个中间件）\nrequest.get(xxxx)   获取请求头中指定 key 对应的 value\n\n\n# 2.5 response 对象\n\n\n# response 对象的属性和方法\n\n** 属性 /** 方法                 描述\nresponse.send()              给浏览器做出一个响应\nresponse.end()               给浏览器做出一个响应（不会自动追加响应头）\nresponse.download()          告诉浏览器下载一个文件\nresponse.sendfile()          给浏览器发送一个文件\nresponse.redirect()          重定向到一个新的地址（url）\nresponse.set(header,value)   自定义响应头内容\nresponse.get()               获取响应头指定 key 对应的 value\nres.status(code)             设置响应状态码\n\n\n# 2.6 路由实例\n\nconst express = require("express")\nlet app = express()\napp.get("/", function (request, response) {\n    //接受地址栏发送的请求,格式为对象\n    // console.log(request.params);\n    //console.log(request.params)\n    //response.send("ok")\n    // response.download("./demo.zip")\n    // response.redirect("https://www.baidu.com")\n})\napp.listen(3000, function () {\n    console.log("run")\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 第 3 章：中间件\n\n\n# 3.1 中间件简介\n\n概念：本质上就是一个函数，包含三个参数：request、response、next\n\n\n# 3.2 中间件功能\n\n 1. 执行任何代码。\n    \n\n 2. 修改请求和响应对象。\n    \n\n 3. 终结请求-响应循环。\n    \n\n 4. 调用堆栈中的下一个中间件。\n    \n\n\n# 3.3 中间件的分类\n\n1)\t应用(全局)级中间件（过滤非法的请求，例如防盗链）\n              --第一种写法：app.use((request,response,next)=>{})\n              --第二种写法：使用函数定义\n2)\t第三方中间件，即：不是node内置的，也不是express内置的（通过npm下载的中间件，例如body-parser）\n              --app.use(bodyparser.urlencoded({extended:true}))\n3)\t内置中间件（express内部封装好的中间件）\n              --app.use(express.urlencoded({extended:true}))\n              --app.use(express.static(\'public\')) //暴露静态资源\n4)\t路由器中间件 （router）\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 3.4 中间件实例\n\n\n# 3.4.1 应用级\n\nconst express = require("express")\nlet app = express()\n/*【第一种】使用应用级(全局)中间件------所有请求的第一扇门\n-------所有请求都要经过某些处理的时候用此种写法*/\napp.use((request,response,next)=>{\n    response.send("全局中间件")\n    next()   //跳过此中间件，到下一个中间件或下一个路由\n})\napp.get("/", function (request, response) {\n   response.send("index")\n})\napp.get("/login", function (request, response) {\n    response.send("login")\n})\napp.get("/register", function (request, response) {\n    response.send("register")\n})\napp.listen(3000, function () {\n    console.log("run")\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n//第二种写法：使用函数定义\nconst express = require("express")\nlet app = express()\nfunction guard(request,response,next){\n    response.send("函数中间件")\n    \n}\napp.get("/", function (request, response) {\n   response.send("index")\n})\n//在此路由上添加中间件，就不会拦截所有的路由了，guard是自己定义的函数\napp.get("/login", guard,function (request, response) {\n    response.send("login")\n})\napp.get("/register", function (request, response) {\n    response.send("register")\n})\napp.listen(3000, function () {\n    console.log("run")\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 3.4.2 内置中间件 (处理 request.body)\n\nconst express = require("express")\nlet app = express()\n// 解析post请求请求体中所携带的urlencoded编码形式的参数为一个对象，随后挂载到request对象上\napp.use(express.urlencoded({extended:true}))\napp.get("/", function (request, response) {\n   response.send("index")\n})\n\napp.post("/login",function (request, response) {\n    console.log(request.body)\n    response.send("login")\n})\napp.get("/register", function (request, response) {\n    response.send("register")\n})\napp.listen(3000, function () {\n    console.log("run")\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 暴露静态资源\n\nconst express = require("express")\nlet app = express()\n//将public中的静态文件暴露出去，避免了使用多个路由\napp.use(express.static(__dirname+"/public"))\napp.get("/", function (request, response) {\n   response.send("index")\n})\n\napp.listen(3000, function () {\n    console.log("run")\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 第 4 章：router 路由器\n\n\n# 4.1 router 是什么\n\nrouter 是一个完整的中间件和路由系统，也可以看做是一个小型的 app 对象。\n\n\n# 4.2 为什么使用 router\n\n为了更好的分类管理 route\n\n\n# 4.3 router 的使用\n\n//创建路由器\nconst {router}=require("express")\nlet router=new router()\n//使用路由\nrouter.app("/",()=>{})\nrouter.use()\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 第 5 章：ejs 模板\n\nejs 是一个高效的 javascript 模板引擎，动态渲染数据，使得前后端分离，是基于 express 的\n\n\n# 5.1 使用 ejs\n\n使用 ejs 前必须有 express 模版\n\n 1. 下载安装\n    \n\nnpm i ejs -s\nyarn add ejs -s\n\n\n1\n2\n\n\n 2. 配置模板引擎\n    \n\napp.set("view engine" , "ejs")\n\n\n1\n\n\n 3. 配置模板的存放目录（目录为后面的）\n    \n\napp.set("views","./views")\n\n\n1\n\n\n 4. 在views目录下创建模板文件\n    \n\n模板名称.ejs\n\n 5. 使用模板，通过response来渲染模板\n    \n\nresponse (‘模板名称’, 数据对象)\n\n\n# 5.2 ejs 语法\n\nejs 语法：\n1.<% %> 里面能写任意 js 代码，但是不会向浏览器输出任何东西。\n2.<%- %> 能够将后端传递过来对象指定 key 所对应 value 渲染的页面， 渲染 html 标签\n3.<%= %> 能够将后端传递过来对象指定 key 所对应 value 渲染的页面不渲染 html 标签\n\n\n# 5.3 ejs 具体使用\n\nserver.js\n\nconst express=require("express")\nconst app=express()\n//配置模版引擎\napp.set("view engine","ejs")\n//配置模版路径\napp.set("views","./views")\napp.get("/",(req,res)=>{\n\n    res.render("index",{data:"hello"})\n})\napp.listen(3000,()=>{\n    console.log("run")\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nindex.ejs\n\n<%-data%>\n\n\n1\n\n\n\n# 第 6 章：art-templete 模版的使用\n\n在 node 中，有很多第三方模板引擎都可以使用，不是只有 art-template ，还有 ejs，jade（pug），handlebars，nunjucks\n\n\n# 6.1art-templete 的使用\n\nnpm install --save art-template\nnpm install --save express-art-template\n\n//1.两个一起安装\nnpm i --save art-template express-art-template\n//2.引用art-template模版，第一个参数设置后缀名  \napp.engine(\'html\', require(\'express-art-template\'));\n//3.使用art-template\napp.get(\'/\',function(req,res){\n// express默认会去views目录找index.html（如果希望修改默认的`views`视图渲染存储目录，可以使用app.set(\'views\',目录路径)来修改，第一个参数views千万不要修改;）\n    res.render(\'index.html\',{\n           title:\'hello world\'     \n    });\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 6.2 子模板和模板的继承（模板引擎高级语法）【include，extend，block】\n\n模板页：\n\n<!doctype html>\n<html lang="zh">\n<head>\n\t<meta charset="utf-8">\n\t<meta name="viewport" content="width=device-width, initial-scale=1.0">\n\t<meta http-equiv="x-ua-compatible" content="ie=edge">\n\t<title>模板页</title>\n\t<link rel="stylesheet" href="/node_modules/bootstrap/dist/css/bootstrap.css"/>\n\t{{ block \'head\' }}{{ /block }}\n</head>\n<body>\n\t\x3c!-- 通过include导入公共部分 --\x3e\n\t{{include \'./header.html\'}}\n\t\n\t\x3c!-- 留一个位置 让别的内容去填充 --\x3e\n\t{{ block  \'content\' }}\n\t\t<h1>默认内容</h1>\n\t{{ /block }}\n\t\n\t\x3c!-- 通过include导入公共部分 --\x3e\n\t{{include \'./footer.html\'}}\n\t\n\t\x3c!-- 公共样式 --\x3e\n\t<script src="/node_modules/jquery/dist/jquery.js" ><\/script>\n\t<script src="/node_modules/bootstrap/dist/js/bootstrap.js" ><\/script>\n\t{{ block \'script\' }}{{ /block }}\n</body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n模板的继承：\n\nheader 页面：\n\n<div id="">\n\t<h1>公共的头部</h1>\n</div>\n\n\n1\n2\n3\n\n\nfooter 页面：\n\n<div id="">\n\t<h1>公共的底部</h1>\n</div>\n\n\n1\n2\n3\n\n\n模板页的使用：\n\n\x3c!-- 继承(extend:延伸，扩展)模板也layout.html --\x3e\n\x3c!-- 把layout.html页面的内容都拿进来作为index.html页面的内容 --\x3e\n{{extend \'./layout.html\'}}\n\n\x3c!-- 向模板页面填充新的数据 --\x3e\n\x3c!-- 填充后就会替换掉layout页面content中的数据 --\x3e\n\x3c!-- style样式方面的内容 --\x3e\n{{ block \'head\' }}\n\t<style type="text/css">\n\t\tbody{\n\t\t\tbackground-color: skyblue;\n\t\t}\n\t</style>\n{{ /block }}\n{{ block \'content\' }}\n\t<div id="">\n\t\t<h1>index页面的内容</h1>\n\t</div>\n{{ /block }}\n\x3c!-- js部分的内容 --\x3e\n{{ block \'script\' }}\n\t<script type="text/javascript">\n\t\t\n\t<\/script>\n{{ /block }}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# 第 7 章：会话控制\n\n\n# 7.1 会话控制是什么\n\nhttp 协议是一个无状态的协议，它无法区分多次请求是否发送自同一客户端。\n\n\n# 7.2 cookie\n\n\n# 7.2.1 cookie 是什么\n\n关于 cookie:\n\n1. 是什么？\n\n本质就是一个【字符串】，里面包含着浏览器和服务器交互的信息。\n\n存储的形式以：【key-value】的形式存储。\n\n浏览器会自动携带该网站的 cookie，只要是该网站下的 cookie，全部携带。\n\n 2. 分类：\n    \n    会话 cookie（关闭浏览器后，会话 cookie 会自动消失，会话 cookie 存储在浏览器运行的那块【内存】上）。\n    \n    持久化 cookie：（看过期时间，一旦到了过期时间，自动销毁，存储在用户的硬盘上，备注：如果没有到过期时间，同时用户清理了浏览器的缓存，持久化 cookie 也会消失）。\n\n3. 工作原理：\n\n当浏览器第一次请求服务器的时候，服务器可能返回一个或多个 cookie 给浏览器，当浏览器以后请求该网站的时候，自动携带上该网站的所有 cookie（无法进行干预），并判断 cookie 种类，服务器拿到之前自己 “种” 下 cookie，分析里面的内容，校验 cookie 的合法性，根据 cookie 里保存的内容，进行具体的业务逻辑。\n\n4. 应用：\n\n解决 http 无状态的问题（一般来说不会单独使用 cookie，一般配合后台的 session 存储使用）\n\n5. 不同的语言、不同的后端架构 cookie 的具体语法是不一样的，但是 cookie 原理和工作过程是不变的。\n\n备注：cookie 不一定只由服务器生成，前端同样可以生成 cookie，但是前端生成的 cookie 几乎没有意义。\n\n\n# 7.2.2 cookie 的不足\n\n各个浏览器对 cookie 的数量和大小都有不同的限制，这样就导致我们不能在 cookie 中保存过多的信息。一般数量不超过 50 个，单个大小不超过 4kb。\n\ncookie 是由服务器发送给浏览器，再由浏览器将 cookie 发回，如果 cookie 较大会导致发送速度非常慢，降低用户的体验。\n\n\n# 7.2.3 cookie 的使用\n\n在 node 中 express 库下使用 cookie\n\n1. 创建 cookie\n\nconst express=require("express")\nconst  app=express()\n//创建一个回话cookie(cookie必须以键值对的字符串传递)\napp.get("/demo1",(req,res)=>{\n    let obj={name:"zhangsan"}\n    res.cookie("data",json.stringify(obj))\n    res.send("创建一个回话cookie")\n})\n//创建一个持久化cookie\napp.get("/demo2",(req,res)=>{\n    let obj={name:"lisi"}\n    res.cookie("data",json.stringify(obj),{maxage:1000*60})\n    res.send("创建一个持久化cookie")\n})\napp.listen(3000,()=>{\n    console.log("run")\n})\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n2. 读取 cookie, 需要借助第三方中间件 cookie-parser\n\n//下载cookie-parse\nnpm i cookie-parser --save\n\n\n1\n2\n\n\nconst express=require("express")\n//引入cookie-parser\nconst cookieparser = require("cookie-parser")\nconst  app=express()\n//配置cookieparser\napp.use(cookieparser());\n//接受浏览器返回的cookie(不区分会话和持久化)\napp.get("/demo3",(req,res)=>{\n    let {data}=req.cookies   //注意接收的是req.cookies(不是cookie)\n    console.log(json.parse(data))\n    res.send("返回cookie到服务器的控制台")\n})\napp.listen(3000,()=>{\n    console.log("run")\n})\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n3. 修改和删除 cookie\n\nres.cookie("data","hahha");   //可以使用同名的cookie来替换已有cookie\nres.cookie("data","",{maxage:0});   //value为空，maxage为0\nres.clearcookie(“data”)       //用来删除一个指定cookie\n\n\n1\n2\n3\n\n\n\n# 7.3 session\n\n\n# 7.3.1 session 是什么\n\n1. 是什么？\n\n后端人员常常把【session 会话存储】简称为：session\n\n2. 特点：\n\n1. 存在于服务端\n\n2. 存储的是浏览器和服务器之间交互产生的一些信息\n\n3. 默认 session 的存储在服务器的内存中，每当一个新客户端发来请求，服务器都会新开辟出一块空间，供 session 会话存储使用。\n\n4. 工作流程：\n\n（1）第一次浏览器请求服务器的时候，服务器会开辟出一块内存空间，供 session 会话存储使用。返回响应的时候，会自动返回一个 cookie（有时候会返回多个，为了安全），cookie 里包含着会话存储的编号（id）\n\n（2）浏览器以后请求的时候，会自动携带这个 cookie，给服务器。服务器从该 cookie 中拿到对应的 session 的 id，去服务器中匹配。\n\n（3）服务器会根据匹配信息，决定下一步逻辑\n\n5. 备注：\n\n1. 一般来说 cookie 一定会配合 session 使用。\n\n2. 服务端一般会做 session 的持久化，防止由于服务器重启，造成 session 的丢失。\n\n3.session 什么时候销毁？\n\n(1). 服务器没有做 session 的持久化的同时，服务器重启了。\n\n(2). 给客户端种下的那个用于保存 session 编号的 cookie 销毁了，随之服务器保存的 session 销毁 (不管是否做了 session 的持久化)。\n\n(3). 用户主动在网页上点击了 “注销” “退出登录” 等等按钮。\n\n\n# 7.3.2 session 运作流程\n\n我们可以在服务器中为每一次会话创建一个对象，然后每个对象都设置一个唯一的 id，并将该 id 以 cookie 的形式发送给浏览器，然后将会话中产生的数据统一保存到这个对象中，这样我们就可以将用户的数据全都保存到服务器中，而不需要保存到客户端，客户端只需要保存一个 id 即可。\n\n\n# 7.3.3 session 的使用\n\n 1. 下载安装\n    \n\nnpm i connect-mongo express-session --save\n\n\n1\n\n\n 2. 引入模块\n    \n\nvar session = require("express-session");\n\n\n1\n\n\n 3. 将其配置为express-session的默认的持久化仓库\n    \n\nvar mongostore = require(\'connect-mongo\')(session);\n\n\n1\n\n\n 4. 设置为中间件\n    \n\napp.use(session({\n  name: \'id22\',   //设置cookie的name，默认值是：connect.sid\n  secret: \'atguigu\', //参与加密的字符串（又称签名）\n  saveuninitialized: false, //是否为每次请求都设置一个cookie用来存储session的id\n  resave: true ,//是否在每次请求时重新保存session\n  store: new mongostore({\n    url: \'mongodb://localhost:27017/test-app\',\n    touchafter: 24 * 3600 // 24小时之内只修改一次\n  }),\n  cookie: {\n    httponly: true, // 开启后前端无法通过 js 操作\n    maxage: 1000*30 // 这一条 是控制 sessionid 的过期时间的！！！\n  },\n}));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 7.3.4 cookie 和 session 的区别\n\n 1. 存在的位置：\n    \n\ncookie 存在于客户端，临时文件夹中\n\nsession 存在于服务器的内存中，一个 session 域对象为一个用户浏览器服务\n\n 2. 安全性：\n    \n\ncookie 是以明文的方式存放在客户端的，安全性低，可以通过一个加密算法进行加密后存放\n\nsession 存放于服务器的内存中，所以安全性好\n\n 3. 网络传输量：\n    \n\ncookie 会传递消息给服务器\n\nsession 本身存放于服务器，但是通过 cookie 传递 id，会有少量的传送流量\n\n 4. 生命周期(以20分钟为例)：\n    \n\ncookie 的生命周期是累计的，从创建时，就开始计时，20 分钟后，cookie 生命周期结束\n\nsession 的生命周期是间隔的，从创建时，开始计时如在 20 分钟，没有访问 session，那么 session 生命周期被销毁；但是，如果在 20 分钟内（如在第 19 分钟时）访问过 session，那么，将重新计算 session 的生命周期；关机会造成 session 生命周期的结束，但是对 cookie 没有影响\n\n 5. 访问范围：\n    \n\nsession 为一个用户浏览器独享\n\ncookie 为多个用户浏览器共享\n\n 6. 大小：\n    \n\ncookie 保存的数据不能超过 4k，很多浏览器都限制一个站点最多保存 50 个 cookie\n\nsession 保存数据理论上没有任何限制（内存有多大就能有多大）',charsets:{cjk:!0}},{title:"mongodb",frontmatter:{title:"mongodb",date:"2021-03-17T13:57:49.000Z",permalink:"/pages/934d6e/",categories:["前端","MongoDB"],tags:"MongoDB -"},regularPath:"/views/01.%E5%89%8D%E7%AB%AF/40.MongoDB/10.mongodb.html",relativePath:"views/01.前端/40.MongoDB/10.mongodb.md",key:"v-2c29d0a8",path:"/pages/934d6e/",headers:[{level:2,title:"基本命令",slug:"基本命令",normalizedTitle:"基本命令",charIndex:14},{level:2,title:"在Node中如何操作MongoDB数据库",slug:"在node中如何操作mongodb数据库",normalizedTitle:"在 node 中如何操作 mongodb 数据库",charIndex:211},{level:3,title:"使用官方的MongoDB包来操作",slug:"使用官方的mongodb包来操作",normalizedTitle:"使用官方的 mongodb 包来操作",charIndex:240},{level:3,title:"使用第三方包mongoose来操作（推荐使用）",slug:"使用第三方包mongoose来操作-推荐使用",normalizedTitle:"使用第三方包 mongoose 来操作（推荐使用）",charIndex:315},{level:2,title:"回调函数",slug:"回调函数",normalizedTitle:"回调函数",charIndex:2230},{level:2,title:"Promise",slug:"promise",normalizedTitle:"promise",charIndex:3596},{level:2,title:"修改完代码自动重启",slug:"修改完代码自动重启",normalizedTitle:"修改完代码自动重启",charIndex:9352},{level:2,title:"封装异步API",slug:"封装异步api",normalizedTitle:"封装异步 api",charIndex:9493},{level:2,title:"数组的遍历方法，都是对函数作为一种参数",slug:"数组的遍历方法-都是对函数作为一种参数",normalizedTitle:"数组的遍历方法，都是对函数作为一种参数",charIndex:9805},{level:2,title:"EcmaScript 6",slug:"ecmascript-6",normalizedTitle:"ecmascript 6",charIndex:7201},{level:2,title:"目录结构",slug:"目录结构",normalizedTitle:"目录结构",charIndex:9891},{level:2,title:"模板页",slug:"模板页",normalizedTitle:"模板页",charIndex:10091},{level:2,title:"路由设计",slug:"路由设计",normalizedTitle:"路由设计",charIndex:10115},{level:2,title:"模型设计",slug:"模型设计",normalizedTitle:"模型设计",charIndex:10713},{level:2,title:"功能实现",slug:"功能实现",normalizedTitle:"功能实现",charIndex:10722},{level:2,title:"步骤",slug:"步骤",normalizedTitle:"步骤",charIndex:10731},{level:2,title:"中间件的概念",slug:"中间件的概念",normalizedTitle:"中间件的概念",charIndex:10996},{level:2,title:"中间件的分类:",slug:"中间件的分类",normalizedTitle:"中间件的分类:",charIndex:12301},{level:3,title:"应用程序级别的中间件",slug:"应用程序级别的中间件",normalizedTitle:"应用程序级别的中间件",charIndex:12313},{level:3,title:"路由级别的中间件",slug:"路由级别的中间件",normalizedTitle:"路由级别的中间件",charIndex:12570},{level:3,title:"总",slug:"总",normalizedTitle:"总",charIndex:12901},{level:2,title:"错误处理中间件",slug:"错误处理中间件",normalizedTitle:"错误处理中间件",charIndex:13852},{level:2,title:"内置中间件",slug:"内置中间件",normalizedTitle:"内置中间件",charIndex:14503},{level:2,title:"第三方中间件",slug:"第三方中间件",normalizedTitle:"第三方中间件",charIndex:14628},{level:2,title:"",slug:"",normalizedTitle:"",charIndex:0}],lastUpdated:"4/28/2022, 6:08:46 PM",lastUpdatedTimestamp:1651169326e3,headersStr:"基本命令 在Node中如何操作MongoDB数据库 使用官方的MongoDB包来操作 使用第三方包mongoose来操作（推荐使用） 回调函数 Promise 修改完代码自动重启 封装异步API 数组的遍历方法，都是对函数作为一种参数 EcmaScript 6 目录结构 模板页 路由设计 模型设计 功能实现 步骤 中间件的概念 中间件的分类: 应用程序级别的中间件 路由级别的中间件 总 错误处理中间件 内置中间件 第三方中间件 ",content:"# MongoDB\n\n\n# 基本命令\n\nshow dbs\t\t//查看数据库列表(数据库中的所有数据库)\n\n\n1\n\n\ndb\t\t\t\t    //查看当前连接的数据库\n\n\n1\n\n\nuse 数据库名称\t     //切换到指定的数据库，（如果没有会新建）\n\n\n1\n\n\nshow collections \t//查看当前目录下的所有集合（数据表）\n\n\n1\n\n\ndb.集合名.find()\t  //查看表中的详细信息\n\n\n1\n\n\n\n# 在 Node 中如何操作 MongoDB 数据库\n\n\n# 使用官方的 MongoDB 包来操作\n\nhttp://mongodb.github.io/node-mongodb-native/\n\n\n1\n\n\n\n# 使用第三方包 mongoose 来操作（推荐使用）\n\nhttps://mongoosejs.com/    //官网\n\n\n1\n\n\n第一步安装 mongoose：(在哪里使用安装在哪里)\n\nnpm i mongoose --save\n\n\n1\n\n\n第二步连接数据库 （此案例数据库名为 demo）\n\n//连接数据库\n//引入mongoose\nlet mongoose = require('mongoose')\nmongoose.set('useCreateIndex',true) //使用一个新的索引创建器\n//1.连接数据库\nmongoose.connect('mongodb://localhost:27017/demo',{\n    useNewUrlParser: true, //使用一个新的URL解析器，用于解决一些安全性问题。\n    useUnifiedTopology: true //使用一个统一的新的拓扑结构\n})\n//2.绑定数据库连接的监听\nmongoose.connection.on('open',function (err) {\n    if(err){\n        console.log('数据库连接失败',err)\n    }else {\n        console.log('数据库连接成功')\n        //3.操作数据库\n        //3.1. ------ 引入模式对象\n        let Schema = mongoose.Schema\n\n        //3.2.--------  创建约束对象\n        let studentsRule = new Schema({\n            stu_id: {\n                type: String, //限制学号必须为：字符串\n                required: true,\n                unique: true\n            },\n            name: {\n                type: String, //限制姓名必须为：字符串\n                required: true, //限制姓名为必填项\n            },\n            age: {\n                type: Number, //限制年龄必须为：字符串\n                required: true, //限制年龄为必填项\n            },\n            sex: {\n                type: String, //限制性别必须为：字符串\n                required: true, //限制性别为必填项\n            },\n            hobby: [String], //限制爱好只能为数组，数组中的每一项必须为字符串\n            info: Schema.Types.Mixed, //接收所有类型\n            date: {\n                type: Date,\n                default: Date.now()\n            },\n            enable_flag: {\n                type: String,\n                default: 'Y'\n            }\n        })\n\n    //3.3.------- 创建模型对象（'students'是自己创建的集合）\n    let stuModel = mongoose.model('students',studentsRule) //用于生成某个集合所对应的模型对象\n   \t//4进行CURD操作\t\n  }\n})\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n\n\n第三步：进行 CURD 操作（对应第二步里面的 4）\n\n-Create\n\n   模型对象.create(文档对象，回调函数)\n   模型对象.create(文档对象)\n\n\nstuModel.create({\n      stu_id:'004',\n      name:'强',\n      age:'42',\n      sex:'男',\n      hobby:['女','打代码','打篮球'], //限制爱好只能为数组，数组中的每一项必须为字符串\n      info:'一个风一样的男子', //接收所有类型\n    },function(err,data){\n        if (!err) console.log(data)\n        else console.log(err)\n    })\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n-Read\n\n   模型对象.find(查询条件[,投影])不管有没有数据，都返回一个数组\n   模型对象.findOne(查询条件[,投影])找到了返回一个对象，没找到返回null\n   find方法：\n        1.返回的是一个数组，就算是一条数据，也包裹一个数组\n        2.若查询结果为空，则返回一个空数组。\n   findOne方法：\n        1.若有结果，返回的是一个对象\n        2.若没有结果，返回一个null\n\n\nstuModel.find({name:'小明'},function (err,data) {\n      if (!err) console.log(data)\n      else console.log(err)\n    })\nstuModel.findOne({name:'班长',age:42},function (err,data) {\n      if (!err) console.log(data)\n      else console.log(err)\n    })\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n-Update\n\n  模型对象.updateOne(查询条件,要更新的内容[,配置对象])\n  模型对象.updateMany(查询条件,要更新的内容[,配置对象])\n  备注：存在update方法，但是即将废弃，查询条件匹配到多个时，依然只修改一个，强烈建议用updateOne或updateMany\n\n\nstuModel.updateOne({name:'静静'},{age:16},function (err,data) {\n      if (!err) console.log(data)\n      else console.log(err)\n    })\n\n\n1\n2\n3\n4\n\n\n-Delete\n\n   模型对象.deleteOne(查询条件)\n   模型对象.deleteMany(查询条件)\n   备注：没有delete方法，会报错！\n\n\nstuModel.deleteMany({age:16},function (err,data) {\n      if (!err) console.log(data)\n      else console.log(err)\n    })\n\n\n1\n2\n3\n4\n\n\n备注： 以上所有方法，如果没有指定回调函数，则返回值是一个 Promise 对象\n\n\n# 使用 Node 操作 MySQL 数据库\n\n文档：https://www.npmjs.com/package/mysql\n\n安装：\n\nnpm install --save  mysql\n\n\n1\n\n\n// 引入mysql包\nvar mysql      = require('mysql');\n\n// 创建连接\nvar connection = mysql.createConnection({\n  host     : 'localhost',\t//本机\n  user     : 'me',\t\t//账号root\n  password : 'secret',\t//密码12345\n  database : 'my_db'\t//数据库名\n});\n \n// 连接数据库\t（打开冰箱门）\nconnection.connect();\n \n//执行数据操作\t（把大象放到冰箱）\nconnection.query('SELECT * FROM `users` ', function (error, results, fields) {\n  if (error) throw error;//抛出异常阻止代码往下执行\n  // 没有异常打印输出结果\n  console.log('The solution is: ',results);\n});\n\n//关闭连接\t（关闭冰箱门）\nconnection.end();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 异步编程\n\n\n# 回调函数\n\n不成立的情况下：\n\nfunction add(x,y){\n    console.log(1);\n    setTimeout(function(){\n        console.log(2);\n        var ret = x + y;\n        return ret;\n    },1000);\n    console.log(3);\n    //到这里执行就结束了，不会i等到前面的定时器，所以直接返回了默认值 undefined\n}\n\nconsole.log(add(2,2));\n// 结果是 1 3 undefined 4\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n使用回调函数解决：\n\n回调函数：通过一个函数，获取函数内部的操作。（根据输入得到输出结果）\n\nvar ret;\nfunction add(x,y,callback){\n    // callback就是回调函数\n    // var x = 10;\n    // var y = 20;\n    // var callback = function(ret){console.log(ret);}\n    console.log(1);\n    setTimeout(function(){\n        var ret = x + y;\n        callback(ret);\n    },1000);\n    console.log(3);\n}\nadd(10,20,function(ret){\n    console.log(ret);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n注意：\n\n凡是需要得到一个函数内部异步操作的结果（setTimeout,readFile,writeFile,ajax,readdir）\n\n这种情况必须通过 回调函数 (异步 API 都会伴随着一个回调函数)\n\najax:\n\n基于原生 XMLHttpRequest 封装 get 方法：\n\nvar oReq = new XMLHttpRequest();\n// 当请求加载成功要调用指定的函数\noReq.onload = function(){\n    console.log(oReq.responseText);\n}\noReq.open(\"GET\", \"请求路径\",true);\noReq.send();\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nfunction get(url,callback){\n    var oReq = new XMLHttpRequest();\n    // 当请求加载成功要调用指定的函数\n    oReq.onload = function(){\n        //console.log(oReq.responseText);\n        callback(oReq.responseText);\n    }\n    oReq.open(\"GET\", url,true);\n    oReq.send();\n}\nget('data.json',function(data){\n    console.log(data);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# Promise\n\ncallback hell（回调地狱）:\n\n\n\n文件的读取无法判断执行顺序（文件的执行顺序是依据文件的大小来决定的）(异步 api 无法保证文件的执行顺序)\n\nvar fs = require('fs');\n\nfs.readFile('./data/a.text','utf8',function(err,data){\n\tif(err){\n\t\t// 1 读取失败直接打印输出读取失败\n\t\treturn console.log('读取失败');\n\t\t// 2 抛出异常\n\t\t// \t\t阻止程序的执行\n\t\t// \t\t把错误信息打印到控制台\n\t\tthrow err;\n\t}\n\tconsole.log(data);\n});\n\nfs.readFile('./data/b.text','utf8',function(err,data){\n\tif(err){\n\t\t// 1 读取失败直接打印输出读取失败\n\t\treturn console.log('读取失败');\n\t\t// 2 抛出异常\n\t\t// \t\t阻止程序的执行\n\t\t// \t\t把错误信息打印到控制台\n\t\tthrow err;\n\t}\n\tconsole.log(data);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n通过回调嵌套的方式来保证顺序：\n\nvar fs = require('fs');\n\nfs.readFile('./data/a.text','utf8',function(err,data){\n\tif(err){\n\t\t// 1 读取失败直接打印输出读取失败\n\t\treturn console.log('读取失败');\n\t\t// 2 抛出异常\n\t\t// \t\t阻止程序的执行\n\t\t// \t\t把错误信息打印到控制台\n\t\tthrow err;\n\t}\n\tconsole.log(data);\n\tfs.readFile('./data/b.text','utf8',function(err,data){\n\t\tif(err){\n\t\t\t// 1 读取失败直接打印输出读取失败\n\t\t\treturn console.log('读取失败');\n\t\t\t// 2 抛出异常\n\t\t\t// \t\t阻止程序的执行\n\t\t\t// \t\t把错误信息打印到控制台\n\t\t\tthrow err;\n\t\t}\n\t\tconsole.log(data);\n\t\tfs.readFile('./data/a.text','utf8',function(err,data){\n\t\t\tif(err){\n\t\t\t\t// 1 读取失败直接打印输出读取失败\n\t\t\t\treturn console.log('读取失败');\n\t\t\t\t// 2 抛出异常\n\t\t\t\t// \t\t阻止程序的执行\n\t\t\t\t// \t\t把错误信息打印到控制台\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tconsole.log(data);\n\t\t});\n\t});\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n为了解决以上编码方式带来的问题（回调地狱嵌套），所以在 EcmaScript6 新增了一个 API: Promise 。\n\n * Promise：承诺，保证\n * Promise 本身不是异步的，但往往都是内部封装一个异步任务\n\n基本语法：\n\n// 在EcmaScript 6中新增了一个API Promise\n// Promise 是一个构造函数\n\nvar fs = require('fs');\n// 1 创建Promise容器\t\tresolve:解决   reject：失败\nvar p1 = new Promise(function(resolve, reject) {\n\tfs.readFile('./a.text', 'utf8', function(err, data) {\n\t\tif (err) {\n\t\t\t// console.log(err);\n\t\t\t// 把容器的Pending状态变为rejected\n\t\t\treject(err);\n\t\t} else {\n\t\t\t// console.log(data);\n\t\t\t// 把容器的Pending状态变为resolve\n\t\t\tresolve(data);\n\t\t}\n\t});\n});\n\n// 当p1成功了，然后就（then）做指定的操作\n// then方法接收的function就是容器中的resolve函数\np1\n\t.then(function(data) {\n\t\tconsole.log(data);\n\t}, function(err) {\n\t\tconsole.log('读取文件失败了', err);\n\t});\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n!\n\n链式循环：\n\n封装 Promise 的 readFile ：\n\nvar fs = require('fs');\n\nfunction pReadFile(filePath) {\n\treturn new Promise(function(resolve, reject) {\n\t\tfs.readFile(filePath, 'utf8', function(err, data) {\n\t\t\tif (err) {\n\t\t\t\treject(err);\n\t\t\t} else {\n\t\t\t\tresolve(data);\n\t\t\t}\n\t\t});\n\t});\n}\n\npReadFile('./a.txt')\n\t.then(function(data) {\n\t\tconsole.log(data);\n\t\treturn pReadFile('./b.txt');\n\t})\n\t.then(function(data) {\n\t\tconsole.log(data);\n\t\treturn pReadFile('./a.txt');\n\t})\n\t.then(function(data) {\n\t\tconsole.log(data);\n\t})\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\nmongoose 所有的 API 都支持 Promise：\n\n// 查询所有\nUser.find()\n\t.then(function(data){\n        console.log(data)\n    })\n\n\n1\n2\n3\n4\n5\n\n\n注册：\n\nUser.findOne({username:'admin'},function(user){\n    if(user){\n        console.log('用户已存在')\n    } else {\n        new User({\n             username:'aaa',\n             password:'123',\n             email:'fffff'\n        }).save(function(){\n            console.log('注册成功');\n        })\n    }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nUser.findOne({\n    username:'admin'\n})\n    .then(function(user){\n        if(user){\n            // 用户已经存在不能注册\n            console.log('用户已存在');\n        }\n        else{\n            // 用户不存在可以注册\n            return new User({\n                username:'aaa',\n                password:'123',\n                email:'fffff'\n            }).save();\n        }\n    })\n    .then(funciton(ret){\n\t\tconsole.log('注册成功');\n    })\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 其他\n\n\n# 修改完代码自动重启\n\n我们在这里可以使用一个第三方命名行工具： nodemon 来帮助我们解决频繁修改代码重启服务器的问题。\n\nnpm install -g nodemon\t\t//安装nodemon\n\n\n1\n\n\n安装完毕之后使用：\n\nnodemon app.js\n\n\n1\n\n\n\n# 封装异步 API\n\n回调函数：获取异步操作的结果\n\nfunction fn(callback){\n    // var callback = funtion(data){ console.log(data); }\n\tsetTimeout(function(){\n        var data = 'hello';\n        callback(data);\n    },1000);\n}\n// 如果需要获取一个函数中异步操作的结果，则必须通过回调函数的方式来获取\nfn(function(data){\n    console.log(data);\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 数组的遍历方法，都是对函数作为一种参数\n\n\n# EcmaScript 6\n\n> 参考文档：https://es6.ruanyifeng.com/\n\n\n# 项目案例\n\n\n# 目录结构\n\n.\napp.js\t项目的入口文件\ncontrollers\nmodels\t存储使用mongoose设计的数据模型\nnode_modules\t第三方包\npackage.json\t包描述文件\npackage-lock.json\t第三方包版本锁定文件（npm5之后才有）\npublic\t公共静态资源\nroutes\nviews\t存储视图目录\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 模板页\n\n * 子模板\n * 模板继承\n\n\n# 路由设计\n\n路由               方法     GET 参数   POST 参数                   是否需要登录   备注\n/                get                                                渲染首页\n/register (登录)   get                                                渲染注册页面\n/register        post            email,nickname,password            处理注册请求\n/login           get                                                渲染登陆界面\n/login           post            email,password                     处理登录请求\n/loginout        get                                                处理退出请求\n                                                                    \n\n\n# 模型设计\n\n\n# 功能实现\n\n\n# 步骤\n\n * 创建目录结构\n * 整合静态也 - 模板页\n   * include\n   * block\n   * extend\n * 设计用户登陆，退出，注册的路由\n * 用户注册\n   * 先处理客户端页面的内容（表单控件的 name，收集表单数据，发起请求）\n   * 服务端\n     * 获取从客户端收到的数据\n     * 操作数据库\n       * 如果有错，发送 500 告诉客户端服务器错了‘\n       * 其他的根据业务发送不同的响应数据\n * 登录\n * 退出\n\n\n# Express 中间件\n\n\n# 中间件的概念\n\n> 参考文档：http://expressjs.com/en/guide/using-middleware.html\n\n中间件：把很复杂的事情分割成单个，然后依次有条理的执行。就是一个中间处理环节，有输入，有输出。\n\n说的通俗易懂点儿，中间件就是一个（从请求到响应调用的方法）方法。\n\n把数据从请求到响应分步骤来处理，每一个步骤都是一个中间处理环节。\n\nvar http = require('http');\nvar url = require('url');\n\nvar cookie = require('./expressPtoject/cookie');\nvar query = require('./expressPtoject/query');\nvar postBody = require('./expressPtoject/post-body');\n\nvar server = http.createServer(function(){\n\t// 解析请求地址中的get参数\n\t// var obj = url.parse(req.url,true);\n\t// req.query = obj.query;\n\tquery(req,res);\t//中间件\n\t\n\t// 解析请求地址中的post参数\n\treq.body = {\n\t\tfoo:'bar'\n\t}\n});\n\nif(req.url === 'xxx'){\n\t// 处理请求\n\t...\n}\n\nserver.listen(3000,function(){\n\tconsole.log('3000 runing...');\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n同一个请求对象所经过的中间件都是同一个请求对象和响应对象。\n\nvar express = require('express');\nvar app = express();\napp.get('/abc',function(req,res,next){\n\t// 同一个请求的req和res是一样的，\n\t// 可以前面存储下面调用\n\tconsole.log('/abc');\n\t// req.foo = 'bar';\n\treq.body = {\n\t\tname:'xiaoxiao',\n\t\tage:18\n\t}\n\tnext();\n});\napp.get('/abc',function(req,res,next){\n\t// console.log(req.foo);\n\tconsole.log(req.body);\n\tconsole.log('/abc');\n});\napp.listen(3000, function() {\n\tconsole.log('app is running at port 3000.');\n});\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n\n\n# 中间件的分类:\n\n\n# 应用程序级别的中间件\n\n万能匹配（不关心任何请求路径和请求方法的中间件）：\n\napp.use(function(req,res,next){\n    console.log('Time',Date.now());\n    next();\n});\n\n\n1\n2\n3\n4\n\n\n关心请求路径和请求方法的中间件：\n\napp.use('/a',function(req,res,next){\n    console.log('Time',Date.now());\n    next();\n});\n\n\n1\n2\n3\n4\n\n\n\n# 路由级别的中间件\n\n严格匹配请求路径和请求方法的中间件\n\nget:\n\napp.get('/',function(req,res){\n\tres.send('get');\n});\n\n\n1\n2\n3\n\n\npost：\n\napp.post('/a',function(req,res){\n\tres.send('post');\n});\n\n\n1\n2\n3\n\n\nput:\n\napp.put('/user',function(req,res){\n\tres.send('put');\n});\n\n\n1\n2\n3\n\n\ndelete:\n\napp.delete('/delete',function(req,res){\n\tres.send('delete');\n});\n\n\n1\n2\n3\n\n\n\n# 总\n\nvar express = require('express');\nvar app = express();\n\n// 中间件：处理请求，本质就是个函数\n// 在express中，对中间件有几种分类\n\n// 1 不关心任何请求路径和请求方法的中间件\n// 也就是说任何请求都会进入这个中间件\n// 中间件本身是一个方法，该方法接收三个参数\n// Request 请求对象\n// Response 响应对象\n// next 下一个中间件\n// // 全局匹配中间件\n// app.use(function(req, res, next) {\n// \tconsole.log('1');\n// \t// 当一个请求进入中间件后\n// \t// 如果需要请求另外一个方法则需要使用next（）方法\n// \tnext();\n// \t// next是一个方法，用来调用下一个中间件\n//  // 注意：next（）方法调用下一个方法的时候，也会匹配（不是调用紧挨着的哪一个）\n// });\n// app.use(function(req, res, next) {\n// \tconsole.log('2');\n// });\n\n// // 2 关心请求路径的中间件\n// // 以/xxx开头的中间件\n// app.use('/a',function(req, res, next) {\n// \tconsole.log(req.url);\n// });\n\n// 3 严格匹配请求方法和请求路径的中间件\napp.get('/',function(){\n\tconsole.log('/');\n});\napp.post('/a',function(){\n\tconsole.log('/a');\n});\n\napp.listen(3000, function() {\n\tconsole.log('app is running at port 3000.');\n});\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n\n\n\n# 错误处理中间件\n\napp.use(function(err,req,res,next){\n    console.error(err,stack);\n    res.status(500).send('Something broke');\n});\n\n\n1\n2\n3\n4\n\n\n配置使用 404 中间件：\n\napp.use(function(req,res){\n    res.render('404.html');\n});\n\n\n1\n2\n3\n\n\n配置全局错误处理中间件:\n\napp.get('/a', function(req, res, next) {\n\tfs.readFile('.a/bc', funtion() {\n\t\tif (err) {\n        \t// 当调用next()传参后，则直接进入到全局错误处理中间件方法中\n        \t// 当发生全局错误的时候，我们可以调用next传递错误对象\n        \t// 然后被全局错误处理中间件匹配到并进行处理\n\t\t\tnext(err);\n\t\t}\n\t})\n});\n//全局错误处理中间件\napp.use(function(err,req,res,next){\n    res.status(500).json({\n        err_code:500,\n        message:err.message\n    });\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 内置中间件\n\n * express.static (提供静态文件)\n   * http://expressjs.com/en/starter/static-files.html#serving-static-files-in-express\n\n\n# 第三方中间件\n\n> 参考文档：http://expressjs.com/en/resources/middleware.html\n\n * body-parser\n\n * compression\n\n * cookie-parser\n\n * mogran\n\n * response-time\n\n * server-static\n\n * session\n   \n   \n   #",normalizedContent:"# mongodb\n\n\n# 基本命令\n\nshow dbs\t\t//查看数据库列表(数据库中的所有数据库)\n\n\n1\n\n\ndb\t\t\t\t    //查看当前连接的数据库\n\n\n1\n\n\nuse 数据库名称\t     //切换到指定的数据库，（如果没有会新建）\n\n\n1\n\n\nshow collections \t//查看当前目录下的所有集合（数据表）\n\n\n1\n\n\ndb.集合名.find()\t  //查看表中的详细信息\n\n\n1\n\n\n\n# 在 node 中如何操作 mongodb 数据库\n\n\n# 使用官方的 mongodb 包来操作\n\nhttp://mongodb.github.io/node-mongodb-native/\n\n\n1\n\n\n\n# 使用第三方包 mongoose 来操作（推荐使用）\n\nhttps://mongoosejs.com/    //官网\n\n\n1\n\n\n第一步安装 mongoose：(在哪里使用安装在哪里)\n\nnpm i mongoose --save\n\n\n1\n\n\n第二步连接数据库 （此案例数据库名为 demo）\n\n//连接数据库\n//引入mongoose\nlet mongoose = require('mongoose')\nmongoose.set('usecreateindex',true) //使用一个新的索引创建器\n//1.连接数据库\nmongoose.connect('mongodb://localhost:27017/demo',{\n    usenewurlparser: true, //使用一个新的url解析器，用于解决一些安全性问题。\n    useunifiedtopology: true //使用一个统一的新的拓扑结构\n})\n//2.绑定数据库连接的监听\nmongoose.connection.on('open',function (err) {\n    if(err){\n        console.log('数据库连接失败',err)\n    }else {\n        console.log('数据库连接成功')\n        //3.操作数据库\n        //3.1. ------ 引入模式对象\n        let schema = mongoose.schema\n\n        //3.2.--------  创建约束对象\n        let studentsrule = new schema({\n            stu_id: {\n                type: string, //限制学号必须为：字符串\n                required: true,\n                unique: true\n            },\n            name: {\n                type: string, //限制姓名必须为：字符串\n                required: true, //限制姓名为必填项\n            },\n            age: {\n                type: number, //限制年龄必须为：字符串\n                required: true, //限制年龄为必填项\n            },\n            sex: {\n                type: string, //限制性别必须为：字符串\n                required: true, //限制性别为必填项\n            },\n            hobby: [string], //限制爱好只能为数组，数组中的每一项必须为字符串\n            info: schema.types.mixed, //接收所有类型\n            date: {\n                type: date,\n                default: date.now()\n            },\n            enable_flag: {\n                type: string,\n                default: 'y'\n            }\n        })\n\n    //3.3.------- 创建模型对象（'students'是自己创建的集合）\n    let stumodel = mongoose.model('students',studentsrule) //用于生成某个集合所对应的模型对象\n   \t//4进行curd操作\t\n  }\n})\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n\n\n第三步：进行 curd 操作（对应第二步里面的 4）\n\n-create\n\n   模型对象.create(文档对象，回调函数)\n   模型对象.create(文档对象)\n\n\nstumodel.create({\n      stu_id:'004',\n      name:'强',\n      age:'42',\n      sex:'男',\n      hobby:['女','打代码','打篮球'], //限制爱好只能为数组，数组中的每一项必须为字符串\n      info:'一个风一样的男子', //接收所有类型\n    },function(err,data){\n        if (!err) console.log(data)\n        else console.log(err)\n    })\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n-read\n\n   模型对象.find(查询条件[,投影])不管有没有数据，都返回一个数组\n   模型对象.findone(查询条件[,投影])找到了返回一个对象，没找到返回null\n   find方法：\n        1.返回的是一个数组，就算是一条数据，也包裹一个数组\n        2.若查询结果为空，则返回一个空数组。\n   findone方法：\n        1.若有结果，返回的是一个对象\n        2.若没有结果，返回一个null\n\n\nstumodel.find({name:'小明'},function (err,data) {\n      if (!err) console.log(data)\n      else console.log(err)\n    })\nstumodel.findone({name:'班长',age:42},function (err,data) {\n      if (!err) console.log(data)\n      else console.log(err)\n    })\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n-update\n\n  模型对象.updateone(查询条件,要更新的内容[,配置对象])\n  模型对象.updatemany(查询条件,要更新的内容[,配置对象])\n  备注：存在update方法，但是即将废弃，查询条件匹配到多个时，依然只修改一个，强烈建议用updateone或updatemany\n\n\nstumodel.updateone({name:'静静'},{age:16},function (err,data) {\n      if (!err) console.log(data)\n      else console.log(err)\n    })\n\n\n1\n2\n3\n4\n\n\n-delete\n\n   模型对象.deleteone(查询条件)\n   模型对象.deletemany(查询条件)\n   备注：没有delete方法，会报错！\n\n\nstumodel.deletemany({age:16},function (err,data) {\n      if (!err) console.log(data)\n      else console.log(err)\n    })\n\n\n1\n2\n3\n4\n\n\n备注： 以上所有方法，如果没有指定回调函数，则返回值是一个 promise 对象\n\n\n# 使用 node 操作 mysql 数据库\n\n文档：https://www.npmjs.com/package/mysql\n\n安装：\n\nnpm install --save  mysql\n\n\n1\n\n\n// 引入mysql包\nvar mysql      = require('mysql');\n\n// 创建连接\nvar connection = mysql.createconnection({\n  host     : 'localhost',\t//本机\n  user     : 'me',\t\t//账号root\n  password : 'secret',\t//密码12345\n  database : 'my_db'\t//数据库名\n});\n \n// 连接数据库\t（打开冰箱门）\nconnection.connect();\n \n//执行数据操作\t（把大象放到冰箱）\nconnection.query('select * from `users` ', function (error, results, fields) {\n  if (error) throw error;//抛出异常阻止代码往下执行\n  // 没有异常打印输出结果\n  console.log('the solution is: ',results);\n});\n\n//关闭连接\t（关闭冰箱门）\nconnection.end();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 异步编程\n\n\n# 回调函数\n\n不成立的情况下：\n\nfunction add(x,y){\n    console.log(1);\n    settimeout(function(){\n        console.log(2);\n        var ret = x + y;\n        return ret;\n    },1000);\n    console.log(3);\n    //到这里执行就结束了，不会i等到前面的定时器，所以直接返回了默认值 undefined\n}\n\nconsole.log(add(2,2));\n// 结果是 1 3 undefined 4\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n使用回调函数解决：\n\n回调函数：通过一个函数，获取函数内部的操作。（根据输入得到输出结果）\n\nvar ret;\nfunction add(x,y,callback){\n    // callback就是回调函数\n    // var x = 10;\n    // var y = 20;\n    // var callback = function(ret){console.log(ret);}\n    console.log(1);\n    settimeout(function(){\n        var ret = x + y;\n        callback(ret);\n    },1000);\n    console.log(3);\n}\nadd(10,20,function(ret){\n    console.log(ret);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n注意：\n\n凡是需要得到一个函数内部异步操作的结果（settimeout,readfile,writefile,ajax,readdir）\n\n这种情况必须通过 回调函数 (异步 api 都会伴随着一个回调函数)\n\najax:\n\n基于原生 xmlhttprequest 封装 get 方法：\n\nvar oreq = new xmlhttprequest();\n// 当请求加载成功要调用指定的函数\noreq.onload = function(){\n    console.log(oreq.responsetext);\n}\noreq.open(\"get\", \"请求路径\",true);\noreq.send();\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nfunction get(url,callback){\n    var oreq = new xmlhttprequest();\n    // 当请求加载成功要调用指定的函数\n    oreq.onload = function(){\n        //console.log(oreq.responsetext);\n        callback(oreq.responsetext);\n    }\n    oreq.open(\"get\", url,true);\n    oreq.send();\n}\nget('data.json',function(data){\n    console.log(data);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# promise\n\ncallback hell（回调地狱）:\n\n\n\n文件的读取无法判断执行顺序（文件的执行顺序是依据文件的大小来决定的）(异步 api 无法保证文件的执行顺序)\n\nvar fs = require('fs');\n\nfs.readfile('./data/a.text','utf8',function(err,data){\n\tif(err){\n\t\t// 1 读取失败直接打印输出读取失败\n\t\treturn console.log('读取失败');\n\t\t// 2 抛出异常\n\t\t// \t\t阻止程序的执行\n\t\t// \t\t把错误信息打印到控制台\n\t\tthrow err;\n\t}\n\tconsole.log(data);\n});\n\nfs.readfile('./data/b.text','utf8',function(err,data){\n\tif(err){\n\t\t// 1 读取失败直接打印输出读取失败\n\t\treturn console.log('读取失败');\n\t\t// 2 抛出异常\n\t\t// \t\t阻止程序的执行\n\t\t// \t\t把错误信息打印到控制台\n\t\tthrow err;\n\t}\n\tconsole.log(data);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n通过回调嵌套的方式来保证顺序：\n\nvar fs = require('fs');\n\nfs.readfile('./data/a.text','utf8',function(err,data){\n\tif(err){\n\t\t// 1 读取失败直接打印输出读取失败\n\t\treturn console.log('读取失败');\n\t\t// 2 抛出异常\n\t\t// \t\t阻止程序的执行\n\t\t// \t\t把错误信息打印到控制台\n\t\tthrow err;\n\t}\n\tconsole.log(data);\n\tfs.readfile('./data/b.text','utf8',function(err,data){\n\t\tif(err){\n\t\t\t// 1 读取失败直接打印输出读取失败\n\t\t\treturn console.log('读取失败');\n\t\t\t// 2 抛出异常\n\t\t\t// \t\t阻止程序的执行\n\t\t\t// \t\t把错误信息打印到控制台\n\t\t\tthrow err;\n\t\t}\n\t\tconsole.log(data);\n\t\tfs.readfile('./data/a.text','utf8',function(err,data){\n\t\t\tif(err){\n\t\t\t\t// 1 读取失败直接打印输出读取失败\n\t\t\t\treturn console.log('读取失败');\n\t\t\t\t// 2 抛出异常\n\t\t\t\t// \t\t阻止程序的执行\n\t\t\t\t// \t\t把错误信息打印到控制台\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tconsole.log(data);\n\t\t});\n\t});\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n为了解决以上编码方式带来的问题（回调地狱嵌套），所以在 ecmascript6 新增了一个 api: promise 。\n\n * promise：承诺，保证\n * promise 本身不是异步的，但往往都是内部封装一个异步任务\n\n基本语法：\n\n// 在ecmascript 6中新增了一个api promise\n// promise 是一个构造函数\n\nvar fs = require('fs');\n// 1 创建promise容器\t\tresolve:解决   reject：失败\nvar p1 = new promise(function(resolve, reject) {\n\tfs.readfile('./a.text', 'utf8', function(err, data) {\n\t\tif (err) {\n\t\t\t// console.log(err);\n\t\t\t// 把容器的pending状态变为rejected\n\t\t\treject(err);\n\t\t} else {\n\t\t\t// console.log(data);\n\t\t\t// 把容器的pending状态变为resolve\n\t\t\tresolve(data);\n\t\t}\n\t});\n});\n\n// 当p1成功了，然后就（then）做指定的操作\n// then方法接收的function就是容器中的resolve函数\np1\n\t.then(function(data) {\n\t\tconsole.log(data);\n\t}, function(err) {\n\t\tconsole.log('读取文件失败了', err);\n\t});\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n!\n\n链式循环：\n\n封装 promise 的 readfile ：\n\nvar fs = require('fs');\n\nfunction preadfile(filepath) {\n\treturn new promise(function(resolve, reject) {\n\t\tfs.readfile(filepath, 'utf8', function(err, data) {\n\t\t\tif (err) {\n\t\t\t\treject(err);\n\t\t\t} else {\n\t\t\t\tresolve(data);\n\t\t\t}\n\t\t});\n\t});\n}\n\npreadfile('./a.txt')\n\t.then(function(data) {\n\t\tconsole.log(data);\n\t\treturn preadfile('./b.txt');\n\t})\n\t.then(function(data) {\n\t\tconsole.log(data);\n\t\treturn preadfile('./a.txt');\n\t})\n\t.then(function(data) {\n\t\tconsole.log(data);\n\t})\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\nmongoose 所有的 api 都支持 promise：\n\n// 查询所有\nuser.find()\n\t.then(function(data){\n        console.log(data)\n    })\n\n\n1\n2\n3\n4\n5\n\n\n注册：\n\nuser.findone({username:'admin'},function(user){\n    if(user){\n        console.log('用户已存在')\n    } else {\n        new user({\n             username:'aaa',\n             password:'123',\n             email:'fffff'\n        }).save(function(){\n            console.log('注册成功');\n        })\n    }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nuser.findone({\n    username:'admin'\n})\n    .then(function(user){\n        if(user){\n            // 用户已经存在不能注册\n            console.log('用户已存在');\n        }\n        else{\n            // 用户不存在可以注册\n            return new user({\n                username:'aaa',\n                password:'123',\n                email:'fffff'\n            }).save();\n        }\n    })\n    .then(funciton(ret){\n\t\tconsole.log('注册成功');\n    })\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 其他\n\n\n# 修改完代码自动重启\n\n我们在这里可以使用一个第三方命名行工具： nodemon 来帮助我们解决频繁修改代码重启服务器的问题。\n\nnpm install -g nodemon\t\t//安装nodemon\n\n\n1\n\n\n安装完毕之后使用：\n\nnodemon app.js\n\n\n1\n\n\n\n# 封装异步 api\n\n回调函数：获取异步操作的结果\n\nfunction fn(callback){\n    // var callback = funtion(data){ console.log(data); }\n\tsettimeout(function(){\n        var data = 'hello';\n        callback(data);\n    },1000);\n}\n// 如果需要获取一个函数中异步操作的结果，则必须通过回调函数的方式来获取\nfn(function(data){\n    console.log(data);\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 数组的遍历方法，都是对函数作为一种参数\n\n\n# ecmascript 6\n\n> 参考文档：https://es6.ruanyifeng.com/\n\n\n# 项目案例\n\n\n# 目录结构\n\n.\napp.js\t项目的入口文件\ncontrollers\nmodels\t存储使用mongoose设计的数据模型\nnode_modules\t第三方包\npackage.json\t包描述文件\npackage-lock.json\t第三方包版本锁定文件（npm5之后才有）\npublic\t公共静态资源\nroutes\nviews\t存储视图目录\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 模板页\n\n * 子模板\n * 模板继承\n\n\n# 路由设计\n\n路由               方法     get 参数   post 参数                   是否需要登录   备注\n/                get                                                渲染首页\n/register (登录)   get                                                渲染注册页面\n/register        post            email,nickname,password            处理注册请求\n/login           get                                                渲染登陆界面\n/login           post            email,password                     处理登录请求\n/loginout        get                                                处理退出请求\n                                                                    \n\n\n# 模型设计\n\n\n# 功能实现\n\n\n# 步骤\n\n * 创建目录结构\n * 整合静态也 - 模板页\n   * include\n   * block\n   * extend\n * 设计用户登陆，退出，注册的路由\n * 用户注册\n   * 先处理客户端页面的内容（表单控件的 name，收集表单数据，发起请求）\n   * 服务端\n     * 获取从客户端收到的数据\n     * 操作数据库\n       * 如果有错，发送 500 告诉客户端服务器错了‘\n       * 其他的根据业务发送不同的响应数据\n * 登录\n * 退出\n\n\n# express 中间件\n\n\n# 中间件的概念\n\n> 参考文档：http://expressjs.com/en/guide/using-middleware.html\n\n中间件：把很复杂的事情分割成单个，然后依次有条理的执行。就是一个中间处理环节，有输入，有输出。\n\n说的通俗易懂点儿，中间件就是一个（从请求到响应调用的方法）方法。\n\n把数据从请求到响应分步骤来处理，每一个步骤都是一个中间处理环节。\n\nvar http = require('http');\nvar url = require('url');\n\nvar cookie = require('./expressptoject/cookie');\nvar query = require('./expressptoject/query');\nvar postbody = require('./expressptoject/post-body');\n\nvar server = http.createserver(function(){\n\t// 解析请求地址中的get参数\n\t// var obj = url.parse(req.url,true);\n\t// req.query = obj.query;\n\tquery(req,res);\t//中间件\n\t\n\t// 解析请求地址中的post参数\n\treq.body = {\n\t\tfoo:'bar'\n\t}\n});\n\nif(req.url === 'xxx'){\n\t// 处理请求\n\t...\n}\n\nserver.listen(3000,function(){\n\tconsole.log('3000 runing...');\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n同一个请求对象所经过的中间件都是同一个请求对象和响应对象。\n\nvar express = require('express');\nvar app = express();\napp.get('/abc',function(req,res,next){\n\t// 同一个请求的req和res是一样的，\n\t// 可以前面存储下面调用\n\tconsole.log('/abc');\n\t// req.foo = 'bar';\n\treq.body = {\n\t\tname:'xiaoxiao',\n\t\tage:18\n\t}\n\tnext();\n});\napp.get('/abc',function(req,res,next){\n\t// console.log(req.foo);\n\tconsole.log(req.body);\n\tconsole.log('/abc');\n});\napp.listen(3000, function() {\n\tconsole.log('app is running at port 3000.');\n});\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n\n\n# 中间件的分类:\n\n\n# 应用程序级别的中间件\n\n万能匹配（不关心任何请求路径和请求方法的中间件）：\n\napp.use(function(req,res,next){\n    console.log('time',date.now());\n    next();\n});\n\n\n1\n2\n3\n4\n\n\n关心请求路径和请求方法的中间件：\n\napp.use('/a',function(req,res,next){\n    console.log('time',date.now());\n    next();\n});\n\n\n1\n2\n3\n4\n\n\n\n# 路由级别的中间件\n\n严格匹配请求路径和请求方法的中间件\n\nget:\n\napp.get('/',function(req,res){\n\tres.send('get');\n});\n\n\n1\n2\n3\n\n\npost：\n\napp.post('/a',function(req,res){\n\tres.send('post');\n});\n\n\n1\n2\n3\n\n\nput:\n\napp.put('/user',function(req,res){\n\tres.send('put');\n});\n\n\n1\n2\n3\n\n\ndelete:\n\napp.delete('/delete',function(req,res){\n\tres.send('delete');\n});\n\n\n1\n2\n3\n\n\n\n# 总\n\nvar express = require('express');\nvar app = express();\n\n// 中间件：处理请求，本质就是个函数\n// 在express中，对中间件有几种分类\n\n// 1 不关心任何请求路径和请求方法的中间件\n// 也就是说任何请求都会进入这个中间件\n// 中间件本身是一个方法，该方法接收三个参数\n// request 请求对象\n// response 响应对象\n// next 下一个中间件\n// // 全局匹配中间件\n// app.use(function(req, res, next) {\n// \tconsole.log('1');\n// \t// 当一个请求进入中间件后\n// \t// 如果需要请求另外一个方法则需要使用next（）方法\n// \tnext();\n// \t// next是一个方法，用来调用下一个中间件\n//  // 注意：next（）方法调用下一个方法的时候，也会匹配（不是调用紧挨着的哪一个）\n// });\n// app.use(function(req, res, next) {\n// \tconsole.log('2');\n// });\n\n// // 2 关心请求路径的中间件\n// // 以/xxx开头的中间件\n// app.use('/a',function(req, res, next) {\n// \tconsole.log(req.url);\n// });\n\n// 3 严格匹配请求方法和请求路径的中间件\napp.get('/',function(){\n\tconsole.log('/');\n});\napp.post('/a',function(){\n\tconsole.log('/a');\n});\n\napp.listen(3000, function() {\n\tconsole.log('app is running at port 3000.');\n});\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n\n\n\n# 错误处理中间件\n\napp.use(function(err,req,res,next){\n    console.error(err,stack);\n    res.status(500).send('something broke');\n});\n\n\n1\n2\n3\n4\n\n\n配置使用 404 中间件：\n\napp.use(function(req,res){\n    res.render('404.html');\n});\n\n\n1\n2\n3\n\n\n配置全局错误处理中间件:\n\napp.get('/a', function(req, res, next) {\n\tfs.readfile('.a/bc', funtion() {\n\t\tif (err) {\n        \t// 当调用next()传参后，则直接进入到全局错误处理中间件方法中\n        \t// 当发生全局错误的时候，我们可以调用next传递错误对象\n        \t// 然后被全局错误处理中间件匹配到并进行处理\n\t\t\tnext(err);\n\t\t}\n\t})\n});\n//全局错误处理中间件\napp.use(function(err,req,res,next){\n    res.status(500).json({\n        err_code:500,\n        message:err.message\n    });\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 内置中间件\n\n * express.static (提供静态文件)\n   * http://expressjs.com/en/starter/static-files.html#serving-static-files-in-express\n\n\n# 第三方中间件\n\n> 参考文档：http://expressjs.com/en/resources/middleware.html\n\n * body-parser\n\n * compression\n\n * cookie-parser\n\n * mogran\n\n * response-time\n\n * server-static\n\n * session\n   \n   \n   #",charsets:{cjk:!0}},{title:"测试",frontmatter:{title:"测试",date:"2021-03-16T18:05:34.000Z",permalink:"/pages/2135b2/",categories:["前端","测试"],tags:"axios -"},regularPath:"/views/01.%E5%89%8D%E7%AB%AF/50.Axios/10.axios.html",relativePath:"views/01.前端/50.Axios/10.axios.md",key:"v-2745488c",path:"/pages/2135b2/",headers:[{level:2,title:"1. axios的特点",slug:"_1-axios的特点",normalizedTitle:"1. axios 的特点",charIndex:21},{level:2,title:"2.基本使用",slug:"_2-基本使用",normalizedTitle:"2. 基本使用",charIndex:119},{level:3,title:"2.1安装",slug:"_2-1安装",normalizedTitle:"2.1 安装",charIndex:131},{level:3,title:"2.2使用",slug:"_2-2使用",normalizedTitle:"2.2 使用",charIndex:318},{level:2,title:"3. axios常用语法",slug:"_3-axios常用语法",normalizedTitle:"3. axios 常用语法",charIndex:548},{level:3,title:"3.1简写方式：",slug:"_3-1简写方式",normalizedTitle:"3.1 简写方式：",charIndex:1164},{level:3,title:"3.2执行多个并发请求",slug:"_3-2执行多个并发请求",normalizedTitle:"3.2 执行多个并发请求",charIndex:1722},{level:3,title:"3.3全局配置axios",slug:"_3-3全局配置axios",normalizedTitle:"3.3 全局配置 axios",charIndex:2240},{level:3,title:"3.4创建实例（相当于配置局部axios）",slug:"_3-4创建实例-相当于配置局部axios",normalizedTitle:"3.4 创建实例（相当于配置局部 axios）",charIndex:2562},{level:3,title:"3.5拦截器",slug:"_3-5拦截器",normalizedTitle:"3.5 拦截器",charIndex:2945},{level:2,title:"4. 源码难点与流程分析",slug:"_4-源码难点与流程分析",normalizedTitle:"4. 源码难点与流程分析",charIndex:3804}],lastUpdated:"4/28/2022, 6:08:46 PM",lastUpdatedTimestamp:1651169326e3,headersStr:"1. axios的特点 2.基本使用 2.1安装 2.2使用 3. axios常用语法 3.1简写方式： 3.2执行多个并发请求 3.3全局配置axios 3.4创建实例（相当于配置局部axios） 3.5拦截器 4. 源码难点与流程分析",content:'# axios 从入门到源码分析\n\n\n# 1. axios 的特点\n\n基于promise的封装XHR的异步ajax请求库\n浏览器端/node端都可以使用\n支持请求／响应拦截器\n支持请求取消\n请求/响应数据转换\n批量发送多个请求\n\n\n\n# 2. 基本使用\n\n\n# 2.1 安装\n\n//使用 cdn:\n<script src="https://unpkg.com/axios/dist/axios.min.js"><\/script>\n//使用npm\nnpm install axios\n//使用bower\nbower install axios\n//使用yarn\nyarn add axios\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 2.2 使用\n\naxios({\n        url:"http://localhost:3000/",    //请求的url\n        method:"get",       //请求方式\n        params:{id:1}       //请求参数\n\n    })\n        .then((value) => {\n        console.log(value)\n    })\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 3. axios 常用语法\n\naxios(config): 通用/最本质的发任意类型请求的方式\naxios(url[, config]): 可以只指定url发get请求\naxios.request(config): 等同于axios(config)\naxios.get(url[, config]): 发get请求\naxios.delete(url[, config]): 发delete请求\naxios.post(url[, data, config]): 发post请求\naxios.put(url[, data, config]): 发put请求\n\naxios.defaults.xxx: 请求的默认全局配置\naxios.interceptors.request.use(): 添加请求拦截器\naxios.interceptors.response.use(): 添加响应拦截器\n\naxios.create([config]): 创建一个新的axios(它没有下面的功能)\n\naxios.Cancel(): 用于创建取消请求的错误对象\naxios.CancelToken(): 用于创建取消请求的token对象\naxios.isCancel(): 是否是一个取消请求的错误\naxios.all(promises): 用于批量执行多个异步请求\naxios.spread(): 用来指定接收所有成功数据的回调函数的方法\n\n\n\n# 3.1 简写方式：\n\n//发送get请求\naxios.get("http://localhost:3000/", {params: {id: 1, name: "zhangsan"}})\n        .then(value => {\n                console.log(value)\n            }\n        )\n        .catch(reason => {\n                console.log(reason)\n            }\n        )\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n/发送post请求\naxios.post("http://localhost:3000/", "id=1&name=zhangsan")\n        .then(value => {\n                console.log(value)\n            }\n        )\n        .catch(reason => {\n                console.log(reason)\n            }\n        )\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 3.2 执行多个并发请求\n\nfunction getUser1() {\n        return axios.get(\'http://localhost:3000/\');\n    }\n\nfunction getUser2() {\n        return axios.post(\'http://localhost:3000/\');\n    }\n\n    axios.all([getUser1(), getUser2()])\n        .then(axios.spread(\t\t//使用axios.spread方法将all返回的数组处理成Object对象\n        (value1, value2) => {\t\t\n            console.log(value1)\n            console.log(value2)\n        }))\n        .catch((reason) => {\n            console.log(reason)\n        })\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 3.3 全局配置 axios\n\n//假设完整的url为\'https://api.example.com/get?id=1\'\naxios.defaults.baseURL = \'https://api.example.com\';   //配置公共的url\naxios.defaults.timeout=5\t\t\t\t\t\t\t  //配置响应超时时间\naxios.get("/get?id=1")\n  .then(value=>{\n    console.log(value)\n  })\n  .catch((reason) => {\n     console.log(reason)\n   });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 3.4 创建实例（相当于配置局部 axios）\n\n//完整url为\'https://some-domain.com/api/get?id=1\'\nlet axios1 = axios.create({\n  baseURL: \'https://some-domain.com/api\',\n  timeout: 1000,\n  headers: {\'X-Custom-Header\': \'foobar\'}   //请求头\n});\n//对实例的应用\naxios1.get("/get?id=1")\n.then(value=>{\n    console.log(value)\n  })\n  .catch((reason) => {\n     console.log(reason)\n   });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 3.5 拦截器\n\n拦截器是在发送请求或者接收响应前，可以对请求或响应进行检查或配置进行特定处理的函数，\n\n1). 请求拦截器：在真正发请求前，可以对请求进行检查或配置进行特定处理的函数，\n包括成功 / 失败的函数，传递的必须是 config\n2). 响应拦截器：在请求返回后，可以对响应数据进行特定处理的函数，\n包括成功 / 失败的函数，传递的默认是 response\n\n// 添加请求拦截器\n    axios.interceptors.request.use((config) => {\n        console.log(config)  //在请求直接做的事情\n        return config   //将请求return出去，让then方法调用\n    }, (error)=> {\n        // 对请求错误做些什么\n        return Promise.reject(error);\n    });\n\n    // 添加响应拦截器\n    axios.interceptors.response.use((config) => {\n        console.log(config)  //在相应成功做的事情\n        return config   //将请求return出去，让then方法调用\n    }, (error)=> {\n        // 对请求错误做些什么\n        return Promise.reject(error);\n    });\n\n    // axios请求\n    axios.get("http://localhost:3000/get?id=1",)\n    .then((value) => {\n    })\n    .catch((reason) => {\n    })\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# 4. 源码难点与流程分析\n\n1. axios与Axios的关系\n    axios函数对应的是Axios.prototype.request方法通过bind(Axiox的实例)产生的函数\n    axios有Axios原型上的所有发特定类型请求的方法: get()/post()/put()/delete()\n    axios有Axios的实例上的所有属性: defaults/interceptors\n    后面又添加了create()/CancelToken()/all()\n2. axios.create()返回的对象与axios的区别\n    1). 相同: \n        都是一个能发任意请求的函数: request(config)\n        都有发特定请求的各种方法: get()/post()/put()/delete()\n        都有默认配置和拦截器的属性: defaults/interceptors\n    2). 不同:\n        默认匹配的值不一样\n        instance没有axios后面添加的一引起方法: create()/CancelToken()/all()\n3. axios发请求的流程\n    1). 整体流程: request(config)  ===> dispatchRequest(config) ===> xhrAdapter(config)\n    2). request(config): 将请求拦截器 / dispatchRequest() / 响应拦截器 通过promise链串连起来, 返回promise\n    3). dispatchRequest(config): 转换请求数据 ===> 调用xhrAdapter()发请求 ===> 请求返回后转换响应数据. 返回promise\n    4). xhrAdapter(config): 创建XHR对象, 根据config进行相应设置, 发送特定请求, 并接收响应数据, 返回promise \n4. axios的请求/响应拦截器是什么?\n    1). 请求拦截器: 在真正发请求前, 可以对请求进行检查或配置进行特定处理的函数, \n               包括成功/失败的函数, 传递的必须是config\n    2). 响应拦截器: 在请求返回后, 可以对响应数据进行特定处理的函数,\n               包括成功/失败的函数, 传递的默认是response\n5. axios的请求/响应数据转换器是什么?\n    1). 请求转换器: 对请求头和请求体数据进行特定处理的函数\n        setContentTypeIfUnset(headers, \'application/json;charset=utf-8\');\n        return JSON.stringify(data)\n    2). 响应转换器: 将响应体json字符串解析为js对象或数组的函数\n        response.data = JSON.parse(response.data)\n6. response的整体结构\n    {\n        data,\n        status,\n        statusText,\n        headers,\n        config,\n        request\n    }\n7. error的整体结构\n    {\n        message,\n        request,\n        response\n    }\n8. 如何取消未完成的请求\n    1).当配置了cancelToken对象时, 保存cancel函数\n        创建一个用于将来中断请求的cancelPromise\n        并定义了一个用于取消请求的cancel函数\n        将cancel函数传递出来\n    2.调用cancel()取消请求\n        执行cacel函数, 传入错误信息message\n        内部会让cancelPromise变为成功, 且成功的值为一个Cancel对象\n        在cancelPromise的成功回调中中断请求, 并让发请求的proimse失败, 失败的reason为Cacel对象',normalizedContent:'# axios 从入门到源码分析\n\n\n# 1. axios 的特点\n\n基于promise的封装xhr的异步ajax请求库\n浏览器端/node端都可以使用\n支持请求／响应拦截器\n支持请求取消\n请求/响应数据转换\n批量发送多个请求\n\n\n\n# 2. 基本使用\n\n\n# 2.1 安装\n\n//使用 cdn:\n<script src="https://unpkg.com/axios/dist/axios.min.js"><\/script>\n//使用npm\nnpm install axios\n//使用bower\nbower install axios\n//使用yarn\nyarn add axios\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 2.2 使用\n\naxios({\n        url:"http://localhost:3000/",    //请求的url\n        method:"get",       //请求方式\n        params:{id:1}       //请求参数\n\n    })\n        .then((value) => {\n        console.log(value)\n    })\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 3. axios 常用语法\n\naxios(config): 通用/最本质的发任意类型请求的方式\naxios(url[, config]): 可以只指定url发get请求\naxios.request(config): 等同于axios(config)\naxios.get(url[, config]): 发get请求\naxios.delete(url[, config]): 发delete请求\naxios.post(url[, data, config]): 发post请求\naxios.put(url[, data, config]): 发put请求\n\naxios.defaults.xxx: 请求的默认全局配置\naxios.interceptors.request.use(): 添加请求拦截器\naxios.interceptors.response.use(): 添加响应拦截器\n\naxios.create([config]): 创建一个新的axios(它没有下面的功能)\n\naxios.cancel(): 用于创建取消请求的错误对象\naxios.canceltoken(): 用于创建取消请求的token对象\naxios.iscancel(): 是否是一个取消请求的错误\naxios.all(promises): 用于批量执行多个异步请求\naxios.spread(): 用来指定接收所有成功数据的回调函数的方法\n\n\n\n# 3.1 简写方式：\n\n//发送get请求\naxios.get("http://localhost:3000/", {params: {id: 1, name: "zhangsan"}})\n        .then(value => {\n                console.log(value)\n            }\n        )\n        .catch(reason => {\n                console.log(reason)\n            }\n        )\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n/发送post请求\naxios.post("http://localhost:3000/", "id=1&name=zhangsan")\n        .then(value => {\n                console.log(value)\n            }\n        )\n        .catch(reason => {\n                console.log(reason)\n            }\n        )\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 3.2 执行多个并发请求\n\nfunction getuser1() {\n        return axios.get(\'http://localhost:3000/\');\n    }\n\nfunction getuser2() {\n        return axios.post(\'http://localhost:3000/\');\n    }\n\n    axios.all([getuser1(), getuser2()])\n        .then(axios.spread(\t\t//使用axios.spread方法将all返回的数组处理成object对象\n        (value1, value2) => {\t\t\n            console.log(value1)\n            console.log(value2)\n        }))\n        .catch((reason) => {\n            console.log(reason)\n        })\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 3.3 全局配置 axios\n\n//假设完整的url为\'https://api.example.com/get?id=1\'\naxios.defaults.baseurl = \'https://api.example.com\';   //配置公共的url\naxios.defaults.timeout=5\t\t\t\t\t\t\t  //配置响应超时时间\naxios.get("/get?id=1")\n  .then(value=>{\n    console.log(value)\n  })\n  .catch((reason) => {\n     console.log(reason)\n   });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 3.4 创建实例（相当于配置局部 axios）\n\n//完整url为\'https://some-domain.com/api/get?id=1\'\nlet axios1 = axios.create({\n  baseurl: \'https://some-domain.com/api\',\n  timeout: 1000,\n  headers: {\'x-custom-header\': \'foobar\'}   //请求头\n});\n//对实例的应用\naxios1.get("/get?id=1")\n.then(value=>{\n    console.log(value)\n  })\n  .catch((reason) => {\n     console.log(reason)\n   });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 3.5 拦截器\n\n拦截器是在发送请求或者接收响应前，可以对请求或响应进行检查或配置进行特定处理的函数，\n\n1). 请求拦截器：在真正发请求前，可以对请求进行检查或配置进行特定处理的函数，\n包括成功 / 失败的函数，传递的必须是 config\n2). 响应拦截器：在请求返回后，可以对响应数据进行特定处理的函数，\n包括成功 / 失败的函数，传递的默认是 response\n\n// 添加请求拦截器\n    axios.interceptors.request.use((config) => {\n        console.log(config)  //在请求直接做的事情\n        return config   //将请求return出去，让then方法调用\n    }, (error)=> {\n        // 对请求错误做些什么\n        return promise.reject(error);\n    });\n\n    // 添加响应拦截器\n    axios.interceptors.response.use((config) => {\n        console.log(config)  //在相应成功做的事情\n        return config   //将请求return出去，让then方法调用\n    }, (error)=> {\n        // 对请求错误做些什么\n        return promise.reject(error);\n    });\n\n    // axios请求\n    axios.get("http://localhost:3000/get?id=1",)\n    .then((value) => {\n    })\n    .catch((reason) => {\n    })\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# 4. 源码难点与流程分析\n\n1. axios与axios的关系\n    axios函数对应的是axios.prototype.request方法通过bind(axiox的实例)产生的函数\n    axios有axios原型上的所有发特定类型请求的方法: get()/post()/put()/delete()\n    axios有axios的实例上的所有属性: defaults/interceptors\n    后面又添加了create()/canceltoken()/all()\n2. axios.create()返回的对象与axios的区别\n    1). 相同: \n        都是一个能发任意请求的函数: request(config)\n        都有发特定请求的各种方法: get()/post()/put()/delete()\n        都有默认配置和拦截器的属性: defaults/interceptors\n    2). 不同:\n        默认匹配的值不一样\n        instance没有axios后面添加的一引起方法: create()/canceltoken()/all()\n3. axios发请求的流程\n    1). 整体流程: request(config)  ===> dispatchrequest(config) ===> xhradapter(config)\n    2). request(config): 将请求拦截器 / dispatchrequest() / 响应拦截器 通过promise链串连起来, 返回promise\n    3). dispatchrequest(config): 转换请求数据 ===> 调用xhradapter()发请求 ===> 请求返回后转换响应数据. 返回promise\n    4). xhradapter(config): 创建xhr对象, 根据config进行相应设置, 发送特定请求, 并接收响应数据, 返回promise \n4. axios的请求/响应拦截器是什么?\n    1). 请求拦截器: 在真正发请求前, 可以对请求进行检查或配置进行特定处理的函数, \n               包括成功/失败的函数, 传递的必须是config\n    2). 响应拦截器: 在请求返回后, 可以对响应数据进行特定处理的函数,\n               包括成功/失败的函数, 传递的默认是response\n5. axios的请求/响应数据转换器是什么?\n    1). 请求转换器: 对请求头和请求体数据进行特定处理的函数\n        setcontenttypeifunset(headers, \'application/json;charset=utf-8\');\n        return json.stringify(data)\n    2). 响应转换器: 将响应体json字符串解析为js对象或数组的函数\n        response.data = json.parse(response.data)\n6. response的整体结构\n    {\n        data,\n        status,\n        statustext,\n        headers,\n        config,\n        request\n    }\n7. error的整体结构\n    {\n        message,\n        request,\n        response\n    }\n8. 如何取消未完成的请求\n    1).当配置了canceltoken对象时, 保存cancel函数\n        创建一个用于将来中断请求的cancelpromise\n        并定义了一个用于取消请求的cancel函数\n        将cancel函数传递出来\n    2.调用cancel()取消请求\n        执行cacel函数, 传入错误信息message\n        内部会让cancelpromise变为成功, 且成功的值为一个cancel对象\n        在cancelpromise的成功回调中中断请求, 并让发请求的proimse失败, 失败的reason为cacel对象',charsets:{cjk:!0}},{title:"git",frontmatter:{title:"git",date:"2021-03-17T15:05:10.000Z",permalink:"/pages/06c08b/",categories:["前端","Git"],tags:[null]},regularPath:"/views/01.%E5%89%8D%E7%AB%AF/60.Git/10.git.html",relativePath:"views/01.前端/60.Git/10.git.md",key:"v-313e0a6c",path:"/pages/06c08b/",headers:[{level:2,title:"一、常用命令：",slug:"一、常用命令",normalizedTitle:"一、常用命令：",charIndex:2},{level:2,title:"二. GitHub远程仓库的使用",slug:"二-github远程仓库的使用",normalizedTitle:"二. github 远程仓库的使用",charIndex:885},{level:3,title:"场景一（关联）：本地有仓库，要和远程仓库做关联",slug:"场景一-关联-本地有仓库-要和远程仓库做关联",normalizedTitle:"场景一（关联）：本地有仓库，要和远程仓库做关联",charIndex:907},{level:3,title:"场景二（推送）：本地有仓库有内容，要推送给远程库",slug:"场景二-推送-本地有仓库有内容-要推送给远程库",normalizedTitle:"场景二（推送）：本地有仓库有内容，要推送给远程库",charIndex:1177},{level:3,title:"场景三（拉取）：本地有仓库有内容，获取远程库新内容",slug:"场景三-拉取-本地有仓库有内容-获取远程库新内容",normalizedTitle:"场景三（拉取）：本地有仓库有内容，获取远程库新内容",charIndex:1532},{level:3,title:"场景四（克隆）：本地无仓库，要获取一个完整的远程库",slug:"场景四-克隆-本地无仓库-要获取一个完整的远程库",normalizedTitle:"场景四（克隆）：本地无仓库，要获取一个完整的远程库",charIndex:1748}],lastUpdated:"5/26/2022, 9:20:36 AM",lastUpdatedTimestamp:1653556836e3,headersStr:"一、常用命令： 二. GitHub远程仓库的使用 场景一（关联）：本地有仓库，要和远程仓库做关联 场景二（推送）：本地有仓库有内容，要推送给远程库 场景三（拉取）：本地有仓库有内容，获取远程库新内容 场景四（克隆）：本地无仓库，要获取一个完整的远程库",content:'# 一、常用命令：\n\n * mkdir XX：创建一个空目录 XX 指目录名\n * pwd：显示当前目录的路径\n * cat xx：查看 xx 文件内容\n * git init：把当前的目录变成可以管理的 git 仓库，生成隐藏的.git 文件夹\n * git add xx：把 xx 文件添加到暂存区\n * git commit -m “xx”：提交文件 -m 后面的是注释，必须写！\n * git status：查看仓库状态\n * git log：查看历史记录\n * git reset --hard HEAD^：往上回退一个版本\n * git reflog：查看历史记录的版本号 id\n * git checkout -- xx：把 xx 文件在工作区的修改全部撤销\n * git rm xx：删除 xx 文件\n * git remote add origin https://github.com/xxxxx/a.git 关联一个远程库\n * git push -u（第一次尽量加上 - u，以后不用）origin master：把当前 master 分支推送到远程库\n * git clone https://github.com/xxxxx 从远程库中克隆\n * git checkout -b dev：创建 dev 分支 并切换到 dev 分支上\n * git branch：查看当前所有的分支\n * git checkout master：切换回 master 分支\n * git merge dev：在当前分支合并 dev 分支\n * git branch -d dev：删除 dev 分支\n * git branch xxx：创建分支 xxx\n * git remote：查看远程库信息\n * git remote -v 查看远程库的详细信息\n * git pull origin master 将远程库的更新拉取到本地并自动合并\n * git push origin master：git 会把 master 分支推送到远程库对应的分支上\n\n\n# 二. GitHub 远程仓库的使用\n\n\n# 场景一（关联）：本地有仓库，要和远程仓库做关联\n\n * git init\n * git add .\n * git commit -m “first commit”\n * 在 GitHub 上创建一个远程仓库\n * git remote add origin https://github.com/xpromise/oa.git (HTTPS)\n * 备注：如果此步关联错了，解决办法如下。\n * 暴力解决：删除.git 文件夹，重新建立本地仓库。\n * 优雅解决：git remote remove origin，再在重新关联仓库\n\n\n# 场景二（推送）：本地有仓库有内容，要推送给远程库\n\n * git push -u origin master （首次加 - u）\n * 根据提示输入用户名密码\n * 我们第一次推送 master 分支时，加上了 - u 参数，Git 不但会把本地的 master 分支内容推送到远程新的 master 分支，还会把本地 master 分支和远程的 master 分支关联起来，在以后的推送时可以简化命令 git push origin master。\n * 备注：正常情况下，成功推送一次后，电脑会记住和账号与密码，下次推送时不会再提示输入。若在电脑不能够自动记住 github 的账户和密码，需执行以下命令解决：git config --global credential.helper store\n\n\n# 场景三（拉取）：本地有仓库有内容，获取远程库新内容\n\n * 第一种拉取方式：git pull origin master，\n   \n   将远程仓库的 master 分支上代码版本复制 / 合并到本地 master 分支上\n\n * 第二种拉取方式：git fetch origin master:tmp\n   \n   新建一个 tmp 分支，将远程仓库的 master 分支上代码版本复制到 tmp 分支上，不会自动合并。\n\n\n# 场景四（克隆）：本地无仓库，要获取一个完整的远程库\n\n备注：只在第一次获取远程库时才需要克隆\n\n * git clone https://github.com/xxx.git (HTTPS)\n\ngit pull --rebase origin master1. 高频命令\ngit add\n将工作文件修改提交到本地暂存区。\n\ngit add .\n将所有修改过的工作文件提交暂存区（常用）。\n\ngit commit -m "XXX"\n为本次修改打一个 tag，当然此条命令通常跟在 git add 后使用。每次 commit 都会有一个对应的 tag，当打包发布时，往往我们会打对应 tag 的版本。所以 tag 是一次有意义记录，它是和某次 git commit 绑定对应的。\n\ngit push origin branch_name\n将本地 branch_name 分支推到远程 branch_name 分支。\n\ngit branch -d branch_name\n删除本地分支 branch_name（注意：删除本地分支时，当前所处分支不能是要删除的该本地分支）。\n\ngit branch -D branch_name\n强制删除本地分支 branch_name（如果 branch_name 分支当前修改的内容没有暂存，那么只有强制删除有效）。\n\ngit push origin --delete branch_name\n删除服务器端分支 branch_name。\n\ngit pull origin branch_name\n拉取服务器端 branch_name 分支的内容并合并到本地 branch_name 分支（一般来说，多人共用一个分支时，如果你有需要提交到服务器的内容，则要先用此命令更新本地分支的内容，然后再将新的内容提交到服务器）。\n\ngit fetch origin branch_name\n拉取服务器端 branch_name 分支的内容，但不合并。此操作一般是不确定远端代码是否存在问题，为保险起见，可先拉取到本地查看，确认无误后，和合并此代码到本地的对应分支下。\n\ngit merge origin/branch_name 合并当前分支到主分支 git merge 当前分支名 再推送即可\n将服务器端 branch_name 分支合并到本地当前分支下。\n\ngit merge branch_name\n将本地 branch_name 分支合并到本地当前分支下。\n\ngit checkout -b branch_name origin/branch_name\n如果本地没有 branch_name 分支，想要基于服务器端 branch_name 分支创建一个，但又不想影响到本地的当前分支。可以使用此命令进行本地 branch_name 分支的创建。\n\ngit branch\n查看本地存在分支。\n\ngit branch -a\n查看所有本地关联到的分支（远端分支也能打印出来，但是关联如果没有建立，那么是不会显示的，此时我们可以使用 git fetch 拉下来所有分支。）。\n\ngit status\n查看当前分支的状态，一般合并分支代码后，用于检查是否有冲突。\n\ngit reset --hard\n回退到 commit id 提交的版本，仅对已经 commit 到本地的代码有效\n\ngit checkout\n该命令是对未提交到缓存区的代码进行撤销。例如本地修改代码之后，在没有执行 git add 命令之前又想撤销操作，可以执行该命令。\n\ngit reset HEAD --\n该命令是将放入暂存区的代码进行撤销，放入到工作区中。\n\ngit config user.name "提交者的名称"\n配置当前仓库下提交者的名称。\n\ngit config user.email "邮箱"\n配置当前仓库下提交者的邮箱。\n\ngit config --global user.name "用户名"\n配置全局提交者的名称。\n\ngit config --global user.email "邮箱"\n配置全局提交者的邮箱。\n\ngit config --global --list\n查看我们的配置\n\n 2. git merge 和 git rebase\n    git merge 和 git rebase 使用场景\n\ngit merge 一般用于新功能的开发和 bug 修复；\ngit rebase 在主分支上进行开发，或者 Pull 的冲突解决；\ngit merge 主要是在主分支上进行使用，而 git rebase 是在从分支上进行使用。\ngit merge 和 git rebase 区别：\n\ngit merge 会生成新的 commit ，而 git rebase 不会生成新的 commit ，会保留比较完整的提交历史。\ngit merge 是按照时间顺序进行合并，而 git rebase 是将 主分支顺序不变，插入到从分支的前端。\ngit rebase 注意事项： 如果分支已经 Push 到了远程仓库就不要对该分支进行 git rebase 操作。如果已经提交到了远程分支再进行 Push 的时候容易出现冲突，我们可以采用 git push --force ，但是最好是永远不要使用这个命令。\n\n// 查看本地仓库配置\ngit config --local --list\n\n// 如果有本地与远程关联，保留 (多仓库关联)/ 不保留，看实际需要\n// 此处我选择不保留，即单仓库关联\ngit remote remove origin\n\n// 添加本地仓库与远程仓库关联\ngit remote add origin XXX.git\n\n// 强制推送到远程仓库，且覆盖远程代码库\ngit push -f --set-upstream origin master:master\n\n\n# 本地 master 分支关联远程 origin/master 分支\n\n\n# 方式一\n\ngit branch --set-upstream-to=origin/master master\n\n\n# 方式二 (弃用)\n\ngit branch --set-upstream master origin/master\n\n\n# 方式三\n\ngit branch -u origin/master master\n\n$ git config --global --replace-all user.name “要修改的用户名”\n\n$ git config --global --replace-all user.email"要修改的邮箱"\n\n$ git config --global --replace-all user.password “要修改的密码”\n\n查看修改完后的用户名：\n\n$ git config user.name\n\n查看修改完后的邮箱：\n\n$ git config user.email\n\n查看修改完后的密码：\n\n$ git config user.password\n\n由于提供的证书是内部签发，客户端需要执行：\n\ngit config --global http.sslVerify false 否则会提示：SSL certificate problem: self signed certificate\n\n然后再 idea 中拉取代码。就会提示输入用户名和密码\n\ngithub 无法访问\nC:\\Windows\\System32\\drivers\\etc 这下面改 hosts\n#github\n192.30.253.113 github.com\n192.30.253.113 github.com\n192.30.253.118 gist.github.com\n192.30.253.119 gist.github.com',normalizedContent:'# 一、常用命令：\n\n * mkdir xx：创建一个空目录 xx 指目录名\n * pwd：显示当前目录的路径\n * cat xx：查看 xx 文件内容\n * git init：把当前的目录变成可以管理的 git 仓库，生成隐藏的.git 文件夹\n * git add xx：把 xx 文件添加到暂存区\n * git commit -m “xx”：提交文件 -m 后面的是注释，必须写！\n * git status：查看仓库状态\n * git log：查看历史记录\n * git reset --hard head^：往上回退一个版本\n * git reflog：查看历史记录的版本号 id\n * git checkout -- xx：把 xx 文件在工作区的修改全部撤销\n * git rm xx：删除 xx 文件\n * git remote add origin https://github.com/xxxxx/a.git 关联一个远程库\n * git push -u（第一次尽量加上 - u，以后不用）origin master：把当前 master 分支推送到远程库\n * git clone https://github.com/xxxxx 从远程库中克隆\n * git checkout -b dev：创建 dev 分支 并切换到 dev 分支上\n * git branch：查看当前所有的分支\n * git checkout master：切换回 master 分支\n * git merge dev：在当前分支合并 dev 分支\n * git branch -d dev：删除 dev 分支\n * git branch xxx：创建分支 xxx\n * git remote：查看远程库信息\n * git remote -v 查看远程库的详细信息\n * git pull origin master 将远程库的更新拉取到本地并自动合并\n * git push origin master：git 会把 master 分支推送到远程库对应的分支上\n\n\n# 二. github 远程仓库的使用\n\n\n# 场景一（关联）：本地有仓库，要和远程仓库做关联\n\n * git init\n * git add .\n * git commit -m “first commit”\n * 在 github 上创建一个远程仓库\n * git remote add origin https://github.com/xpromise/oa.git (https)\n * 备注：如果此步关联错了，解决办法如下。\n * 暴力解决：删除.git 文件夹，重新建立本地仓库。\n * 优雅解决：git remote remove origin，再在重新关联仓库\n\n\n# 场景二（推送）：本地有仓库有内容，要推送给远程库\n\n * git push -u origin master （首次加 - u）\n * 根据提示输入用户名密码\n * 我们第一次推送 master 分支时，加上了 - u 参数，git 不但会把本地的 master 分支内容推送到远程新的 master 分支，还会把本地 master 分支和远程的 master 分支关联起来，在以后的推送时可以简化命令 git push origin master。\n * 备注：正常情况下，成功推送一次后，电脑会记住和账号与密码，下次推送时不会再提示输入。若在电脑不能够自动记住 github 的账户和密码，需执行以下命令解决：git config --global credential.helper store\n\n\n# 场景三（拉取）：本地有仓库有内容，获取远程库新内容\n\n * 第一种拉取方式：git pull origin master，\n   \n   将远程仓库的 master 分支上代码版本复制 / 合并到本地 master 分支上\n\n * 第二种拉取方式：git fetch origin master:tmp\n   \n   新建一个 tmp 分支，将远程仓库的 master 分支上代码版本复制到 tmp 分支上，不会自动合并。\n\n\n# 场景四（克隆）：本地无仓库，要获取一个完整的远程库\n\n备注：只在第一次获取远程库时才需要克隆\n\n * git clone https://github.com/xxx.git (https)\n\ngit pull --rebase origin master1. 高频命令\ngit add\n将工作文件修改提交到本地暂存区。\n\ngit add .\n将所有修改过的工作文件提交暂存区（常用）。\n\ngit commit -m "xxx"\n为本次修改打一个 tag，当然此条命令通常跟在 git add 后使用。每次 commit 都会有一个对应的 tag，当打包发布时，往往我们会打对应 tag 的版本。所以 tag 是一次有意义记录，它是和某次 git commit 绑定对应的。\n\ngit push origin branch_name\n将本地 branch_name 分支推到远程 branch_name 分支。\n\ngit branch -d branch_name\n删除本地分支 branch_name（注意：删除本地分支时，当前所处分支不能是要删除的该本地分支）。\n\ngit branch -d branch_name\n强制删除本地分支 branch_name（如果 branch_name 分支当前修改的内容没有暂存，那么只有强制删除有效）。\n\ngit push origin --delete branch_name\n删除服务器端分支 branch_name。\n\ngit pull origin branch_name\n拉取服务器端 branch_name 分支的内容并合并到本地 branch_name 分支（一般来说，多人共用一个分支时，如果你有需要提交到服务器的内容，则要先用此命令更新本地分支的内容，然后再将新的内容提交到服务器）。\n\ngit fetch origin branch_name\n拉取服务器端 branch_name 分支的内容，但不合并。此操作一般是不确定远端代码是否存在问题，为保险起见，可先拉取到本地查看，确认无误后，和合并此代码到本地的对应分支下。\n\ngit merge origin/branch_name 合并当前分支到主分支 git merge 当前分支名 再推送即可\n将服务器端 branch_name 分支合并到本地当前分支下。\n\ngit merge branch_name\n将本地 branch_name 分支合并到本地当前分支下。\n\ngit checkout -b branch_name origin/branch_name\n如果本地没有 branch_name 分支，想要基于服务器端 branch_name 分支创建一个，但又不想影响到本地的当前分支。可以使用此命令进行本地 branch_name 分支的创建。\n\ngit branch\n查看本地存在分支。\n\ngit branch -a\n查看所有本地关联到的分支（远端分支也能打印出来，但是关联如果没有建立，那么是不会显示的，此时我们可以使用 git fetch 拉下来所有分支。）。\n\ngit status\n查看当前分支的状态，一般合并分支代码后，用于检查是否有冲突。\n\ngit reset --hard\n回退到 commit id 提交的版本，仅对已经 commit 到本地的代码有效\n\ngit checkout\n该命令是对未提交到缓存区的代码进行撤销。例如本地修改代码之后，在没有执行 git add 命令之前又想撤销操作，可以执行该命令。\n\ngit reset head --\n该命令是将放入暂存区的代码进行撤销，放入到工作区中。\n\ngit config user.name "提交者的名称"\n配置当前仓库下提交者的名称。\n\ngit config user.email "邮箱"\n配置当前仓库下提交者的邮箱。\n\ngit config --global user.name "用户名"\n配置全局提交者的名称。\n\ngit config --global user.email "邮箱"\n配置全局提交者的邮箱。\n\ngit config --global --list\n查看我们的配置\n\n 2. git merge 和 git rebase\n    git merge 和 git rebase 使用场景\n\ngit merge 一般用于新功能的开发和 bug 修复；\ngit rebase 在主分支上进行开发，或者 pull 的冲突解决；\ngit merge 主要是在主分支上进行使用，而 git rebase 是在从分支上进行使用。\ngit merge 和 git rebase 区别：\n\ngit merge 会生成新的 commit ，而 git rebase 不会生成新的 commit ，会保留比较完整的提交历史。\ngit merge 是按照时间顺序进行合并，而 git rebase 是将 主分支顺序不变，插入到从分支的前端。\ngit rebase 注意事项： 如果分支已经 push 到了远程仓库就不要对该分支进行 git rebase 操作。如果已经提交到了远程分支再进行 push 的时候容易出现冲突，我们可以采用 git push --force ，但是最好是永远不要使用这个命令。\n\n// 查看本地仓库配置\ngit config --local --list\n\n// 如果有本地与远程关联，保留 (多仓库关联)/ 不保留，看实际需要\n// 此处我选择不保留，即单仓库关联\ngit remote remove origin\n\n// 添加本地仓库与远程仓库关联\ngit remote add origin xxx.git\n\n// 强制推送到远程仓库，且覆盖远程代码库\ngit push -f --set-upstream origin master:master\n\n\n# 本地 master 分支关联远程 origin/master 分支\n\n\n# 方式一\n\ngit branch --set-upstream-to=origin/master master\n\n\n# 方式二 (弃用)\n\ngit branch --set-upstream master origin/master\n\n\n# 方式三\n\ngit branch -u origin/master master\n\n$ git config --global --replace-all user.name “要修改的用户名”\n\n$ git config --global --replace-all user.email"要修改的邮箱"\n\n$ git config --global --replace-all user.password “要修改的密码”\n\n查看修改完后的用户名：\n\n$ git config user.name\n\n查看修改完后的邮箱：\n\n$ git config user.email\n\n查看修改完后的密码：\n\n$ git config user.password\n\n由于提供的证书是内部签发，客户端需要执行：\n\ngit config --global http.sslverify false 否则会提示：ssl certificate problem: self signed certificate\n\n然后再 idea 中拉取代码。就会提示输入用户名和密码\n\ngithub 无法访问\nc:\\windows\\system32\\drivers\\etc 这下面改 hosts\n#github\n192.30.253.113 github.com\n192.30.253.113 github.com\n192.30.253.118 gist.github.com\n192.30.253.119 gist.github.com',charsets:{cjk:!0}},{title:"webpack-npm环境搭建",frontmatter:{title:"webpack-npm环境搭建",date:"2021-03-17T14:47:17.000Z",permalink:"/pages/df6335/",categories:["前端","Webpack"],tags:[null]},regularPath:"/views/01.%E5%89%8D%E7%AB%AF/70.Webpack/10.webpack-npm%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html",relativePath:"views/01.前端/70.Webpack/10.webpack-npm环境搭建.md",key:"v-77deca2b",path:"/pages/df6335/",headers:[{level:2,title:"webpack快速入门教程",slug:"webpack快速入门教程",normalizedTitle:"webpack 快速入门教程",charIndex:2},{level:3,title:"1、了解Webpack相关",slug:"_1、了解webpack相关",normalizedTitle:"1、了解 webpack 相关",charIndex:21},{level:3,title:"2、开启项目",slug:"_2、开启项目",normalizedTitle:"2、开启项目",charIndex:928},{level:3,title:"3、编译打包应用",slug:"_3、编译打包应用",normalizedTitle:"3、编译打包应用",charIndex:1233},{level:3,title:"4、使用webpack配置文件",slug:"_4、使用webpack配置文件",normalizedTitle:"4、使用 webpack 配置文件",charIndex:1836},{level:3,title:"5、打包less资源",slug:"_5、打包less资源",normalizedTitle:"5、打包 less 资源",charIndex:2483},{level:3,title:"6、js语法检查",slug:"_6、js语法检查",normalizedTitle:"6、js 语法检查",charIndex:3070},{level:3,title:"7、js语法转换",slug:"_7、js语法转换",normalizedTitle:"7、js 语法转换",charIndex:4447},{level:3,title:"8、 js兼容性处理",slug:"_8、-js兼容性处理",normalizedTitle:"8、 js 兼容性处理",charIndex:4969},{level:3,title:"9、打包样式文件中的图片资源",slug:"_9、打包样式文件中的图片资源",normalizedTitle:"9、打包样式文件中的图片资源",charIndex:6065},{level:3,title:"10、打包html文件",slug:"_10、打包html文件",normalizedTitle:"10、打包 html 文件",charIndex:6808},{level:3,title:"11、打包html中图片资源",slug:"_11、打包html中图片资源",normalizedTitle:"11、打包 html 中图片资源",charIndex:7344},{level:3,title:"12、打包其他资源",slug:"_12、打包其他资源",normalizedTitle:"12、打包其他资源",charIndex:7728},{level:3,title:"13、自动编译打包运行",slug:"_13、自动编译打包运行",normalizedTitle:"13、自动编译打包运行",charIndex:8919},{level:3,title:"14、热模替换功能",slug:"_14、热模替换功能",normalizedTitle:"14、热模替换功能",charIndex:9620},{level:3,title:"15、devtool",slug:"_15、devtool",normalizedTitle:"15、devtool",charIndex:10161},{level:3,title:"16、准备生产环境",slug:"_16、准备生产环境",normalizedTitle:"16、准备生产环境",charIndex:10711},{level:3,title:"17、清除打包文件目录",slug:"_17、清除打包文件目录",normalizedTitle:"17、清除打包文件目录",charIndex:12238},{level:3,title:"18、提取css成单独文件",slug:"_18、提取css成单独文件",normalizedTitle:"18、提取 css 成单独文件",charIndex:12533},{level:3,title:"19、添加css兼容",slug:"_19、添加css兼容",normalizedTitle:"19、添加 css 兼容",charIndex:13062},{level:3,title:"20、压缩css",slug:"_20、压缩css",normalizedTitle:"20、压缩 css",charIndex:14178},{level:3,title:"21、压缩html",slug:"_21、压缩html",normalizedTitle:"21、压缩 html",charIndex:14780}],lastUpdated:"4/28/2022, 6:08:46 PM",lastUpdatedTimestamp:1651169326e3,headersStr:"webpack快速入门教程 1、了解Webpack相关 2、开启项目 3、编译打包应用 4、使用webpack配置文件 5、打包less资源 6、js语法检查 7、js语法转换 8、 js兼容性处理 9、打包样式文件中的图片资源 10、打包html文件 11、打包html中图片资源 12、打包其他资源 13、自动编译打包运行 14、热模替换功能 15、devtool 16、准备生产环境 17、清除打包文件目录 18、提取css成单独文件 19、添加css兼容 20、压缩css 21、压缩html",content:"# webpack 快速入门教程\n\n\n# 1、了解 Webpack 相关\n\n * 什么是 webpack\n   * Webpack 是一个模块打包器 (bundler)。\n   * 在 Webpack 看来，前端的所有资源文件 (js/json/css/img/less/...) 都会作为模块处理\n   * 它将根据模块的依赖关系进行静态分析，生成对应的静态资源\n * 五个核心概念\n   * Entry：入口起点 (entry point) 指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。\n   * Output：output 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件，默认值为 ./dist。\n   * Loader：loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只能解析 JavaScript）。\n   * Plugins：插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量等。\n   * Mode：模式，有生产模式 production 和开发模式 development\n * 理解 Loader\n   * Webpack 本身只能加载 JS/JSON 模块，如果要加载其他类型的文件 (模块)，就需要使用对应的 loader 进行转换 / 加载\n   * Loader 本身也是运行在 node.js 环境中的 JavaScript 模块\n   * 它本身是一个函数，接受源文件作为参数，返回转换的结果\n   * loader 一般以 xxx-loader 的方式命名，xxx 代表了这个 loader 要做的转换功能，比如 json-loader。\n * 理解 Plugins\n   * 插件可以完成一些 loader 不能完成的功能。\n   * 插件的使用一般是在 webpack 的配置信息 plugins 选项中指定。\n * 配置文件 (默认)\n   * webpack.config.js : 是一个 node 模块，返回一个 json 格式的配置信息对象\n\n\n# 2、开启项目\n\n * 初始化项目：\n   \n   * 生成 package.json 文件\n     \n     {\n       \"name\": \"webpack_test\",\n       \"version\": \"1.0.0\"\n     } \n     \n     \n     1\n     2\n     3\n     4\n     \n\n * 安装 webpack\n   \n   * npm install webpack webpack-cli -g // 全局安装，作为指令使用\n   * npm install webpack webpack-cli -D // 本地安装，作为本地依赖使用\n\n\n# 3、编译打包应用\n\n * 创建 js 文件\n   * src/js/app.js\n   * src/js/module1.js\n   * src/js/module2.js\n   * src/js/module3.js\n * 创建 json 文件\n   * src/json/data.json\n * 创建主页面:\n   * src/index.html\n * 运行指令\n   * 开发配置指令：webpack src/js/app.js -o dist/js/app.js --mode=development\n     * 功能: webpack 能够编译打包 js 和 json 文件，并且能将 es6 的模块化语法转换成浏览器能识别的语法\n   * 生产配置指令：webpack src/js/app.js -o dist/js/app.js --mode=production\n     * 功能：在开发配置功能上加上一个压缩代码\n * 结论：\n   * webpack 能够编译打包 js 和 json 文件\n   * 能将 es6 的模块化语法转换成浏览器能识别的语法\n   * 能压缩代码\n * 缺点：\n   * 不能编译打包 css、img 等文件\n   * 不能将 js 的 es6 基本语法转化为 es5 以下语法\n * 改善：使用 webpack 配置文件解决，自定义功能\n\n\n# 4、使用 webpack 配置文件\n\n * 目的：在项目根目录定义配置文件，通过自定义配置文件，还原以上功能\n\n * 文件名称：webpack.config.js\n\n * 文件内容：\n   \n   const { resolve } = require('path'); //node内置核心模块，用来设置路径。\n   module.exports = {\n     entry: './src/js/app.js',   // 入口文件配置（简写）\n     /*完整写法：\n   \tentry:{\n   \t  main:'./src/js/app.js'\n   \t}\n     */\n     output: {                     // 输出配置\n       filename: './js/built.js',      // 输出文件名\n       path: resolve(__dirname, 'build')   //输出文件路径配置\n     },\n     mode: 'development'   //开发环境(二选一)\n     //mode: 'production'   //生产环境(二选一)\n   };\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   \n\n * 运行指令： webpack\n\n\n# 5、打包 less 资源\n\n * 概述：less 文件 webpack 不能解析，需要借助 loader 编译解析\n\n * 创建 less 文件\n   \n   * src/less/test1.less\n   * src/less/test2.less\n\n * 入口 app.js 文件\n   \n   * 引入 less 资源\n\n * 安装 loader\n   \n   * npm install css-loader style-loader less-loader less --save-dev\n\n * 配置 loader\n   \n   {\n   \ttest: /\\.less$/, // 检查文件是否以.less结尾（检查是否是less文件）\n   \tuse: [  // 数组中loader执行是从下到上，从右到左顺序执行\n   \t  'style-loader', // 创建style标签，添加上js中的css代码\n   \t  'css-loader', // 将css以commonjs方式整合到js文件中\n   \t  'less-loader'  // 将less文件解析成css文件\n   \t]\n   },\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   \n\n * 运行指令：webpack\n\n\n# 6、js 语法检查\n\n * 概述：对 js 基本语法错误 / 隐患，进行提前检查\n\n * 安装 loader\n   \n   * npm install eslint-loader eslint --save-dev\n\n * 备注 1：在：eslint.org 网站 -> userGuide -> Configuring ESLint 查看如何配置\n\n * 备注 2：在：eslint.org 网站 -> userGuide -> Rules 查看所有规则\n\n * 配置 loader\n   \n   module: {\n     rules: [\n       {\n         test: /\\.js$/,  //只检测js文件\n         exclude: /node_modules/,  //排除node_modules文件夹\n         enforce: \"pre\",  //提前加载使用\n         use: { //使用eslint-loader解析\n           loader: \"eslint-loader\" \n         }\n       }        \n     ]\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   \n\n * 修改 package.json（需要删除注释才能生效）\n   \n   \"eslintConfig\": {\n   \t\"parserOptions\": {\n   \t  \"ecmaVersion\": 6, \t\t// 支持es6\n   \t  \"sourceType\": \"module\"\t// 使用es6模块化\n   \t},\n   \t\"env\": { // 设置环境\n   \t  \"browser\": true,   // 支持浏览器环境： 能够使用window上的全局变量\n   \t  \"node\": true       // 支持服务器环境:  能够使用node上global的全局变量\n   \t},\n   \t\"globals\": {\t// 声明使用的全局变量, 这样即使没有定义也不会报错了\n   \t  \"$\": \"readonly\"\t// $ 只读变量\n   \t},\n   \t\"rules\": {  // eslint检查的规则  0 忽略 1 警告 2 错误\n   \t  \"no-console\": 0, \t// 不检查console\n   \t  \"eqeqeq\": 2,\t// 用==而不用===就报错\n   \t  \"no-alert\": 2 // 不能使用alert\n   \t},\n   \t\"extends\": \"eslint:recommended\" // 使用eslint推荐的默认规则 https://cn.eslint.org/docs/rules/\n   },\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   \n\n * 运行指令：webpack\n\n\n# 7、js 语法转换\n\n * 概述：将浏览器不能识别的新语法转换成原来识别的旧语法，做浏览器兼容性处理\n\n * 安装 loader\n   \n   * npm install babel-loader @babel/core @babel/preset-env --save-dev\n\n * 配置 loader\n   \n   module: {\n     rules: [\n       {\n         test: /\\.js$/,\n         exclude: /node_modules/,\n         use: {\n           loader: \"babel-loader\",\n           options: {\n             presets: ['@babel/preset-env']\n           }\n         }\n       }\n     ]\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   \n\n * 运行指令：webpack\n\n\n# 8、 js 兼容性处理\n\n#### 第一种方法：使用经典的 polyfill\n\n * 安装包\n   \n   * npm install @babel/polyfill\n\n * 使用\n   \n   - app.js\n   \n   \timport '@babel/polyfill'; // 包含ES6的高级语法的转换\n   \n   \n   1\n   2\n   3\n   \n\n * 优点：解决 babel 只能转换部分低级语法的问题 (如：let/const/ 解构赋值...)，引入 polyfill 可以转换高级语法 (如：Promise...)\n\n * 缺点：将所有高级语法都进行了转换，但实际上可能只使用一部分\n\n * 解决：需要按需加载（使用了什么高级语法，就转换什么，而其他的不转换）\n\n#### 第二种方法：借助按需引入 core-js 按需引入\n\n * 安装包\n   \n   * npm install core-js\n\n * 配置 loader\n   \n   {\n   \ttest: /\\.js$/,\n   \texclude: /(node_modules)/,\n   \tuse: {\n   \t  loader: 'babel-loader',\n   \t  options: {\n   \t    presets: [\n   \t      [\n   \t        '@babel/preset-env',\n   \t        {\n   \t          useBuiltIns: 'usage',  // 按需引入需要使用polyfill\n   \t          corejs: { version: 3 }, // 解决找不到corejs\n   \t          targets: { // 指定兼容性处理哪些浏览器\n   \t            \"chrome\": \"58\",\n   \t            \"ie\": \"9\",\n   \t          }\n   \t        }\n   \t      ]\n   \t    ],\n   \t    cacheDirectory: true, // 开启babel缓存\n   \t  }\n   \t}\n   },\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   \n\n\n# 9、打包样式文件中的图片资源\n\n * 概述：图片文件 webpack 不能解析，需要借助 loader 编译解析\n\n * 添加 2 张图片:\n   \n   * 小图，小于 8kb: src/images/vue.png\n   * 大图，大于 8kb: src/images/react.jpg\n\n * 在 less 文件中通过背景图的方式引入图片\n\n * 安装 loader\n   \n   * npm install file-loader url-loader --save-dev\n   * 补充：url-loader 是对象 file-loader 的上层封装，使用时需配合 file-loader 使用。\n\n * 配置 loader\n   \n   {\n   \ttest: /\\.(png|jpg|gif)$/,\n   \tuse: {\n   \t  loader: 'url-loader',\n   \t  options: {\n   \t    limit: 8192, // 8kb --\x3e 8kb以下的图片会base64处理\n   \t    outputPath: 'images', // 决定文件本地输出路径\n   \t    publicPath: 'images',  // 决定图片的url路径\n   \t    name: '[hash:8].[ext]' // 修改文件名称 [hash:8] hash值取8位  [ext] 文件扩展名\n   \t  }\n   \t}\n   },\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   \n\n * 运行指令：webpack\n\n\n# 10、打包 html 文件\n\n * 概述：html 文件 webpack 不能解析，需要借助插件编译解析\n\n * 添加 html 文件\n   \n   * src/index.html\n   * 注意不要在 html 中引入任何 css 和 js 文件\n\n * 安装插件 Plugins\n   \n   * npm install html-webpack-plugin --save-dev\n\n * 在 webpack.config.js 中引入插件（插件都需要手动引入，而 loader 会自动加载）\n   \n   * const HtmlWebpackPlugin = require('html-webpack-plugin')\n\n * 配置插件 Plugins\n   \n   plugins: [\n     new HtmlWebpackPlugin({\n       template: './src/index.html', // 以当前文件为模板创建新的HtML(1. 结构和原来一样 2. 会自动引入打包的资源)\n     }),\n   ]\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n\n * 运行指令：webpack\n\n\n# 11、打包 html 中图片资源\n\n * 概述：html 中的图片 url-loader 没法处理，它只能处理 js 中引入的图片 / 样式中图片，不能处理 html 中 img 标签，需要引入其他 html-loader 处理。\n\n * 添加图片\n   \n   * 在 src/index.html 添加两个 img 标签\n\n * 安装 loader\n   \n   * npm install html-loader --save-dev\n\n * 配置 loader\n   \n   {\n     test: /\\.(html)$/,\n     use: {\n       loader: 'html-loader'\n     }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   \n\n * 运行指令：webpack\n\n\n# 12、打包其他资源\n\n * 概述：其他资源 webpack 不能解析，需要借助 loader 编译解析\n\n * 添加字体文件\n   \n   * src/media/iconfont.eot\n   * src/media/iconfont.svg\n   * src/media/iconfont.ttf\n   * src/media/iconfont.woff\n   * src/media/iconfont.woff2\n\n * 修改样式\n   \n   @font-face {\n     font-family: 'iconfont';\n     src: url('../media/iconfont.eot');\n     src: url('../media/iconfont.eot?#iefix') format('embedded-opentype'),\n     url('../media/iconfont.woff2') format('woff2'),\n     url('../media/iconfont.woff') format('woff'),\n     url('../media/iconfont.ttf') format('truetype'),\n     url('../media/iconfont.svg#iconfont') format('svg');\n   }\n   \n   .iconfont {\n     font-family: \"iconfont\" !important;\n     font-size: 16px;\n     font-style: normal;\n     -webkit-font-smoothing: antialiased;\n     -moz-osx-font-smoothing: grayscale;\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   \n\n * 修改 html，添加字体\n\n * 配置 loader\n   \n   {\n   \ttest: /\\.(eot|svg|woff|woff2|ttf|mp3|mp4|avi)$/,  // 处理其他资源\n   \tloader: 'file-loader',\n   \toptions: {\n   \t  outputPath: 'media',\n   \t  name: '[hash:8].[ext]'\n   \t}\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   \n\n * 运行指令：webpack\n\n\n# 13、自动编译打包运行\n\n * 安装 loader\n   \n   * npm install webpack-dev-server --save-dev\n\n * 详细配置见官网：指南 -> 开发环境 -> 使用 webpack-dev-server\n   \n   * 修改 webpack 配置对象（webpack.config.js 中，注意不是 loader 中）\n   \n   //在plugins后\n   devServer: {\n     open: true, // 自动打开浏览器\n     compress: true, // 启动gzip压缩\n     port: 3000, // 端口号\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   \n\n * 修改 url-loader 部分配置\n   \n   * 因为构建工具以 build 为根目录，不用再找 build 了（该文档已经配置好了，不需要修改了）\n   \n   * publicPath: '../build/images/'   改为  publicPath: 'images/'\n     \n     \n     1\n     \n\n * 修改 package.json 中 scripts 指令\n   \n   * \"start\": \"webpack-dev-server\",\n\n * 运行指令：npm run start\n   \n   * 注意 webpack-dev-server 指令才能启动 devServer 配置，然后配置到 package.json 中才行\n\n\n# 14、热模替换功能\n\n * 概述：热模块替换（HMR）是 webpack 提供的最有用的功能之一。它允许在运行时更新所有类型的模块，而无需完全刷新（只更新变化的模块，不变的模块不更新）。\n\n * 详细配置见官网：指南 -> 模块热替换\n\n * 修改 devServer 配置\n   \n     //在plugins后\n   devServer: {\n     contentBase: resolve(__dirname, 'build'), // 运行项目的目录\n     open: true, // 自动打开浏览器\n     compress: true, // 启动gzip压缩\n     port: 3000, // 端口号\n     hot: true // 开启热模替换功能 HMR\n     }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   \n\n * 问题：html 文件无法自动更新了，需要在配置文件 (webpack.config.js) 增加一个入口\n   \n     entry: ['./src/js/app.js','./src/index.html']\n   \n   \n   1\n   \n\n\n# 15、devtool\n\n * 概述： 一种将压缩 / 编译文件中的代码映射回源文件中的原始位置的技术，让我们调试代码不在困难\n * 详细配置见官网：配置 -> devtool\n * 介绍\n   * cheap 只保留行，编译速度快\n   * eval webpack 生成的代码（每个模块彼此分开，并使用模块名称进行注释）, 编译速度快\n   * inline 以 base64 方式将 source-map 嵌入到代码中，缺点造成编译后代码体积很大\n * 推荐使用：\n   * 开发环境： cheap-module-eval-source-map\n   * 生产环境： cheap-module-source-map\n\n>  * 添加配置 (webpack.config.js) 和五大模块同级\n>    \n>    devtool:'cheap-module-eval-source-map'\t\t//开发环境\n>    devtool:'cheap-module-source-map'\t\t\t//生产环境\n>    \n>    \n>    1\n>    2\n>    \n> \n> 以上就是 webpack 开发环境的配置，可以在内存中自动打包所有类型文件并有自动编译运行、热更新等功能。\n\n\n# 16、准备生产环境\n\n * 创建文件夹 config，将 webpack.config.js 复制两份\n   \n   * ./config/webpack.dev.js\n   * ./config/webpack.prod.js\n\n * 修改 webpack.prod.js 配置，删除 webpack-dev-server 配置\n   \n   // / 代表根路径(等价于这个：http://localhost:5000/)，以后项目上线所有路径都以当前网址为根路径出发\n   module.exports = {\n     output: {\n       path: resolve(__dirname, '../build'), // 文件输出目录\n       filename: './js/built.js', // 文件输出名称\n       publicPath: '/'  // 所有输出资源在引入时的公共路径，若loader中也指定了publicPath，会以loader的为准。\n     },\n   module: {\n     rules: [\n   \t{\n           test: /\\.(png|jpg|gif)$/,\n           use: {\n             loader: 'url-loader',\n             options: {\n               limit: 8192, \n               outputPath: 'images', \n               publicPath: '/images',  // 重写publicPath，需要在路径前面加上 /\n               name: '[hash:8].[ext]' \n             }\n           }\n         },\t\n     ]\n   },\n     mode: 'production',  //修改为生产环境\n   devtool: 'cheap-module-source-map' // 修改为生产环境的错误提示\n   // 删除devServer\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   25\n   26\n   27\n   \n\n * 修改 package.json 的指令\n   \n   * \"start\": \"webpack-dev-server --config ./config/webpack.dev.js\"\n   * \"dev\": \"webpack-dev-server --config ./config/webpack.dev.js\"\n   * \"build\": \"webpack --config ./config/webpack.prod.js\"\n\n * 开发环境指令\n   \n   * npm start\n   * npm run dev\n\n * 生产环境指令\n   \n   * npm run build\n   * 注意：生产环境代码需要部署到服务器上才能运行 （serve 这个库能帮助我们快速搭建一个静态资源服务器）\n     * npm i serve -g\n     * serve -s build -p 5000\n\n\n# 17、清除打包文件目录\n\n * 概述：每次打包生成了文件，都需要手动删除，引入插件帮助我们自动删除上一次的文件\n * 安装插件\n   * npm install clean-webpack-plugin --save-dev\n * 引入插件\n   * const {CleanWebpackPlugin} = require ('clean-webpack-plugin'); // 注意要解构赋值！！！\n * 配置插件\n   * new CleanWebpackPlugin () // 自动清除 output.path 目录下的文件\n * 运行指令：npm run build\n\n\n# 18、提取 css 成单独文件\n\n * 安装插件\n   \n   * npm install mini-css-extract-plugin --save-dev\n\n * 引入插件\n   \n   * const MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\n\n * 配置 loader\n   \n   {\n     test: /\\.less$/,\n     use: [\n       MiniCssExtractPlugin.loader,\n       'css-loader',\n       'less-loader',\n     ]\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   \n\n * 配置插件\n   \n   new MiniCssExtractPlugin({\n     filename: \"css/[name].css\",\n   })\n   \n   \n   1\n   2\n   3\n   \n\n * 运行指令\n   \n   * npm run build\n   * serve -s build\n\n\n# 19、添加 css 兼容\n\n * 安装 loader\n   \n   * npm install postcss-loader postcss-flexbugs-fixes postcss-preset-env postcss-normalize autoprefixer --save-dev\n\n * 配置 loader (less-loader)\n   \n   {\n     test: /\\.less$/,\n     use: [\n       MiniCssExtractPlugin.loader,\n       'css-loader',\n       {\n         loader: 'postcss-loader',\n         options: {\n           ident: 'postcss',\n           plugins: () => [\n             require('postcss-flexbugs-fixes'),\n             require('postcss-preset-env')({\n               autoprefixer: {\n                 flexbox: 'no-2009',\n               },\n               stage: 3,\n             }),\n             require('postcss-normalize')(),\n           ],\n           sourceMap: true,\n         },\n       },\n       'less-loader',\n     ]\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   25\n   \n\n * 添加配置文件: .browserslistrc\n   \n   # Browsers that we support\n   \n   last 1 version\n   > 1%\n   IE 10 # sorry\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n\n * 运行指令：\n   \n   * npm run build\n   * serve -s build\n\n\n# 20、压缩 css\n\n * 安装插件\n   \n   * npm install optimize-css-assets-webpack-plugin --save-dev\n\n * 引入插件\n   \n   * const OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin');\n\n * 配置插件\n   \n   new OptimizeCssAssetsPlugin({\n     cssProcessorPluginOptions: {\n       preset: ['default', { discardComments: { removeAll: true } }],\n     },\n     cssProcessorOptions: { // 解决没有source map问题\n       map: {\n         inline: false,\n         annotation: true,\n       }\n     }\n   })\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   \n\n * 运行指令：\n   \n   * npm run build\n   * serve -s build\n\n\n# 21、压缩 html\n\n * 修改插件配置\n   \n   new HtmlWebpackPlugin({\n     template: './src/index.html',\n     minify: {\n       removeComments: true,\n       collapseWhitespace: true,\n       removeRedundantAttributes: true,\n       useShortDoctype: true,\n       removeEmptyAttributes: true,\n       removeStyleLinkTypeAttributes: true,\n       keepClosingSlash: true,\n       minifyJS: true,\n       minifyCSS: true,\n       minifyURLs: true,\n     }\n   })\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   \n\n * 运行指令：\n   \n   * npm run build\n   * serve -s dist\n\n> 以上就是 webpack 生产环境的配置，可以生成打包后的文件。",normalizedContent:"# webpack 快速入门教程\n\n\n# 1、了解 webpack 相关\n\n * 什么是 webpack\n   * webpack 是一个模块打包器 (bundler)。\n   * 在 webpack 看来，前端的所有资源文件 (js/json/css/img/less/...) 都会作为模块处理\n   * 它将根据模块的依赖关系进行静态分析，生成对应的静态资源\n * 五个核心概念\n   * entry：入口起点 (entry point) 指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。\n   * output：output 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件，默认值为 ./dist。\n   * loader：loader 让 webpack 能够去处理那些非 javascript 文件（webpack 自身只能解析 javascript）。\n   * plugins：插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量等。\n   * mode：模式，有生产模式 production 和开发模式 development\n * 理解 loader\n   * webpack 本身只能加载 js/json 模块，如果要加载其他类型的文件 (模块)，就需要使用对应的 loader 进行转换 / 加载\n   * loader 本身也是运行在 node.js 环境中的 javascript 模块\n   * 它本身是一个函数，接受源文件作为参数，返回转换的结果\n   * loader 一般以 xxx-loader 的方式命名，xxx 代表了这个 loader 要做的转换功能，比如 json-loader。\n * 理解 plugins\n   * 插件可以完成一些 loader 不能完成的功能。\n   * 插件的使用一般是在 webpack 的配置信息 plugins 选项中指定。\n * 配置文件 (默认)\n   * webpack.config.js : 是一个 node 模块，返回一个 json 格式的配置信息对象\n\n\n# 2、开启项目\n\n * 初始化项目：\n   \n   * 生成 package.json 文件\n     \n     {\n       \"name\": \"webpack_test\",\n       \"version\": \"1.0.0\"\n     } \n     \n     \n     1\n     2\n     3\n     4\n     \n\n * 安装 webpack\n   \n   * npm install webpack webpack-cli -g // 全局安装，作为指令使用\n   * npm install webpack webpack-cli -d // 本地安装，作为本地依赖使用\n\n\n# 3、编译打包应用\n\n * 创建 js 文件\n   * src/js/app.js\n   * src/js/module1.js\n   * src/js/module2.js\n   * src/js/module3.js\n * 创建 json 文件\n   * src/json/data.json\n * 创建主页面:\n   * src/index.html\n * 运行指令\n   * 开发配置指令：webpack src/js/app.js -o dist/js/app.js --mode=development\n     * 功能: webpack 能够编译打包 js 和 json 文件，并且能将 es6 的模块化语法转换成浏览器能识别的语法\n   * 生产配置指令：webpack src/js/app.js -o dist/js/app.js --mode=production\n     * 功能：在开发配置功能上加上一个压缩代码\n * 结论：\n   * webpack 能够编译打包 js 和 json 文件\n   * 能将 es6 的模块化语法转换成浏览器能识别的语法\n   * 能压缩代码\n * 缺点：\n   * 不能编译打包 css、img 等文件\n   * 不能将 js 的 es6 基本语法转化为 es5 以下语法\n * 改善：使用 webpack 配置文件解决，自定义功能\n\n\n# 4、使用 webpack 配置文件\n\n * 目的：在项目根目录定义配置文件，通过自定义配置文件，还原以上功能\n\n * 文件名称：webpack.config.js\n\n * 文件内容：\n   \n   const { resolve } = require('path'); //node内置核心模块，用来设置路径。\n   module.exports = {\n     entry: './src/js/app.js',   // 入口文件配置（简写）\n     /*完整写法：\n   \tentry:{\n   \t  main:'./src/js/app.js'\n   \t}\n     */\n     output: {                     // 输出配置\n       filename: './js/built.js',      // 输出文件名\n       path: resolve(__dirname, 'build')   //输出文件路径配置\n     },\n     mode: 'development'   //开发环境(二选一)\n     //mode: 'production'   //生产环境(二选一)\n   };\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   \n\n * 运行指令： webpack\n\n\n# 5、打包 less 资源\n\n * 概述：less 文件 webpack 不能解析，需要借助 loader 编译解析\n\n * 创建 less 文件\n   \n   * src/less/test1.less\n   * src/less/test2.less\n\n * 入口 app.js 文件\n   \n   * 引入 less 资源\n\n * 安装 loader\n   \n   * npm install css-loader style-loader less-loader less --save-dev\n\n * 配置 loader\n   \n   {\n   \ttest: /\\.less$/, // 检查文件是否以.less结尾（检查是否是less文件）\n   \tuse: [  // 数组中loader执行是从下到上，从右到左顺序执行\n   \t  'style-loader', // 创建style标签，添加上js中的css代码\n   \t  'css-loader', // 将css以commonjs方式整合到js文件中\n   \t  'less-loader'  // 将less文件解析成css文件\n   \t]\n   },\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   \n\n * 运行指令：webpack\n\n\n# 6、js 语法检查\n\n * 概述：对 js 基本语法错误 / 隐患，进行提前检查\n\n * 安装 loader\n   \n   * npm install eslint-loader eslint --save-dev\n\n * 备注 1：在：eslint.org 网站 -> userguide -> configuring eslint 查看如何配置\n\n * 备注 2：在：eslint.org 网站 -> userguide -> rules 查看所有规则\n\n * 配置 loader\n   \n   module: {\n     rules: [\n       {\n         test: /\\.js$/,  //只检测js文件\n         exclude: /node_modules/,  //排除node_modules文件夹\n         enforce: \"pre\",  //提前加载使用\n         use: { //使用eslint-loader解析\n           loader: \"eslint-loader\" \n         }\n       }        \n     ]\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   \n\n * 修改 package.json（需要删除注释才能生效）\n   \n   \"eslintconfig\": {\n   \t\"parseroptions\": {\n   \t  \"ecmaversion\": 6, \t\t// 支持es6\n   \t  \"sourcetype\": \"module\"\t// 使用es6模块化\n   \t},\n   \t\"env\": { // 设置环境\n   \t  \"browser\": true,   // 支持浏览器环境： 能够使用window上的全局变量\n   \t  \"node\": true       // 支持服务器环境:  能够使用node上global的全局变量\n   \t},\n   \t\"globals\": {\t// 声明使用的全局变量, 这样即使没有定义也不会报错了\n   \t  \"$\": \"readonly\"\t// $ 只读变量\n   \t},\n   \t\"rules\": {  // eslint检查的规则  0 忽略 1 警告 2 错误\n   \t  \"no-console\": 0, \t// 不检查console\n   \t  \"eqeqeq\": 2,\t// 用==而不用===就报错\n   \t  \"no-alert\": 2 // 不能使用alert\n   \t},\n   \t\"extends\": \"eslint:recommended\" // 使用eslint推荐的默认规则 https://cn.eslint.org/docs/rules/\n   },\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   \n\n * 运行指令：webpack\n\n\n# 7、js 语法转换\n\n * 概述：将浏览器不能识别的新语法转换成原来识别的旧语法，做浏览器兼容性处理\n\n * 安装 loader\n   \n   * npm install babel-loader @babel/core @babel/preset-env --save-dev\n\n * 配置 loader\n   \n   module: {\n     rules: [\n       {\n         test: /\\.js$/,\n         exclude: /node_modules/,\n         use: {\n           loader: \"babel-loader\",\n           options: {\n             presets: ['@babel/preset-env']\n           }\n         }\n       }\n     ]\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   \n\n * 运行指令：webpack\n\n\n# 8、 js 兼容性处理\n\n#### 第一种方法：使用经典的 polyfill\n\n * 安装包\n   \n   * npm install @babel/polyfill\n\n * 使用\n   \n   - app.js\n   \n   \timport '@babel/polyfill'; // 包含es6的高级语法的转换\n   \n   \n   1\n   2\n   3\n   \n\n * 优点：解决 babel 只能转换部分低级语法的问题 (如：let/const/ 解构赋值...)，引入 polyfill 可以转换高级语法 (如：promise...)\n\n * 缺点：将所有高级语法都进行了转换，但实际上可能只使用一部分\n\n * 解决：需要按需加载（使用了什么高级语法，就转换什么，而其他的不转换）\n\n#### 第二种方法：借助按需引入 core-js 按需引入\n\n * 安装包\n   \n   * npm install core-js\n\n * 配置 loader\n   \n   {\n   \ttest: /\\.js$/,\n   \texclude: /(node_modules)/,\n   \tuse: {\n   \t  loader: 'babel-loader',\n   \t  options: {\n   \t    presets: [\n   \t      [\n   \t        '@babel/preset-env',\n   \t        {\n   \t          usebuiltins: 'usage',  // 按需引入需要使用polyfill\n   \t          corejs: { version: 3 }, // 解决找不到corejs\n   \t          targets: { // 指定兼容性处理哪些浏览器\n   \t            \"chrome\": \"58\",\n   \t            \"ie\": \"9\",\n   \t          }\n   \t        }\n   \t      ]\n   \t    ],\n   \t    cachedirectory: true, // 开启babel缓存\n   \t  }\n   \t}\n   },\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   \n\n\n# 9、打包样式文件中的图片资源\n\n * 概述：图片文件 webpack 不能解析，需要借助 loader 编译解析\n\n * 添加 2 张图片:\n   \n   * 小图，小于 8kb: src/images/vue.png\n   * 大图，大于 8kb: src/images/react.jpg\n\n * 在 less 文件中通过背景图的方式引入图片\n\n * 安装 loader\n   \n   * npm install file-loader url-loader --save-dev\n   * 补充：url-loader 是对象 file-loader 的上层封装，使用时需配合 file-loader 使用。\n\n * 配置 loader\n   \n   {\n   \ttest: /\\.(png|jpg|gif)$/,\n   \tuse: {\n   \t  loader: 'url-loader',\n   \t  options: {\n   \t    limit: 8192, // 8kb --\x3e 8kb以下的图片会base64处理\n   \t    outputpath: 'images', // 决定文件本地输出路径\n   \t    publicpath: 'images',  // 决定图片的url路径\n   \t    name: '[hash:8].[ext]' // 修改文件名称 [hash:8] hash值取8位  [ext] 文件扩展名\n   \t  }\n   \t}\n   },\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   \n\n * 运行指令：webpack\n\n\n# 10、打包 html 文件\n\n * 概述：html 文件 webpack 不能解析，需要借助插件编译解析\n\n * 添加 html 文件\n   \n   * src/index.html\n   * 注意不要在 html 中引入任何 css 和 js 文件\n\n * 安装插件 plugins\n   \n   * npm install html-webpack-plugin --save-dev\n\n * 在 webpack.config.js 中引入插件（插件都需要手动引入，而 loader 会自动加载）\n   \n   * const htmlwebpackplugin = require('html-webpack-plugin')\n\n * 配置插件 plugins\n   \n   plugins: [\n     new htmlwebpackplugin({\n       template: './src/index.html', // 以当前文件为模板创建新的html(1. 结构和原来一样 2. 会自动引入打包的资源)\n     }),\n   ]\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n\n * 运行指令：webpack\n\n\n# 11、打包 html 中图片资源\n\n * 概述：html 中的图片 url-loader 没法处理，它只能处理 js 中引入的图片 / 样式中图片，不能处理 html 中 img 标签，需要引入其他 html-loader 处理。\n\n * 添加图片\n   \n   * 在 src/index.html 添加两个 img 标签\n\n * 安装 loader\n   \n   * npm install html-loader --save-dev\n\n * 配置 loader\n   \n   {\n     test: /\\.(html)$/,\n     use: {\n       loader: 'html-loader'\n     }\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   \n\n * 运行指令：webpack\n\n\n# 12、打包其他资源\n\n * 概述：其他资源 webpack 不能解析，需要借助 loader 编译解析\n\n * 添加字体文件\n   \n   * src/media/iconfont.eot\n   * src/media/iconfont.svg\n   * src/media/iconfont.ttf\n   * src/media/iconfont.woff\n   * src/media/iconfont.woff2\n\n * 修改样式\n   \n   @font-face {\n     font-family: 'iconfont';\n     src: url('../media/iconfont.eot');\n     src: url('../media/iconfont.eot?#iefix') format('embedded-opentype'),\n     url('../media/iconfont.woff2') format('woff2'),\n     url('../media/iconfont.woff') format('woff'),\n     url('../media/iconfont.ttf') format('truetype'),\n     url('../media/iconfont.svg#iconfont') format('svg');\n   }\n   \n   .iconfont {\n     font-family: \"iconfont\" !important;\n     font-size: 16px;\n     font-style: normal;\n     -webkit-font-smoothing: antialiased;\n     -moz-osx-font-smoothing: grayscale;\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   \n\n * 修改 html，添加字体\n\n * 配置 loader\n   \n   {\n   \ttest: /\\.(eot|svg|woff|woff2|ttf|mp3|mp4|avi)$/,  // 处理其他资源\n   \tloader: 'file-loader',\n   \toptions: {\n   \t  outputpath: 'media',\n   \t  name: '[hash:8].[ext]'\n   \t}\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   \n\n * 运行指令：webpack\n\n\n# 13、自动编译打包运行\n\n * 安装 loader\n   \n   * npm install webpack-dev-server --save-dev\n\n * 详细配置见官网：指南 -> 开发环境 -> 使用 webpack-dev-server\n   \n   * 修改 webpack 配置对象（webpack.config.js 中，注意不是 loader 中）\n   \n   //在plugins后\n   devserver: {\n     open: true, // 自动打开浏览器\n     compress: true, // 启动gzip压缩\n     port: 3000, // 端口号\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   \n\n * 修改 url-loader 部分配置\n   \n   * 因为构建工具以 build 为根目录，不用再找 build 了（该文档已经配置好了，不需要修改了）\n   \n   * publicpath: '../build/images/'   改为  publicpath: 'images/'\n     \n     \n     1\n     \n\n * 修改 package.json 中 scripts 指令\n   \n   * \"start\": \"webpack-dev-server\",\n\n * 运行指令：npm run start\n   \n   * 注意 webpack-dev-server 指令才能启动 devserver 配置，然后配置到 package.json 中才行\n\n\n# 14、热模替换功能\n\n * 概述：热模块替换（hmr）是 webpack 提供的最有用的功能之一。它允许在运行时更新所有类型的模块，而无需完全刷新（只更新变化的模块，不变的模块不更新）。\n\n * 详细配置见官网：指南 -> 模块热替换\n\n * 修改 devserver 配置\n   \n     //在plugins后\n   devserver: {\n     contentbase: resolve(__dirname, 'build'), // 运行项目的目录\n     open: true, // 自动打开浏览器\n     compress: true, // 启动gzip压缩\n     port: 3000, // 端口号\n     hot: true // 开启热模替换功能 hmr\n     }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   \n\n * 问题：html 文件无法自动更新了，需要在配置文件 (webpack.config.js) 增加一个入口\n   \n     entry: ['./src/js/app.js','./src/index.html']\n   \n   \n   1\n   \n\n\n# 15、devtool\n\n * 概述： 一种将压缩 / 编译文件中的代码映射回源文件中的原始位置的技术，让我们调试代码不在困难\n * 详细配置见官网：配置 -> devtool\n * 介绍\n   * cheap 只保留行，编译速度快\n   * eval webpack 生成的代码（每个模块彼此分开，并使用模块名称进行注释）, 编译速度快\n   * inline 以 base64 方式将 source-map 嵌入到代码中，缺点造成编译后代码体积很大\n * 推荐使用：\n   * 开发环境： cheap-module-eval-source-map\n   * 生产环境： cheap-module-source-map\n\n>  * 添加配置 (webpack.config.js) 和五大模块同级\n>    \n>    devtool:'cheap-module-eval-source-map'\t\t//开发环境\n>    devtool:'cheap-module-source-map'\t\t\t//生产环境\n>    \n>    \n>    1\n>    2\n>    \n> \n> 以上就是 webpack 开发环境的配置，可以在内存中自动打包所有类型文件并有自动编译运行、热更新等功能。\n\n\n# 16、准备生产环境\n\n * 创建文件夹 config，将 webpack.config.js 复制两份\n   \n   * ./config/webpack.dev.js\n   * ./config/webpack.prod.js\n\n * 修改 webpack.prod.js 配置，删除 webpack-dev-server 配置\n   \n   // / 代表根路径(等价于这个：http://localhost:5000/)，以后项目上线所有路径都以当前网址为根路径出发\n   module.exports = {\n     output: {\n       path: resolve(__dirname, '../build'), // 文件输出目录\n       filename: './js/built.js', // 文件输出名称\n       publicpath: '/'  // 所有输出资源在引入时的公共路径，若loader中也指定了publicpath，会以loader的为准。\n     },\n   module: {\n     rules: [\n   \t{\n           test: /\\.(png|jpg|gif)$/,\n           use: {\n             loader: 'url-loader',\n             options: {\n               limit: 8192, \n               outputpath: 'images', \n               publicpath: '/images',  // 重写publicpath，需要在路径前面加上 /\n               name: '[hash:8].[ext]' \n             }\n           }\n         },\t\n     ]\n   },\n     mode: 'production',  //修改为生产环境\n   devtool: 'cheap-module-source-map' // 修改为生产环境的错误提示\n   // 删除devserver\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   25\n   26\n   27\n   \n\n * 修改 package.json 的指令\n   \n   * \"start\": \"webpack-dev-server --config ./config/webpack.dev.js\"\n   * \"dev\": \"webpack-dev-server --config ./config/webpack.dev.js\"\n   * \"build\": \"webpack --config ./config/webpack.prod.js\"\n\n * 开发环境指令\n   \n   * npm start\n   * npm run dev\n\n * 生产环境指令\n   \n   * npm run build\n   * 注意：生产环境代码需要部署到服务器上才能运行 （serve 这个库能帮助我们快速搭建一个静态资源服务器）\n     * npm i serve -g\n     * serve -s build -p 5000\n\n\n# 17、清除打包文件目录\n\n * 概述：每次打包生成了文件，都需要手动删除，引入插件帮助我们自动删除上一次的文件\n * 安装插件\n   * npm install clean-webpack-plugin --save-dev\n * 引入插件\n   * const {cleanwebpackplugin} = require ('clean-webpack-plugin'); // 注意要解构赋值！！！\n * 配置插件\n   * new cleanwebpackplugin () // 自动清除 output.path 目录下的文件\n * 运行指令：npm run build\n\n\n# 18、提取 css 成单独文件\n\n * 安装插件\n   \n   * npm install mini-css-extract-plugin --save-dev\n\n * 引入插件\n   \n   * const minicssextractplugin = require(\"mini-css-extract-plugin\");\n\n * 配置 loader\n   \n   {\n     test: /\\.less$/,\n     use: [\n       minicssextractplugin.loader,\n       'css-loader',\n       'less-loader',\n     ]\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   \n\n * 配置插件\n   \n   new minicssextractplugin({\n     filename: \"css/[name].css\",\n   })\n   \n   \n   1\n   2\n   3\n   \n\n * 运行指令\n   \n   * npm run build\n   * serve -s build\n\n\n# 19、添加 css 兼容\n\n * 安装 loader\n   \n   * npm install postcss-loader postcss-flexbugs-fixes postcss-preset-env postcss-normalize autoprefixer --save-dev\n\n * 配置 loader (less-loader)\n   \n   {\n     test: /\\.less$/,\n     use: [\n       minicssextractplugin.loader,\n       'css-loader',\n       {\n         loader: 'postcss-loader',\n         options: {\n           ident: 'postcss',\n           plugins: () => [\n             require('postcss-flexbugs-fixes'),\n             require('postcss-preset-env')({\n               autoprefixer: {\n                 flexbox: 'no-2009',\n               },\n               stage: 3,\n             }),\n             require('postcss-normalize')(),\n           ],\n           sourcemap: true,\n         },\n       },\n       'less-loader',\n     ]\n   }\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   25\n   \n\n * 添加配置文件: .browserslistrc\n   \n   # browsers that we support\n   \n   last 1 version\n   > 1%\n   ie 10 # sorry\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n\n * 运行指令：\n   \n   * npm run build\n   * serve -s build\n\n\n# 20、压缩 css\n\n * 安装插件\n   \n   * npm install optimize-css-assets-webpack-plugin --save-dev\n\n * 引入插件\n   \n   * const optimizecssassetsplugin = require('optimize-css-assets-webpack-plugin');\n\n * 配置插件\n   \n   new optimizecssassetsplugin({\n     cssprocessorpluginoptions: {\n       preset: ['default', { discardcomments: { removeall: true } }],\n     },\n     cssprocessoroptions: { // 解决没有source map问题\n       map: {\n         inline: false,\n         annotation: true,\n       }\n     }\n   })\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   \n\n * 运行指令：\n   \n   * npm run build\n   * serve -s build\n\n\n# 21、压缩 html\n\n * 修改插件配置\n   \n   new htmlwebpackplugin({\n     template: './src/index.html',\n     minify: {\n       removecomments: true,\n       collapsewhitespace: true,\n       removeredundantattributes: true,\n       useshortdoctype: true,\n       removeemptyattributes: true,\n       removestylelinktypeattributes: true,\n       keepclosingslash: true,\n       minifyjs: true,\n       minifycss: true,\n       minifyurls: true,\n     }\n   })\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   \n\n * 运行指令：\n   \n   * npm run build\n   * serve -s dist\n\n> 以上就是 webpack 生产环境的配置，可以生成打包后的文件。",charsets:{cjk:!0}},{title:"webpack-yarn环境搭建",frontmatter:{title:"webpack-yarn环境搭建",date:"2021-03-17T14:47:58.000Z",permalink:"/pages/036dbb/",categories:["前端","Webpack"],tags:[null]},regularPath:"/views/01.%E5%89%8D%E7%AB%AF/70.Webpack/20.webpack-yarn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html",relativePath:"views/01.前端/70.Webpack/20.webpack-yarn环境搭建.md",key:"v-37d5778b",path:"/pages/036dbb/",headers:[{level:2,title:"1. 初始化项目",slug:"_1-初始化项目",normalizedTitle:"1. 初始化项目",charIndex:2},{level:2,title:"2. webpack基本使用",slug:"_2-webpack基本使用",normalizedTitle:"2. webpack 基本使用",charIndex:251},{level:2,title:"3. 开发环境运行",slug:"_3-开发环境运行",normalizedTitle:"3. 开发环境运行",charIndex:1355},{level:2,title:"4. 打包处理 ES6/CSS/图片",slug:"_4-打包处理-es6-css-图片",normalizedTitle:"4. 打包处理 es6/css/ 图片",charIndex:1879},{level:2,title:"5. 搭建vue的环境",slug:"_5-搭建vue的环境",normalizedTitle:"5. 搭建 vue 的环境",charIndex:3387},{level:2,title:"区分使用生产环境与开发环境",slug:"区分使用生产环境与开发环境",normalizedTitle:"区分使用生产环境与开发环境",charIndex:4143},{level:2,title:"",slug:"",normalizedTitle:"",charIndex:0}],lastUpdated:"4/28/2022, 6:08:46 PM",lastUpdatedTimestamp:1651169326e3,headersStr:"1. 初始化项目 2. webpack基本使用 3. 开发环境运行 4. 打包处理 ES6/CSS/图片 5. 搭建vue的环境 区分使用生产环境与开发环境 ",content:"# 1. 初始化项目\n\n1). 生成package.json\n    yarn init -y\n\n2). 创建入口js: src/index.js\n    console.log('Hello Webpack!')\n    document.getElementById('root').innerHTML = '<h1>Hello222</h1>'\n\n3). 创建页面文件: index.html\n    <div id=\"root\"></div>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 2. webpack 基本使用\n\n1). 下载依赖包\n    yarn add -D webpack webpack-cli\t\t//下载webpack和webpack命令行工具\n    yarn add -D html-webpack-plugin\t\t//下载打包html模版页面的包\n\t\n\t//yarn remove    //卸载\n\n2). 创建webpack配置: webpack.config.js\n    const path = require('path')\n    const HtmlWebpackPlugin = require('html-webpack-plugin')\t\t//引入html包\n\n    module.exports = {\n      // 模式: 生产环境\n      //mode: 'production',\n      // 入口\n      entry: {\n        app: path.resolve(__dirname, 'src/index.js')\n      },\n      // 出口(打包生成js)\n      output: {\n        filename: 'js/[name].js',\n        path: path.resolve(__dirname, 'dist')\n      },\n      // 模块加载器\n      module: {\n        rules: [\n\n        ]\n      },\n      // 插件\n      plugins: [\n        new HtmlWebpackPlugin({\n          template: 'index.html',\t\t//指定模版页面\n          filename: 'index.html'\t\t//打包后的页面名\n        })\n      ]\n    }\n\n3). 生成环境打包并运行\n    配置打包命令:  \"scripts\": {\n    \t\t\t\t\"build\": \"webpack --mode production\"\n  \t\t\t\t },\n    打包项目: yarn build\n    //运行打包项目: serve dist\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n\n\n\n# 3. 开发环境运行\n\n1). 现在的问题:\n    每次修改项目代码后, 必须重新打包, 重新运行\n//自动打包\n2). 下载依赖包(版本不匹配的问题)\n    yarn add -D webpack-dev-server\n\t//以下版本匹配\n\t//yarn add -D webpack-dev-server@3.9.0   \n\t//yarn add -D webpack@4.41.2 webpack-cli@3.3.10\t\n3). 配置开发服务器\n    devServer: {\n      open: true, // 自动打开浏览器\n      quiet: true, // 不做太多日志输出\n    },\n\n4). 配置开启source-map调试\n    devtool: 'cheap-module-eval-source-map',\n\n5). 开发环境运行\n    配置命令: \"dev\": \"webpack-dev-server --mode development\"\n    执行命令: yarn dev\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 4. 打包处理 ES6/CSS/ 图片\n\n1). 处理ES6\n    a. 下载依赖包\n        yarn add -D babel-loader @babel/core @babel/preset-env\n    b. 配置\n        {\n          test: /\\.js$/,\n          //exclude: /(node_modules|bower_components)/,\n          include: path.resolve(__dirname, 'src'),\n          use: {\n            loader: 'babel-loader',\n            options: {\n              presets: ['@babel/preset-env']\n            }\n          }\n        }\n\n2). 处理CSS\n    a. 下载依赖包\n        yarn add -D css-loader style-loader\n    b. 配置\n        {\n          test: /\\.css$/,\n          use: ['style-loader', 'css-loader'], // 多个loader从右到左处理\n        }\n\n3). 处理图片\n    a. 下载依赖包\n        yarn add -D url-loader@2.3.0 file-loader@4.3.0\n    b. 配置\n        {\n          test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n          loader: 'url-loader',\n          options: {\n            limit: 1000,\n            name: 'static/img/[name].[hash:7].[ext]' // 相对于output.path\n          }\n        }\n4). 测试\n    a. 添加图片: src/assets/imgs/logo.png\n    b. 添加css: src/assets/css/my.css\n        img {\n          width: 200px;\n          height: 200px;\n        }\n    c. index.js\n        import logo from './assets/imgs/logo.png'\n        import  './assets/css/my.css'\n\n        const image = new Image()\n        image.src = logo\n        document.body.appendChild(image)\n        document.getElementById('root').innerHTML = '<h1>Hello222</h1>'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n\n\n\n# 5. 搭建 vue 的环境\n\n0). 文档:\n    https://vue-loader.vuejs.org/zh/\n\n1). 下载依赖包:\n    yarn add vue\n    yarn add -D vue-loader vue-template-compiler\n\n2). 配置\n    const VueLoaderPlugin = require('vue-loader/lib/plugin')\n\n    {\n      test: /\\.vue$/,\n      include: path.resolve(__dirname, 'src'),\n      loader: 'vue-loader'\n    }\n\n    {\n      test: /\\.css$/,\n      use: ['vue-style-loader', 'css-loader'],\n    }\n\n    new VueLoaderPlugin()\n\n    // 引入模块的解析，和核心模块同级\n    resolve: {\n      extensions: ['.js', '.vue', '.json'], // 可以省略的后缀名\n      alias: { // 路径别名(简写方式)\n        'vue$': 'vue/dist/vue.esm.js',  // 表示精准匹配\n      }\n    }\n\n3). 编码: \n    src/App.vue\n    src/index.js\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n\n# 区分使用生产环境与开发环境\n\n使用生产环境:\n    npm run build   ==> webpack\n    1). 在内存中进行编译打包, 生成内存中的打包文件\n    2). 保存到本地(在本地生成打包文件)   ===> 此时还不能通过浏览器来访问, 需要启动服务器运行\n使用开发环境\n    npm run dev   ==> webpack-dev-server\n    1). 在内存中进行编译打包, 生成内存中的打包文件\n    2). 调动服务器, 运行内存中的打包文件   ===> 可以通过浏览器虚拟路径访问\n\n\n\n#",normalizedContent:"# 1. 初始化项目\n\n1). 生成package.json\n    yarn init -y\n\n2). 创建入口js: src/index.js\n    console.log('hello webpack!')\n    document.getelementbyid('root').innerhtml = '<h1>hello222</h1>'\n\n3). 创建页面文件: index.html\n    <div id=\"root\"></div>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 2. webpack 基本使用\n\n1). 下载依赖包\n    yarn add -d webpack webpack-cli\t\t//下载webpack和webpack命令行工具\n    yarn add -d html-webpack-plugin\t\t//下载打包html模版页面的包\n\t\n\t//yarn remove    //卸载\n\n2). 创建webpack配置: webpack.config.js\n    const path = require('path')\n    const htmlwebpackplugin = require('html-webpack-plugin')\t\t//引入html包\n\n    module.exports = {\n      // 模式: 生产环境\n      //mode: 'production',\n      // 入口\n      entry: {\n        app: path.resolve(__dirname, 'src/index.js')\n      },\n      // 出口(打包生成js)\n      output: {\n        filename: 'js/[name].js',\n        path: path.resolve(__dirname, 'dist')\n      },\n      // 模块加载器\n      module: {\n        rules: [\n\n        ]\n      },\n      // 插件\n      plugins: [\n        new htmlwebpackplugin({\n          template: 'index.html',\t\t//指定模版页面\n          filename: 'index.html'\t\t//打包后的页面名\n        })\n      ]\n    }\n\n3). 生成环境打包并运行\n    配置打包命令:  \"scripts\": {\n    \t\t\t\t\"build\": \"webpack --mode production\"\n  \t\t\t\t },\n    打包项目: yarn build\n    //运行打包项目: serve dist\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n\n\n\n# 3. 开发环境运行\n\n1). 现在的问题:\n    每次修改项目代码后, 必须重新打包, 重新运行\n//自动打包\n2). 下载依赖包(版本不匹配的问题)\n    yarn add -d webpack-dev-server\n\t//以下版本匹配\n\t//yarn add -d webpack-dev-server@3.9.0   \n\t//yarn add -d webpack@4.41.2 webpack-cli@3.3.10\t\n3). 配置开发服务器\n    devserver: {\n      open: true, // 自动打开浏览器\n      quiet: true, // 不做太多日志输出\n    },\n\n4). 配置开启source-map调试\n    devtool: 'cheap-module-eval-source-map',\n\n5). 开发环境运行\n    配置命令: \"dev\": \"webpack-dev-server --mode development\"\n    执行命令: yarn dev\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 4. 打包处理 es6/css/ 图片\n\n1). 处理es6\n    a. 下载依赖包\n        yarn add -d babel-loader @babel/core @babel/preset-env\n    b. 配置\n        {\n          test: /\\.js$/,\n          //exclude: /(node_modules|bower_components)/,\n          include: path.resolve(__dirname, 'src'),\n          use: {\n            loader: 'babel-loader',\n            options: {\n              presets: ['@babel/preset-env']\n            }\n          }\n        }\n\n2). 处理css\n    a. 下载依赖包\n        yarn add -d css-loader style-loader\n    b. 配置\n        {\n          test: /\\.css$/,\n          use: ['style-loader', 'css-loader'], // 多个loader从右到左处理\n        }\n\n3). 处理图片\n    a. 下载依赖包\n        yarn add -d url-loader@2.3.0 file-loader@4.3.0\n    b. 配置\n        {\n          test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n          loader: 'url-loader',\n          options: {\n            limit: 1000,\n            name: 'static/img/[name].[hash:7].[ext]' // 相对于output.path\n          }\n        }\n4). 测试\n    a. 添加图片: src/assets/imgs/logo.png\n    b. 添加css: src/assets/css/my.css\n        img {\n          width: 200px;\n          height: 200px;\n        }\n    c. index.js\n        import logo from './assets/imgs/logo.png'\n        import  './assets/css/my.css'\n\n        const image = new image()\n        image.src = logo\n        document.body.appendchild(image)\n        document.getelementbyid('root').innerhtml = '<h1>hello222</h1>'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n\n\n\n# 5. 搭建 vue 的环境\n\n0). 文档:\n    https://vue-loader.vuejs.org/zh/\n\n1). 下载依赖包:\n    yarn add vue\n    yarn add -d vue-loader vue-template-compiler\n\n2). 配置\n    const vueloaderplugin = require('vue-loader/lib/plugin')\n\n    {\n      test: /\\.vue$/,\n      include: path.resolve(__dirname, 'src'),\n      loader: 'vue-loader'\n    }\n\n    {\n      test: /\\.css$/,\n      use: ['vue-style-loader', 'css-loader'],\n    }\n\n    new vueloaderplugin()\n\n    // 引入模块的解析，和核心模块同级\n    resolve: {\n      extensions: ['.js', '.vue', '.json'], // 可以省略的后缀名\n      alias: { // 路径别名(简写方式)\n        'vue$': 'vue/dist/vue.esm.js',  // 表示精准匹配\n      }\n    }\n\n3). 编码: \n    src/app.vue\n    src/index.js\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n\n# 区分使用生产环境与开发环境\n\n使用生产环境:\n    npm run build   ==> webpack\n    1). 在内存中进行编译打包, 生成内存中的打包文件\n    2). 保存到本地(在本地生成打包文件)   ===> 此时还不能通过浏览器来访问, 需要启动服务器运行\n使用开发环境\n    npm run dev   ==> webpack-dev-server\n    1). 在内存中进行编译打包, 生成内存中的打包文件\n    2). 调动服务器, 运行内存中的打包文件   ===> 可以通过浏览器虚拟路径访问\n\n\n\n#",charsets:{cjk:!0}},{title:"React",frontmatter:{title:"React",date:"2022-05-26T17:06:36.000Z",permalink:"/pages/eb18b6/",categories:["views","前端","React"],tags:["React"]},regularPath:"/views/01.%E5%89%8D%E7%AB%AF/80.React/10.react.html",relativePath:"views/01.前端/80.React/10.react.md",key:"v-67b80e2c",path:"/pages/eb18b6/",headers:[{level:2,title:"1.1. React的基本认识",slug:"_1-1-react的基本认识",normalizedTitle:"1.1. react 的基本认识",charIndex:20},{level:2,title:"1.2. React的基本使用",slug:"_1-2-react的基本使用",normalizedTitle:"1.2. react 的基本使用",charIndex:345},{level:2,title:"1.3. JSX的理解和使用",slug:"_1-3-jsx的理解和使用",normalizedTitle:"1.3. jsx 的理解和使用",charIndex:593},{level:2,title:"1.4概念理解",slug:"_1-4概念理解",normalizedTitle:"1.4 概念理解",charIndex:1256},{level:3,title:"1). 模块与组件",slug:"_1-模块与组件",normalizedTitle:"1). 模块与组件",charIndex:1269},{level:3,title:"2). 模块化与组件化",slug:"_2-模块化与组件化",normalizedTitle:"2). 模块化与组件化",charIndex:1471},{level:2,title:"2.1. 基本理解和使用",slug:"_2-1-基本理解和使用",normalizedTitle:"2.1. 基本理解和使用",charIndex:1591},{level:2,title:"2.2. 组件的3大属性: state",slug:"_2-2-组件的3大属性-state",normalizedTitle:"2.2. 组件的 3 大属性: state",charIndex:2015},{level:2,title:"2.2. 组件的3大属性: props",slug:"_2-2-组件的3大属性-props",normalizedTitle:"2.2. 组件的 3 大属性: props",charIndex:3028},{level:2,title:"2.2. 组件的3大属性: refs",slug:"_2-2-组件的3大属性-refs",normalizedTitle:"2.2. 组件的 3 大属性: refs",charIndex:4496},{level:2,title:"2.3. 组件中的事件处理",slug:"_2-3-组件中的事件处理",normalizedTitle:"2.3. 组件中的事件处理",charIndex:6514},{level:2,title:"2.4. 组件的组合使用",slug:"_2-4-组件的组合使用",normalizedTitle:"2.4. 组件的组合使用",charIndex:6928},{level:2,title:"2.5. 组件收集表单数据",slug:"_2-5-组件收集表单数据",normalizedTitle:"2.5. 组件收集表单数据",charIndex:7029},{level:2,title:"2.6. 组件的生命周期（旧）",slug:"_2-6-组件的生命周期-旧",normalizedTitle:"2.6. 组件的生命周期（旧）",charIndex:7090},{level:2,title:"2.7组件的生命周期（新）",slug:"_2-7组件的生命周期-新",normalizedTitle:"2.7 组件的生命周期（新）",charIndex:7715},{level:2,title:"2.7. 虚拟DOM与DOM diff算法",slug:"_2-7-虚拟dom与dom-diff算法",normalizedTitle:"2.7. 虚拟 dom 与 dom diff 算法",charIndex:8423},{level:3,title:"1). 虚拟DOM是什么?",slug:"_1-虚拟dom是什么",normalizedTitle:"1). 虚拟 dom 是什么？",charIndex:8453},{level:3,title:"2). 虚拟DOM 算法的基本步骤",slug:"_2-虚拟dom-算法的基本步骤",normalizedTitle:"2). 虚拟 dom 算法的基本步骤",charIndex:8573},{level:3,title:"3). 进一步理解",slug:"_3-进一步理解",normalizedTitle:"3). 进一步理解",charIndex:8703},{level:2,title:"3.1. 使用create-react-app创建react应用",slug:"_3-1-使用create-react-app创建react应用",normalizedTitle:"3.1. 使用 create-react-app 创建 react 应用",charIndex:8905},{level:3,title:"3.1.1. react脚手架",slug:"_3-1-1-react脚手架",normalizedTitle:"3.1.1. react 脚手架",charIndex:8946},{level:3,title:"3.1.2. 创建项目并启动",slug:"_3-1-2-创建项目并启动",normalizedTitle:"3.1.2. 创建项目并启动",charIndex:9213},{level:3,title:"3.1.3. react脚手架项目结构",slug:"_3-1-3-react脚手架项目结构",normalizedTitle:"3.1.3. react 脚手架项目结构",charIndex:9412},{level:2,title:"4.1. 理解",slug:"_4-1-理解",normalizedTitle:"4.1. 理解",charIndex:9760},{level:3,title:"4.1.1. 前置说明",slug:"_4-1-1-前置说明",normalizedTitle:"4.1.1. 前置说明",charIndex:9772},{level:3,title:"4.1.2. 常用的ajax请求库",slug:"_4-1-2-常用的ajax请求库",normalizedTitle:"4.1.2. 常用的 ajax 请求库",charIndex:9907},{level:3,title:"4.1.3. 效果",slug:"_4-1-3-效果",normalizedTitle:"4.1.3. 效果",charIndex:10169},{level:2,title:"4.2. axios",slug:"_4-2-axios",normalizedTitle:"4.2. axios",charIndex:10335},{level:3,title:"4.2.1. 文档",slug:"_4-2-1-文档",normalizedTitle:"4.2.1. 文档",charIndex:10350},{level:3,title:"4.2.2. 相关API",slug:"_4-2-2-相关api",normalizedTitle:"4.2.2. 相关 api",charIndex:10396},{level:2,title:"4.3. Fetch",slug:"_4-3-fetch",normalizedTitle:"4.3. fetch",charIndex:11057},{level:3,title:"4.3.1. 文档",slug:"_4-3-1-文档",normalizedTitle:"4.3.1. 文档",charIndex:11072},{level:3,title:"4.3.2. 相关API",slug:"_4-3-2-相关api",normalizedTitle:"4.3.2. 相关 api",charIndex:11182},{level:2,title:"5.1. 组件间通信",slug:"_5-1-组件间通信",normalizedTitle:"5.1. 组件间通信",charIndex:12031},{level:3,title:"5.1.1. 方式一: 通过props传递",slug:"_5-1-1-方式一-通过props传递",normalizedTitle:"5.1.1. 方式一：通过 props 传递",charIndex:12046},{level:3,title:"5.1.2. 方式二: 使用消息订阅(subscribe)-发布(publish)机制",slug:"_5-1-2-方式二-使用消息订阅-subscribe-发布-publish-机制",normalizedTitle:"5.1.2. 方式二：使用消息订阅 (subscribe)- 发布 (publish) 机制",charIndex:12236},{level:3,title:"5.1.3. 方式三: redux",slug:"_5-1-3-方式三-redux",normalizedTitle:"5.1.3. 方式三: redux",charIndex:12880},{level:3,title:"5.1.4. 面试题: 比较react中组件间3种通信方式",slug:"_5-1-4-面试题-比较react中组件间3种通信方式",normalizedTitle:"5.1.4. 面试题：比较 react 中组件间 3 种通信方式",charIndex:12910},{level:2,title:"5.2. 事件监听理解",slug:"_5-2-事件监听理解",normalizedTitle:"5.2. 事件监听理解",charIndex:13381},{level:3,title:"5.2.1. 原生DOM事件",slug:"_5-2-1-原生dom事件",normalizedTitle:"5.2.1. 原生 dom 事件",charIndex:13397},{level:3,title:"5.2.2. 自定义事件(消息机制)",slug:"_5-2-2-自定义事件-消息机制",normalizedTitle:"5.2.2. 自定义事件 (消息机制)",charIndex:13548},{level:2,title:"5.3. ES6常用新语法",slug:"_5-3-es6常用新语法",normalizedTitle:"5.3. es6 常用新语法",charIndex:13719},{level:2,title:"6.1. 相关理解",slug:"_6-1-相关理解",normalizedTitle:"6.1. 相关理解",charIndex:14216},{level:3,title:"6.1.1. react-router-dom的理解",slug:"_6-1-1-react-router-dom的理解",normalizedTitle:"6.1.1. react-router-dom 的理解",charIndex:14230},{level:3,title:"6.1.2. SPA的理解",slug:"_6-1-2-spa的理解",normalizedTitle:"6.1.2. spa 的理解",charIndex:14346},{level:3,title:"6.1.3. 路由的理解",slug:"_6-1-3-路由的理解",normalizedTitle:"6.1.3. 路由的理解",charIndex:14563},{level:3,title:"6.1.4. 前端路由的实现",slug:"_6-1-4-前端路由的实现",normalizedTitle:"6.1.4. 前端路由的实现",charIndex:15023},{level:2,title:"6.2. react-router相关API",slug:"_6-2-react-router相关api",normalizedTitle:"6.2. react-router 相关 api",charIndex:15543},{level:3,title:"6.2.1. 组件",slug:"_6-2-1-组件",normalizedTitle:"6.2.1. 组件",charIndex:15572},{level:3,title:"6.2.2. 其它",slug:"_6-2-2-其它",normalizedTitle:"6.2.2. 其它",charIndex:15730},{level:2,title:"6.3. 基本路由使用",slug:"_6-3-基本路由使用",normalizedTitle:"6.3. 基本路由使用",charIndex:15805},{level:3,title:"6.3.1. 准备",slug:"_6-3-1-准备",normalizedTitle:"6.3.1. 准备",charIndex:15821},{level:3,title:"6.3.2. 路由组件: pages/about.jsx",slug:"_6-3-2-路由组件-pages-about-jsx",normalizedTitle:"6.3.2. 路由组件: pages/about.jsx",charIndex:15891},{level:3,title:"6.3.3. 路由组件: pages/home.jsx",slug:"_6-3-3-路由组件-pages-home-jsx",normalizedTitle:"6.3.3. 路由组件: pages/home.jsx",charIndex:16127},{level:3,title:"6.3.4.BrowserRouter",slug:"_6-3-4-browserrouter",normalizedTitle:"6.3.4.browserrouter",charIndex:16359},{level:3,title:"6.3.5. 应用组件:app.jsx",slug:"_6-3-5-应用组件-app-jsx",normalizedTitle:"6.3.5. 应用组件:app.jsx",charIndex:16645},{level:3,title:"6.3.6. 自定义样式: index.css",slug:"_6-3-6-自定义样式-index-css",normalizedTitle:"6.3.6. 自定义样式: index.css",charIndex:17490},{level:2,title:"6.4. 嵌套路由使用",slug:"_6-4-嵌套路由使用",normalizedTitle:"6.4. 嵌套路由使用",charIndex:17618},{level:3,title:"6.4.2. 二级路由组件: pages/news.jsx",slug:"_6-4-2-二级路由组件-pages-news-jsx",normalizedTitle:"6.4.2. 二级路由组件: pages/news.jsx",charIndex:17634},{level:3,title:"6.4.3. 二级路由组件: pages/message.jsx",slug:"_6-4-3-二级路由组件-pages-message-jsx",normalizedTitle:"6.4.3. 二级路由组件: pages/message.jsx",charIndex:17949},{level:3,title:"6.4.4. 一级路由组件: pages/home.jsx",slug:"_6-4-4-一级路由组件-pages-home-jsx",normalizedTitle:"6.4.4. 一级路由组件: pages/home.jsx",charIndex:18310},{level:2,title:"6.5. 向路由组件传递参数数据",slug:"_6-5-向路由组件传递参数数据",normalizedTitle:"6.5. 向路由组件传递参数数据",charIndex:19568},{level:3,title:"6.5.1. 三级路由组件: pages/home-message-detail.jsx",slug:"_6-5-1-三级路由组件-pages-home-message-detail-jsx",normalizedTitle:"6.5.1. 三级路由组件: pages/home-message-detail.jsx",charIndex:19589},{level:3,title:"6.5.2. 二级路由组件: pages/home-message.jsx",slug:"_6-5-2-二级路由组件-pages-home-message-jsx",normalizedTitle:"6.5.2. 二级路由组件: pages/home-message.jsx",charIndex:20715},{level:2,title:"6.6. 多种路由跳转方式",slug:"_6-6-多种路由跳转方式",normalizedTitle:"6.6. 多种路由跳转方式",charIndex:21939},{level:3,title:"6.6.1. 二级路由: views/message.jsx",slug:"_6-6-1-二级路由-views-message-jsx",normalizedTitle:"6.6.1. 二级路由: views/message.jsx",charIndex:21957},{level:2,title:"7.1. 最流行的开源React UI组件库",slug:"_7-1-最流行的开源react-ui组件库",normalizedTitle:"7.1. 最流行的开源 react ui 组件库",charIndex:23502},{level:3,title:"7.1.1. material-ui(国外)",slug:"_7-1-1-material-ui-国外",normalizedTitle:"7.1.1. material-ui (国外)",charIndex:23531},{level:3,title:"7.1.2. ant-design(国内蚂蚁金服)",slug:"_7-1-2-ant-design-国内蚂蚁金服",normalizedTitle:"7.1.2. ant-design (国内蚂蚁金服)",charIndex:23670},{level:2,title:"7.2. ant-design使用入门",slug:"_7-2-ant-design使用入门",normalizedTitle:"7.2. ant-design 使用入门",charIndex:23931},{level:3,title:"1.引入antd",slug:"_1-引入antd",normalizedTitle:"1. 引入 antd",charIndex:23956},{level:3,title:"2.下载组件库包",slug:"_2-下载组件库包",normalizedTitle:"2. 下载组件库包",charIndex:24038},{level:3,title:"3.实现组件的按需打包",slug:"_3-实现组件的按需打包",normalizedTitle:"3. 实现组件的按需打包",charIndex:24072},{level:3,title:"4. 自定义antd主题",slug:"_4-自定义antd主题",normalizedTitle:"4. 自定义 antd 主题",charIndex:24631},{level:3,title:"5.在应用组件中使用antd",slug:"_5-在应用组件中使用antd",normalizedTitle:"5. 在应用组件中使用 antd",charIndex:25114},{level:2,title:"8.1. redux理解",slug:"_8-1-redux理解",normalizedTitle:"8.1. redux 理解",charIndex:25321},{level:3,title:"8.1.1. 学习文档",slug:"_8-1-1-学习文档",normalizedTitle:"8.1.1. 学习文档",charIndex:25339},{level:3,title:"8.1.2. redux是什么?",slug:"_8-1-2-redux是什么",normalizedTitle:"8.1.2. redux 是什么？",charIndex:25485},{level:3,title:"8.1.3. 什么情况下需要使用redux",slug:"_8-1-3-什么情况下需要使用redux",normalizedTitle:"8.1.3. 什么情况下需要使用 redux",charIndex:25649},{level:2,title:"8.2. redux的核心API",slug:"_8-2-redux的核心api",normalizedTitle:"8.2. redux 的核心 api",charIndex:25830},{level:3,title:"8.2.1. createStore()",slug:"_8-2-1-createstore",normalizedTitle:"8.2.1. createstore()",charIndex:25853},{level:3,title:"8.2.2. store对象",slug:"_8-2-2-store对象",normalizedTitle:"8.2.2. store 对象",charIndex:26047},{level:3,title:"8.2.3. applyMiddleware()",slug:"_8-2-3-applymiddleware",normalizedTitle:"8.2.3. applymiddleware()",charIndex:26301},{level:3,title:"8.2.4. combineReducers()",slug:"_8-2-4-combinereducers",normalizedTitle:"8.2.4. combinereducers()",charIndex:26559},{level:2,title:"8.3. redux的三个核心概念",slug:"_8-3-redux的三个核心概念",normalizedTitle:"8.3. redux 的三个核心概念",charIndex:26695},{level:3,title:"8.3.1. action",slug:"_8-3-1-action",normalizedTitle:"8.3.1. action",charIndex:26718},{level:3,title:"8.3.2. reducer",slug:"_8-3-2-reducer",normalizedTitle:"8.3.2. reducer",charIndex:27002},{level:3,title:"8.3.3. store",slug:"_8-3-3-store",normalizedTitle:"8.3.3. store",charIndex:27318},{level:2,title:"8.4. 使用redux编写应用",slug:"_8-4-使用redux编写应用",normalizedTitle:"8.4. 使用 redux 编写应用",charIndex:27644},{level:3,title:"8.4.1. 效果",slug:"_8-4-1-效果",normalizedTitle:"8.4.1. 效果",charIndex:27667},{level:3,title:"8.4.2. 下载依赖包",slug:"_8-4-2-下载依赖包",normalizedTitle:"8.4.2. 下载依赖包",charIndex:27681},{level:3,title:"8.4.3. redux/action_types.js",slug:"_8-4-3-redux-action-types-js",normalizedTitle:"8.4.3. redux/action_types.js",charIndex:27724},{level:3,title:"8.4.4. redux/actions_creators.js",slug:"_8-4-4-redux-actions-creators-js",normalizedTitle:"8.4.4. redux/actions_creators.js",charIndex:27902},{level:3,title:"8.4.5. redux/reducers.js",slug:"_8-4-5-redux-reducers-js",normalizedTitle:"8.4.5. redux/reducers.js",charIndex:28196},{level:3,title:"8.4.6. components/app.jsx",slug:"_8-4-6-components-app-jsx",normalizedTitle:"8.4.6. components/app.jsx",charIndex:28736},{level:3,title:"8.4.7. store.js",slug:"_8-4-7-store-js",normalizedTitle:"8.4.7. store.js",charIndex:30611},{level:3,title:"8.4.8. 问题",slug:"_8-4-8-问题",normalizedTitle:"8.4.8. 问题",charIndex:31226},{level:2,title:"8.5. react-redux",slug:"_8-5-react-redux",normalizedTitle:"8.5. react-redux",charIndex:31289},{level:3,title:"8.5.1. 理解",slug:"_8-5-1-理解",normalizedTitle:"8.5.1. 理解",charIndex:31310},{level:3,title:"8.5.2. React-Redux将所有组件分成两大类",slug:"_8-5-2-react-redux将所有组件分成两大类",normalizedTitle:"8.5.2. react-redux 将所有组件分成两大类",charIndex:31377},{level:3,title:"8.5.3. 相关API",slug:"_8-5-3-相关api",normalizedTitle:"8.5.3. 相关 api",charIndex:31614},{level:3,title:"8.5.4. 使用react-redux",slug:"_8-5-4-使用react-redux",normalizedTitle:"8.5.4. 使用 react-redux",charIndex:32039},{level:3,title:"8.5.5. 问题",slug:"_8-5-5-问题",normalizedTitle:"8.5.5. 问题",charIndex:35060},{level:2,title:"8.6. redux异步编程",slug:"_8-6-redux异步编程",normalizedTitle:"8.6. redux 异步编程",charIndex:35138},{level:3,title:"8.6.1. 下载redux插件(异步中间件)",slug:"_8-6-1-下载redux插件-异步中间件",normalizedTitle:"8.6.1. 下载 redux 插件 (异步中间件)",charIndex:35158},{level:3,title:"8.6.2. store.js",slug:"_8-6-2-store-js",normalizedTitle:"8.6.2. store.js",charIndex:35221},{level:3,title:"8.6.3. redux/actions.js",slug:"_8-6-3-redux-actions-js",normalizedTitle:"8.6.3. redux/actions.js",charIndex:35487},{level:3,title:"8.6.4. components/counter.jsx",slug:"_8-6-4-components-counter-jsx",normalizedTitle:"8.6.4. components/counter.jsx",charIndex:35705},{level:3,title:"8.6.5. containers/app.jsx",slug:"_8-6-5-containers-app-jsx",normalizedTitle:"8.6.5. containers/app.jsx",charIndex:35881},{level:2,title:"8.7. 使用上redux调试工具",slug:"_8-7-使用上redux调试工具",normalizedTitle:"8.7. 使用上 redux 调试工具",charIndex:36127},{level:3,title:"8.7.1. 安装chrome浏览器插件",slug:"_8-7-1-安装chrome浏览器插件",normalizedTitle:"8.7.1. 安装 chrome 浏览器插件",charIndex:36151},{level:3,title:"8.7.2. 下载工具依赖包",slug:"_8-7-2-下载工具依赖包",normalizedTitle:"8.7.2. 下载工具依赖包",charIndex:36178},{level:3,title:"8.7.3. 编码",slug:"_8-7-3-编码",normalizedTitle:"8.7.3. 编码",charIndex:36251},{level:2,title:"8.8. 相关重要知识: 纯函数和高阶函数",slug:"_8-8-相关重要知识-纯函数和高阶函数",normalizedTitle:"8.8. 相关重要知识：纯函数和高阶函数",charIndex:36459},{level:3,title:"8.8.1. 纯函数",slug:"_8-8-1-纯函数",normalizedTitle:"8.8.1. 纯函数",charIndex:36484},{level:3,title:"8.8.2. 高阶函数",slug:"_8-8-2-高阶函数",normalizedTitle:"8.8.2. 高阶函数",charIndex:36677}],lastUpdated:"5/26/2022, 9:20:36 AM",lastUpdatedTimestamp:1653556836e3,headersStr:"1.1. React的基本认识 1.2. React的基本使用 1.3. JSX的理解和使用 1.4概念理解 1). 模块与组件 2). 模块化与组件化 2.1. 基本理解和使用 2.2. 组件的3大属性: state 2.2. 组件的3大属性: props 2.2. 组件的3大属性: refs 2.3. 组件中的事件处理 2.4. 组件的组合使用 2.5. 组件收集表单数据 2.6. 组件的生命周期（旧） 2.7组件的生命周期（新） 2.7. 虚拟DOM与DOM diff算法 1). 虚拟DOM是什么? 2). 虚拟DOM 算法的基本步骤 3). 进一步理解 3.1. 使用create-react-app创建react应用 3.1.1. react脚手架 3.1.2. 创建项目并启动 3.1.3. react脚手架项目结构 4.1. 理解 4.1.1. 前置说明 4.1.2. 常用的ajax请求库 4.1.3. 效果 4.2. axios 4.2.1. 文档 4.2.2. 相关API 4.3. Fetch 4.3.1. 文档 4.3.2. 相关API 5.1. 组件间通信 5.1.1. 方式一: 通过props传递 5.1.2. 方式二: 使用消息订阅(subscribe)-发布(publish)机制 5.1.3. 方式三: redux 5.1.4. 面试题: 比较react中组件间3种通信方式 5.2. 事件监听理解 5.2.1. 原生DOM事件 5.2.2. 自定义事件(消息机制) 5.3. ES6常用新语法 6.1. 相关理解 6.1.1. react-router-dom的理解 6.1.2. SPA的理解 6.1.3. 路由的理解 6.1.4. 前端路由的实现 6.2. react-router相关API 6.2.1. 组件 6.2.2. 其它 6.3. 基本路由使用 6.3.1. 准备 6.3.2. 路由组件: pages/about.jsx 6.3.3. 路由组件: pages/home.jsx 6.3.4.BrowserRouter 6.3.5. 应用组件:app.jsx 6.3.6. 自定义样式: index.css 6.4. 嵌套路由使用 6.4.2. 二级路由组件: pages/news.jsx 6.4.3. 二级路由组件: pages/message.jsx 6.4.4. 一级路由组件: pages/home.jsx 6.5. 向路由组件传递参数数据 6.5.1. 三级路由组件: pages/home-message-detail.jsx 6.5.2. 二级路由组件: pages/home-message.jsx 6.6. 多种路由跳转方式 6.6.1. 二级路由: views/message.jsx 7.1. 最流行的开源React UI组件库 7.1.1. material-ui(国外) 7.1.2. ant-design(国内蚂蚁金服) 7.2. ant-design使用入门 1.引入antd 2.下载组件库包 3.实现组件的按需打包 4. 自定义antd主题 5.在应用组件中使用antd 8.1. redux理解 8.1.1. 学习文档 8.1.2. redux是什么? 8.1.3. 什么情况下需要使用redux 8.2. redux的核心API 8.2.1. createStore() 8.2.2. store对象 8.2.3. applyMiddleware() 8.2.4. combineReducers() 8.3. redux的三个核心概念 8.3.1. action 8.3.2. reducer 8.3.3. store 8.4. 使用redux编写应用 8.4.1. 效果 8.4.2. 下载依赖包 8.4.3. redux/action_types.js 8.4.4. redux/actions_creators.js 8.4.5. redux/reducers.js 8.4.6. components/app.jsx 8.4.7. store.js 8.4.8. 问题 8.5. react-redux 8.5.1. 理解 8.5.2. React-Redux将所有组件分成两大类 8.5.3. 相关API 8.5.4. 使用react-redux 8.5.5. 问题 8.6. redux异步编程 8.6.1. 下载redux插件(异步中间件) 8.6.2. store.js 8.6.3. redux/actions.js 8.6.4. components/counter.jsx 8.6.5. containers/app.jsx 8.7. 使用上redux调试工具 8.7.1. 安装chrome浏览器插件 8.7.2. 下载工具依赖包 8.7.3. 编码 8.8. 相关重要知识: 纯函数和高阶函数 8.8.1. 纯函数 8.8.2. 高阶函数",content:"# 第一章. React 入门\n\n\n# 1.1. React 的基本认识\n\n1). Facebook开源的一个js库\n2). 一个用来动态构建用户界面的js库\n3). React的特点\n\tDeclarative(声明式编码)\n\tComponent-Based(组件化编码)\n\tLearn Once, Write Anywhere(支持客户端与服务器渲染)\n\t高效\n\t单向数据流\n4). React高效的原因\n\t虚拟(virtual)DOM, 不总是直接操作DOM(批量更新, 减少更新的次数) \n\t高效的DOM Diff算法, 最小化页面重绘(减小页面更新的区域)\n\tOne Dark Pro\n\tAuto Rename Tag\n\tBracket Pair Colorizer 2\n\n\n\n# 1.2. React 的基本使用\n\n1). 导入相关js库文件(react.js, react-dom.js, babel.min.js)\n2). 编码:\n\t<div id=\"app\"></div>\n\t<script type=\"text/javascript\">\n    let vDom = 'hello'  \n    ReactDOM.render(vDom,document.getElementById(\"app\"))\n  <\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 1.3. JSX 的理解和使用\n\n1). 理解\n\t* 全称: JavaScript XML\n\t* react定义的一种类似于XML的JS扩展语法: XML+JS\n\t* 作用: 用来创建react虚拟DOM(元素)对象\n2). 编码相关\n  \t<div id=\"test\"></div>\n---------------------------------------\n\t<script type=\"text/babel\">\t\t//类型为text/babel\n    let myID = 'id'\n    let myData = 'hello,world'\n    //1.创建虚拟DOM\n    let vDOM2 = <h2 id={myID}><span>{myData}</span></h2>\n    //2.渲染虚拟DOM到页面\n    ReactDOM.render(vDOM2,document.getElementById('test'))\n  <\/script>\n3). 注意:\n\t\t(1)标签的class属性必须改为className属性\n        (2)必须要有根标签\n        (3)标签中js语法用{}包起来，{}中的js必须是表达式\n     \t(4)标签必须有结束\n\t\t(5)标签的style属性值必须为: {{color:'red', width:12}}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 1.4 概念理解\n\n\n# 1). 模块与组件\n\n1. 模块:\n  \t理解: 向外提供特定功能的js程序, 一般就是一个js文件\n  \t为什么: js代码更多更复杂\n  \t作用: 复用js, 简化js的编写, 提高js运行效率\n2. 组件: \n\t理解: 用来实现特定界面功能效果的代码集合(html/css/js/img)\n \t为什么: 一个界面的功能太复杂了\n  \t作用: 复用编码, 简化项目界面编码, 提高运行效率\n\n\n\n# 2). 模块化与组件化\n\n1. 模块化:\n\t当应用的js都以模块来编写的, 这个应用就是一个模块化的应用\n2. 组件化:\n\t当应用是以多组件的方式实现功能, 这上应用就是一个组件化的应用\n\n\n\n# 第二章. react 组件化开发\n\n\n# 2.1. 基本理解和使用\n\n//组件名首字母必须大写\n1). 创建组件类\n\t//方式1: 工厂函数(简单组件, 推荐使用)\n\tfunction MyComponent1() {\n\t\treturn <h1>工厂函数</h1>\n\t}\n\t//方式2: ES6类语法(复杂组件, 推荐使用)\n\tclass MyComponent2 extends React.Component {\n\t\trender () {\n\t\t  return <h1>ES6类语法</h1>\n\t\t}\n\t}\n2). 渲染组件标签\n\tReactDOM.render(<MyComponent1/>,  document.getElementById(\"app\"))\n\tReactDOM.render(<MyComponent2/>,  document.getElementById(\"app\"))\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 2.2. 组件的 3 大属性: state\n\n（所有属性针对的是组件实例对象）\n\n1. 组件被称为\"状态机\", 页面的显示是根据组件的state属性的数据来显示\n2. 初始化指定:\n    state = {isPig:true}\t\t//state以键值对的形式存放数据\n3. 读取显示: \n    let {isPig}=this.state\t\t//结构赋值形式取state值\n4. 更新状态--\x3e更新界面 : \n    this.setState({isPig : false})\t//以键值对形式\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n实例代码\n\nclass Person extends React.Component {\n        state = { isP: true };\n        demo = () => {\t//自定义的方法必须用馒头函数，可以解决this问题\n          let isP = !this.state.isP;\n          this.setState({ isP });\t//state不能直接更新，通过setState更新\n        };\n        render() {\n          let { isP } = this.state;\n            //React中的事件名需要大写,需要用this\n          return <h1 onClick={this.demo}>你是{isP ? \"人\" : \"猪\"}</h1>;\n        } \n      }\nReactDOM.render(<Person />, document.getElementById(\"test\"));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n注意事项\n\n//1.state中的数据不能直接修改\nthis.state=!this.state\t//错误做法\nthis.setState({})\t\t//正确\n//2.如果state中的数据是对象类型，不能直接更新状态\nlet {comment}=this.state\t//错误，修改了原数组中对象\nlet comment=[...this.state.comment]\t\t//正确，使用es8的...运算符，创建了一个新的数组\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 2.2. 组件的 3 大属性: props\n\n所有组件标签的属性的集合对象\n给标签指定属性, 保存外部数据(可能是一个function)\n在组件内部读取属性: this.props.propertyName\n作用: 从目标组件外部向组件内部传递数据\n对props中的属性值进行类型限制和必要性限制\n\tPerson.propTypes = {\n\t\tname: React.PropTypes.string.isRequired,\n\t\tage: React.PropTypes.number.isRequired\n\t}\n扩展属性: 将对象的所有属性通过props传递\n\n    <Person {...person}/>\n\n\n实例对象\n\nclass Person extends React.Component{\n    //类里面的方法一旦加上static关键字，该方法只能有类本身调用，类的实例对象不能使用。\n    //限制接收参数的类型以及必要性\n    static propTypes = {\n      name:PropTypes.string.isRequired,\n      sex:PropTypes.string.isRequired,\n      age:PropTypes.number\n    }\n    //设置参数的默认值\n    static defaultProps = {\n      age:18\n    }\n    //重写父类的render方法\n    render(){\n      let {name,age,sex} = this.props\n      return (\n        <ul>\n          <li>姓名：{name}</li>\n          <li>性别：{age+1}</li>\n          <li>年龄：{sex}</li>\n          <hr/>\n        </ul>\n      )\n    }\n  }\n  \n  \n  let p2 = {\n    name:'张三',\n    age:19,\n    sex:'男'\n  }\n\n \n  //2.渲染组件标签,利用react内部的...obj属性获取组件\n  ReactDOM.render(<Person {...p2}/>,document.getElementById('example2'))\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n组件中的 props\n\n//定义状态\nstate={\n    comment:[\n      {id:\"ggttjjja\",name:\"jack\",content:\"简单\"},\n      {id:\"dddghhja\",name:\"bar\",content:\"不难\"},\n      {id:\"dsadwt03\",name:\"foo\",comment:\"so easy\"}\n    ]\n  }\n//List传参\n<List comment={comment}/>\n-------------------------\n//接收参数\nlet { comment } = this.props\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 2.2. 组件的 3 大属性: refs\n\n作用: 找到组件内部的真实dom元素对象, 进而操作它\n三种使用方式\n\t方式一：ref=\"input1\"  //字符串形式\n\t方式二：ref={input => this.input1 = input}//回调函数形式\n\t方式三：myRef = React.createRef()//创建一个ref容器形式\n\n\n1\n2\n3\n4\n5\n\n\n示例代码：方式一\n\nclass UserInput extends React.Component {\n        handlerClick = () => {\n          //通过ref获取DOM\n          let { input1 } = this.refs;\n          alert(input1.value);\n        };\n        render() {\n          return (\n            <div>\n              //方式一：\n              <input type=\"text\" ref=\"input1\" />\n              &nbsp;\n              <button onClick={this.handlerClick}>弹出数据</button>&nbsp;\n            </div>\n          );\n        }\n      }\nReactDOM.render(<UserInput />, document.getElementById(\"example\")); \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n方式二\n\nclass UserInput extends React.Component {\n        handlerClick = () => {\n          //通过ref获取DOM\n          alert(this.input1.value);\n        };\n        render() {\n          return (\n            <div>\n              {/* 方式二 inptu为形参，自定义，inptut1为方法名 */}\n              <input type=\"text\" ref={(input) => (this.input1 = input)} />\n              <button onClick={this.handlerClick}>弹出数据</button>&nbsp;\n            </div>\n          );\n        }\n      }\nReactDOM.render(<UserInput />, document.getElementById(\"example\"));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n方式三\n\n class UserInput extends React.Component {\n        //方式三：创建一个ref容器\n        //这个容器是一个“专用容器”，只能保存一个元素\n        myRef = React.createRef();\n        handlerClick = () => {\n          //通过ref获取DOM,需要通过current属性获取value\n          let { current } = this.myRef;\n          alert(current.value);\n        };\n        render() {\n          return (\n            <div>\n              {/*将当前元素放入组件对象身上的myRef容器中*/}\n              <input type=\"text\" ref={this.myRef} />\n              <button onClick={this.handlerClick}>弹出数据</button>&nbsp;\n            </div>\n          );\n        }\n      }\nReactDOM.render(<UserInput />, document.getElementById(\"example\"));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 2.3. 组件中的事件处理\n\n1. 给标签添加属性: onXxx={this.eventHandler}\n2. 在组件中添加事件处理方法\n    eventHandler = (event) => {\n                \n    }\n3. 使自定义方法中的this为组件对象\n  \t在constructor()中bind(this)\n  \t使用箭头函数定义方法\n4. 事件监听\n\t绑定事件监听\n\t\t事件名\n\t\t回调函数\n\t触发事件\n\t\t用户对对应的界面做对应的操作\n\t\t编码\n 5.注意：在调用函数是需要传参时要放在函数里面\n onXxx={()=>{this.eventHandler(id)}}\n eventHandler = (id) => {\n                \n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 2.4. 组件的组合使用\n\n1)拆分组件: 拆分界面,抽取组件\n2)实现静态组件: 使用组件实现静态页面效果\n3)实现动态组件\n\t①　动态显示初始化数据\n\t②　交互功能(从绑定事件监听开始)\n\n\n\n# 2.5. 组件收集表单数据\n\n受控组件: 输入过程中自动收集数据到state\n非受控组件: 提交时手动读取数据\n\n\n\n# 2.6. 组件的生命周期（旧）\n\n1. 组件的三个生命周期状态:\n\tMount：插入真实 DOM\n\tUpdate：被重新渲染\n\tUnmount：被移出真实 DOM\n2. 生命周期流程:\n\t* 第一次初始化显示: ReactDOM.render(<Xxx/>, containDom)\n\t\tconstructor()\n\t\tcomponentWillMount() : 将要插入回调\n\t\trender() : 用于插入虚拟DOM回调\n\t\tcomponentDidMount() : 已经插入回调\n\t* 每次更新state: this.setState({})\n\t    componentWillReceiveProps(): 接收父组件新的属性\n\t    componentWillUpdate() : 将要更新回调\n\t    render() : 更新(重新渲染)\n\t    componentDidUpdate() : 已经更新回调\n\t* 删除组件: ReactDOM.unmountComponentAtNode(div): 移除组件\n\t\tcomponentWillUnmount() : 组件将要被移除回调\n3. 常用的方法\n  \tcomponentDidMount() : 只执行一次, 已经在dom树中, 适合启动/设置一些监听\n  \tcomponentWillUnmount()：适合做收尾工作，清楚定时器/关闭数据库/关闭流\n\n\n\n# 2.7 组件的生命周期（新）\n\n 1. 组件的三个生命周期状态:\n    \n\n* 初始化阶段：第一次渲染，插入真实 DOM\n\n* 更新阶段：重新渲染\n\n* 卸载阶段：被移出真实 DOM\n\n 2. 生命周期流程:\n\na. 初始化阶段：由 ReactDOM.render () 触发\n\n* constructor()\n\n* static getDerivedStateFromProps()\n\n* render()\n\n* componentDidMount()\n\nb. 更新阶段 由组件内部 this.setSate () 或父组件重新 render 触发\n\n* static getDerivedStateFromProps()\n\n* shouldComponentUpdate()\n\n* render()\n\n* getSnapshotBeforeUpdate()\n\n* componentDidUpdate()\n\nc. 移除组件：由 ReactDOM.unmountComponentAtNode (containerDom) 触发\n\n* componentWillUnmount()\n\n重要的勾子\n\n 1. render(): 初始化渲染或更新渲染调用\n    \n\n 2. componentDidMount(): 开启监听, 发送ajax请求\n    \n\n 3. componentWillUnmount(): 做一些收尾工作, 如: 清理定时器\n    \n\n 4. static getDerivedStateFromProps(): state是根据props来生成的那就需要借助这个函数\n    \n\n\n# 2.7. 虚拟 DOM 与 DOM diff 算法\n\n\n# 1). 虚拟 DOM 是什么？\n\n一个虚拟DOM(元素)是一个一般的js对象, 准确的说是一个对象树(倒立的)\n虚拟DOM保存了真实DOM的层次关系和一些基本属性，与真实DOM一一对应\n如果只是更新虚拟DOM, 页面是不会重绘的\n\n\n\n# 2). 虚拟 DOM 算法的基本步骤\n\n用JS对象树表示DOM树的结构；然后用这个树构建一个真正的DOM树插到文档当中\n当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异\n把差异应用到真实DOM树上，视图就更新了\n\n\n\n# 3). 进一步理解\n\nVirtual DOM 本质上就是在 JS 和 DOM 之间做了一个缓存。\n可以类比 CPU 和硬盘，既然硬盘这么慢，我们就在它们之间加个缓存：既然 DOM 这么慢，我们就在它们 JS 和 DOM 之间加个缓存。CPU（JS）只操作内存（Virtual DOM），最后的时候再把变更写入硬盘（DOM）。\n\n\n\n# 第 3 章：react 应用 (基于 react 脚手架)\n\n\n# 3.1. 使用 create-react-app 创建 react 应用\n\n\n# 3.1.1. react 脚手架\n\n 1. xxx脚手架: 用来帮助程序员快速创建一个基于xxx库的模板项目\n    \n\na. 包含了所有需要的配置\n\nb. 指定好了所有的依赖\n\nc. 可以直接安装 / 编译 / 运行一个简单效果\n\n 2. react提供了一个用于创建react项目的脚手架库: create-react-app\n    \n\n 3. 项目的整体技术架构为: react + webpack + es6 + eslint\n    \n\n 4. 使用脚手架开发的项目的特点: 模块化, 组件化, 工程化\n    \n\n\n# 3.1.2. 创建项目并启动\n\nnpm install -g create-react-app\t\t//全局下载react脚手架\n\ncreate-react-app hello-react\t\t//创建react项目，hello-react为项目名\n\ncd hello-react\t\t\t\t\t\t//切换到项目目录\n\nnpm start\t\t\t\t\t\t\t//运行项目\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 3.1.3. react 脚手架项目结构\n\nReactNews\n\n|--node_modules--- 第三方依赖模块文件夹\n\n|--public\n\n|-- *index.html-----------------* 主页面\n\n|--src------------ 源码文件夹\n\n|--components-----------------react** 组件\n\n|--index.js------------------- 应用入口 js\n\n|--.gitignore------git 版本管制忽略的配置\n\n|--package.json---- 应用包配置文件\n\n|--README.md------- 应用描述说明的 readme 文件\n\n\n# 第 4 章：react ajax\n\n\n# 4.1. 理解\n\n\n# 4.1.1. 前置说明\n\n 1. React本身只关注于界面, 并不包含发送ajax请求的代码\n    \n\n 2. 前端应用需要通过ajax请求与后台进行交互(json数据)\n    \n\n 3. react应用中需要集成第三方ajax库(或自己封装)\n    \n\n\n# 4.1.2. 常用的 ajax 请求库\n\n 1. jQuery: 比较重, 如果需要另外引入不建议使用\n    \n\n 2. axios: 轻量级, 建议使用\n    \n\na. 封装 XmlHttpRequest 对象的 ajax\n\nb. promise 风格\n\nc. 可以用在浏览器端和 node 服务器端\n\n 3. fetch: 原生函数, 但老版本浏览器不支持\n    \n\na. 不再使用 XmlHttpRequest 对象提交 ajax 请求\n\nb. 为了兼容低版本的浏览器，可以引入兼容库 fetch.js\n\n\n# 4.1.3. 效果\n\n需求:\n  1. 界面效果如下\n  2. 根据指定的关键字在github上搜索匹配的最受关注的库\n  3. 显示库名, 点击链接查看库\n4. 测试接口: https://api.github.com/search/repositories?q=r&sort=stars\n\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 4.2. axios\n\n\n# 4.2.1. 文档\n\nhttps://github.com/axios/axios\n\n\n# 4.2.2. 相关 API\n\n 1. GET请求\n    \n\naxios\n  .get(\"/user?ID=12345\")\n  .then(function (response) {\n    console.log(response.data);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n---------------------------------------\naxios\n  .get(\"/user\", { params: { ID: 12345 } })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n 2. POST请求\n    \n\naxios\n.post(\"/user\", { firstName: \"Fred\", lastName: \"Flintstone\" })\n.then(function (response) {\n  console.log(response);\n})\n.catch(function (error) {\n  console.log(error);\n});\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 4.3. Fetch\n\n\n# 4.3.1. 文档\n\n 1. https://github.github.io/fetch/\n    \n\n 2. https://segmentfault.com/a/1190000003810652\n    \n\n\n# 4.3.2. 相关 API\n\n 1. GET请求\n    \n\nfetch(url)\n.then(function (response) {\n  return response.json();\t\t//返回一个promise实例对象，状态为<pending>\n})\n.then(function (value) {\n  console.log(value);\t//成功\n})\n.catch(function (reason) {\n  console.log(e);\t\t//失败\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n 2. POST请求\n    \n\nfetch(url, { method: \"POST\", body: JSON.stringify(data) })\n .then(function (response) {\n   return response.json();\t\t//返回一个promise实例对象，状态为<pending>\n })\n .then(function (value) {\n   console.log(value);\t//成功\n })\n .catch(function (reason) {\n   console.log(e);\t\t//失败\n });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n 3. fetch的问题\n    \n\nurl:  https://api.github.com/search/repositories\n.then(function (response) {\n    return response.json();\t\t//在此方法中如果https://api.github.com有错误，调用catch,但是search/repositories有错误，则调用的是then,显然不能得到数据。解决方案：自己简单对response进行封装\n  })\n\n\n1\n2\n3\n4\n\n\n\n# 第 5 章：几个重要技术总结\n\n\n# 5.1. 组件间通信\n\n\n# 5.1.1. 方式一：通过 props 传递\n\n 1. 共同的数据放在父组件上, 特有的数据放在自己组件内部(state)\n    \n\n 2. 通过props可以传递一般属性和函数属性, 只能一层一层传递\n    \n\n 3. 一般属性--\x3e父组件传递数据给子组件--\x3e子组件读取数据\n    \n\n 4. 函数属性--\x3e子组件传递数据给父组件--\x3e子组件调用函数\n    \n\n\n# 5.1.2. 方式二：使用消息订阅 (subscribe)- 发布 (publish) 机制\n\n1)     工具库: PubSubJS\n\n2)     下载: npm install pubsub-js \n\n3)     使用: \n\n   import PubSub from 'pubsub-js' //引入\n\n   PubSub.subscribe('delete', (msg,data)=>{}); //订阅消息,一般放在钩子里，delete是标识，与发布相匹配，data是真正数据\n\n   PubSub.publish('delete', data) //发布消息，data是发布的数据，与上面的相对应\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n示例代码：\n\n//List组件,订阅消息\ncomponentDidMount(){\n        Pubsub.subscribe('hello',(msg,data)=>{\n          this.setState(data)\n      })\n  }\n//Add组件，发布消息\nPubsub.publish('hello',{\n          users:[],\n          isFirst:false,\n          isLoading:true,\n          error:\"\"\n        })\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 5.1.3. 方式三: redux\n\n后面专门讲解\n\n\n# 5.1.4. 面试题：比较 react 中组件间 3 种通信方式\n\n*1).* *方式一**:* *通过**props**传递   通过**props**可以传递一般数据和函数数据**,  *  *一般数据**--\x3e**父组件向子组件   函数数据**--\x3e**子组件向父组件通信   缺点**:* *只能一层一层传递**/**兄弟组件必须借助父组件 *  *2).* *方式二**:* *使用消息订阅**(subscribe)-**发布**(publish)**机制   实现库**: pubsub-js *  *组件**A:* *发布消息**(**相当于触发事件**) *  *组件**B:* *订阅消息**,* *接收消息**,* *处理消息**(**相当于绑定事件监听**) *  *优点**:* *对组件关系没有限制 *  *3).* *方式三**: redux *  *通过**redux**可以实现任意组件间的通信   集中式管理多个组件共享的状态**,* *而**pubsub-js**并不是集中式的管理*\n\n\n1\n\n\n\n# 5.2. 事件监听理解\n\n\n# 5.2.1. 原生 DOM 事件\n\n 1. 绑定事件监听 \n    \n\na. 目标元素\n\nb. 事件名 (类型): 只有有限的几个，不能随便写\n\nc. 回调函数：接收数据并处理\n\n 2.     触发事件\n    \n\na. 用户操作界面\n\nb. 事件名 (类型)\n\nc. 数据 (event)\n\n\n# 5.2.2. 自定义事件 (消息机制)\n\n 1. 绑定事件监听(订阅消息)\n    \n\na. 目标元素\n\nb. 事件名 (类型): 任意\n\nc. 回调函数：通过形参接收数据，在函数体处理事件\n\n 2. 触发事件(编码, 发布消息)\n    \n\na. (事件名类型): 与绑定的事件监听的事件名一致\n\nb. 数据：会自动传递给回调函数\n\n\n# 5.3. ES6 常用新语法\n\n 1. 定义常量/变量: const/let\n    \n\n 2. 解构赋值: let {a, b} = this.props  import {aa} from 'xxx' function fn({name}) {} fn({name: ‘tom’})\n    \n\n 3. 对象的简洁表达: {a, b}\n    \n\n 4. 箭头函数: \n    \n\na. 常用场景\n\n* 组件的自定义方法: xxx = () => {}\n\n* 参数匿名函数\n\nb. 优点:\n\n* 简洁\n\n* 没有自己的 this, 使用引用 this 查找的是外部 this\n\n 5. 扩展(三点)运算符: 拆解对象(const MyProps = {}, <Xxx {...MyProps}>)\n    \n\n 6. 类: class/extends/constructor/super\n    \n\n 7. ES6 模块化: export default | import\n\n 8. promise\n\n 9. async/await\n\n\n# 第 6 章：react-router4\n\n\n# 6.1. 相关理解\n\n\n# 6.1.1. react-router-dom 的理解\n\n 1. \treact的一个插件库\n    \n\n 2.     专门用来实现一个SPA应用\n    \n\n 3.     基于react的项目基本都会用到此库\n    \n\n\n# 6.1.2. SPA 的理解\n\n 1. \t单页Web应用（single page web application，SPA）\n    \n\n 2.     整个应用只有一个完整的页面\n    \n\n 3.     点击页面中的链接不会刷新页面, 本身也不会向服务器发请求\n    \n\n 4.     当点击路由链接时, 只会做页面的局部更新\n    \n\n 5.     数据都需要通过ajax请求获取, 并在前端异步展现\n    \n\n\n# 6.1.3. 路由的理解\n\n 1. 什么是路由?\n    \n\na. 一个路由就是一个映射关系 (key:value)\n\nb. key 为路由路径，value 可能是 function/component\n\n 2. 路由分类\n    \n\na. 后台路由: node 服务器端路由，value 是 function, 用来处理客户端提交的请求并返回一个响应数据\n\nb. 前台路由：浏览器端路由，value 是 component, 当请求的是路由 path 时，浏览器端前没有发送 http 请求，但界面会更新显示对应的组件\n\n 3. 后台路由\n    \n\na. 注册路由: router.get (path, function (req, res))\n\nb. 当 node 接收到一个请求时，根据请求路径找到匹配的路由，调用路由中的函数来处理请求，返回响应数据\n\n 4.     前端路由\n    \n\na. 注册路由:\n\nb. 当浏览器的 hash 变为 /about 时，当前路由组件就会变为 About 组件\n\n\n# 6.1.4. 前端路由的实现\n\n 1. history库\n    \n\na. 网址: https://github.com/ReactTraining/history\n\nb. 管理浏览器会话历史 (history) 的工具库\n\nc. 包装的是原生 BOM 中 window.history 和 window.location.hash\n\n 2. history API\n    \n\na. History.createBrowserHistory (): 得到封装 window.history 的管理对象\n\nb. History.createHashHistory (): 得到封装 window.location.hash 的管理对象\n\nc. history.push (): 添加一个新的历史记录\n\nd. history.replace (): 用一个新的历史记录替换当前的记录\n\ne. history.goBack (): 回退到上一个历史记录\n\nf. history.goForword (): 前进到下一个历史记录\n\ng. history.listen (function (location){}): 监视历史记录的变化\n\n\n# 6.2. react-router 相关 API\n\n\n# 6.2.1. 组件\n\n 1. <BrowserRouter>\n    \n\n 2. <HashRouter>\n    \n\n 3. <Route>\n    \n\n 4. <Redirect>\n    \n\n 5. <Link>\n    \n\n 6. <NavLink>\n    \n\n 7. <Switch>\n    \n\n\n# 6.2.2. 其它\n\n 1. history对象\n    \n\n 2. match对象\n    \n\n 3. withRouter函数\n    \n\n\n# 6.3. 基本路由使用\n\n\n# 6.3.1. 准备\n\nyarn add react-router-dom\t\t// 下载react-router-dom \n\n\n1\n\n\n\n# 6.3.2. 路由组件: pages/about.jsx\n\nimport React, { Component } from \"react\";\nclass About extends Component {\n    render() {\n      return (\n        <h3>我是About的内容</h3>\n      );\n    }\n  }\n  \n  export default About;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 6.3.3. 路由组件: pages/home.jsx\n\nimport React, { Component } from \"react\";\nclass Home extends Component {\n    render() {\n      return (\n        <h3>我是Home的内容</h3>\n      );\n    }\n  }\n  \n  export default Home;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 6.3.4.BrowserRouter\n\nimport {BrowserRouter} from 'react-router-dom'\n <BrowserRouter>\n    <App />\n </BrowserRouter>\n//需要在index.js里面的App组件外面加上BrowserRouter才能使得NavLink生效\n注意:在引入要样式时不要前面的点或者写成%PUBLIC_URL%这样形式的\n<link rel=\"stylesheet\" href=\"%PUBLIC_URL%/bootstrap.css\" />\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 6.3.5. 应用组件:app.jsx\n\nimport React, { Component } from \"react\";\nimport {  NavLink, Redirect, Route, Switch } from \"react-router-dom\";\nimport About from './pages/about'\nimport Home from './pages/home'\n<div className=\"list-group\">\n <NavLink className=\"list-group-item\" to=\"/about\" activeClassName=\"demo\">About</NavLink>\n <NavLink className=\"list-group-item\" to=\"/home\" activeClassName=\"demo\">Home</NavLink>   </div>\n//NavLink为路由链接，to是跳转到地方，前面需要加/\n//activeClassName是选中时的样式\n--------------------------------------------\n<Switch>\n   <Route path=\"/about\" component={About}></Route>\n   <Route path=\"/home\" component={Home}></Route>\n   <Redirect to=\"/about\"></Redirect>\n</Switch>\n//Switch是避免路由一直匹配，当匹配到路由时就停止\n//Route是路由，path是匹配的路由路径\n//Redirect是重定向，当不指定路由是时，默认的为Redirect\n//component={About}引入组件的另一种方式\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 6.3.6. 自定义样式: index.css\n\n.demo {\n        background-color: gray !important;\n        color: orange !important;\n }\n\n\n1\n2\n3\n4\n\n\n\n# 6.4. 嵌套路由使用\n\n\n# 6.4.2. 二级路由组件: pages/news.jsx\n\nimport React, { Component } from \"react\";\n\nclass HomeNews extends Component {\n  render() {\n    return (\n      <ul>\n        <li>news001</li>\n        <li>news002</li>\n        <li>news003</li>\n      </ul>\n    );\n  }\n}\n\nexport default HomeNews;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 6.4.3. 二级路由组件: pages/message.jsx\n\nimport React, { Component } from \"react\";\n\nclass HomeMessage extends Component {\n  render() {\n    return (\n      <div>\n        <ul>\n          <li> \n              <button>replace查看</button>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default HomeMessage;\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 6.4.4. 一级路由组件: pages/home.jsx\n\nimport React, { Component } from \"react\";\nimport { NavLink, Redirect, Route, Switch } from \"react-router-dom\";\nimport HomeNews from './home_news'\nimport HomeMessage from './home_message'\nclass Home extends Component {\n    render() {\n        return (\n            <div><h2>Home组件内容</h2>\n                <div>\n                    <ul className=\"nav nav-tabs\">\n                        <li>\n                            <NavLink className=\"list-group-item\" to=\"/home/news\" activeClassName=\"selected\">News</NavLink>\n                        </li>\n                        <li>\n                            <NavLink className=\"list-group-item \" to=\"/home/message\" activeClassName=\"selected\">Message</NavLink>\n                        </li>\n                    </ul>\n                    \n                    <Switch>\n                        <Route path=\"/home/news\" component={HomeNews}></Route>\n                        <Route path=\"/home/message\" component={HomeMessage}></Route>\n                        <Redirect to=\"/home/news\"></Redirect>\n                    </Switch>\n                </div>\n            </div>\n        );\n    }\n}\nexport default Home;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n\n# 6.5. 向路由组件传递参数数据\n\n\n# 6.5.1. 三级路由组件: pages/home-message-detail.jsx\n\nimport React, { Component } from 'react'\nexport default class HomeMessageDetail extends Component {\n    state = {\n        messageDetail: [\n            { id: 1, title: '消息1', content: '内容1' },\n            { id: 2, title: '消息2', content: '内容2' },\n            { id: 3, title: '消息3', content: '内容3' },\n        ]\n    }\n    render() {\n        \n        // console.log('我是hmd的实例',this.props.match.params);\n        let { id } = this.props.match.params\n        //通过组件实例对象this.props.match.params上取得参数（id）\n        //注意：通过实例取得的参数是字符串，需要转换为Number类型与之匹配\n        let { messageDetail } = this.state\n        let obj = messageDetail.find((item) => {\n            return item.id === id * 1\n        })\n        if (obj) {\n            return (\n                <ul>\n                    <li>id:{obj.id}</li>\n                    <li>title:{obj.til}</li>\n                    <li>content:{obj.content}</li>\n                </ul>\n            )\n        } else {\n            return <h1>没有消息</h1>\n        }\n\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# 6.5.2. 二级路由组件: pages/home-message.jsx\n\nimport React, { Component } from \"react\";\nimport { Link, Route } from \"react-router-dom\"\nimport HomeMessageDetail from './home_message_detail'\nclass HomeMessage extends Component {\n  state = {\n    message: []\n  }\n  componentDidMount() {\n    setInterval(() => {\n      this.setState({\n        message: [\n          { id: 1, title: \"message1\" },\n          { id: 2, title: \"message2\" },\n          { id: 3, title: \"message3\" }\n        ]\n      })\n    }, 1000)\n  }\n  render() {\n\n    let { message } = this.state\n    return (\n      <div>\n        <ul>\n          {message.map((item) => {\n            return (\n              <li key={item.id}>\n                <Link to={`/home/message/detail/${item.id}`}>{item.title}</Link>\n                   //在/home/message/detail/后面传递参数\n              </li>\n            )\n          })\n          }\n\n        </ul>\n\n        <hr />\n        <Route path=\"/home/message/detail/:id\" component={HomeMessageDetail}></Route>\n            //在/home/message/detail/后面通过占位符接收参数（一般为id）\n      </div>\n    );\n  }\n}\n\nexport default HomeMessage;\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n\n\n\n# 6.6. 多种路由跳转方式\n\n\n# 6.6.1. 二级路由: views/message.jsx\n\nimport React, { Component } from \"react\";\nimport { Link, Route } from \"react-router-dom\"\nimport HomeMessageDetail from './home_message_detail'\nclass HomeMessage extends Component {\n  state = {\n    message: []\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      this.setState({\n        message: [\n          { id: 1, title: \"message1\" },\n          { id: 2, title: \"message2\" },\n          { id: 3, title: \"message3\" }\n        ]\n      })\n    }, 1000)\n\n  }\n  push = (id) => {\n    this.props.history.push(`/home/message/detail/${id}`)\n  }\n  replace = (id) => {\n    this.props.history.replace(`/home/message/detail/${id}`)\n  }\n  render() {\n\n    let { message } = this.state\n    return (\n      <div>\n        <ul>\n          {message.map((item) => {\n            return (\n              <li key={item.id}>\n                <Link to={`/home/message/detail/${item.id}`}>{item.title}</Link>\n                <button onClick={() => { this.push(item.id) }}>push</button>\n                <button onClick={() => { this.replace(item.id) }}>replace</button>\n\t\t\t\t//通过button方式跳转路由，原理就是借助History库通过改变改变地址栏中的url来实现\n              </li>\n            )\n          })\n          }\n\n        </ul>\n\n        <hr />\n        <Route path=\"/home/message/detail/:id\" component={HomeMessageDetail}></Route>\n      </div>\n    );\n  }\n}\n\nexport default HomeMessage;\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n\n\n\n# 第 7 章：react UI 组件库\n\n\n# 7.1. 最流行的开源 React UI 组件库\n\n\n# 7.1.1. material-ui (国外)\n\n 1.     官网: http://www.material-ui.com/#/\n    \n\n 2.     github: https://github.com/callemall/material-ui\n    \n\n\n# 7.1.2. ant-design (国内蚂蚁金服)\n\n 1.     PC官网: https://ant.design/index-cn\n    \n\n 2. 移动官网: https://mobile.ant.design/index-cn\n    \n\n 3.     Github: https://github.com/ant-design/ant-design/\n    \n\n 4. Github: https://github.com/ant-design/ant-design-mobile/\n    \n\n\n# 7.2. ant-design 使用入门\n\n\n# 1. 引入 antd\n\n参考文档:\n\nhttps://ant.design/docs/react/use-with-create-react-app-cn\n\n\n# 2. 下载组件库包\n\nyarn add antd\n\n\n1\n\n\n\n# 3. 实现组件的按需打包\n\n 1. 下载依赖模块\n\nyarn add react-app-rewired customize-cra babel-plugin-import\n\n\n1\n\n 2. 在根目录下创建加载配置的 js 模块: config-overrides.js\n\nconst {override, fixBabelImports} = require('customize-cra');\nmodule.exports = override(\n  fixBabelImports('import', {\n    libraryName: 'antd',\n    libraryDirectory: 'es',\n    style: 'css',\n  }),\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n3） 修改配置: package.json\n\n\"scripts\": {\n  \"start\": \"react-app-rewired start\",\n  \"build\": \"react-app-rewired build\",\n  \"test\": \"react-app-rewired test\",\n  \"eject\": \"react-scripts eject\"\n},\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 4. 自定义 antd 主题\n\n 1. 下载工具包:\n\nyarn add less@3.9.0 less-loader@4.1.0\t\t//less版本和less-loader需要匹配\n\n\n1\n\n 2. 修改 config-overrides.js\n\nconst {override, fixBabelImports, addLessLoader} = require('customize-cra');\n\nmodule.exports = override(\n  fixBabelImports('import', {\n    libraryName: 'antd',\n    libraryDirectory: 'es',\n    style: true,\n  }),\n  addLessLoader({\n    javascriptEnabled: true,\n    modifyVars: {'@primary-color': '#1DA57A'},    \n  })\n);\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 5. 在应用组件中使用 antd\n\nimport { Button } from 'antd';\nrender() {\n    return (\n      <div>\n        App\n        <Button type=\"primary\">Button</Button>\n      </div>\n    );\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 第 8 章 Redux\n\n\n# 8.1. redux 理解\n\n\n# 8.1.1. 学习文档\n\n 1. 英文文档: https://redux.js.org/\n    \n\n 2. 中文文档: http://www.redux.org.cn/\n    \n\n 3. Github: https://github.com/reactjs/redux\n    \n\n\n# 8.1.2. redux 是什么？\n\n 1. redux是一个独立专门用于做状态管理的JS库(不是react插件库)\n    \n\n 2. 它可以用在react, angular, vue等项目中, 但基本与react配合使用\n    \n\n 3. 作用: 集中式管理(读/写)react应用中多个组件共享的状态\n    \n\n\n# 8.1.3. 什么情况下需要使用 redux\n\n 1. 总体原则: 能不用就不用, 如果不用比较吃力才考虑使用\n    \n\n 2.     某个组件的状态，需要共享\n    \n\n 3.     某个状态需要在任何地方都可以拿到\n    \n\n 4.     一个组件需要改变全局状态\n    \n\n 5.     一个组件需要改变另一个组件的状态\n    \n\n\n# 8.2. redux 的核心 API\n\n\n# 8.2.1. createStore()\n\n 1. 作用: \n    \n\n创建包含指定 reducer 的 store 对象\n\n 2. 编码:\n    \n\nimport {createStore} from 'redux'\n\nimport counter from './reducers/counter'\n\nconst store = createStore(counter)\n\n\n# 8.2.2. store 对象\n\n 1. 作用: \n    \n\nredux 库最核心的管理对象\n\n 2. 它内部维护着:\n    \n\nstate\n\nreducer\n\n 3. 核心方法:\n    \n\ngetState()\n\ndispatch(action)\n\nsubscribe(listener)\n\n 4. 编码:\n    \n\nstore.getState()\n\nstore.dispatch({type:'INCREMENT', number})\n\nstore.subscribe(render)\n\n\n# 8.2.3. applyMiddleware()\n\n 1. 作用:\n    \n\n应用上基于 redux 的中间件 (插件库)\n\n 2. 编码:\n    \n\nimport {createStore, applyMiddleware} from 'redux'\n\nimport thunk from 'redux-thunk' //redux 异步中间件\n\nconst store = createStore(\n\ncounter,\n\napplyMiddleware (thunk) // 应用上异步中间件\n\n)\n\n\n# 8.2.4. combineReducers()\n\n 1. 作用:\n    \n\n合并多个 reducer 函数\n\n 2. 编码:\n    \n\nexport default combineReducers({\n\nuser,\n\nchatUser,\n\nchat\n\n})\n\n\n# 8.3. redux 的三个核心概念\n\n\n# 8.3.1. action\n\n 1. 标识要执行行为的对象\n    \n\n 2. 包含2个方面的属性\n    \n\na. type: 标识属性，值为字符串，唯一，必要属性\n\nb. xxx: 数据属性，值类型任意，可选属性\n\n 3. 例子:\n    \n\nconst action = {\n\ntype: 'INCREMENT',\n\ndata: 2\n\n}\n\n 4. Action Creator(创建Action的工厂函数)\n    \n\nconst increment = (number) => ({type: 'INCREMENT', data: number})\n\n\n# 8.3.2. reducer\n\n 1. 根据老的state和action, 产生新的state的纯函数\n    \n\n 2. 样例\n    \n\nexport default function counter(state = 0, action) {\n\nswitch (action.type) {\n\ncase 'INCREMENT':\n\nreturn state + action.data\n\ncase 'DECREMENT':\n\nreturn state - action.data\n\ndefault:\n\nreturn state\n\n}\n\n}\n\n 3. 注意\n    \n\na. 返回一个新的状态\n\nb. 不要修改原来的状态\n\n\n# 8.3.3. store\n\n 1. 将state,action与reducer联系在一起的对象\n    \n\n 2. 如何得到此对象?\n    \n\nimport {createStore} from 'redux'\n\nimport reducer from './reducers'\n\nconst store = createStore(reducer)\n\n 3. 此对象的功能?\n    \n\ngetState (): 得到 state\n\ndispatch (action): 分发 action, 触发 reducer 调用，产生新的 state\n\nsubscribe (listener): 注册监听，当产生了新的 state 时，自动调用\n\n\n# 8.4. 使用 redux 编写应用\n\n\n# 8.4.1. 效果\n\n\n# 8.4.2. 下载依赖包\n\nnpm install --save redux\n\n\n# 8.4.3. redux/action_types.js\n\n*/\\* *  *a**ction**对象的**type**常量名称模块**  \\*/ *  **export const** INCREMENT = **'increment' **  **export const** DECREMENT = **'decrement'**\n\n\n1\n\n\n\n# 8.4.4. redux/actions_creators.js\n\n*/\\*  action creator**模块**  \\*/ *  **import** {INCREMENT, DECREMENT} **from** **'./action-types'    **  **export const** *increment* = number => ({**type**: INCREMENT, number})  **export const** *decrement* = number => ({**type**: DECREMENT, number})\n\n\n1\n\n\n\n# 8.4.5. redux/reducers.js\n\n*/\\* *  *根据老的**state**和指定**action,* *处理返回一个新的**state  \\*/ *  **import** {INCREMENT, DECREMENT} **from** **'../constants/ActionTypes'    **  **import** {INCREMENT, DECREMENT} **from** **'./action-types'    **  **export function** *counter*(state = 0, action) {  **console**.log(**'counter'**, state, action)  **switch** (action.**type**) {   **case** INCREMENT:    **return** state + action.**number **   **case** DECREMENT:    **return** state - action.**number **   **default**:    **return** state  } }\n\n\n1\n\n\n\n# 8.4.6. components/app.jsx\n\n*/\\* *  *应用组件**  \\*/ *  **import** React, {Component} **from** **'react' **  **import** PropTypes **from** **'prop-types' **  **import** * **as** actions **from** **'../redux/actions'    **  **export default class** App **extends** Component {    **static** *propTypes* = {   **store**: PropTypes.*object*.isRequired,  }    *increment* = () => {   **const** number = **this**.**refs**.numSelect.**value** * 1   **this**.**props**.**store**.dispatch(actions.*increment*(number))  }    *decrement* = () => {   **const** number = **this**.**refs**.numSelect.**value** * 1   **this**.**props**.**store**.dispatch(actions.*decrement*(number))  }    *incrementIfOdd* = () => {   **const** number = **this**.**refs**.numSelect.**value** * 1     **let** count = **this**.**props**.**store**.getState()   **if** (count % 2 === 1) {    **this**.**props**.**store**.dispatch(actions.*increment*(number))   }  }    *incrementAsync* = () => {   **const** number = **this**.**refs**.numSelect.**value** * 1   setTimeout(() => {    **this**.**props**.**store**.dispatch(actions.*increment*(number))   }, 1000)  }    render() {   **return** (    <**div**>     <**p**>      click {**this**.**props**.**store**.getState()} times {**' '**}     </**p**>     <**select** **ref****=\"numSelect\"**>      <**option** **value****=\"1\"**>1</**option**>      <**option** **value****=\"2\"**>2</**option**>      <**option** **value****=\"3\"**>3</**option**>     </**select**>{**' '**}     <**button** **onClick****=**{**this**.*increment*}>+</**button**>     {**' '**}     <**button** **onClick****=**{**this**.*decrement*}>-</**button**>     {**' '**}     <**button** **onClick****=**{**this**.*incrementIfOdd*}>increment if odd</**button**>     {**' '**}     <**button** **onClick****=**{**this**.*incrementAsync*}>increment async</**button**>    </**div**>   )  } }`` \n\n\n1\n\n\n\n# 8.4.7. store.js\n\n**import** React **from** **'react' **  **import** ReactDOM **from** **'react-dom' **  **import** {createStore} **from** **'redux'    **  **import** App **from** **'./components/app' **  **import** {*counter*} **from** **'./redux/reducers'    **  *//* *根据**counter**函数创建**store**对象 *  **const** store = createStore(*counter*)    *//* *定义渲染根组件标签的函数 *  **const** *render* = () => {  ReactDOM.render(   <**App** **store****=**{store}/>,   **document**.getElementById(**'root'**)  ) }  *//* *初始化渲染 *  *render*()    *//* *注册**(**订阅**)**监听**,* *一旦状态发生改变**,* *自动重新渲染 *  store.subscribe(*render*)\n\n\n1\n\n\n\n# 8.4.8. 问题\n\n 1. redux与react组件的代码耦合度太高\n    \n\n 2. 编码不够简洁\n    \n\n\n# 8.5. react-redux\n\n\n# 8.5.1. 理解\n\n 1. 一个react插件库\n    \n\n 2. 专门用来简化react应用中使用redux\n    \n\n\n# 8.5.2. React-Redux 将所有组件分成两大类\n\n 1. UI组件\n    \n\na. 只负责 UI 的呈现，不带有任何业务逻辑\n\nb. 通过 props 接收数据 (一般数据和函数)\n\nc. 不使用任何 Redux 的 API\n\nd. 一般保存在 components 文件夹下\n\n 2. 容器组件\n    \n\na. 负责管理数据和业务逻辑，不负责 UI 的呈现\n\nb. 使用 Redux 的 API\n\nc. 一般保存在 containers 文件夹下\n\n\n# 8.5.3. 相关 API\n\n 1. Provider\n    \n\n让所有组件都可以得到 state 数据\n\n 2. connect()\n    \n\n用于包装 UI 组件生成容器组件\n\nimport { connect } from 'react-redux'\nconnect(\nmapStateToprops,\nmapDispatchToProps\n)(Counter)\n\n 3. mapStateToprops()\n    \n\n将外部的数据（即 state 对象）转换为 UI 组件的标签属性\nconst mapStateToprops = function (state) {\nreturn {\nvalue: state\n}\n}\n\n 4. mapDispatchToProps()\n    \n\n将分发 action 的函数转换为 UI 组件的标签属性\n\n简洁语法可以直接指定为 actions 对象或包含多个 action 方法的对象\n\n\n# 8.5.4. 使用 react-redux\n\n 1. 下载依赖包\n    \n\nnpm install --save react-redux\n\n 2. redux/action_types.js\n    \n\n不变\n\n 3. redux/actions_creators.js\n    \n\n不变\n\n 4. redux/reducers.js\n    \n\n不变\n\n 5. components/counter.jsx\n    \n\n*/\\*  UI**组件**:* *不包含任何**redux API  \\*/ *  **import** React **from** **'react' **  **import** PropTypes **from** **'prop-types'    **  **export default class** Counter **extends** React.Component {    **static** *propTypes* = {   **count**: PropTypes.*number*.isRequired,   **increment**: PropTypes.*func*.isRequired,   **decrement**: PropTypes.*func*.isRequired  }    *increment* = () => {   **const** number = **this**.**refs**.numSelect.**value** * 1   **this**.**props**.**increment**(number)  }    *decrement* = () => {   **const** number = **this**.**refs**.numSelect.**value** * 1   **this**.**props**.**decrement**(number)  }    *incrementIfOdd* = () => {   **const** number = **this**.**refs**.numSelect.**value** * 1   **let** count = **this**.**props**.**count **   **if** (count % 2 === 1) {    **this**.**props**.**increment**(number)   }  }    *incrementAsync* = () => {   **const** number = **this**.**refs**.numSelect.**value** * 1   setTimeout(() => {    **this**.**props**.**increment**(number)   }, 1000)  }    render() {   **return** (    <**div**>     <**p**>      click {**this**.**props**.**count**} times {**' '**}     </**p**>     <**select** **ref****=\"numSelect\"**>      <**option** **value****=\"1\"**>1</**option**>      <**option** **value****=\"2\"**>2</**option**>      <**option** **value****=\"3\"**>3</**option**>     </**select**>{**' '**}     <**button** **onClick****=**{**this**.*increment*}>+</**button**>     {**' '**}     <**button** **onClick****=**{**this**.*decrement*}>-</**button**>     {**' '**}     <**button** **onClick****=**{**this**.*incrementIfOdd*}>increment if odd</**button**>     {**' '**}     <**button** **onClick****=**{**this**.*incrementAsync*}>increment async</**button**>    </**div**>   )  } }\n\n\n1\n\n\n 6. containters/App.jsx\n    \n\n*/\\* *  *包含**Counter**组件的容器组件**  \\*/ *  **import** React **from** **'react' **  *//* *引入连接函数 *  **import** {connect} **from** **'react-redux' **  *//* *引入**action**函数 *  **import** {*increment*, *decrement*} **from** **'../redux/actions'    **  **import** Counter **from** **'../components/counter'    **  *//* *向外暴露连接**App**组件的包装组件 *  **export default** connect(  state => ({**count**: state}),  {*increment*, *decrement*} )(Counter)\n\n\n1\n\n\n 7. index.js\n    \n\n**import** React **from** **'react' **  **import** ReactDOM **from** **'react-dom' **  **import** {createStore} **from** **'redux' **  **import** {Provider} **from** **'react-redux'    **  **import** App **from** **'./****container****s/app' **  **import** {*counter*} **from** **'./redux/reducers'    **  *//* *根据**counter**函数创建**store**对象 *  **const** store = createStore(*counter*)    *//* *定义渲染根组件标签的函数 *  ReactDOM.render(  (   <**Provider** **store****=**{store}>    <**App** />   </**Provider**>  ),  **document**.getElementById(**'root'**)`` \n\n\n1\n\n\n\n# 8.5.5. 问题\n\n 1. redux 默认是不能进行异步处理的，\n\n 2. 应用中又需要在 redux 中执行异步任务 (ajax, 定时器)\n\n\n# 8.6. redux 异步编程\n\n\n# 8.6.1. 下载 redux 插件 (异步中间件)\n\nnpm install --save redux-thunk\n\n\n# 8.6.2. store.js\n\n**import** {createStore, *applyMiddleware*} **from** **'redux' **  **import** thunk **from 'redux-thunk'**** **  *//* *根据**reducer**函数创建**store**对象 *  **const** store = createStore(  *reducer*,  *applyMiddleware(thunk)* *//* *应用上异步中间件 *  )\n\n\n1\n\n\n\n# 8.6.3. redux/actions.js\n\n*//* *异步**action creator(**返回一个函数**) *  **export const** *incrementAsync* = number => {  **return** dispatch => {   setTimeout(() => {    dispatch(*increment*(number))   }, 1000)  } }\n\n\n1\n\n\n\n# 8.6.4. components/counter.jsx\n\n*incrementAsync* = () => {  **const** number = **this**.**refs**.numSelect.**value***1  **this**.**props**.**incrementAsync**(number) }\n\n\n1\n\n\n\n# 8.6.5. containers/app.jsx\n\n**import** {*increment*, *decrement*, *incrementAsync*} **from** **'../redux/actions'** // * 向外暴露连接 App 组件的包装组件 * export default connect( state => ({count: state}), {increment, decrement, incrementAsync} )(Counter)\n\n\n# 8.7. 使用上 redux 调试工具\n\n\n# 8.7.1. 安装 chrome 浏览器插件\n\n\n# 8.7.2. 下载工具依赖包\n\nnpm install --save-dev redux-devtools-extension\n\n\n1\n\n\n\n# 8.7.3. 编码\n\nStore.js\n\n**IMPORT** { **COMPOSEWITHDEVTOOLS** } **FROM**\n**'REDUX-DEVTOOLS-EXTENSION'**``* * **CONST** STORE =\nCREATESTORE( *REDUCER*,\n**COMPOSEWITHDEVTOOLS**(*APPLYMIDDLEWARE*(THUNK)) * * )\n\n\n\n# 8.8. 相关重要知识：纯函数和高阶函数\n\n\n# 8.8.1. 纯函数\n\n 1. 一类特别的函数：只要是同样的输入 (实参)，必定得到同样的输出 (返回)\n\n 2. 必须遵守以下一些约束\n\na. 不得改写参数数据\n\nb. 不会产生任何副作用，例如网络请求，输入和输出设备\n\nc. 不能调用 Date.now () 或者 Math.random () 等不纯的方法\n\n 3. redux 的 reducer 函数必须是一个纯函数\n\n\n# 8.8.2. 高阶函数\n\n 4. 理解: 一类特别的函数\n    \n\na. 情况 1: 参数是函数\n\nb. 情况 2: 返回是函数\n\n 5.     常见的高阶函数: \n    \n\na. 定时器设置函数\n\nb. 数组的 forEach ()/map ()/filter ()/reduce ()/find ()\n\nc. 函数对象的 bind ()\n\nd. Promise() / then()\n\ne. antd 中的 Form.create ()()\n\nf. react-router-dom 中的 withRouter\n\ng. react-redux 中的 connect ()\n\n 6.     作用: \n    \n\na. 能实现更加动态，更加可扩展的功能",normalizedContent:"# 第一章. react 入门\n\n\n# 1.1. react 的基本认识\n\n1). facebook开源的一个js库\n2). 一个用来动态构建用户界面的js库\n3). react的特点\n\tdeclarative(声明式编码)\n\tcomponent-based(组件化编码)\n\tlearn once, write anywhere(支持客户端与服务器渲染)\n\t高效\n\t单向数据流\n4). react高效的原因\n\t虚拟(virtual)dom, 不总是直接操作dom(批量更新, 减少更新的次数) \n\t高效的dom diff算法, 最小化页面重绘(减小页面更新的区域)\n\tone dark pro\n\tauto rename tag\n\tbracket pair colorizer 2\n\n\n\n# 1.2. react 的基本使用\n\n1). 导入相关js库文件(react.js, react-dom.js, babel.min.js)\n2). 编码:\n\t<div id=\"app\"></div>\n\t<script type=\"text/javascript\">\n    let vdom = 'hello'  \n    reactdom.render(vdom,document.getelementbyid(\"app\"))\n  <\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 1.3. jsx 的理解和使用\n\n1). 理解\n\t* 全称: javascript xml\n\t* react定义的一种类似于xml的js扩展语法: xml+js\n\t* 作用: 用来创建react虚拟dom(元素)对象\n2). 编码相关\n  \t<div id=\"test\"></div>\n---------------------------------------\n\t<script type=\"text/babel\">\t\t//类型为text/babel\n    let myid = 'id'\n    let mydata = 'hello,world'\n    //1.创建虚拟dom\n    let vdom2 = <h2 id={myid}><span>{mydata}</span></h2>\n    //2.渲染虚拟dom到页面\n    reactdom.render(vdom2,document.getelementbyid('test'))\n  <\/script>\n3). 注意:\n\t\t(1)标签的class属性必须改为classname属性\n        (2)必须要有根标签\n        (3)标签中js语法用{}包起来，{}中的js必须是表达式\n     \t(4)标签必须有结束\n\t\t(5)标签的style属性值必须为: {{color:'red', width:12}}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 1.4 概念理解\n\n\n# 1). 模块与组件\n\n1. 模块:\n  \t理解: 向外提供特定功能的js程序, 一般就是一个js文件\n  \t为什么: js代码更多更复杂\n  \t作用: 复用js, 简化js的编写, 提高js运行效率\n2. 组件: \n\t理解: 用来实现特定界面功能效果的代码集合(html/css/js/img)\n \t为什么: 一个界面的功能太复杂了\n  \t作用: 复用编码, 简化项目界面编码, 提高运行效率\n\n\n\n# 2). 模块化与组件化\n\n1. 模块化:\n\t当应用的js都以模块来编写的, 这个应用就是一个模块化的应用\n2. 组件化:\n\t当应用是以多组件的方式实现功能, 这上应用就是一个组件化的应用\n\n\n\n# 第二章. react 组件化开发\n\n\n# 2.1. 基本理解和使用\n\n//组件名首字母必须大写\n1). 创建组件类\n\t//方式1: 工厂函数(简单组件, 推荐使用)\n\tfunction mycomponent1() {\n\t\treturn <h1>工厂函数</h1>\n\t}\n\t//方式2: es6类语法(复杂组件, 推荐使用)\n\tclass mycomponent2 extends react.component {\n\t\trender () {\n\t\t  return <h1>es6类语法</h1>\n\t\t}\n\t}\n2). 渲染组件标签\n\treactdom.render(<mycomponent1/>,  document.getelementbyid(\"app\"))\n\treactdom.render(<mycomponent2/>,  document.getelementbyid(\"app\"))\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 2.2. 组件的 3 大属性: state\n\n（所有属性针对的是组件实例对象）\n\n1. 组件被称为\"状态机\", 页面的显示是根据组件的state属性的数据来显示\n2. 初始化指定:\n    state = {ispig:true}\t\t//state以键值对的形式存放数据\n3. 读取显示: \n    let {ispig}=this.state\t\t//结构赋值形式取state值\n4. 更新状态--\x3e更新界面 : \n    this.setstate({ispig : false})\t//以键值对形式\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n实例代码\n\nclass person extends react.component {\n        state = { isp: true };\n        demo = () => {\t//自定义的方法必须用馒头函数，可以解决this问题\n          let isp = !this.state.isp;\n          this.setstate({ isp });\t//state不能直接更新，通过setstate更新\n        };\n        render() {\n          let { isp } = this.state;\n            //react中的事件名需要大写,需要用this\n          return <h1 onclick={this.demo}>你是{isp ? \"人\" : \"猪\"}</h1>;\n        } \n      }\nreactdom.render(<person />, document.getelementbyid(\"test\"));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n注意事项\n\n//1.state中的数据不能直接修改\nthis.state=!this.state\t//错误做法\nthis.setstate({})\t\t//正确\n//2.如果state中的数据是对象类型，不能直接更新状态\nlet {comment}=this.state\t//错误，修改了原数组中对象\nlet comment=[...this.state.comment]\t\t//正确，使用es8的...运算符，创建了一个新的数组\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 2.2. 组件的 3 大属性: props\n\n所有组件标签的属性的集合对象\n给标签指定属性, 保存外部数据(可能是一个function)\n在组件内部读取属性: this.props.propertyname\n作用: 从目标组件外部向组件内部传递数据\n对props中的属性值进行类型限制和必要性限制\n\tperson.proptypes = {\n\t\tname: react.proptypes.string.isrequired,\n\t\tage: react.proptypes.number.isrequired\n\t}\n扩展属性: 将对象的所有属性通过props传递\n\n    <person {...person}/>\n\n\n实例对象\n\nclass person extends react.component{\n    //类里面的方法一旦加上static关键字，该方法只能有类本身调用，类的实例对象不能使用。\n    //限制接收参数的类型以及必要性\n    static proptypes = {\n      name:proptypes.string.isrequired,\n      sex:proptypes.string.isrequired,\n      age:proptypes.number\n    }\n    //设置参数的默认值\n    static defaultprops = {\n      age:18\n    }\n    //重写父类的render方法\n    render(){\n      let {name,age,sex} = this.props\n      return (\n        <ul>\n          <li>姓名：{name}</li>\n          <li>性别：{age+1}</li>\n          <li>年龄：{sex}</li>\n          <hr/>\n        </ul>\n      )\n    }\n  }\n  \n  \n  let p2 = {\n    name:'张三',\n    age:19,\n    sex:'男'\n  }\n\n \n  //2.渲染组件标签,利用react内部的...obj属性获取组件\n  reactdom.render(<person {...p2}/>,document.getelementbyid('example2'))\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n组件中的 props\n\n//定义状态\nstate={\n    comment:[\n      {id:\"ggttjjja\",name:\"jack\",content:\"简单\"},\n      {id:\"dddghhja\",name:\"bar\",content:\"不难\"},\n      {id:\"dsadwt03\",name:\"foo\",comment:\"so easy\"}\n    ]\n  }\n//list传参\n<list comment={comment}/>\n-------------------------\n//接收参数\nlet { comment } = this.props\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 2.2. 组件的 3 大属性: refs\n\n作用: 找到组件内部的真实dom元素对象, 进而操作它\n三种使用方式\n\t方式一：ref=\"input1\"  //字符串形式\n\t方式二：ref={input => this.input1 = input}//回调函数形式\n\t方式三：myref = react.createref()//创建一个ref容器形式\n\n\n1\n2\n3\n4\n5\n\n\n示例代码：方式一\n\nclass userinput extends react.component {\n        handlerclick = () => {\n          //通过ref获取dom\n          let { input1 } = this.refs;\n          alert(input1.value);\n        };\n        render() {\n          return (\n            <div>\n              //方式一：\n              <input type=\"text\" ref=\"input1\" />\n              &nbsp;\n              <button onclick={this.handlerclick}>弹出数据</button>&nbsp;\n            </div>\n          );\n        }\n      }\nreactdom.render(<userinput />, document.getelementbyid(\"example\")); \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n方式二\n\nclass userinput extends react.component {\n        handlerclick = () => {\n          //通过ref获取dom\n          alert(this.input1.value);\n        };\n        render() {\n          return (\n            <div>\n              {/* 方式二 inptu为形参，自定义，inptut1为方法名 */}\n              <input type=\"text\" ref={(input) => (this.input1 = input)} />\n              <button onclick={this.handlerclick}>弹出数据</button>&nbsp;\n            </div>\n          );\n        }\n      }\nreactdom.render(<userinput />, document.getelementbyid(\"example\"));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n方式三\n\n class userinput extends react.component {\n        //方式三：创建一个ref容器\n        //这个容器是一个“专用容器”，只能保存一个元素\n        myref = react.createref();\n        handlerclick = () => {\n          //通过ref获取dom,需要通过current属性获取value\n          let { current } = this.myref;\n          alert(current.value);\n        };\n        render() {\n          return (\n            <div>\n              {/*将当前元素放入组件对象身上的myref容器中*/}\n              <input type=\"text\" ref={this.myref} />\n              <button onclick={this.handlerclick}>弹出数据</button>&nbsp;\n            </div>\n          );\n        }\n      }\nreactdom.render(<userinput />, document.getelementbyid(\"example\"));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 2.3. 组件中的事件处理\n\n1. 给标签添加属性: onxxx={this.eventhandler}\n2. 在组件中添加事件处理方法\n    eventhandler = (event) => {\n                \n    }\n3. 使自定义方法中的this为组件对象\n  \t在constructor()中bind(this)\n  \t使用箭头函数定义方法\n4. 事件监听\n\t绑定事件监听\n\t\t事件名\n\t\t回调函数\n\t触发事件\n\t\t用户对对应的界面做对应的操作\n\t\t编码\n 5.注意：在调用函数是需要传参时要放在函数里面\n onxxx={()=>{this.eventhandler(id)}}\n eventhandler = (id) => {\n                \n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 2.4. 组件的组合使用\n\n1)拆分组件: 拆分界面,抽取组件\n2)实现静态组件: 使用组件实现静态页面效果\n3)实现动态组件\n\t①　动态显示初始化数据\n\t②　交互功能(从绑定事件监听开始)\n\n\n\n# 2.5. 组件收集表单数据\n\n受控组件: 输入过程中自动收集数据到state\n非受控组件: 提交时手动读取数据\n\n\n\n# 2.6. 组件的生命周期（旧）\n\n1. 组件的三个生命周期状态:\n\tmount：插入真实 dom\n\tupdate：被重新渲染\n\tunmount：被移出真实 dom\n2. 生命周期流程:\n\t* 第一次初始化显示: reactdom.render(<xxx/>, containdom)\n\t\tconstructor()\n\t\tcomponentwillmount() : 将要插入回调\n\t\trender() : 用于插入虚拟dom回调\n\t\tcomponentdidmount() : 已经插入回调\n\t* 每次更新state: this.setstate({})\n\t    componentwillreceiveprops(): 接收父组件新的属性\n\t    componentwillupdate() : 将要更新回调\n\t    render() : 更新(重新渲染)\n\t    componentdidupdate() : 已经更新回调\n\t* 删除组件: reactdom.unmountcomponentatnode(div): 移除组件\n\t\tcomponentwillunmount() : 组件将要被移除回调\n3. 常用的方法\n  \tcomponentdidmount() : 只执行一次, 已经在dom树中, 适合启动/设置一些监听\n  \tcomponentwillunmount()：适合做收尾工作，清楚定时器/关闭数据库/关闭流\n\n\n\n# 2.7 组件的生命周期（新）\n\n 1. 组件的三个生命周期状态:\n    \n\n* 初始化阶段：第一次渲染，插入真实 dom\n\n* 更新阶段：重新渲染\n\n* 卸载阶段：被移出真实 dom\n\n 2. 生命周期流程:\n\na. 初始化阶段：由 reactdom.render () 触发\n\n* constructor()\n\n* static getderivedstatefromprops()\n\n* render()\n\n* componentdidmount()\n\nb. 更新阶段 由组件内部 this.setsate () 或父组件重新 render 触发\n\n* static getderivedstatefromprops()\n\n* shouldcomponentupdate()\n\n* render()\n\n* getsnapshotbeforeupdate()\n\n* componentdidupdate()\n\nc. 移除组件：由 reactdom.unmountcomponentatnode (containerdom) 触发\n\n* componentwillunmount()\n\n重要的勾子\n\n 1. render(): 初始化渲染或更新渲染调用\n    \n\n 2. componentdidmount(): 开启监听, 发送ajax请求\n    \n\n 3. componentwillunmount(): 做一些收尾工作, 如: 清理定时器\n    \n\n 4. static getderivedstatefromprops(): state是根据props来生成的那就需要借助这个函数\n    \n\n\n# 2.7. 虚拟 dom 与 dom diff 算法\n\n\n# 1). 虚拟 dom 是什么？\n\n一个虚拟dom(元素)是一个一般的js对象, 准确的说是一个对象树(倒立的)\n虚拟dom保存了真实dom的层次关系和一些基本属性，与真实dom一一对应\n如果只是更新虚拟dom, 页面是不会重绘的\n\n\n\n# 2). 虚拟 dom 算法的基本步骤\n\n用js对象树表示dom树的结构；然后用这个树构建一个真正的dom树插到文档当中\n当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异\n把差异应用到真实dom树上，视图就更新了\n\n\n\n# 3). 进一步理解\n\nvirtual dom 本质上就是在 js 和 dom 之间做了一个缓存。\n可以类比 cpu 和硬盘，既然硬盘这么慢，我们就在它们之间加个缓存：既然 dom 这么慢，我们就在它们 js 和 dom 之间加个缓存。cpu（js）只操作内存（virtual dom），最后的时候再把变更写入硬盘（dom）。\n\n\n\n# 第 3 章：react 应用 (基于 react 脚手架)\n\n\n# 3.1. 使用 create-react-app 创建 react 应用\n\n\n# 3.1.1. react 脚手架\n\n 1. xxx脚手架: 用来帮助程序员快速创建一个基于xxx库的模板项目\n    \n\na. 包含了所有需要的配置\n\nb. 指定好了所有的依赖\n\nc. 可以直接安装 / 编译 / 运行一个简单效果\n\n 2. react提供了一个用于创建react项目的脚手架库: create-react-app\n    \n\n 3. 项目的整体技术架构为: react + webpack + es6 + eslint\n    \n\n 4. 使用脚手架开发的项目的特点: 模块化, 组件化, 工程化\n    \n\n\n# 3.1.2. 创建项目并启动\n\nnpm install -g create-react-app\t\t//全局下载react脚手架\n\ncreate-react-app hello-react\t\t//创建react项目，hello-react为项目名\n\ncd hello-react\t\t\t\t\t\t//切换到项目目录\n\nnpm start\t\t\t\t\t\t\t//运行项目\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 3.1.3. react 脚手架项目结构\n\nreactnews\n\n|--node_modules--- 第三方依赖模块文件夹\n\n|--public\n\n|-- *index.html-----------------* 主页面\n\n|--src------------ 源码文件夹\n\n|--components-----------------react** 组件\n\n|--index.js------------------- 应用入口 js\n\n|--.gitignore------git 版本管制忽略的配置\n\n|--package.json---- 应用包配置文件\n\n|--readme.md------- 应用描述说明的 readme 文件\n\n\n# 第 4 章：react ajax\n\n\n# 4.1. 理解\n\n\n# 4.1.1. 前置说明\n\n 1. react本身只关注于界面, 并不包含发送ajax请求的代码\n    \n\n 2. 前端应用需要通过ajax请求与后台进行交互(json数据)\n    \n\n 3. react应用中需要集成第三方ajax库(或自己封装)\n    \n\n\n# 4.1.2. 常用的 ajax 请求库\n\n 1. jquery: 比较重, 如果需要另外引入不建议使用\n    \n\n 2. axios: 轻量级, 建议使用\n    \n\na. 封装 xmlhttprequest 对象的 ajax\n\nb. promise 风格\n\nc. 可以用在浏览器端和 node 服务器端\n\n 3. fetch: 原生函数, 但老版本浏览器不支持\n    \n\na. 不再使用 xmlhttprequest 对象提交 ajax 请求\n\nb. 为了兼容低版本的浏览器，可以引入兼容库 fetch.js\n\n\n# 4.1.3. 效果\n\n需求:\n  1. 界面效果如下\n  2. 根据指定的关键字在github上搜索匹配的最受关注的库\n  3. 显示库名, 点击链接查看库\n4. 测试接口: https://api.github.com/search/repositories?q=r&sort=stars\n\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 4.2. axios\n\n\n# 4.2.1. 文档\n\nhttps://github.com/axios/axios\n\n\n# 4.2.2. 相关 api\n\n 1. get请求\n    \n\naxios\n  .get(\"/user?id=12345\")\n  .then(function (response) {\n    console.log(response.data);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n---------------------------------------\naxios\n  .get(\"/user\", { params: { id: 12345 } })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n 2. post请求\n    \n\naxios\n.post(\"/user\", { firstname: \"fred\", lastname: \"flintstone\" })\n.then(function (response) {\n  console.log(response);\n})\n.catch(function (error) {\n  console.log(error);\n});\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 4.3. fetch\n\n\n# 4.3.1. 文档\n\n 1. https://github.github.io/fetch/\n    \n\n 2. https://segmentfault.com/a/1190000003810652\n    \n\n\n# 4.3.2. 相关 api\n\n 1. get请求\n    \n\nfetch(url)\n.then(function (response) {\n  return response.json();\t\t//返回一个promise实例对象，状态为<pending>\n})\n.then(function (value) {\n  console.log(value);\t//成功\n})\n.catch(function (reason) {\n  console.log(e);\t\t//失败\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n 2. post请求\n    \n\nfetch(url, { method: \"post\", body: json.stringify(data) })\n .then(function (response) {\n   return response.json();\t\t//返回一个promise实例对象，状态为<pending>\n })\n .then(function (value) {\n   console.log(value);\t//成功\n })\n .catch(function (reason) {\n   console.log(e);\t\t//失败\n });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n 3. fetch的问题\n    \n\nurl:  https://api.github.com/search/repositories\n.then(function (response) {\n    return response.json();\t\t//在此方法中如果https://api.github.com有错误，调用catch,但是search/repositories有错误，则调用的是then,显然不能得到数据。解决方案：自己简单对response进行封装\n  })\n\n\n1\n2\n3\n4\n\n\n\n# 第 5 章：几个重要技术总结\n\n\n# 5.1. 组件间通信\n\n\n# 5.1.1. 方式一：通过 props 传递\n\n 1. 共同的数据放在父组件上, 特有的数据放在自己组件内部(state)\n    \n\n 2. 通过props可以传递一般属性和函数属性, 只能一层一层传递\n    \n\n 3. 一般属性--\x3e父组件传递数据给子组件--\x3e子组件读取数据\n    \n\n 4. 函数属性--\x3e子组件传递数据给父组件--\x3e子组件调用函数\n    \n\n\n# 5.1.2. 方式二：使用消息订阅 (subscribe)- 发布 (publish) 机制\n\n1)     工具库: pubsubjs\n\n2)     下载: npm install pubsub-js \n\n3)     使用: \n\n   import pubsub from 'pubsub-js' //引入\n\n   pubsub.subscribe('delete', (msg,data)=>{}); //订阅消息,一般放在钩子里，delete是标识，与发布相匹配，data是真正数据\n\n   pubsub.publish('delete', data) //发布消息，data是发布的数据，与上面的相对应\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n示例代码：\n\n//list组件,订阅消息\ncomponentdidmount(){\n        pubsub.subscribe('hello',(msg,data)=>{\n          this.setstate(data)\n      })\n  }\n//add组件，发布消息\npubsub.publish('hello',{\n          users:[],\n          isfirst:false,\n          isloading:true,\n          error:\"\"\n        })\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 5.1.3. 方式三: redux\n\n后面专门讲解\n\n\n# 5.1.4. 面试题：比较 react 中组件间 3 种通信方式\n\n*1).* *方式一**:* *通过**props**传递   通过**props**可以传递一般数据和函数数据**,  *  *一般数据**--\x3e**父组件向子组件   函数数据**--\x3e**子组件向父组件通信   缺点**:* *只能一层一层传递**/**兄弟组件必须借助父组件 *  *2).* *方式二**:* *使用消息订阅**(subscribe)-**发布**(publish)**机制   实现库**: pubsub-js *  *组件**a:* *发布消息**(**相当于触发事件**) *  *组件**b:* *订阅消息**,* *接收消息**,* *处理消息**(**相当于绑定事件监听**) *  *优点**:* *对组件关系没有限制 *  *3).* *方式三**: redux *  *通过**redux**可以实现任意组件间的通信   集中式管理多个组件共享的状态**,* *而**pubsub-js**并不是集中式的管理*\n\n\n1\n\n\n\n# 5.2. 事件监听理解\n\n\n# 5.2.1. 原生 dom 事件\n\n 1. 绑定事件监听 \n    \n\na. 目标元素\n\nb. 事件名 (类型): 只有有限的几个，不能随便写\n\nc. 回调函数：接收数据并处理\n\n 2.     触发事件\n    \n\na. 用户操作界面\n\nb. 事件名 (类型)\n\nc. 数据 (event)\n\n\n# 5.2.2. 自定义事件 (消息机制)\n\n 1. 绑定事件监听(订阅消息)\n    \n\na. 目标元素\n\nb. 事件名 (类型): 任意\n\nc. 回调函数：通过形参接收数据，在函数体处理事件\n\n 2. 触发事件(编码, 发布消息)\n    \n\na. (事件名类型): 与绑定的事件监听的事件名一致\n\nb. 数据：会自动传递给回调函数\n\n\n# 5.3. es6 常用新语法\n\n 1. 定义常量/变量: const/let\n    \n\n 2. 解构赋值: let {a, b} = this.props  import {aa} from 'xxx' function fn({name}) {} fn({name: ‘tom’})\n    \n\n 3. 对象的简洁表达: {a, b}\n    \n\n 4. 箭头函数: \n    \n\na. 常用场景\n\n* 组件的自定义方法: xxx = () => {}\n\n* 参数匿名函数\n\nb. 优点:\n\n* 简洁\n\n* 没有自己的 this, 使用引用 this 查找的是外部 this\n\n 5. 扩展(三点)运算符: 拆解对象(const myprops = {}, <xxx {...myprops}>)\n    \n\n 6. 类: class/extends/constructor/super\n    \n\n 7. es6 模块化: export default | import\n\n 8. promise\n\n 9. async/await\n\n\n# 第 6 章：react-router4\n\n\n# 6.1. 相关理解\n\n\n# 6.1.1. react-router-dom 的理解\n\n 1. \treact的一个插件库\n    \n\n 2.     专门用来实现一个spa应用\n    \n\n 3.     基于react的项目基本都会用到此库\n    \n\n\n# 6.1.2. spa 的理解\n\n 1. \t单页web应用（single page web application，spa）\n    \n\n 2.     整个应用只有一个完整的页面\n    \n\n 3.     点击页面中的链接不会刷新页面, 本身也不会向服务器发请求\n    \n\n 4.     当点击路由链接时, 只会做页面的局部更新\n    \n\n 5.     数据都需要通过ajax请求获取, 并在前端异步展现\n    \n\n\n# 6.1.3. 路由的理解\n\n 1. 什么是路由?\n    \n\na. 一个路由就是一个映射关系 (key:value)\n\nb. key 为路由路径，value 可能是 function/component\n\n 2. 路由分类\n    \n\na. 后台路由: node 服务器端路由，value 是 function, 用来处理客户端提交的请求并返回一个响应数据\n\nb. 前台路由：浏览器端路由，value 是 component, 当请求的是路由 path 时，浏览器端前没有发送 http 请求，但界面会更新显示对应的组件\n\n 3. 后台路由\n    \n\na. 注册路由: router.get (path, function (req, res))\n\nb. 当 node 接收到一个请求时，根据请求路径找到匹配的路由，调用路由中的函数来处理请求，返回响应数据\n\n 4.     前端路由\n    \n\na. 注册路由:\n\nb. 当浏览器的 hash 变为 /about 时，当前路由组件就会变为 about 组件\n\n\n# 6.1.4. 前端路由的实现\n\n 1. history库\n    \n\na. 网址: https://github.com/reacttraining/history\n\nb. 管理浏览器会话历史 (history) 的工具库\n\nc. 包装的是原生 bom 中 window.history 和 window.location.hash\n\n 2. history api\n    \n\na. history.createbrowserhistory (): 得到封装 window.history 的管理对象\n\nb. history.createhashhistory (): 得到封装 window.location.hash 的管理对象\n\nc. history.push (): 添加一个新的历史记录\n\nd. history.replace (): 用一个新的历史记录替换当前的记录\n\ne. history.goback (): 回退到上一个历史记录\n\nf. history.goforword (): 前进到下一个历史记录\n\ng. history.listen (function (location){}): 监视历史记录的变化\n\n\n# 6.2. react-router 相关 api\n\n\n# 6.2.1. 组件\n\n 1. <browserrouter>\n    \n\n 2. <hashrouter>\n    \n\n 3. <route>\n    \n\n 4. <redirect>\n    \n\n 5. <link>\n    \n\n 6. <navlink>\n    \n\n 7. <switch>\n    \n\n\n# 6.2.2. 其它\n\n 1. history对象\n    \n\n 2. match对象\n    \n\n 3. withrouter函数\n    \n\n\n# 6.3. 基本路由使用\n\n\n# 6.3.1. 准备\n\nyarn add react-router-dom\t\t// 下载react-router-dom \n\n\n1\n\n\n\n# 6.3.2. 路由组件: pages/about.jsx\n\nimport react, { component } from \"react\";\nclass about extends component {\n    render() {\n      return (\n        <h3>我是about的内容</h3>\n      );\n    }\n  }\n  \n  export default about;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 6.3.3. 路由组件: pages/home.jsx\n\nimport react, { component } from \"react\";\nclass home extends component {\n    render() {\n      return (\n        <h3>我是home的内容</h3>\n      );\n    }\n  }\n  \n  export default home;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 6.3.4.browserrouter\n\nimport {browserrouter} from 'react-router-dom'\n <browserrouter>\n    <app />\n </browserrouter>\n//需要在index.js里面的app组件外面加上browserrouter才能使得navlink生效\n注意:在引入要样式时不要前面的点或者写成%public_url%这样形式的\n<link rel=\"stylesheet\" href=\"%public_url%/bootstrap.css\" />\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 6.3.5. 应用组件:app.jsx\n\nimport react, { component } from \"react\";\nimport {  navlink, redirect, route, switch } from \"react-router-dom\";\nimport about from './pages/about'\nimport home from './pages/home'\n<div classname=\"list-group\">\n <navlink classname=\"list-group-item\" to=\"/about\" activeclassname=\"demo\">about</navlink>\n <navlink classname=\"list-group-item\" to=\"/home\" activeclassname=\"demo\">home</navlink>   </div>\n//navlink为路由链接，to是跳转到地方，前面需要加/\n//activeclassname是选中时的样式\n--------------------------------------------\n<switch>\n   <route path=\"/about\" component={about}></route>\n   <route path=\"/home\" component={home}></route>\n   <redirect to=\"/about\"></redirect>\n</switch>\n//switch是避免路由一直匹配，当匹配到路由时就停止\n//route是路由，path是匹配的路由路径\n//redirect是重定向，当不指定路由是时，默认的为redirect\n//component={about}引入组件的另一种方式\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 6.3.6. 自定义样式: index.css\n\n.demo {\n        background-color: gray !important;\n        color: orange !important;\n }\n\n\n1\n2\n3\n4\n\n\n\n# 6.4. 嵌套路由使用\n\n\n# 6.4.2. 二级路由组件: pages/news.jsx\n\nimport react, { component } from \"react\";\n\nclass homenews extends component {\n  render() {\n    return (\n      <ul>\n        <li>news001</li>\n        <li>news002</li>\n        <li>news003</li>\n      </ul>\n    );\n  }\n}\n\nexport default homenews;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 6.4.3. 二级路由组件: pages/message.jsx\n\nimport react, { component } from \"react\";\n\nclass homemessage extends component {\n  render() {\n    return (\n      <div>\n        <ul>\n          <li> \n              <button>replace查看</button>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default homemessage;\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 6.4.4. 一级路由组件: pages/home.jsx\n\nimport react, { component } from \"react\";\nimport { navlink, redirect, route, switch } from \"react-router-dom\";\nimport homenews from './home_news'\nimport homemessage from './home_message'\nclass home extends component {\n    render() {\n        return (\n            <div><h2>home组件内容</h2>\n                <div>\n                    <ul classname=\"nav nav-tabs\">\n                        <li>\n                            <navlink classname=\"list-group-item\" to=\"/home/news\" activeclassname=\"selected\">news</navlink>\n                        </li>\n                        <li>\n                            <navlink classname=\"list-group-item \" to=\"/home/message\" activeclassname=\"selected\">message</navlink>\n                        </li>\n                    </ul>\n                    \n                    <switch>\n                        <route path=\"/home/news\" component={homenews}></route>\n                        <route path=\"/home/message\" component={homemessage}></route>\n                        <redirect to=\"/home/news\"></redirect>\n                    </switch>\n                </div>\n            </div>\n        );\n    }\n}\nexport default home;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n\n# 6.5. 向路由组件传递参数数据\n\n\n# 6.5.1. 三级路由组件: pages/home-message-detail.jsx\n\nimport react, { component } from 'react'\nexport default class homemessagedetail extends component {\n    state = {\n        messagedetail: [\n            { id: 1, title: '消息1', content: '内容1' },\n            { id: 2, title: '消息2', content: '内容2' },\n            { id: 3, title: '消息3', content: '内容3' },\n        ]\n    }\n    render() {\n        \n        // console.log('我是hmd的实例',this.props.match.params);\n        let { id } = this.props.match.params\n        //通过组件实例对象this.props.match.params上取得参数（id）\n        //注意：通过实例取得的参数是字符串，需要转换为number类型与之匹配\n        let { messagedetail } = this.state\n        let obj = messagedetail.find((item) => {\n            return item.id === id * 1\n        })\n        if (obj) {\n            return (\n                <ul>\n                    <li>id:{obj.id}</li>\n                    <li>title:{obj.til}</li>\n                    <li>content:{obj.content}</li>\n                </ul>\n            )\n        } else {\n            return <h1>没有消息</h1>\n        }\n\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# 6.5.2. 二级路由组件: pages/home-message.jsx\n\nimport react, { component } from \"react\";\nimport { link, route } from \"react-router-dom\"\nimport homemessagedetail from './home_message_detail'\nclass homemessage extends component {\n  state = {\n    message: []\n  }\n  componentdidmount() {\n    setinterval(() => {\n      this.setstate({\n        message: [\n          { id: 1, title: \"message1\" },\n          { id: 2, title: \"message2\" },\n          { id: 3, title: \"message3\" }\n        ]\n      })\n    }, 1000)\n  }\n  render() {\n\n    let { message } = this.state\n    return (\n      <div>\n        <ul>\n          {message.map((item) => {\n            return (\n              <li key={item.id}>\n                <link to={`/home/message/detail/${item.id}`}>{item.title}</link>\n                   //在/home/message/detail/后面传递参数\n              </li>\n            )\n          })\n          }\n\n        </ul>\n\n        <hr />\n        <route path=\"/home/message/detail/:id\" component={homemessagedetail}></route>\n            //在/home/message/detail/后面通过占位符接收参数（一般为id）\n      </div>\n    );\n  }\n}\n\nexport default homemessage;\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n\n\n\n# 6.6. 多种路由跳转方式\n\n\n# 6.6.1. 二级路由: views/message.jsx\n\nimport react, { component } from \"react\";\nimport { link, route } from \"react-router-dom\"\nimport homemessagedetail from './home_message_detail'\nclass homemessage extends component {\n  state = {\n    message: []\n  }\n\n  componentdidmount() {\n    setinterval(() => {\n      this.setstate({\n        message: [\n          { id: 1, title: \"message1\" },\n          { id: 2, title: \"message2\" },\n          { id: 3, title: \"message3\" }\n        ]\n      })\n    }, 1000)\n\n  }\n  push = (id) => {\n    this.props.history.push(`/home/message/detail/${id}`)\n  }\n  replace = (id) => {\n    this.props.history.replace(`/home/message/detail/${id}`)\n  }\n  render() {\n\n    let { message } = this.state\n    return (\n      <div>\n        <ul>\n          {message.map((item) => {\n            return (\n              <li key={item.id}>\n                <link to={`/home/message/detail/${item.id}`}>{item.title}</link>\n                <button onclick={() => { this.push(item.id) }}>push</button>\n                <button onclick={() => { this.replace(item.id) }}>replace</button>\n\t\t\t\t//通过button方式跳转路由，原理就是借助history库通过改变改变地址栏中的url来实现\n              </li>\n            )\n          })\n          }\n\n        </ul>\n\n        <hr />\n        <route path=\"/home/message/detail/:id\" component={homemessagedetail}></route>\n      </div>\n    );\n  }\n}\n\nexport default homemessage;\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n\n\n\n# 第 7 章：react ui 组件库\n\n\n# 7.1. 最流行的开源 react ui 组件库\n\n\n# 7.1.1. material-ui (国外)\n\n 1.     官网: http://www.material-ui.com/#/\n    \n\n 2.     github: https://github.com/callemall/material-ui\n    \n\n\n# 7.1.2. ant-design (国内蚂蚁金服)\n\n 1.     pc官网: https://ant.design/index-cn\n    \n\n 2. 移动官网: https://mobile.ant.design/index-cn\n    \n\n 3.     github: https://github.com/ant-design/ant-design/\n    \n\n 4. github: https://github.com/ant-design/ant-design-mobile/\n    \n\n\n# 7.2. ant-design 使用入门\n\n\n# 1. 引入 antd\n\n参考文档:\n\nhttps://ant.design/docs/react/use-with-create-react-app-cn\n\n\n# 2. 下载组件库包\n\nyarn add antd\n\n\n1\n\n\n\n# 3. 实现组件的按需打包\n\n 1. 下载依赖模块\n\nyarn add react-app-rewired customize-cra babel-plugin-import\n\n\n1\n\n 2. 在根目录下创建加载配置的 js 模块: config-overrides.js\n\nconst {override, fixbabelimports} = require('customize-cra');\nmodule.exports = override(\n  fixbabelimports('import', {\n    libraryname: 'antd',\n    librarydirectory: 'es',\n    style: 'css',\n  }),\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n3） 修改配置: package.json\n\n\"scripts\": {\n  \"start\": \"react-app-rewired start\",\n  \"build\": \"react-app-rewired build\",\n  \"test\": \"react-app-rewired test\",\n  \"eject\": \"react-scripts eject\"\n},\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 4. 自定义 antd 主题\n\n 1. 下载工具包:\n\nyarn add less@3.9.0 less-loader@4.1.0\t\t//less版本和less-loader需要匹配\n\n\n1\n\n 2. 修改 config-overrides.js\n\nconst {override, fixbabelimports, addlessloader} = require('customize-cra');\n\nmodule.exports = override(\n  fixbabelimports('import', {\n    libraryname: 'antd',\n    librarydirectory: 'es',\n    style: true,\n  }),\n  addlessloader({\n    javascriptenabled: true,\n    modifyvars: {'@primary-color': '#1da57a'},    \n  })\n);\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 5. 在应用组件中使用 antd\n\nimport { button } from 'antd';\nrender() {\n    return (\n      <div>\n        app\n        <button type=\"primary\">button</button>\n      </div>\n    );\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 第 8 章 redux\n\n\n# 8.1. redux 理解\n\n\n# 8.1.1. 学习文档\n\n 1. 英文文档: https://redux.js.org/\n    \n\n 2. 中文文档: http://www.redux.org.cn/\n    \n\n 3. github: https://github.com/reactjs/redux\n    \n\n\n# 8.1.2. redux 是什么？\n\n 1. redux是一个独立专门用于做状态管理的js库(不是react插件库)\n    \n\n 2. 它可以用在react, angular, vue等项目中, 但基本与react配合使用\n    \n\n 3. 作用: 集中式管理(读/写)react应用中多个组件共享的状态\n    \n\n\n# 8.1.3. 什么情况下需要使用 redux\n\n 1. 总体原则: 能不用就不用, 如果不用比较吃力才考虑使用\n    \n\n 2.     某个组件的状态，需要共享\n    \n\n 3.     某个状态需要在任何地方都可以拿到\n    \n\n 4.     一个组件需要改变全局状态\n    \n\n 5.     一个组件需要改变另一个组件的状态\n    \n\n\n# 8.2. redux 的核心 api\n\n\n# 8.2.1. createstore()\n\n 1. 作用: \n    \n\n创建包含指定 reducer 的 store 对象\n\n 2. 编码:\n    \n\nimport {createstore} from 'redux'\n\nimport counter from './reducers/counter'\n\nconst store = createstore(counter)\n\n\n# 8.2.2. store 对象\n\n 1. 作用: \n    \n\nredux 库最核心的管理对象\n\n 2. 它内部维护着:\n    \n\nstate\n\nreducer\n\n 3. 核心方法:\n    \n\ngetstate()\n\ndispatch(action)\n\nsubscribe(listener)\n\n 4. 编码:\n    \n\nstore.getstate()\n\nstore.dispatch({type:'increment', number})\n\nstore.subscribe(render)\n\n\n# 8.2.3. applymiddleware()\n\n 1. 作用:\n    \n\n应用上基于 redux 的中间件 (插件库)\n\n 2. 编码:\n    \n\nimport {createstore, applymiddleware} from 'redux'\n\nimport thunk from 'redux-thunk' //redux 异步中间件\n\nconst store = createstore(\n\ncounter,\n\napplymiddleware (thunk) // 应用上异步中间件\n\n)\n\n\n# 8.2.4. combinereducers()\n\n 1. 作用:\n    \n\n合并多个 reducer 函数\n\n 2. 编码:\n    \n\nexport default combinereducers({\n\nuser,\n\nchatuser,\n\nchat\n\n})\n\n\n# 8.3. redux 的三个核心概念\n\n\n# 8.3.1. action\n\n 1. 标识要执行行为的对象\n    \n\n 2. 包含2个方面的属性\n    \n\na. type: 标识属性，值为字符串，唯一，必要属性\n\nb. xxx: 数据属性，值类型任意，可选属性\n\n 3. 例子:\n    \n\nconst action = {\n\ntype: 'increment',\n\ndata: 2\n\n}\n\n 4. action creator(创建action的工厂函数)\n    \n\nconst increment = (number) => ({type: 'increment', data: number})\n\n\n# 8.3.2. reducer\n\n 1. 根据老的state和action, 产生新的state的纯函数\n    \n\n 2. 样例\n    \n\nexport default function counter(state = 0, action) {\n\nswitch (action.type) {\n\ncase 'increment':\n\nreturn state + action.data\n\ncase 'decrement':\n\nreturn state - action.data\n\ndefault:\n\nreturn state\n\n}\n\n}\n\n 3. 注意\n    \n\na. 返回一个新的状态\n\nb. 不要修改原来的状态\n\n\n# 8.3.3. store\n\n 1. 将state,action与reducer联系在一起的对象\n    \n\n 2. 如何得到此对象?\n    \n\nimport {createstore} from 'redux'\n\nimport reducer from './reducers'\n\nconst store = createstore(reducer)\n\n 3. 此对象的功能?\n    \n\ngetstate (): 得到 state\n\ndispatch (action): 分发 action, 触发 reducer 调用，产生新的 state\n\nsubscribe (listener): 注册监听，当产生了新的 state 时，自动调用\n\n\n# 8.4. 使用 redux 编写应用\n\n\n# 8.4.1. 效果\n\n\n# 8.4.2. 下载依赖包\n\nnpm install --save redux\n\n\n# 8.4.3. redux/action_types.js\n\n*/\\* *  *a**ction**对象的**type**常量名称模块**  \\*/ *  **export const** increment = **'increment' **  **export const** decrement = **'decrement'**\n\n\n1\n\n\n\n# 8.4.4. redux/actions_creators.js\n\n*/\\*  action creator**模块**  \\*/ *  **import** {increment, decrement} **from** **'./action-types'    **  **export const** *increment* = number => ({**type**: increment, number})  **export const** *decrement* = number => ({**type**: decrement, number})\n\n\n1\n\n\n\n# 8.4.5. redux/reducers.js\n\n*/\\* *  *根据老的**state**和指定**action,* *处理返回一个新的**state  \\*/ *  **import** {increment, decrement} **from** **'../constants/actiontypes'    **  **import** {increment, decrement} **from** **'./action-types'    **  **export function** *counter*(state = 0, action) {  **console**.log(**'counter'**, state, action)  **switch** (action.**type**) {   **case** increment:    **return** state + action.**number **   **case** decrement:    **return** state - action.**number **   **default**:    **return** state  } }\n\n\n1\n\n\n\n# 8.4.6. components/app.jsx\n\n*/\\* *  *应用组件**  \\*/ *  **import** react, {component} **from** **'react' **  **import** proptypes **from** **'prop-types' **  **import** * **as** actions **from** **'../redux/actions'    **  **export default class** app **extends** component {    **static** *proptypes* = {   **store**: proptypes.*object*.isrequired,  }    *increment* = () => {   **const** number = **this**.**refs**.numselect.**value** * 1   **this**.**props**.**store**.dispatch(actions.*increment*(number))  }    *decrement* = () => {   **const** number = **this**.**refs**.numselect.**value** * 1   **this**.**props**.**store**.dispatch(actions.*decrement*(number))  }    *incrementifodd* = () => {   **const** number = **this**.**refs**.numselect.**value** * 1     **let** count = **this**.**props**.**store**.getstate()   **if** (count % 2 === 1) {    **this**.**props**.**store**.dispatch(actions.*increment*(number))   }  }    *incrementasync* = () => {   **const** number = **this**.**refs**.numselect.**value** * 1   settimeout(() => {    **this**.**props**.**store**.dispatch(actions.*increment*(number))   }, 1000)  }    render() {   **return** (    <**div**>     <**p**>      click {**this**.**props**.**store**.getstate()} times {**' '**}     </**p**>     <**select** **ref****=\"numselect\"**>      <**option** **value****=\"1\"**>1</**option**>      <**option** **value****=\"2\"**>2</**option**>      <**option** **value****=\"3\"**>3</**option**>     </**select**>{**' '**}     <**button** **onclick****=**{**this**.*increment*}>+</**button**>     {**' '**}     <**button** **onclick****=**{**this**.*decrement*}>-</**button**>     {**' '**}     <**button** **onclick****=**{**this**.*incrementifodd*}>increment if odd</**button**>     {**' '**}     <**button** **onclick****=**{**this**.*incrementasync*}>increment async</**button**>    </**div**>   )  } }`` \n\n\n1\n\n\n\n# 8.4.7. store.js\n\n**import** react **from** **'react' **  **import** reactdom **from** **'react-dom' **  **import** {createstore} **from** **'redux'    **  **import** app **from** **'./components/app' **  **import** {*counter*} **from** **'./redux/reducers'    **  *//* *根据**counter**函数创建**store**对象 *  **const** store = createstore(*counter*)    *//* *定义渲染根组件标签的函数 *  **const** *render* = () => {  reactdom.render(   <**app** **store****=**{store}/>,   **document**.getelementbyid(**'root'**)  ) }  *//* *初始化渲染 *  *render*()    *//* *注册**(**订阅**)**监听**,* *一旦状态发生改变**,* *自动重新渲染 *  store.subscribe(*render*)\n\n\n1\n\n\n\n# 8.4.8. 问题\n\n 1. redux与react组件的代码耦合度太高\n    \n\n 2. 编码不够简洁\n    \n\n\n# 8.5. react-redux\n\n\n# 8.5.1. 理解\n\n 1. 一个react插件库\n    \n\n 2. 专门用来简化react应用中使用redux\n    \n\n\n# 8.5.2. react-redux 将所有组件分成两大类\n\n 1. ui组件\n    \n\na. 只负责 ui 的呈现，不带有任何业务逻辑\n\nb. 通过 props 接收数据 (一般数据和函数)\n\nc. 不使用任何 redux 的 api\n\nd. 一般保存在 components 文件夹下\n\n 2. 容器组件\n    \n\na. 负责管理数据和业务逻辑，不负责 ui 的呈现\n\nb. 使用 redux 的 api\n\nc. 一般保存在 containers 文件夹下\n\n\n# 8.5.3. 相关 api\n\n 1. provider\n    \n\n让所有组件都可以得到 state 数据\n\n 2. connect()\n    \n\n用于包装 ui 组件生成容器组件\n\nimport { connect } from 'react-redux'\nconnect(\nmapstatetoprops,\nmapdispatchtoprops\n)(counter)\n\n 3. mapstatetoprops()\n    \n\n将外部的数据（即 state 对象）转换为 ui 组件的标签属性\nconst mapstatetoprops = function (state) {\nreturn {\nvalue: state\n}\n}\n\n 4. mapdispatchtoprops()\n    \n\n将分发 action 的函数转换为 ui 组件的标签属性\n\n简洁语法可以直接指定为 actions 对象或包含多个 action 方法的对象\n\n\n# 8.5.4. 使用 react-redux\n\n 1. 下载依赖包\n    \n\nnpm install --save react-redux\n\n 2. redux/action_types.js\n    \n\n不变\n\n 3. redux/actions_creators.js\n    \n\n不变\n\n 4. redux/reducers.js\n    \n\n不变\n\n 5. components/counter.jsx\n    \n\n*/\\*  ui**组件**:* *不包含任何**redux api  \\*/ *  **import** react **from** **'react' **  **import** proptypes **from** **'prop-types'    **  **export default class** counter **extends** react.component {    **static** *proptypes* = {   **count**: proptypes.*number*.isrequired,   **increment**: proptypes.*func*.isrequired,   **decrement**: proptypes.*func*.isrequired  }    *increment* = () => {   **const** number = **this**.**refs**.numselect.**value** * 1   **this**.**props**.**increment**(number)  }    *decrement* = () => {   **const** number = **this**.**refs**.numselect.**value** * 1   **this**.**props**.**decrement**(number)  }    *incrementifodd* = () => {   **const** number = **this**.**refs**.numselect.**value** * 1   **let** count = **this**.**props**.**count **   **if** (count % 2 === 1) {    **this**.**props**.**increment**(number)   }  }    *incrementasync* = () => {   **const** number = **this**.**refs**.numselect.**value** * 1   settimeout(() => {    **this**.**props**.**increment**(number)   }, 1000)  }    render() {   **return** (    <**div**>     <**p**>      click {**this**.**props**.**count**} times {**' '**}     </**p**>     <**select** **ref****=\"numselect\"**>      <**option** **value****=\"1\"**>1</**option**>      <**option** **value****=\"2\"**>2</**option**>      <**option** **value****=\"3\"**>3</**option**>     </**select**>{**' '**}     <**button** **onclick****=**{**this**.*increment*}>+</**button**>     {**' '**}     <**button** **onclick****=**{**this**.*decrement*}>-</**button**>     {**' '**}     <**button** **onclick****=**{**this**.*incrementifodd*}>increment if odd</**button**>     {**' '**}     <**button** **onclick****=**{**this**.*incrementasync*}>increment async</**button**>    </**div**>   )  } }\n\n\n1\n\n\n 6. containters/app.jsx\n    \n\n*/\\* *  *包含**counter**组件的容器组件**  \\*/ *  **import** react **from** **'react' **  *//* *引入连接函数 *  **import** {connect} **from** **'react-redux' **  *//* *引入**action**函数 *  **import** {*increment*, *decrement*} **from** **'../redux/actions'    **  **import** counter **from** **'../components/counter'    **  *//* *向外暴露连接**app**组件的包装组件 *  **export default** connect(  state => ({**count**: state}),  {*increment*, *decrement*} )(counter)\n\n\n1\n\n\n 7. index.js\n    \n\n**import** react **from** **'react' **  **import** reactdom **from** **'react-dom' **  **import** {createstore} **from** **'redux' **  **import** {provider} **from** **'react-redux'    **  **import** app **from** **'./****container****s/app' **  **import** {*counter*} **from** **'./redux/reducers'    **  *//* *根据**counter**函数创建**store**对象 *  **const** store = createstore(*counter*)    *//* *定义渲染根组件标签的函数 *  reactdom.render(  (   <**provider** **store****=**{store}>    <**app** />   </**provider**>  ),  **document**.getelementbyid(**'root'**)`` \n\n\n1\n\n\n\n# 8.5.5. 问题\n\n 1. redux 默认是不能进行异步处理的，\n\n 2. 应用中又需要在 redux 中执行异步任务 (ajax, 定时器)\n\n\n# 8.6. redux 异步编程\n\n\n# 8.6.1. 下载 redux 插件 (异步中间件)\n\nnpm install --save redux-thunk\n\n\n# 8.6.2. store.js\n\n**import** {createstore, *applymiddleware*} **from** **'redux' **  **import** thunk **from 'redux-thunk'**** **  *//* *根据**reducer**函数创建**store**对象 *  **const** store = createstore(  *reducer*,  *applymiddleware(thunk)* *//* *应用上异步中间件 *  )\n\n\n1\n\n\n\n# 8.6.3. redux/actions.js\n\n*//* *异步**action creator(**返回一个函数**) *  **export const** *incrementasync* = number => {  **return** dispatch => {   settimeout(() => {    dispatch(*increment*(number))   }, 1000)  } }\n\n\n1\n\n\n\n# 8.6.4. components/counter.jsx\n\n*incrementasync* = () => {  **const** number = **this**.**refs**.numselect.**value***1  **this**.**props**.**incrementasync**(number) }\n\n\n1\n\n\n\n# 8.6.5. containers/app.jsx\n\n**import** {*increment*, *decrement*, *incrementasync*} **from** **'../redux/actions'** // * 向外暴露连接 app 组件的包装组件 * export default connect( state => ({count: state}), {increment, decrement, incrementasync} )(counter)\n\n\n# 8.7. 使用上 redux 调试工具\n\n\n# 8.7.1. 安装 chrome 浏览器插件\n\n\n# 8.7.2. 下载工具依赖包\n\nnpm install --save-dev redux-devtools-extension\n\n\n1\n\n\n\n# 8.7.3. 编码\n\nstore.js\n\n**import** { **composewithdevtools** } **from**\n**'redux-devtools-extension'**``* * **const** store =\ncreatestore( *reducer*,\n**composewithdevtools**(*applymiddleware*(thunk)) * * )\n\n\n\n# 8.8. 相关重要知识：纯函数和高阶函数\n\n\n# 8.8.1. 纯函数\n\n 1. 一类特别的函数：只要是同样的输入 (实参)，必定得到同样的输出 (返回)\n\n 2. 必须遵守以下一些约束\n\na. 不得改写参数数据\n\nb. 不会产生任何副作用，例如网络请求，输入和输出设备\n\nc. 不能调用 date.now () 或者 math.random () 等不纯的方法\n\n 3. redux 的 reducer 函数必须是一个纯函数\n\n\n# 8.8.2. 高阶函数\n\n 4. 理解: 一类特别的函数\n    \n\na. 情况 1: 参数是函数\n\nb. 情况 2: 返回是函数\n\n 5.     常见的高阶函数: \n    \n\na. 定时器设置函数\n\nb. 数组的 foreach ()/map ()/filter ()/reduce ()/find ()\n\nc. 函数对象的 bind ()\n\nd. promise() / then()\n\ne. antd 中的 form.create ()()\n\nf. react-router-dom 中的 withrouter\n\ng. react-redux 中的 connect ()\n\n 6.     作用: \n    \n\na. 能实现更加动态，更加可扩展的功能",charsets:{cjk:!0}},{title:"vue",frontmatter:{title:"vue",date:"2022-04-28T20:41:40.000Z",permalink:"/pages/5e3b2f/",categories:["views","前端","Vue"],tags:["Vue"]},regularPath:"/views/01.%E5%89%8D%E7%AB%AF/90.Vue/10.vue.html",relativePath:"views/01.前端/90.Vue/10.vue.md",key:"v-09e44d8c",path:"/pages/5e3b2f/",headers:[{level:2,title:"1.1. Vue的基本认识",slug:"_1-1-vue的基本认识",normalizedTitle:"1.1. vue 的基本认识",charIndex:31},{level:3,title:"1.1.1. 官网",slug:"_1-1-1-官网",normalizedTitle:"1.1.1. 官网",charIndex:50},{level:3,title:"1.1.2. 介绍描述",slug:"_1-1-2-介绍描述",normalizedTitle:"1.1.2. 介绍描述",charIndex:137},{level:3,title:"1.1.3. Vue的特点",slug:"_1-1-3-vue的特点",normalizedTitle:"1.1.3. vue 的特点",charIndex:242},{level:3,title:"1.1.4. 与其它前端JS框架的关联",slug:"_1-1-4-与其它前端js框架的关联",normalizedTitle:"1.1.4. 与其它前端 js 框架的关联",charIndex:362},{level:3,title:"1.1.5. Vue扩展插件",slug:"_1-1-5-vue扩展插件",normalizedTitle:"1.1.5. vue 扩展插件",charIndex:464},{level:2,title:"1.2. Vue的基本使用",slug:"_1-2-vue的基本使用",normalizedTitle:"1.2. vue 的基本使用",charIndex:730},{level:3,title:"1.2.1 编码",slug:"_1-2-1-编码",normalizedTitle:"1.2.1 编码",charIndex:749},{level:3,title:"1.2.2. 使用vue开发者工具调试",slug:"_1-2-2-使用vue开发者工具调试",normalizedTitle:"1.2.2. 使用 vue 开发者工具调试",charIndex:1086},{level:3,title:"1.2.3\t. 理解MVC和Vue的MVVM",slug:"_1-2-3-理解mvc和vue的mvvm",normalizedTitle:"1.2.3\t. 理解 mvc 和 vue 的 mvvm",charIndex:null},{level:2,title:"1.3. 模板语法",slug:"_1-3-模板语法",normalizedTitle:"1.3. 模板语法",charIndex:1164},{level:3,title:"1.3.1. 模板的理解",slug:"_1-3-1-模板的理解",normalizedTitle:"1.3.1. 模板的理解",charIndex:1178},{level:2,title:"1.4. 计算属性和监视",slug:"_1-4-计算属性和监视",normalizedTitle:"1.4. 计算属性和监视",charIndex:1864},{level:3,title:"1.4.1 什么时候用计算属性",slug:"_1-4-1-什么时候用计算属性",normalizedTitle:"1.4.1 什么时候用计算属性",charIndex:1881},{level:3,title:"1.4.2. 计算属性computed",slug:"_1-4-2-计算属性computed",normalizedTitle:"1.4.2. 计算属性 computed",charIndex:1920},{level:3,title:"1.4.3. 计算属性高级getter/setter",slug:"_1-4-3-计算属性高级getter-setter",normalizedTitle:"1.4.3. 计算属性高级 getter/setter",charIndex:2489},{level:3,title:"1.4.4. 监视属性",slug:"_1-4-4-监视属性",normalizedTitle:"1.4.4. 监视属性",charIndex:3384},{level:3,title:"1.4.5. 实例代码",slug:"_1-4-5-实例代码",normalizedTitle:"1.4.5. 实例代码",charIndex:3482},{level:2,title:"1.5. class与style绑定",slug:"_1-5-class与style绑定",normalizedTitle:"1.5. class 与 style 绑定",charIndex:3748},{level:3,title:"1.5.1. class绑定",slug:"_1-5-1-class绑定",normalizedTitle:"1.5.1. class 绑定",charIndex:3774},{level:3,title:"1.5.2. style绑定",slug:"_1-5-2-style绑定",normalizedTitle:"1.5.2. style 绑定",charIndex:3948},{level:3,title:"1.5.3. 代码实例",slug:"_1-5-3-代码实例",normalizedTitle:"1.5.3. 代码实例",charIndex:4082},{level:2,title:"1.6. 条件渲染",slug:"_1-6-条件渲染",normalizedTitle:"1.6. 条件渲染",charIndex:4472},{level:3,title:"1.6.1. 条件渲染指令",slug:"_1-6-1-条件渲染指令",normalizedTitle:"1.6.1. 条件渲染指令",charIndex:4486},{level:3,title:"1.6.2. 比较v-if与v-show",slug:"_1-6-2-比较v-if与v-show",normalizedTitle:"1.6.2. 比较 v-if 与 v-show",charIndex:4592},{level:3,title:"1.6.3. 代码实例",slug:"_1-6-3-代码实例",normalizedTitle:"1.6.3. 代码实例",charIndex:4690},{level:2,title:"1.7. 列表渲染",slug:"_1-7-列表渲染",normalizedTitle:"1.7. 列表渲染",charIndex:5037},{level:3,title:"1.7.2. 列表显示代码实例",slug:"_1-7-2-列表显示代码实例",normalizedTitle:"1.7.2. 列表显示代码实例",charIndex:5168},{level:3,title:"1.7.3. 列表更新显示代码",slug:"_1-7-3-列表更新显示代码",normalizedTitle:"1.7.3. 列表更新显示代码",charIndex:5502},{level:3,title:"1.7.4 列表过滤排序代码",slug:"_1-7-4-列表过滤排序代码",normalizedTitle:"1.7.4 列表过滤排序代码",charIndex:6266},{level:2,title:"1.8. 事件处理",slug:"_1-8-事件处理",normalizedTitle:"1.8. 事件处理",charIndex:7639},{level:3,title:"1.8.1. 绑定监听:",slug:"_1-8-1-绑定监听",normalizedTitle:"1.8.1. 绑定监听:",charIndex:7653},{level:3,title:"1.8.2. 事件修饰符",slug:"_1-8-2-事件修饰符",normalizedTitle:"1.8.2. 事件修饰符",charIndex:8056},{level:3,title:"1.8.3. 按键修饰符",slug:"_1-8-3-按键修饰符",normalizedTitle:"1.8.3. 按键修饰符",charIndex:8360},{level:2,title:"1.9. 表单输入绑定",slug:"_1-9-表单输入绑定",normalizedTitle:"1.9. 表单输入绑定",charIndex:8743},{level:3,title:"1.9.2. 使用v-model对表单数据自动收集",slug:"_1-9-2-使用v-model对表单数据自动收集",normalizedTitle:"1.9.2. 使用 v-model 对表单数据自动收集",charIndex:8759},{level:3,title:"1.9.3. 代码实例",slug:"_1-9-3-代码实例",normalizedTitle:"1.9.3. 代码实例",charIndex:8867},{level:3,title:"1.9.4 v-model修饰符",slug:"_1-9-4-v-model修饰符",normalizedTitle:"1.9.4 v-model 修饰符",charIndex:10918},{level:3,title:"1.9.5代码实例",slug:"_1-9-5代码实例",normalizedTitle:"1.9.5 代码实例",charIndex:11022},{level:2,title:"1.10. Vue实例生命周期",slug:"_1-10-vue实例生命周期",normalizedTitle:"1.10. vue 实例生命周期",charIndex:11376},{level:3,title:"1.10.1. 生命周期流程图",slug:"_1-10-1-生命周期流程图",normalizedTitle:"1.10.1. 生命周期流程图",charIndex:11397},{level:3,title:"1.10.2 . vue生命周期分析",slug:"_1-10-2-vue生命周期分析",normalizedTitle:"1.10.2 . vue 生命周期分析",charIndex:11419},{level:2,title:"1.11. 过渡&动画",slug:"_1-11-过渡-动画",normalizedTitle:"1.11. 过渡 &amp; 动画",charIndex:null},{level:3,title:"1.11.1. 过渡",slug:"_1-11-1-过渡",normalizedTitle:"1.11.1. 过渡",charIndex:11940},{level:3,title:"1.11.2. 动画",slug:"_1-11-2-动画",normalizedTitle:"1.11.2. 动画",charIndex:13033},{level:2,title:"1.12. 过滤器",slug:"_1-12-过滤器",normalizedTitle:"1.12. 过滤器",charIndex:14469},{level:3,title:"1.12.1. 理解过滤器",slug:"_1-12-1-理解过滤器",normalizedTitle:"1.12.1. 理解过滤器",charIndex:14483},{level:3,title:"1.12.2. 全局过滤器",slug:"_1-12-2-全局过滤器",normalizedTitle:"1.12.2. 全局过滤器",charIndex:14572},{level:3,title:"1.12.3. 代码实例",slug:"_1-12-3-代码实例",normalizedTitle:"1.12.3. 代码实例",charIndex:14927},{level:3,title:"1.12.4. 局部过滤器",slug:"_1-12-4-局部过滤器",normalizedTitle:"1.12.4. 局部过滤器",charIndex:15449},{level:2,title:"1.13. 内置指令与自定义指令",slug:"_1-13-内置指令与自定义指令",normalizedTitle:"1.13. 内置指令与自定义指令",charIndex:15754},{level:3,title:"1.13.1. 常用内置指令",slug:"_1-13-1-常用内置指令",normalizedTitle:"1.13.1. 常用内置指令",charIndex:15775},{level:3,title:"1.13.2. 自定义指令",slug:"_1-13-2-自定义指令",normalizedTitle:"1.13.2. 自定义指令",charIndex:16215},{level:3,title:"1.13.3. 代码实例",slug:"_1-13-3-代码实例",normalizedTitle:"1.13.3. 代码实例",charIndex:16690},{level:2,title:"1.14. 自定义插件",slug:"_1-14-自定义插件",normalizedTitle:"1.14. 自定义插件",charIndex:17215},{level:3,title:"1.14.1. 实例代码",slug:"_1-14-1-实例代码",normalizedTitle:"1.14.1. 实例代码",charIndex:17231},{level:2,title:"2.1. 使用vue-cli创建模板项目",slug:"_2-1-使用vue-cli创建模板项目",normalizedTitle:"2.1. 使用 vue-cli 创建模板项目",charIndex:18210},{level:3,title:"2.1.1. 说明",slug:"_2-1-1-说明",normalizedTitle:"2.1.1. 说明",charIndex:18237},{level:3,title:"2.1.2. 创建vue项目",slug:"_2-1-2-创建vue项目",normalizedTitle:"2.1.2. 创建 vue 项目",charIndex:18390},{level:3,title:"2.1.3. 模板项目的结构（vue2.xxx）",slug:"_2-1-3-模板项目的结构-vue2-xxx",normalizedTitle:"2.1.3. 模板项目的结构（vue2.xxx）",charIndex:18701},{level:2,title:"2.2. 项目的打包与发布",slug:"_2-2-项目的打包与发布",normalizedTitle:"2.2. 项目的打包与发布",charIndex:19226},{level:3,title:"2.2.1. 打包:",slug:"_2-2-1-打包",normalizedTitle:"2.2.1. 打包:",charIndex:19244},{level:3,title:"2.2.2. 发布使用静态服务器工具包",slug:"_2-2-2-发布使用静态服务器工具包",normalizedTitle:"2.2.2. 发布使用静态服务器工具包",charIndex:19274},{level:2,title:"2.3. 组件定义与使用",slug:"_2-3-组件定义与使用",normalizedTitle:"2.3. 组件定义与使用",charIndex:19359},{level:3,title:"2.3.1. vue文件的组成(3个部分)",slug:"_2-3-1-vue文件的组成-3个部分",normalizedTitle:"2.3.1. vue 文件的组成 (3 个部分)",charIndex:19376},{level:3,title:"2.3.2. 基本使用",slug:"_2-3-2-基本使用",normalizedTitle:"2.3.2. 基本使用",charIndex:19653},{level:2,title:"2.4. 组件间通信",slug:"_2-4-组件间通信",normalizedTitle:"2.4. 组件间通信",charIndex:20297},{level:3,title:"2.4.1. 组件间通信基本原则",slug:"_2-4-1-组件间通信基本原则",normalizedTitle:"2.4.1. 组件间通信基本原则",charIndex:20312},{level:3,title:"2.4.2. vue组件间通信方式",slug:"_2-4-2-vue组件间通信方式",normalizedTitle:"2.4.2. vue 组件间通信方式",charIndex:20398},{level:2,title:"2.5. 组件间通信1: props  $emit",slug:"_2-5-组件间通信1-props-emit",normalizedTitle:"2.5. 组件间通信 1: props  $emit",charIndex:null},{level:3,title:"2.5.1. 父传子",slug:"_2-5-1-父传子",normalizedTitle:"2.5.1. 父传子",charIndex:20565},{level:3,title:"2.5.2 子传父",slug:"_2-5-2-子传父",normalizedTitle:"2.5.2 子传父",charIndex:21468},{level:2,title:"2.6组件间的访问",slug:"_2-6组件间的访问",normalizedTitle:"2.6 组件间的访问",charIndex:22287},{level:3,title:"2.6.1父访问子",slug:"_2-6-1父访问子",normalizedTitle:"2.6.1 父访问子",charIndex:22393},{level:2,title:"2.7. 组件间通信3: 消息订阅与发布(pubsub-js库)",slug:"_2-7-组件间通信3-消息订阅与发布-pubsub-js库",normalizedTitle:"2.7. 组件间通信 3: 消息订阅与发布 (pubsub-js 库)",charIndex:23165},{level:3,title:"2.7.1. 订阅消息",slug:"_2-7-1-订阅消息",normalizedTitle:"2.7.1. 订阅消息",charIndex:23205},{level:3,title:"2.7.2. 发布消息",slug:"_2-7-2-发布消息",normalizedTitle:"2.7.2. 发布消息",charIndex:23269},{level:3,title:"2.7.3. 注意",slug:"_2-7-3-注意",normalizedTitle:"2.7.3. 注意",charIndex:23314},{level:3,title:"2.7.4. 事件的2个重要操作(总结)",slug:"_2-7-4-事件的2个重要操作-总结",normalizedTitle:"2.7.4. 事件的 2 个重要操作 (总结)",charIndex:23362},{level:2,title:"2.8. 组件间通信4: slot",slug:"_2-8-组件间通信4-slot",normalizedTitle:"2.8. 组件间通信 4: slot",charIndex:23534},{level:3,title:"2.8.1. 理解",slug:"_2-8-1-理解",normalizedTitle:"2.8.1. 理解",charIndex:23557},{level:3,title:"2.8.2. 子组件: home.vue",slug:"_2-8-2-子组件-home-vue",normalizedTitle:"2.8.2. 子组件: home.vue",charIndex:23592},{level:3,title:"2.8.3. 父组件: App.vue",slug:"_2-8-3-父组件-app-vue",normalizedTitle:"2.8.3. 父组件: app.vue",charIndex:23980},{level:2,title:"2.9 组件中的资源引入",slug:"_2-9-组件中的资源引入",normalizedTitle:"2.9 组件中的资源引入",charIndex:24646},{level:3,title:"2.9.1引入css",slug:"_2-9-1引入css",normalizedTitle:"2.9.1 引入 css",charIndex:24663},{level:3,title:"2.9.2文件路径---起别名",slug:"_2-9-2文件路径-起别名",normalizedTitle:"2.9.2 文件路径 --- 起别名",charIndex:24756},{level:2,title:"3.1. axios的使用",slug:"_3-1-axios的使用",normalizedTitle:"3.1. axios 的使用",charIndex:24854},{level:3,title:"3.1.1. 在线文档",slug:"_3-1-1-在线文档",normalizedTitle:"3.1.1. 在线文档",charIndex:24873},{level:3,title:"3.1.2. 下载:",slug:"_3-1-2-下载",normalizedTitle:"3.1.2. 下载:",charIndex:24956},{level:3,title:"3.1.3 axios的封装",slug:"_3-1-3-axios的封装",normalizedTitle:"3.1.3 axios 的封装",charIndex:24997},{level:2,title:"4.1. 常用",slug:"_4-1-常用",normalizedTitle:"4.1. 常用",charIndex:26018},{level:2,title:"4.2. 使用Element UI",slug:"_4-2-使用element-ui",normalizedTitle:"4.2. 使用 element ui",charIndex:26219},{level:2,title:"5.1. 理解",slug:"_5-1-理解",normalizedTitle:"5.1. 理解",charIndex:26527},{level:3,title:"5.1.1. 说明",slug:"_5-1-1-说明",normalizedTitle:"5.1.1. 说明",charIndex:26539},{level:2,title:"5.2. 基本路由的使用",slug:"_5-2-基本路由的使用",normalizedTitle:"5.2. 基本路由的使用",charIndex:26727},{level:3,title:"5.2.1配置路由",slug:"_5-2-1配置路由",normalizedTitle:"5.2.1 配置路由",charIndex:26744},{level:3,title:"5.2.2. 使用路由",slug:"_5-2-2-使用路由",normalizedTitle:"5.2.2. 使用路由",charIndex:26822},{level:3,title:"5.2.3.代码实例",slug:"_5-2-3-代码实例",normalizedTitle:"5.2.3. 代码实例",charIndex:26917},{level:3,title:"5.2.4 重定向路由（默认路由）",slug:"_5-2-4-重定向路由-默认路由",normalizedTitle:"5.2.4 重定向路由（默认路由）",charIndex:28190},{level:3,title:"5.2.5 配置history",slug:"_5-2-5-配置history",normalizedTitle:"5.2.5 配置 history",charIndex:28322},{level:3,title:"5.2.6. router-link其他属性",slug:"_5-2-6-router-link其他属性",normalizedTitle:"5.2.6. router-link 其他属性",charIndex:28423},{level:3,title:"5.2.7其他路由跳转方式",slug:"_5-2-7其他路由跳转方式",normalizedTitle:"5.2.7 其他路由跳转方式",charIndex:29001},{level:2,title:"5.3动态路由",slug:"_5-3动态路由",normalizedTitle:"5.3 动态路由",charIndex:29467},{level:2,title:"5.4路由懒加载",slug:"_5-4路由懒加载",normalizedTitle:"5.4 路由懒加载",charIndex:29993},{level:2,title:"5.5. 嵌套路由",slug:"_5-5-嵌套路由",normalizedTitle:"5.5. 嵌套路由",charIndex:30305},{level:3,title:"5.3.1. 子路由组件",slug:"_5-3-1-子路由组件",normalizedTitle:"5.3.1. 子路由组件",charIndex:30319},{level:3,title:"5.3.2. 配置嵌套路由:",slug:"_5-3-2-配置嵌套路由",normalizedTitle:"5.3.2. 配置嵌套路由:",charIndex:30367},{level:3,title:"5.3.3. 路由链接:",slug:"_5-3-3-路由链接",normalizedTitle:"5.3.3. 路由链接:",charIndex:30849},{level:2,title:"5.5. 向路由组件传递数据",slug:"_5-5-向路由组件传递数据",normalizedTitle:"5.5. 向路由组件传递数据",charIndex:31066},{level:3,title:"5.4.1. 方式1: 路由路径携带参数(param/query)",slug:"_5-4-1-方式1-路由路径携带参数-param-query",normalizedTitle:"5.4.1. 方式 1: 路由路径携带参数 (param/query)",charIndex:31085},{level:3,title:"5.4.2. 方式2:编程式传参",slug:"_5-4-2-方式2-编程式传参",normalizedTitle:"5.4.2. 方式 2: 编程式传参",charIndex:31418},{level:2,title:"5.6. keep-alive(缓存)",slug:"_5-6-keep-alive-缓存",normalizedTitle:"5.6. keep-alive (缓存)",charIndex:31553},{level:3,title:"5.6.1. 理解",slug:"_5-6-1-理解",normalizedTitle:"5.6.1. 理解",charIndex:31578},{level:3,title:"5.6.2. 编码实现",slug:"_5-6-2-编码实现",normalizedTitle:"5.6.2. 编码实现",charIndex:31671},{level:2,title:"5.7. 路由守卫",slug:"_5-7-路由守卫",normalizedTitle:"5.7. 路由守卫",charIndex:31755},{level:3,title:"",slug:"",normalizedTitle:"",charIndex:0},{level:2,title:"6.1. vuex理解",slug:"_6-1-vuex理解",normalizedTitle:"6.1. vuex 理解",charIndex:32596},{level:3,title:"6.1.1. vuex是什么",slug:"_6-1-1-vuex是什么",normalizedTitle:"6.1.1. vuex 是什么",charIndex:32613},{level:3,title:"6.1.2. 状态自管理应用",slug:"_6-1-2-状态自管理应用",normalizedTitle:"6.1.2. 状态自管理应用",charIndex:32775},{level:2,title:"6.2 vuex的基本使用",slug:"_6-2-vuex的基本使用",normalizedTitle:"6.2 vuex 的基本使用",charIndex:32908},{level:3,title:"6.2.1 安装",slug:"_6-2-1-安装",normalizedTitle:"6.2.1 安装",charIndex:32927},{level:3,title:"6.2.2  创建",slug:"_6-2-2-创建",normalizedTitle:"6.2.2  创建",charIndex:null},{level:3,title:"6.2.3 挂载Vue实例",slug:"_6-2-3-挂载vue实例",normalizedTitle:"6.2.3 挂载 vue 实例",charIndex:33346},{level:3,title:"6.2.4 state",slug:"_6-2-4-state",normalizedTitle:"6.2.4 state",charIndex:33537},{level:3,title:"6.2.5 mutations",slug:"_6-2-5-mutations",normalizedTitle:"6.2.5 mutations",charIndex:33669},{level:3,title:"6.2.6 增删state中的成员",slug:"_6-2-6-增删state中的成员",normalizedTitle:"6.2.6 增删 state 中的成员",charIndex:34121},{level:3,title:"6.2.7 getters",slug:"_6-2-7-getters",normalizedTitle:"6.2.7 getters",charIndex:34332},{level:3,title:"6.2.8 Actions",slug:"_6-2-8-actions",normalizedTitle:"6.2.8 actions",charIndex:34742},{level:3,title:"6.2.9 Models",slug:"_6-2-9-models",normalizedTitle:"6.2.9 models",charIndex:35414},{level:4,title:"2.2.9.1 基本使用",slug:"_2-2-9-1-基本使用",normalizedTitle:"2.2.9.1 基本使用",charIndex:35430},{level:4,title:"2.2.9.2 模块的细节",slug:"_2-2-9-2-模块的细节",normalizedTitle:"2.2.9.2 模块的细节",charIndex:35797},{level:3,title:"6.2.10 规范目录结构",slug:"_6-2-10-规范目录结构",normalizedTitle:"6.2.10 规范目录结构",charIndex:36481}],lastUpdated:"5/26/2022, 9:20:36 AM",lastUpdatedTimestamp:1653556836e3,headersStr:"1.1. Vue的基本认识 1.1.1. 官网 1.1.2. 介绍描述 1.1.3. Vue的特点 1.1.4. 与其它前端JS框架的关联 1.1.5. Vue扩展插件 1.2. Vue的基本使用 1.2.1 编码 1.2.2. 使用vue开发者工具调试 1.2.3\t. 理解MVC和Vue的MVVM 1.3. 模板语法 1.3.1. 模板的理解 1.4. 计算属性和监视 1.4.1 什么时候用计算属性 1.4.2. 计算属性computed 1.4.3. 计算属性高级getter/setter 1.4.4. 监视属性 1.4.5. 实例代码 1.5. class与style绑定 1.5.1. class绑定 1.5.2. style绑定 1.5.3. 代码实例 1.6. 条件渲染 1.6.1. 条件渲染指令 1.6.2. 比较v-if与v-show 1.6.3. 代码实例 1.7. 列表渲染 1.7.2. 列表显示代码实例 1.7.3. 列表更新显示代码 1.7.4 列表过滤排序代码 1.8. 事件处理 1.8.1. 绑定监听: 1.8.2. 事件修饰符 1.8.3. 按键修饰符 1.9. 表单输入绑定 1.9.2. 使用v-model对表单数据自动收集 1.9.3. 代码实例 1.9.4 v-model修饰符 1.9.5代码实例 1.10. Vue实例生命周期 1.10.1. 生命周期流程图 1.10.2 . vue生命周期分析 1.11. 过渡&动画 1.11.1. 过渡 1.11.2. 动画 1.12. 过滤器 1.12.1. 理解过滤器 1.12.2. 全局过滤器 1.12.3. 代码实例 1.12.4. 局部过滤器 1.13. 内置指令与自定义指令 1.13.1. 常用内置指令 1.13.2. 自定义指令 1.13.3. 代码实例 1.14. 自定义插件 1.14.1. 实例代码 2.1. 使用vue-cli创建模板项目 2.1.1. 说明 2.1.2. 创建vue项目 2.1.3. 模板项目的结构（vue2.xxx） 2.2. 项目的打包与发布 2.2.1. 打包: 2.2.2. 发布使用静态服务器工具包 2.3. 组件定义与使用 2.3.1. vue文件的组成(3个部分) 2.3.2. 基本使用 2.4. 组件间通信 2.4.1. 组件间通信基本原则 2.4.2. vue组件间通信方式 2.5. 组件间通信1: props  $emit 2.5.1. 父传子 2.5.2 子传父 2.6组件间的访问 2.6.1父访问子 2.7. 组件间通信3: 消息订阅与发布(pubsub-js库) 2.7.1. 订阅消息 2.7.2. 发布消息 2.7.3. 注意 2.7.4. 事件的2个重要操作(总结) 2.8. 组件间通信4: slot 2.8.1. 理解 2.8.2. 子组件: home.vue 2.8.3. 父组件: App.vue 2.9 组件中的资源引入 2.9.1引入css 2.9.2文件路径---起别名 3.1. axios的使用 3.1.1. 在线文档 3.1.2. 下载: 3.1.3 axios的封装 4.1. 常用 4.2. 使用Element UI 5.1. 理解 5.1.1. 说明 5.2. 基本路由的使用 5.2.1配置路由 5.2.2. 使用路由 5.2.3.代码实例 5.2.4 重定向路由（默认路由） 5.2.5 配置history 5.2.6. router-link其他属性 5.2.7其他路由跳转方式 5.3动态路由 5.4路由懒加载 5.5. 嵌套路由 5.3.1. 子路由组件 5.3.2. 配置嵌套路由: 5.3.3. 路由链接: 5.5. 向路由组件传递数据 5.4.1. 方式1: 路由路径携带参数(param/query) 5.4.2. 方式2:编程式传参 5.6. keep-alive(缓存) 5.6.1. 理解 5.6.2. 编码实现 5.7. 路由守卫  6.1. vuex理解 6.1.1. vuex是什么 6.1.2. 状态自管理应用 6.2 vuex的基本使用 6.2.1 安装 6.2.2  创建 6.2.3 挂载Vue实例 6.2.4 state 6.2.5 mutations 6.2.6 增删state中的成员 6.2.7 getters 6.2.8 Actions 6.2.9 Models 2.2.9.1 基本使用 2.2.9.2 模块的细节 6.2.10 规范目录结构",content:'# Vue 全家桶\n\n\n# 第 1 章：Vue 核心\n\n\n# 1.1. Vue 的基本认识\n\n\n# 1.1.1. 官网\n\n 1. 英文官网: https://vuejs.org/\n    \n\n 2. 中文官网: https://cn.vuejs.org/\n    \n\n\n# 1.1.2. 介绍描述\n\n 1. 渐进式JavaScript 框架\n    \n\n 2. 作者: 尤雨溪(一位华裔前Google工程师)\n    \n\n 3. 作用: 动态构建(显示 )用户界面\n    \n\n\n# 1.1.3. Vue 的特点\n\n 1. 遵循MVVM模式\n    \n\n 2. 编码简洁, 体积小, 运行效率高, 适合移动/PC端开发\n    \n\n 3. 它本身只关注视图层, 可以轻松引入vue插件或其它第三库开发项目\n    \n\n\n# 1.1.4. 与其它前端 JS 框架的关联\n\n 1. 借鉴angular的**模板**和**数据绑定**技术\n    \n\n 2. 借鉴react的**组件化**和**虚拟DOM**技术\n    \n\n\n# 1.1.5. Vue 扩展插件\n\n 1. vue-cli: vue脚手架\n    \n\n 2. vue-resource(axios): ajax请求\n    \n\n 3. vue-router: 路由\n    \n\n 4. vuex: 状态管理\n    \n\n 5. vue-lazyload: 图片懒加载\n    \n\n 6. vue-scroller: 页面滑动相关\n    \n\n 7. mint-ui: 基于vue的UI组件库(移动端)\n    \n\n 8. element-ui: 基于vue的UI组件库(PC端)\n    \n\n\n# 1.2. Vue 的基本使用\n\n\n# 1.2.1 编码\n\n<div id="app">\n  <input type="text" v-model="msg">\n  <p>{{msg}}</p>\n</div>\n<script src="https://cdn.bootcdn.net/ajax/libs/vue/2.5.18/vue.js"><\/script>\n<script type="text/javascript">\nnew Vue({\n  el:"#app",  //element  用来匹配模版的根元素\n  data:{\n    msg:"hello word"   //为模板页面提供数据\n  }\n})\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 1.2.2. 使用 vue 开发者工具调试\n\nvue-Devtoos\n\n\n1\n\n\n\n# 1.2.3 . 理解 MVC 和 Vue 的 MVVM\n\n\n\n\n# 1.3. 模板语法\n\n\n# 1.3.1. 模板的理解\n\n 1. html + js\n\n 2. js 中以插值和指令形式存在\n\n//插值\n{{msg}}  \n//指令一: 强制数据绑定\n完整写法:\n    v-bind:xxx=\'yyy\'  //yyy会作为表达式解析执行\n简洁写法:\n    :xxx=\'yyy\'\n// 指令二: 绑定事件监听\n完整写法:\n    v-on:click=\'xxx\'   \n简洁写法:\n    @click=\'xxx\'\t//xxx是事件名\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n 3. 实例：\n\n<div id="app">\n  <a v-bind:href="url" >百度</a>\t\t//\n  <button v-on:click="test">测试按钮</button>\n</div>\n<script src="https://cdn.bootcdn.net/ajax/libs/vue/2.5.18/vue.js"><\/script>\n<script type="text/javascript">\nnew Vue({\n  el:"#app",\n  data:{\n    msg:"hello word",\n    url:"https:www.baidu.com"\n  },\n  methods:{\n    test(){\n      console.log("text()")\n    }\n  }\n})\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 1.4. 计算属性和监视\n\n\n# 1.4.1 什么时候用计算属性\n\n要显示的数据需要根据现有数据来计算\n\n\n# 1.4.2. 计算属性 computed\n\ncomputed:{}   //使用\n\n\n1\n\n\n实例代码\n\n<div id="app">\n  <input type="text" v-model="firstName">\n  <input type="text" v-model="lastName">\n  <input type="text" v-model="fullName">\n</div>\n<script src="https://cdn.bootcdn.net/ajax/libs/vue/2.5.18/vue.js"><\/script>\n<script type="text/javascript">\nnew Vue({\n  el:"#app",\n  data:{\n    firstName:"zhang",\n    lastName:"san"\n  },\n  computed:{    //通过computed来实现数据的计算，默认是get\n    fullName(){\n      return this.firstName+this.lastName\n    }\n  }\n})\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 1.4.3. 计算属性高级 getter/setter\n\ncomputed:{\n    test:{   //test是自己定义的属性名\n      get(){   //get显示数据\n      },\n      set(value){  //set监视数据，value是传递过来的参数\n      }\n    }\n  }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n代码实例\n\n<div id="app">\n  <input type="text" v-model="firstName">\n  <input type="text" v-model="lastName">\n  <input type="text" v-model="fullName">\n</div>\n<script src="https://cdn.bootcdn.net/ajax/libs/vue/2.5.18/vue.js"><\/script>\n<script type="text/javascript">\nnew Vue({\n  el:"#app",\n  data:{\n    firstName:"zhang",\n    lastName:"san"\n  },\n    //实现表单的双向绑定\n  computed:{\n    fullName:{\n      get(){   //get显示数据\n        return this.firstName+" "+this.lastName\n      },\n      set(value){  //set监视数据\n        const names=value.split(" ")\n        this.firstName=names[0]\n        this.lastName=names[1]\n\n      }\n    }\n  }\n})\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n\n# 1.4.4. 监视属性\n\n 1. 通过通过vm对象的$watch()或watch配置来监视指定的属性\n    \n\n 2. 当属性变化时, 回调函数自动调用, 在函数内部进行计算\n    \n\n\n# 1.4.5. 实例代码\n\n//方式一,Vue函数对象调用watch\nwatch:{\n    firstName(value){\n      this.fullName=value+" "+this.lastName\n    }\n  }\n//方式二,通过vue实例对象调用watch\nvm.$watch(\'firstName\', function (value) {\n    this.fullName2 = this.firstName + \'-\' + value\n  })\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 1.5. class 与 style 绑定\n\n\n# 1.5.1. class 绑定\n\n1)     :class=\'xxx\'\t\t\t//完整版：v-bind:class\n\n2)     xxx: \'classA\'\n\n3)     xxx: {classA:isA, classB: isB}\n\n4)     xxx: [\'classA\', \'classB\']\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 1.5.2. style 绑定\n\n1)     :style="{ color: activeColor, fontSize: fontSize + \'px\' }"\n\n2)     其中activeColor/fontSize是data属性\n\n\n1\n2\n3\n\n\n\n# 1.5.3. 代码实例\n\n  //class绑定中对象的方法\n  <style>\n    .active{\n      color: red;\n    }\n  </style>\n<p :class="{active:hasA}">class样式</p>   //active是对应style中的类名，其他自己定义\ndata:{\n    hasA:true\t //控制class类是否生效\n  }\n\n//style绑定方法\n<p :style="{color:activeColor,fontSize:activefont+\'px\'}">style样式</p>\ndata:{\n    activeColor:"blue",\n    activefont:20\n\n  }\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 1.6. 条件渲染\n\n\n# 1.6.1. 条件渲染指令\n\n1)     v-if与v-else     //原理是通过js代码增加/删除标签\n\n2)     v-show\t\t\t//原理是通过css样式改变标签状态\n\n\n1\n2\n3\n\n\n\n# 1.6.2. 比较 v-if 与 v-show\n\n 3. 如果需要频繁切换 v-show 较好\n    \n\n 4. 当条件不成立时, v-if的所有子节点不会解析(项目中使用)\n    \n\n\n# 1.6.3. 代码实例\n\n//v-if和v-else\n<p v-if="ok">成功</p>\n<p v-else>失败</p>\ndata:{\n    ok:true\n  }\n\n//v-show\n<p v-show="ok">成功</p>\n<p v-show="!ok">失败</p>\n<button @click="toggle">切换</button>\n-----------------------------\ndata:{\n    ok:true\n  },\nmethods:{\n    toggle(){\n      this.ok=!this.ok\n    }\n  }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 1.7. 列表渲染\n\n 1. 列表显示指令\n    \n\n数组: v-for /index\n\n对象: v-for /key\n\n 2. 列表的更新显示\n    \n\n删除 item\n\n替换 item\n\n 3. 列表的高级处理\n    \n\n列表过滤\n\n列表排序\n\n\n# 1.7.2. 列表显示代码实例\n\n<ul>\n   <li v-for="(item,index) in persons">    //item是遍历的每一项，index是下标，persons是数组名\n      {{item.id}}--{{item.name}}\n   </li>\n</ul>\ndata: {\n        persons: [\n          {id: 1, name: "zhangsan1"},\n          {id: 2, name: "zhangsan2"},\n          {id: 3, name: "zhangsan3"}\n        ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 1.7.3. 列表更新显示代码\n\n<ul>\n    <li v-for="(item,index) in persons">\n      {{item.id}}--{{item.name}}\n      ---\n      <button @click="deletep(index)">删除</button>\n      ---\n      <button @click="updatap(index,{id:Date.now(),name:\'zhangsan4\'})">更新</button>\n    </li>\n</ul>\n-----------------------------------\ndata: {\n        persons: [\n          {id: 1, name: "zhangsan1"},\n          {id: 2, name: "zhangsan2"},\n          {id: 3, name: "zhangsan3"}\n        ]\n      },\nmethods: {\n          // 删除\n          deletep(index){\n            this.persons.splice(index,1)\n          },\n          //更新\n          updatap(index,newp){\n            this.persons.splice(index,1,newp)\n          }\n        }\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# 1.7.4 列表过滤排序代码\n\n<input type="text" v-model="searchName">\n  <ul>\n    <li v-for="(p, index) in filterPersons" :key="p.id">\n      {{p.id}}--{{p.name}}--{{p.age}}\n    </li>\n  </ul>\n  <button @click="sortType=2">按年龄升序</button>\n  <button @click="sortType=3">按年龄降序</button>\n  <button @click="sortType=1">原本顺序</button>\n---------------------------------------------\ndata: {\n        searchName: \'\',\n        sortType: 1, // 排序的类型, 1: 不排序, 2: 升序, 3: 降序\n        persons: [\n          {id: 1, name: \'Tom\', age: 15},\n          {id: 2, name: \'Jack\', age: 12},\n          {id: 4, name: \'Bob\', age: 17},\n          {id: 6, name: \'Rose\', age: 16},\n          {id: 8, name: \'Else\', age: 13}\n        ]\n      },\n      computed: {\n        filterPersons () {\n          // 1. 得到依赖数据\n          const {sortType, searchName, persons} = this\n          // 2. 进行计算处理, 产生结果数据并返回\n          // 过滤\n          const arr = persons.filter(p => p.name.indexOf(searchName)>=0)\n          // 可能需要排序，设置标识符\n          if (sortType!==1) {\n            arr.sort((p1, p2) => {\n              if (sortType===2) { // 升序\n                return p1.age - p2.age\n              } else { // 降序\n                return p2.age - p1.age\n              }\n            })\n          }\n          return arr\n        }\n      }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n\n\n\n# 1.8. 事件处理\n\n\n# 1.8.1. 绑定监听:\n\nv-on:click="xxx"\t//简写  @click="xxx"\n\n@click="test(\'hello\', $event)" \t\n//test-事件名\n//hello-自己传的参数（可选）\n//$event-事件默认参数(可选)\n\n\n1\n2\n3\n4\n5\n6\n\n\n代码实例\n\n<button @click="test(\'hello\',$event)">test</button>\t\t//参数可以不传\ndata: {\n            msg:""\n      },\n      methods:{\n            test(msg,event){\t\n                console.log(msg,event.target.innerText)\n            }\n      }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 1.8.2. 事件修饰符\n\n 1. .prevent : 阻止事件的默认行为 \t//event.preventDefault()---原生写法\n    \n\n 2. .stop : 停止事件冒泡\t// event.stopPropagation()---原生写法\n    \n\n代码实例\n\n//阻止默认行为\n<a href="http://www.baidu.com" @click.preven>百度</a>\t\t\n//阻止事件冒泡\n<div @click="test1">\n      <div @click.stop></div>\t//需要绑定到父元素上\n</div>\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 1.8.3. 按键修饰符\n\n 1. .keycode : 操作的是某个keycode值的键\n    \n\n 2. .keyName : 操作的某个按键名的键(少部分)\n    \n\n代码实例\n\n<input type="text" v-model="msg" @keyup.13="test">\t\t\t//keycoe值\n<input type="text" v-model="msg" @keyup.enter="test">\t\t//ketname值\n    data: {\n            msg:""\n      },\n      methods:{\n            test1(){\n                alert(this.msg)\n            }\n      }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 1.9. 表单输入绑定\n\n\n# 1.9.2. 使用 v-model 对表单数据自动收集\n\n 1. text/textarea\n    \n\n 2. checkbox\n    \n\n 3. radio\n    \n\n 4. select\n    \n\n\n# 1.9.3. 代码实例\n\n<form action="/xxx" @submit.prevent="register">     //阻止默认提交表单\n        <span>用户名: </span>\n        <input type="text" v-model="user.username"><br>\n\n        <span>密码: </span>\n        <input type="password" v-model="user.pwd"><br>\n\n        <span>性别: </span>\n\t\t//使用value和data中的数据对应\n        <input type="radio" id="female" v-model="user.sex" value="女">   \n        <label for="female">女</label>\n        <input type="radio" id="male" v-model="user.sex" value="男">\n        <label for="male">男</label><br>\n\n        <span>爱好: </span>\n        //使用value和data中的数据对应\n        <input type="checkbox" id="basket" v-model="user.likes" value="basket">\n        <label for="basket">篮球</label>\n        <input type="checkbox" id="foot" v-model="user.likes" value="foot">\n        <label for="foot">足球</label>\n        <input type="checkbox" id="pingpang" v-model="user.likes" value="pingpang">\n        <label for="pingpang">乒乓</label><br>\n\n        <span>城市: </span>\n        <select v-model="user.cityId">\n            <option value="">未选择</option>\n            //:value实时监听  :key指定唯一的值\n            <option v-for="(city, index) in allCitys" :key="city.id" :value="city.id">{{city.name}}</option>\n        </select><br>\n        <span>介绍: </span>\n        <textarea rows="10" v-model="user.info"></textarea><br><br>\n\n        <input type="submit" value="注册">\n    </form>\n---------------------------------------------\ndata: {\n          user: {   //user包裹对象\n              username: \'admin\',\n              pwd: \'\',\n              sex: \'女\',\n              likes: [\'foot\'],\n              cityId: \'2\',\n              info: \'\',\n          },\n\n          allCitys: [\n              {id: 1, name: \'BJ\'},\n              {id: 2, name: \'SH\'},\n              {id: 3, name: \'SZ\'},\n          ]\n\n      },\n      methods:{\n                register () {\n                    alert(JSON.stringify(this.user))\n            }\n      }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n\n\n\n# 1.9.4 v-model 修饰符\n\n1.lazy   //失去焦点或者回车时更新数据\n2.number //让输入的内容自动转换为数字类型\n3.trim   //过滤左右两边空格\n\n\n1\n2\n3\n\n\n\n# 1.9.5 代码实例\n\n<input type="text" v-model.lazy="message">{{message}}\t//lazy\n<input type="number" v-model.number="message">{{message}}//number\n<input type="text" v-model.trim="message">{{message}}\t//trim\n----------------------------------------------------\nnew Vue({\n    el: "#app",\n    data: {\n      message: "hello"\n    },\n  })\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 1.10. Vue 实例生命周期\n\n\n# 1.10.1. 生命周期流程图\n\n\n\n\n# 1.10.2 . vue 生命周期分析\n\n//Vue中的this指向Vue的实例对象vm，所有操作指的是界面的操作\n1. vue对象的生命周期\n  1). 初始化显示\n    beforeCreate()\n    --------------实现数据代理: 后面可以通过vm读取data中的数据\n    created()\n    beforeMount()\n\t--------------渲染界面\n    mounted()\n  2). 更新状态\n    beforeUpdate()\n\t--------------更新界面\n    updated()\n  3). 销毁vue实例: vm.$destory()\n    beforeDestory()\n\t--------------销毁数据\n    destoryed()\n2. 常用的生命周期方法\n  mounted(): 发送ajax请求, 启动定时器等异步任务\n  beforeDestory(): 做收尾工作, 如: 清除定时器\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 1.11. 过渡 & 动画\n\n\n# 1.11.1. 过渡\n\n/* 显示的过渡样式 */\n        .yyy-enter-active {\n            transition: all 1s;\n        }\n\n/* 隐藏的过渡样式 */\n        .yyy-leave-active {\n            transition: all 5s;\n        }\n\n/* 隐藏时的样式 */\n        .yyy-enter, .yyy-leave-to {\n            opacity: 0;\n            transform: translateX(20px);\n        }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n实例代码\n\n <style>\n        /* 显示的过渡样式 */\n        .yyy-enter-active {\n            transition: all 1s;\n        }\n\n        /* 隐藏的过渡样式 */\n        .yyy-leave-active {\n            transition: all 5s;\n        }\n\n        /* 隐藏时的样式 */\n        .yyy-enter, .yyy-leave-to {\n            opacity: 0;\n            transform: translateX(20px);\n        }\n</style>\n---------------------------------------\n\t <button @click="ok">Toggle</button>\n    <transition name="yyy">\n        <p v-show="show">hello</p>\n    </transition>\n---------------------------------------\n data: {\n            show: true\n        },\n  methods:{\n       ok(){\n           this.show=!this.show\n       }\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n# 1.11.2. 动画\n\n/* 显示动画样式 */\n        .xxx-enter-active {\n            animation: bounce-in .5s;\n        }\n\n/* 隐藏动画样式 */\n        .xxx-leave-active {\n            animation: bounce-in .5s reverse;\n        }\n/* 关键帧 */\n        @keyframes bounce-in {\n            0% {\n                transform: scale(0);\n            }\n            50% {\n                transform: scale(1.5);\n            }\n            100% {\n                transform: scale(1);\n            }\n        }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n实例代码\n\n/* 显示动画样式 */\n        .xxx-enter-active {\n            animation: bounce-in .5s;\n        }\n\n/* 隐藏动画样式 */\n        .xxx-leave-active {\n            animation: bounce-in .5s reverse;\n        }\n/* 关键帧 */\n        @keyframes bounce-in {\n            0% {\n                transform: scale(0);\n            }\n            50% {\n                transform: scale(1.5);\n            }\n            100% {\n                transform: scale(1);\n            }\n        }\n------------------------------------------------\n\t <button @click="ok">Toggle show</button>\n    <transition name="xxx">\n        <p v-if="show" style="display: inline-block;">Lorem</p>\n    </transition>\n-------------------------------------------------\ndata: {\n            show: true\n        }\nmethods:{\n       ok(){\n           this.show=!this.show\n       }\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n\n# 1.12. 过滤器\n\n\n# 1.12.1. 理解过滤器\n\n 1. 功能: 对要显示的数据进行特定格式化后再显示\n    \n\n 2. 注意: 并没有改变原本的数据, 只是产生新的对应的数据\n    \n\n\n# 1.12.2. 全局过滤器\n\n1.定义过滤器\n Vue.filter("filterTime", (value,formatStr) => {\n     //value(必选)---被处理的数据，formatStr(可选)---自定义显示样式\n        return moment(value).format(formatStr || \'YYYY-MM-DD HH:mm:ss\')\t//定义默认的显示样式\n    })\n2.使用过滤器\n<p>{{currentTime | filterTime("YYYY-MM-DD")}}</p>\t\t//自己定义的显示样式\n<p>{{currentTime | filterTime("HH:mm:ss")}}</p>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 1.12.3. 代码实例\n\n<p>{{currentTime | filterTime("YYYY-MM-DD")}}</p>\n<p>{{currentTime | filterTime("HH:mm:ss")}}</p>\n----------------------------------------------\n//引入第三方格式化时间库moment\n<script src="https://cdn.bootcss.com/moment.js/2.24.0/moment.js"><\/script>\nVue.filter("filterTime", (value,formatStr) => {\n        return moment(value).format(formatStr || \'YYYY-MM-DD HH:mm:ss\')\n    })\n    new Vue({\n        el: "#app",\n        data: {\n           currentTime:Date.now()\n        }\n    })\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 1.12.4. 局部过滤器\n\n//注册局部过滤器\n<div id="app">{{price | showPrice }}</div>\n------------------------------------------\nnew Vue({\n    el: "#app",\n    data: {\n      price: 55\n    },\n    filters:{\n      showPrice(price){\n        return "￥"+price.toFixed(2)\n      }\n    }\n  })\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 1.13. 内置指令与自定义指令\n\n\n# 1.13.1. 常用内置指令\n\n 1.  v-text : 更新元素的 textContent\n     \n\n 2.  v-html : 更新元素的 innerHTML\n     \n\n 3.  v-if : 如果为true, 当前标签才会输出到页面\n     \n\n 4.  v-else: 如果为false, 当前标签才会输出到页面\n     \n\n 5.  v-show : 通过控制display样式来控制显示/隐藏\n     \n\n 6.  v-for : 遍历数组/对象\n     \n\n 7.  v-on : 绑定事件监听, 一般简写为@\n     \n\n 8.  v-bind : 强制绑定解析表达式, 可以省略v-bind\n     \n\n 9.  v-model : 双向数据绑定\n     \n\n 10. ref : 指定唯一标识，vue 对象通过 $refs 属性访问这个元素对象\n\n 11. v-cloak : 防止闪现，与 css 配合: [v-cloak]\n\n\n# 1.13.2. 自定义指令\n\n1)     注册全局指令\nVue.directive(\'my-directive\', function(el, binding){\n    //my-directive---指令名，el---指令属性所在的标签元素对象(直接用)，binding---包含指令相关信息数据的对象\n    el.innerHTML = binding.value.toupperCase()\n  })\n-----------------------\n2)     注册局部指令\n\n directives : {\n    \'my-directive\' : function (el, binding) {\n      el.innerHTML = binding.value.toupperCase()\n    }\n  }\n-----------------------\n3)     使用指令\n\n v-my-directive=\'xxx\'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 1.13.3. 代码实例\n\n<p v-upper-text="msg"></p>\n---------------------------\n    //定义全局（全局生效）\n    Vue.directive(\'upper-text\', function (el, binding) {\n        \n        el.innerText = binding.value.toUpperCase()\n    })\n    new Vue({\n        el: "#app",\n        data: {\n            msg:"hello"\n        },\n        //定义局部，只在当前Vue生效\n        directives:{\n            "upper-text"(el, binding){\n                el.innerText = binding.value.toUpperCase()\n            }\n        }\n    })\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 1.14. 自定义插件\n\n\n# 1.14.1. 实例代码\n\n 1. 插件JS\n    \n\n(function (window) {\n\n  // 定义插件对象\n  const MyPlugin = {}\n\n  // 所有的插件对象都必须有一个install方法\n  MyPlugin.install = function (Vue, options) {\n    console.log(\'MyPlugin.install()\')\n    // 1. 添加全局方法或属性\n    Vue.myGlobalMethod = function () {\n      console.log(\'Vue.myGlobalMethod()\')\n    }\n  \n    // 2. 添加一个全局资源(asset)\n    Vue.directive(\'my-directive\',(el, binding) => {\n      el.innerText = binding.value + \'--------\'\n    })\n  \n    // 4. 添加一个实例方法\n    Vue.prototype.$myMethod = function () {\n      console.log(\'vm $myMethod()\')\n    }\n  }\n\n  // 暴露插件对象\n  window.MyPlugin = MyPlugin\n})(window)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n 2. 页面使用插件\n    \n\n// 声明使用Vue插件\n  Vue.use(MyPlugin) // 内部调用插件的install方法来安装插件\n\n  Vue.myGlobalMethod()\n\n  const vm = new Vue({\n    el: \'#test\',\n    data() {\n      return {\n        msg: \'atguigu.com\'\n      }\n    },\n  })\n\n  vm.$myMethod()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 第 2 章：vue 组件化编码\n\n\n# 2.1. 使用 vue-cli 创建模板项目\n\n\n# 2.1.1. 说明\n\n 1. vue-cli是vue官方提供的脚手架工具\n    \n\n 2. github: https://github.com/vuejs/vue-cli\n    \n\n 3. 作用: 从https://github.com/vuejs-templates下载模板项目\n    \n\n\n# 2.1.2. 创建 vue 项目\n\n//1.vue-cli3.xx版本\nnpm install -g @vue/cli\t\t\t//安装vue/cli\n\nvue create vue-demo\t\t\t\t//创建项目，vue-demo项目名\t\n\n//2.vue-cli2.xx版本\nnpm install -g @vue/cli-init\t//安装vue/cli\n\nvue init webpack vue-demo\t\t//创建项目，vue-demo项目名\t\n \nnpm run dev\t\t\t\t\t\t//运行项目\nnpm run build\t\t\t\t\t//打包项目\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 2.1.3. 模板项目的结构（vue2.xxx）\n\n|-- build : webpack 相关的配置文件夹 (基本不需要修改)\n\n|-- dev-server.js : 通过 express 启动后台服务器\n\n|-- config: webpack 相关的配置文件夹 (基本不需要修改)\n\n|-- index.js: 指定的后台服务的端口号和静态资源文件夹\n\n|-- node_modules\n\n|-- src : 源码文件夹\n\n|-- components: vue 组件及其相关资源文件夹\n\n|-- App.vue: 应用根主组件\n\n|-- main.js: 应用入口 js\n\n|-- static: 静态资源文件夹\n\n|-- .babelrc: babel 的配置文件\n\n|-- .eslintignore: eslint 检查忽略的配置\n\n|-- .eslintrc.js: eslint 检查的配置\n\n|-- .gitignore: git 版本管制忽略的配置\n\n|-- index.html: 主页面文件\n\n|-- package.json: 应用包配置文件\n\n|-- README.md: 应用描述说明的 readme 文件\n\n\n# 2.2. 项目的打包与发布\n\n\n# 2.2.1. 打包:\n\nnpm run build\n\n\n# 2.2.2. 发布使用静态服务器工具包\n\nnpm install -g serve\n\nserve dist\n\n访问: http://localhost:5000\n\n\n# 2.3. 组件定义与使用\n\n\n# 2.3.1. vue 文件的组成 (3 个部分)\n\n<template>\n  页面模板\n </template>\n\n<script>\n  export default {\n   data() {\n       return {}\n   },\n   methods: {},\n   computed: {},\n   components: {}\n  }\n <\/script>\n\n3)样式\n  <style>  \n  样式定义\n </style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 2.3.2. 基本使用\n\n1.创建组件\n2.注册标签\n3.使用组件\n\n\n1\n2\n3\n\n\n创建组件 home\n\n<template>\n  <div class="hello">\n    <h1>{{ msg }}</h1>\n  </div>\n</template>\n<script>\nexport default {\n  name: \'Home\',\n  data () {\n    return {\n      msg: \'我是home组件\'\n    }\n  }\n}\n<\/script>\n\n<style scoped>\n\n</style>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n在 App 中使用 home\n\n<template>\n  <div id="app">\n    <Home/>\t\t//3.使用组件\n  </div>\n</template>\n\n<script>\n    //1.引入home组件\nimport Home from \'./components/home\'\n\nexport default {\n  name: \'App\',\n  components: {\n    Home\t\t//2.注册标签\n  }\n}\n<\/script>\n\n<style>\n\n</style>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 2.4. 组件间通信\n\n\n# 2.4.1. 组件间通信基本原则\n\n 1. 不要在子组件中直接修改父组件的状态数据\n    \n\n 2. 数据在哪, 更新数据的行为(函数)就应该定义在哪\n    \n\n\n# 2.4.2. vue 组件间通信方式\n\n 1. \tprops(父传子)  \t$emit(子传父)\n    \n\n 2.     消息订阅与发布(如: pubsub库) / 事件总线\n    \n\n 3.     slot\n    \n\n 4.     vuex\n    \n\n\n# 2.5. 组件间通信 1: props $emit\n\n\n# 2.5.1. 父传子\n\nApp.vue\n\n<template>\n  <div id="app">\n    <Home :cmessage="message"></Home>\n  </div>\n</template>\n\n<script>\nimport Home from \'./components/home\'\nexport default {\n  name: \'App\',\n  data(){\n   return{\n     message:"foo"\n   }\n  },\n  components: {\n    Home\n  }\n}\n<\/script>\n\n<style>\n</style>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\nhome.vue\n\n<template>\n  <div>\n    <h1>{{cmessage}}</h1>\n  </div>\n</template>\n<script>\nexport default {\n  name: \'Home\',\n  props:{\n    cmessage:{\t\t//接收父组件传递的数据\n      type:String,\t//指定类型\n      required:true,//必须传\n      default:"bar"//默认值\n    },\n    cbooks:{\n              type: Array,\n              default(){\t//当传递默认值的是数组或者对象时，必须是函数的形式\n                return []\n              },\n              required: true\n    }\n  }\n}\n<\/script>\n\n<style scoped>\n\n</style>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n\n# 2.5.2 子传父\n\nhome.vue\n\n<template>\n  <div>\n    <button @click="btnClcik">子传父</button>\n  </div>\n</template>\n<script>\nexport default {\n  name: \'Home\',\n  data(){\n   return{\n     count:0\n   }\n  },\n  methods:{\n    btnClcik(){\n      this.$emit("change",this.count)\t//通过$emit()传递数据，change是事件名\n    }\n  }\n}\n<\/script>\n\n<style scoped>\n\n</style>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\nApp.vue\n\n<template>\n  <div id="app">\n    <Home @change="fchange"></Home>\t\t//通过v-on接收数据,默认带着传过来的数据\n  </div>\n</template>\n\n<script>\nimport Home from \'./components/home\'\n\nexport default {\n  name: \'App\',\n  components: {\n    Home\n  },\n  methods:{\n    fchange(value){\t\t//value是传递过来的参数\n      console.log(value)\n}\n  }\n}\n<\/script>\n\n<style>\n\n</style>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# 2.6 组件间的访问\n\n1.父组件访问子组件：通过$children(不常用)或者$refs(常用)\n2.子组件访问父组件：通过$parent(不常用)\n3.访问根组件：通过$root\n\n\n1\n2\n3\n\n\n\n# 2.6.1 父访问子\n\nApp.vue\n\n<template>\n  <div id="app">\n    <Home ref="aaa"></Home>\t\t//通过ref为子组件绑定标识\n    <Button @click="btnclick">ref访问</Button>\n  </div>\n</template>\n\n<script>\nimport Home from \'./components/home\'\n\nexport default {\n  name: \'App\',\n  data(){\n   return{\n     message:"foo"\n   }\n  },\n  components: {\n    Home\n  },\n  methods:{\n    btnclick(){\n      console.log(this.$refs.aaa.count)\t//通过$refs获取子组件的内容\n}\n  }\n}\n<\/script>\n\n<style>\n\n</style>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\nhome.vue\n\n<template>\n  <div>\n\n  </div>\n</template>\n<script>\nexport default {\n  name: \'Home\',\n  data(){\n   return{\n     count:0\n   }\n  }\n\n}\n<\/script>\n\n<style scoped>\n\n</style>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 2.7. 组件间通信 3: 消息订阅与发布 (pubsub-js 库)\n\n\n# 2.7.1. 订阅消息\n\nPubSub.subscribe(\'msg\', function(msg, data){})\n\n\n# 2.7.2. 发布消息\n\nPubSub.publish(\'msg\', data)\n\n\n# 2.7.3. 注意\n\n 1. 优点: 此方式可实现任意关系组件间通信(数据)\n    \n\n\n# 2.7.4. 事件的 2 个重要操作 (总结)\n\n 1. 绑定事件监听 (订阅消息)\n    \n\n目标：标签元素\n\n事件名 (类型): click/focus\n\n回调函数: function (event){}\n\n 2. 触发事件 (发布消息)\n    \n\nDOM 事件：用户在浏览器上对应的界面上做对应的操作\n\n自定义：编码手动触发\n\n\n# 2.8. 组件间通信 4: slot\n\n\n# 2.8.1. 理解\n\n此方式用于父组件向子组件传递 标签数据\n\n\n# 2.8.2. 子组件: home.vue\n\n<template>\n  <div>\n      <slot></slot>\t\t//默认插槽\n      <slot name="center"></slot>\t//具名插槽\n      <slot name="right" :data="message"></slot>\t//作用域插槽\n  </div>\n</template>\n<script>\nexport default {\n  name: \'Home\',\n  data(){\n   return{\n     message:"hello"\n   }\n  }\n\n}\n<\/script>\n\n<style scoped>\n\n</style>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 2.8.3. 父组件: App.vue\n\n<template>\n<div id="app">\n  <Home>\n    //1.默认插槽   \n     <div>默认插槽</div>\n  //2.具名插槽\n    <template slot="center">\t\t\n      <div>具名插槽</div>\n    </template>\n  //3.作用域插槽，用test接收，data为访问的数据\n    <template #right="test">\t\t//v-slot="center"可以简写为#center\n      <div>{{test.data}}</div>\n    </template>\n  </Home>\n\x3c!--    <div slot="center"></div>--\x3e\n\n</div>\n\n</template>\n\n<script>\nimport Home from \'./components/home\'\nexport default {\nname: \'App\',\ndata(){\n return{\n   message:"foo"\n }\n},\ncomponents: {\n  Home\n}\n}\n<\/script>\n\n<style>\n\n</style>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\n\n# 2.9 组件中的资源引入\n\n\n# 2.9.1 引入 css\n\n//在其他组件中引入\n<style>\n@import "./assets/css/base.css";\n</style>\n\n\n\n1\n2\n3\n4\n5\n\n\n\n# 2.9.2 文件路径 --- 起别名\n\nhttps://blog.csdn.net/asfcyg/article/details/106224090\n\n\n# 第 3 章：vue-ajax\n\n\n# 3.1. axios 的使用\n\n\n# 3.1.1. 在线文档\n\nhttps://github.com/pagekit/vue-resource/blob/develop/docs/http.md\n\n\n# 3.1.2. 下载:\n\nnpm install axios --save\n\n\n# 3.1.3 axios 的封装\n\nnetwork/request.js\n\nimport axios from "axios"; //引入axios\n//第一步\nexport function request(config) {  //创建axios实例并暴露\n  const instance=axios.create({\t\n    baseURL:"http://123.207.32.32:8000/",\n    timeout:5000\n  })\n//第二步\n  //请求拦截器\n instance.interceptors.request.use(\n    (config) => {\n    console.log(config) //在请求直接做的事情\n    return config       //必须return出去\n  },\n    (error) => {\n      // console.log()\n    }\n  )\n  //响应拦截器  \n instance.interceptors.response.use(\n    (value) => {\n      console.log(value)\n      return value  \n    },\n    (error) => {\n      // console.log(error)\n    }\n  ) \n  //第三步  \n  return instance(config)  //返回一个promise的实例\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n组件中调用\n\nimport {request} from "./network/request";  //引入封装好的axios\n\nrequest({\t\t//调用requset\n  url:"/home/multidata"\n})\n  .then((value) => {\n    console.log(value)\n  })\n  .catch((reason) => {\n    console.log(reason)\n  })\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 第 4 章：vue UI 组件库\n\n\n# 4.1. 常用\n\n 1. Mint UI: \n    \n\na. 主页: http://mint-ui.github.io/#!/zh-cn\n\nb. 说明：饿了么开源的基于 vue 的移动端 UI 组件库\n\n 2. Element\n    \n\na. 主页: http://element-cn.eleme.io/#/zh-CN\n\nb. 说明：饿了么开源的基于 vue 的 PC 端 UI 组件库\n\n\n# 4.2. 使用 Element UI\n\n1. 下载\n\nnpm i element-ui -S\n\n\n1\n\n\n2、在 main.js 中配置 element 组件库\n\nimport ElementUI  from \'element-ui\'\t\t//引入ElementUI\nimport \'element-ui/lib/theme-chalk/index.css\'\t//全局引入css\nVue.use(ElementUI);\t//注册ElementUI\n\n\n1\n2\n3\n\n\n3. 组件中使用\n\n参考文档 http://element-cn.eleme.io/#/zh-CN\n\n\n# 第 5 章：vue-router\n\n\n# 5.1. 理解\n\n\n# 5.1.1. 说明\n\n 1. 官方提供的用来实现SPA的vue插件\n    \n\n 2. github: https://github.com/vuejs/vue-router\n    \n\n 3. 中文文档: http://router.vuejs.org/zh-cn/\n    \n\n 4. 下载: npm install vue-router --save\n    \n\n\n# 5.2. 基本路由的使用\n\n\n# 5.2.1 配置路由\n\n1.导入路由，调用Vue.use()\n2.创建路由实例，传入路由映射配置\n3.在Vue实例中挂载路由实例\n\n\n1\n2\n3\n\n\n\n# 5.2.2. 使用路由\n\n1.创建路由组件\n2.配置路由映射\n3.使用路由 <router-link></router-link>  <router-view/>\n\n\n1\n2\n3\n\n\n\n# 5.2.3. 代码实例\n\nrouter/index.js\n\nimport Router from \'vue-router\'\nVue.use(Router)\t\t\t//1.导入路由，调用Vue.use()\n//2.创建路由实例，传入路由映射配置\nexport default new Router({\n  routes: [\n    {\n      path: \'/home\',\n      component: Home\n    },\n    {\n      path: "/about",\n      component: About\n    }\n  ]\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nsrc/main.js\n\nimport router from \'./router\'\nnew Vue({\n  el: \'#app\',\n  router,\t//3.在Vue实例中挂载路由实例\t\n  render: h => h(App)\n})\n\n\n1\n2\n3\n4\n5\n6\n\n\n1. 创建路由组件\n\ncomponents/home,components/about\n\n<template>\n  <div>\n    home\n  </div>\n</template>\n\n<script>\n  export default {\n    name: "Home"\n  }\n<\/script>\n\n<style scoped>\n\n</style>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nrouter/index.js\n\nimport Home from "../components/home"\nimport About from "../components/about"\nimport Router from \'vue-router\'\nVue.use(Router)\t\t\t\nexport default new Router({\n    //2.配置路由映射\n  routes: [\n    {\n      path: \'/home\',\n      component: Home\n    },\n    {\n      path: "/about",\n      component: About\n    }\n  ]\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\nVue.app 3. 使用路由\n\n<template>\n  <div id="app">\n    <router-link to="/home">home</router-link>\t\t//路由链接\n    <router-link to="/about">about</router-link>\n    <router-view/>\t\t//用于渲染当前路由组件\n  </div>\n</template>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 5.2.4 重定向路由（默认路由）\n\nrouter/index.js\n\n routes: [\n    {\n      path: "",\n      redirect:"/home"\t//重定向到home\n    }\n  ]\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 5.2.5 配置 history\n\nrouter/index.js\n\nroutes: [],\nmode:"history"\t//配置history,默认地址栏中为hash，有#号\n\n\n1\n2\n\n\n\n# 5.2.6. router-link 其他属性\n\n 1.tag   //渲染成什么组件\n 2.replace\t//不能回退\n 3.active-class\t\t//修改默认选中的class\n 4.linkActiveClass: \'active\', // 指定选中的路由链接的class,需要在router中修改\n\n\n1\n2\n3\n4\n\n\nApp.vue\n\n<template>\n  <div id="app">\n      //tag渲染标签   //replace不会回退   //active-class="active" 修改默认class\n    <router-link to="/home" tag="button" replace active-class="active">home</router-link>\n    <router-view/>\n  </div>\n</template>\n\n<style>\n.active{\n  color: red;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nrouter/index.js\n\nroutes: [],\nmode:"history",\nlinkActiveClass:"active"\t\t//全局修改选中class\n\n\n1\n2\n3\n\n\n\n# 5.2.7 其他路由跳转方式\n\n$router.push()\n$router.replace()\n\n\n1\n2\n\n\nApp.vue\n\n<template>\n  <div id="app">\n    <button @click="clickHome">home</button>\n    <button @click="clickAbout">about</button>\n    <router-view/>\n  </div>\n</template>\n\nexport default {\n  name: \'App\',\n  methods:{\n    clickHome(){\n      this.$router.push("/home")\t//通过$router的方式实现跳转\n    },\n    clickAbout(){\n      this.$router.push("/about")\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 5.3 动态路由\n\n1.配置路由参数\n2.在组件中使用\n3.子组件拿到参数 \n\n\n1\n2\n3\n\n\nrouter/index.js\n\nroutes: [\n    {\n      path: \'/home/:id\',\t//通过id来标识，任何值都可以\n      component: Home\n    }  \n  ],\n\n\n1\n2\n3\n4\n5\n6\n\n\nApp.vue\n\n<router-link :to="\'/home/\'+userId">home</router-link>  //显示到地址栏上，注意一定要使用v-bind\n\n\n1\n\n\nhome.vue\n\n<h1>{{userId}}</h1>\t//使用拿到的参数\n-----------------\n<script>\n  export default {\n    name: "Home",\n    data(){\n      return{\n        userId:this.$route.params.id\t\t//通过this.$route.params拿到参数\n      }\n    }\n  }\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 5.4 路由懒加载\n\nroutes: [\n    {\n      path: "",\n      redirect:"/home"\n    },\n    {\n      path: \'/home/:id\',\n      component: () => import("../components/home")\t\t//懒加载，不用导入，直接引入\n    },\n    {\n      path: "/about",\n      component: () => import("../components/about")\n    }\n  ],\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 5.5. 嵌套路由\n\n\n# 5.3.1. 子路由组件\n\nHomeNews.vue\n\nHomeMessage.vue\n\n\n# 5.3.2. 配置嵌套路由:\n\nrouter/index.js\n\n{\n     path: \'/home\',\n     component: () => import("../components/home"),\n     children:[\t//配置子路由\n       {\n         path: "",\n         redirect:"news"\t\n       },\n       {\n         path:"news",\t//配置news路由，不需要加/\n         component:()=> import("../components/HomeNews")\n       },\n       {\n         path:"message",\n         component:()=> import("../components/HomeMessage")\n       }\n\n     ]\n   },\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 5.3.3. 路由链接:\n\nHome.vue\n\n<template>\n<div>\n  <router-link to="/home/news">news</router-link>\n  <router-link to="/home/message">message</router-link>\n  <router-view></router-view>\n</div>\n</template>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 5.5. 向路由组件传递数据\n\n\n# 5.4.1. 方式 1: 路由路径携带参数 (param/query)\n\nrouter/index.js\n\n{\n      path: \'/home\', //query传参普通配置\n      component: () => import("../components/home"),\n}\n\n\n1\n2\n3\n4\n\n\nApp.vue\n\n//以 :to="{path:\'\',query:{}}"形式传参\n<router-link :to="{path:\'/home\',query:{name:\'foo\',age:18}}">home</router-link>\n\n\n1\n2\n\n\nhome.vue\n\nthis.$route.query   //接收参数\n\n\n1\n\n\n\n# 5.4.2. 方式 2: 编程式传参\n\nthis.$router.push({\n    path:"/home",\n    query:{\n        name:"foo",\n        age:18\n    }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 5.6. keep-alive (缓存)\n\n\n# 5.6.1. 理解\n\n 1. 默认情况下, 被切换的路由组件对象会死亡释放, 再次回来时是重新创建的\n    \n\n 2. 如果可以缓存路由组件对象, 可以提高用户体验\n    \n\n\n# 5.6.2. 编码实现\n\n<keep-alive>\n\t<router-view></router-view>\n</keep-alive>  \n\n\n1\n2\n3\n\n\n\n# 5.7. 路由守卫\n\nvue 中路由守卫一共有三种，一个全局路由守卫，一个是组件内路由守卫，一个是 router 独享守卫\n\n全局路由守卫\n\nrouter.beforeEach((to, from, next) => {})\n//to: Route: 即将要进入的目标 路由对象\n//from: Route: 当前导航正要离开的路由\n//next: Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。\nrouter.afterEach（to，from） = {}\n\n\n1\n2\n3\n4\n5\n\n\n组件内路由守卫\n\nbeforeRouteEnter (to, from, next) {\n    // 注意，在路由进入之前，组件实例还未渲染，所以无法获取this实例，只能通过vm来访问组件实例\n    next(vm => {})\n}\nbeforeRouteUpdate (to, from, next) {\n    // 同一页面，刷新不同数据时调用，\n}\nbeforeRouteLeave (to, from, next) {\n    // 离开当前路由页面时调用\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nrouter 独享守卫\n\nexport default new VueRouter({\n    routes: [\n        {\n            path: \'/\',\n            name: \'home\',\n            component: \'Home\',\n            beforeEnter: (to, from, next) => {\n               // ...\n            }\n        }\n    ]\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n#\n\n\n# 第 6 章：vuex\n\n\n# 6.1. vuex 理解\n\n\n# 6.1.1. vuex 是什么\n\n 1. github站点: https://github.com/vuejs/vuex\n    \n\n 2. 在线文档: https://vuex.vuejs.org/zh-cn/\n    \n\n 3. 简单来说: 对vue应用中多个组件的共享状态进行集中式的管理(读/写)\n    \n\n\n# 6.1.2. 状态自管理应用\n\n 1. state: 驱动应用的数据源\n    \n\n 2. view: 以声明方式将state映射到视图\n    \n\n 3. actions: 响应在view上的用户输入导致的状态变化(包含n个更新状态的方法)\n    \n\n\n\n\n# 6.2 vuex 的基本使用\n\n\n# 6.2.1 安装\n\n1.npm install vuex --save    //安装vuex\n\n\n1\n\n\n\n# 6.2.2 创建\n\nstore/index.js\n\nimport Vue from \'vue\'\nimport Vuex from \'vuex\'\n// 1.挂载Vuex\nVue.use(Vuex)\n// 2.创建Vuex并暴露\nexport default new Vuex.Store({\n  state:{\n\t\t//存放状态的\n  },\n  mutations:{\n\t\t//修改同步状态\n  },\n  actions:{\n\t\t//修改异步状态\t\n  },\n  getters:{\n\t\t//加工state，相当于组件中的computed\n  },\n  modules:{\n\n  }\n})\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 6.2.3 挂载 Vue 实例\n\nmain.js\n\nimport Vue from \'vue\'\nimport store from \'./store\'\n\nnew Vue({\n  el: \'#app\',\n  store,\t//挂载\n  components: { App },\n  template: \'<App/>\'\n})\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 6.2.4 state\n\nrouter/index.js\n\nstate:{\n    count:0\t\t//保存状态\n  },\n\n\n1\n2\n3\n\n\nhome.vue\n\n<h1>{{$store.state.count}}</h1>\t\t//获取状态\n\n\n1\n\n\n\n# 6.2.5 mutations\n\nrouter/index.js\n\nmutations:{\n    increment(state){\n      state.count++\t\t\t//更新同步状态\n    },\n    addbooks(state,books){\n      console.log(books)  //传递参数\n    }\n  },\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nhome.vue\n\nmethods:{\n    add(){\n      this.$store.commit("increment")\t//获取同步状态,increment对应mutations中的方法\n    },\n    addBooks(){\n      const books={name:"Java",price:100}\n      this.$store.commit("addbooks",books) //获取参数\n    }\n  }\t\t\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 6.2.6 增删 state 中的成员\n\n在 Mutations 的方法中，应当使用 Vue 提供的方法来进行操作。如果使用在 state 中没有初始化，则 Vue 不能对数据进行实时响应。\n\nVue.set 为某个对象设置成员的值，若不存在则新增\n\nVue.set(state,"name","foo")\n\n\n1\n\n\nVue.delete 删除成员\n\nVue.delete(state,\'name\')\n\n\n1\n\n\n\n# 6.2.7 getters\n\nrouter/index.js\n\ngetters:{\n      sum(state){\t\t//state状态\n        return state.count*3\t\t//加工state\n      },\n      addsum(state,getters){ //state为当前VueX对象中的状态对象\n          \t\t\t\t\t//getters为当前getters对象，用于将getters下的其他getter拿来用\n        return getters.sum+state.count+5\n      }\n  },\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nhome.vue\n\n<h1>{{$store.getters.sum}}</h1>\t\t//获取加工后的状态\n<h1>{{$store.getters.addsum}}</h1>\t\n\n\n1\n2\n\n\n\n# 6.2.8 Actions\n\n由于直接在 mutation 方法中进行异步操作，将会引起数据失效。所以提供了 Actions 来专门进行异步操作，最终提交 mutation 方法。\n\nActions中的方法有两个默认参数\n\tcontext 上下文(相当于箭头函数中的this)对象\n\tpayload 挂载参数\n操作流程\n\t组件通过$store.dispatch()方法调用actions中的方法，actions通过context.commit()调用mutations中的方法来实现异步操作\n\n\n1\n2\n3\n4\n5\n\n\nrouter/index.js\n\nactions:{\n    aEdit(context,payload){\n        return new Promise((resolve,reject)=>{\n            setTimeout(()=>{\n                context.commit(\'edit\',payload)\n                resolve()\n            },2000)\n        })\n    }\n},\nmutations:{\n    edit(state){      \n      state.info.name=\'bar\' \n    }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nhome.vue\n\n this.$store.dispatch("aupdata")\n\n\n1\n\n\n\n# 6.2.9 Models\n\n# 2.2.9.1 基本使用\n\n当项目庞大，状态非常多时，可以采用模块化管理模式。Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter 、甚至是嵌套子模块 —— 从上至下进行同样方式的分割。\n\nmodels:{\n    a:{\n        state:{},\n        getters:{},\n        ....\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n组件调用状态\n\nthis.$store.state.a\n\n\n1\n\n\ncommit 和 dispatch 方法和原来的一样\n\nthis.$store.commit(\'editKey\')\nthis.$store.dispatch(\'aEditKey\')\n\n\n1\n2\n\n\n# 2.2.9.2 模块的细节\n\n模块中 mutations 和 getters 中的方法接受的第一个参数是自身局部模块内部的 state\n\nmodels:{\n    a:{\n        state:{key:5},\n        mutations:{\n            Eidt(state){\n                console.log(state)\n            }\n        },\n        ....\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\ngetters 中方法的第三个参数是根节点状态\n\ngetters:{\n            Eidt(state,getter,rootState){\n                return  rootState.key + state.key\n            }\n        },\n\n\n1\n2\n3\n4\n5\n\n\nactions 中方法获取局部模块状态是 context.state ,根节点状态是 context.rootState\n\nactions:{\n            Eidt(context){\n                \tconsole.log(context.state)\n                \tconsole.log(context.rootState)\n                }\n            }\n        },\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 6.2.10 规范目录结构\n\nstore:.\n│  actions.js\n│  getters.js\n│  index.js\n│  mutations.js\n│  mutations_type.js   ##该项为存放mutaions方法常量的文件，按需要可加入\n│\n└─modules\n        car.js\n\t\tprofile.js\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nindex.js\n\nimport mutations from "./mutations";\nexport default new Vuex.Store({\n  state:{\n   info: {name:\'foo\',age:18}\n  },\n  mutations,\n  actions,\n  getters,\n  modules\n})\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nmutations.js\n\nexport default {\n  updata(state){\n    state.info.name=\'bar\'\n  }\n}\n\n\n1\n2\n3\n4\n5\n',normalizedContent:'# vue 全家桶\n\n\n# 第 1 章：vue 核心\n\n\n# 1.1. vue 的基本认识\n\n\n# 1.1.1. 官网\n\n 1. 英文官网: https://vuejs.org/\n    \n\n 2. 中文官网: https://cn.vuejs.org/\n    \n\n\n# 1.1.2. 介绍描述\n\n 1. 渐进式javascript 框架\n    \n\n 2. 作者: 尤雨溪(一位华裔前google工程师)\n    \n\n 3. 作用: 动态构建(显示 )用户界面\n    \n\n\n# 1.1.3. vue 的特点\n\n 1. 遵循mvvm模式\n    \n\n 2. 编码简洁, 体积小, 运行效率高, 适合移动/pc端开发\n    \n\n 3. 它本身只关注视图层, 可以轻松引入vue插件或其它第三库开发项目\n    \n\n\n# 1.1.4. 与其它前端 js 框架的关联\n\n 1. 借鉴angular的**模板**和**数据绑定**技术\n    \n\n 2. 借鉴react的**组件化**和**虚拟dom**技术\n    \n\n\n# 1.1.5. vue 扩展插件\n\n 1. vue-cli: vue脚手架\n    \n\n 2. vue-resource(axios): ajax请求\n    \n\n 3. vue-router: 路由\n    \n\n 4. vuex: 状态管理\n    \n\n 5. vue-lazyload: 图片懒加载\n    \n\n 6. vue-scroller: 页面滑动相关\n    \n\n 7. mint-ui: 基于vue的ui组件库(移动端)\n    \n\n 8. element-ui: 基于vue的ui组件库(pc端)\n    \n\n\n# 1.2. vue 的基本使用\n\n\n# 1.2.1 编码\n\n<div id="app">\n  <input type="text" v-model="msg">\n  <p>{{msg}}</p>\n</div>\n<script src="https://cdn.bootcdn.net/ajax/libs/vue/2.5.18/vue.js"><\/script>\n<script type="text/javascript">\nnew vue({\n  el:"#app",  //element  用来匹配模版的根元素\n  data:{\n    msg:"hello word"   //为模板页面提供数据\n  }\n})\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 1.2.2. 使用 vue 开发者工具调试\n\nvue-devtoos\n\n\n1\n\n\n\n# 1.2.3 . 理解 mvc 和 vue 的 mvvm\n\n\n\n\n# 1.3. 模板语法\n\n\n# 1.3.1. 模板的理解\n\n 1. html + js\n\n 2. js 中以插值和指令形式存在\n\n//插值\n{{msg}}  \n//指令一: 强制数据绑定\n完整写法:\n    v-bind:xxx=\'yyy\'  //yyy会作为表达式解析执行\n简洁写法:\n    :xxx=\'yyy\'\n// 指令二: 绑定事件监听\n完整写法:\n    v-on:click=\'xxx\'   \n简洁写法:\n    @click=\'xxx\'\t//xxx是事件名\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n 3. 实例：\n\n<div id="app">\n  <a v-bind:href="url" >百度</a>\t\t//\n  <button v-on:click="test">测试按钮</button>\n</div>\n<script src="https://cdn.bootcdn.net/ajax/libs/vue/2.5.18/vue.js"><\/script>\n<script type="text/javascript">\nnew vue({\n  el:"#app",\n  data:{\n    msg:"hello word",\n    url:"https:www.baidu.com"\n  },\n  methods:{\n    test(){\n      console.log("text()")\n    }\n  }\n})\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 1.4. 计算属性和监视\n\n\n# 1.4.1 什么时候用计算属性\n\n要显示的数据需要根据现有数据来计算\n\n\n# 1.4.2. 计算属性 computed\n\ncomputed:{}   //使用\n\n\n1\n\n\n实例代码\n\n<div id="app">\n  <input type="text" v-model="firstname">\n  <input type="text" v-model="lastname">\n  <input type="text" v-model="fullname">\n</div>\n<script src="https://cdn.bootcdn.net/ajax/libs/vue/2.5.18/vue.js"><\/script>\n<script type="text/javascript">\nnew vue({\n  el:"#app",\n  data:{\n    firstname:"zhang",\n    lastname:"san"\n  },\n  computed:{    //通过computed来实现数据的计算，默认是get\n    fullname(){\n      return this.firstname+this.lastname\n    }\n  }\n})\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 1.4.3. 计算属性高级 getter/setter\n\ncomputed:{\n    test:{   //test是自己定义的属性名\n      get(){   //get显示数据\n      },\n      set(value){  //set监视数据，value是传递过来的参数\n      }\n    }\n  }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n代码实例\n\n<div id="app">\n  <input type="text" v-model="firstname">\n  <input type="text" v-model="lastname">\n  <input type="text" v-model="fullname">\n</div>\n<script src="https://cdn.bootcdn.net/ajax/libs/vue/2.5.18/vue.js"><\/script>\n<script type="text/javascript">\nnew vue({\n  el:"#app",\n  data:{\n    firstname:"zhang",\n    lastname:"san"\n  },\n    //实现表单的双向绑定\n  computed:{\n    fullname:{\n      get(){   //get显示数据\n        return this.firstname+" "+this.lastname\n      },\n      set(value){  //set监视数据\n        const names=value.split(" ")\n        this.firstname=names[0]\n        this.lastname=names[1]\n\n      }\n    }\n  }\n})\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n\n# 1.4.4. 监视属性\n\n 1. 通过通过vm对象的$watch()或watch配置来监视指定的属性\n    \n\n 2. 当属性变化时, 回调函数自动调用, 在函数内部进行计算\n    \n\n\n# 1.4.5. 实例代码\n\n//方式一,vue函数对象调用watch\nwatch:{\n    firstname(value){\n      this.fullname=value+" "+this.lastname\n    }\n  }\n//方式二,通过vue实例对象调用watch\nvm.$watch(\'firstname\', function (value) {\n    this.fullname2 = this.firstname + \'-\' + value\n  })\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 1.5. class 与 style 绑定\n\n\n# 1.5.1. class 绑定\n\n1)     :class=\'xxx\'\t\t\t//完整版：v-bind:class\n\n2)     xxx: \'classa\'\n\n3)     xxx: {classa:isa, classb: isb}\n\n4)     xxx: [\'classa\', \'classb\']\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 1.5.2. style 绑定\n\n1)     :style="{ color: activecolor, fontsize: fontsize + \'px\' }"\n\n2)     其中activecolor/fontsize是data属性\n\n\n1\n2\n3\n\n\n\n# 1.5.3. 代码实例\n\n  //class绑定中对象的方法\n  <style>\n    .active{\n      color: red;\n    }\n  </style>\n<p :class="{active:hasa}">class样式</p>   //active是对应style中的类名，其他自己定义\ndata:{\n    hasa:true\t //控制class类是否生效\n  }\n\n//style绑定方法\n<p :style="{color:activecolor,fontsize:activefont+\'px\'}">style样式</p>\ndata:{\n    activecolor:"blue",\n    activefont:20\n\n  }\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 1.6. 条件渲染\n\n\n# 1.6.1. 条件渲染指令\n\n1)     v-if与v-else     //原理是通过js代码增加/删除标签\n\n2)     v-show\t\t\t//原理是通过css样式改变标签状态\n\n\n1\n2\n3\n\n\n\n# 1.6.2. 比较 v-if 与 v-show\n\n 3. 如果需要频繁切换 v-show 较好\n    \n\n 4. 当条件不成立时, v-if的所有子节点不会解析(项目中使用)\n    \n\n\n# 1.6.3. 代码实例\n\n//v-if和v-else\n<p v-if="ok">成功</p>\n<p v-else>失败</p>\ndata:{\n    ok:true\n  }\n\n//v-show\n<p v-show="ok">成功</p>\n<p v-show="!ok">失败</p>\n<button @click="toggle">切换</button>\n-----------------------------\ndata:{\n    ok:true\n  },\nmethods:{\n    toggle(){\n      this.ok=!this.ok\n    }\n  }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 1.7. 列表渲染\n\n 1. 列表显示指令\n    \n\n数组: v-for /index\n\n对象: v-for /key\n\n 2. 列表的更新显示\n    \n\n删除 item\n\n替换 item\n\n 3. 列表的高级处理\n    \n\n列表过滤\n\n列表排序\n\n\n# 1.7.2. 列表显示代码实例\n\n<ul>\n   <li v-for="(item,index) in persons">    //item是遍历的每一项，index是下标，persons是数组名\n      {{item.id}}--{{item.name}}\n   </li>\n</ul>\ndata: {\n        persons: [\n          {id: 1, name: "zhangsan1"},\n          {id: 2, name: "zhangsan2"},\n          {id: 3, name: "zhangsan3"}\n        ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 1.7.3. 列表更新显示代码\n\n<ul>\n    <li v-for="(item,index) in persons">\n      {{item.id}}--{{item.name}}\n      ---\n      <button @click="deletep(index)">删除</button>\n      ---\n      <button @click="updatap(index,{id:date.now(),name:\'zhangsan4\'})">更新</button>\n    </li>\n</ul>\n-----------------------------------\ndata: {\n        persons: [\n          {id: 1, name: "zhangsan1"},\n          {id: 2, name: "zhangsan2"},\n          {id: 3, name: "zhangsan3"}\n        ]\n      },\nmethods: {\n          // 删除\n          deletep(index){\n            this.persons.splice(index,1)\n          },\n          //更新\n          updatap(index,newp){\n            this.persons.splice(index,1,newp)\n          }\n        }\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# 1.7.4 列表过滤排序代码\n\n<input type="text" v-model="searchname">\n  <ul>\n    <li v-for="(p, index) in filterpersons" :key="p.id">\n      {{p.id}}--{{p.name}}--{{p.age}}\n    </li>\n  </ul>\n  <button @click="sorttype=2">按年龄升序</button>\n  <button @click="sorttype=3">按年龄降序</button>\n  <button @click="sorttype=1">原本顺序</button>\n---------------------------------------------\ndata: {\n        searchname: \'\',\n        sorttype: 1, // 排序的类型, 1: 不排序, 2: 升序, 3: 降序\n        persons: [\n          {id: 1, name: \'tom\', age: 15},\n          {id: 2, name: \'jack\', age: 12},\n          {id: 4, name: \'bob\', age: 17},\n          {id: 6, name: \'rose\', age: 16},\n          {id: 8, name: \'else\', age: 13}\n        ]\n      },\n      computed: {\n        filterpersons () {\n          // 1. 得到依赖数据\n          const {sorttype, searchname, persons} = this\n          // 2. 进行计算处理, 产生结果数据并返回\n          // 过滤\n          const arr = persons.filter(p => p.name.indexof(searchname)>=0)\n          // 可能需要排序，设置标识符\n          if (sorttype!==1) {\n            arr.sort((p1, p2) => {\n              if (sorttype===2) { // 升序\n                return p1.age - p2.age\n              } else { // 降序\n                return p2.age - p1.age\n              }\n            })\n          }\n          return arr\n        }\n      }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n\n\n\n# 1.8. 事件处理\n\n\n# 1.8.1. 绑定监听:\n\nv-on:click="xxx"\t//简写  @click="xxx"\n\n@click="test(\'hello\', $event)" \t\n//test-事件名\n//hello-自己传的参数（可选）\n//$event-事件默认参数(可选)\n\n\n1\n2\n3\n4\n5\n6\n\n\n代码实例\n\n<button @click="test(\'hello\',$event)">test</button>\t\t//参数可以不传\ndata: {\n            msg:""\n      },\n      methods:{\n            test(msg,event){\t\n                console.log(msg,event.target.innertext)\n            }\n      }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 1.8.2. 事件修饰符\n\n 1. .prevent : 阻止事件的默认行为 \t//event.preventdefault()---原生写法\n    \n\n 2. .stop : 停止事件冒泡\t// event.stoppropagation()---原生写法\n    \n\n代码实例\n\n//阻止默认行为\n<a href="http://www.baidu.com" @click.preven>百度</a>\t\t\n//阻止事件冒泡\n<div @click="test1">\n      <div @click.stop></div>\t//需要绑定到父元素上\n</div>\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 1.8.3. 按键修饰符\n\n 1. .keycode : 操作的是某个keycode值的键\n    \n\n 2. .keyname : 操作的某个按键名的键(少部分)\n    \n\n代码实例\n\n<input type="text" v-model="msg" @keyup.13="test">\t\t\t//keycoe值\n<input type="text" v-model="msg" @keyup.enter="test">\t\t//ketname值\n    data: {\n            msg:""\n      },\n      methods:{\n            test1(){\n                alert(this.msg)\n            }\n      }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 1.9. 表单输入绑定\n\n\n# 1.9.2. 使用 v-model 对表单数据自动收集\n\n 1. text/textarea\n    \n\n 2. checkbox\n    \n\n 3. radio\n    \n\n 4. select\n    \n\n\n# 1.9.3. 代码实例\n\n<form action="/xxx" @submit.prevent="register">     //阻止默认提交表单\n        <span>用户名: </span>\n        <input type="text" v-model="user.username"><br>\n\n        <span>密码: </span>\n        <input type="password" v-model="user.pwd"><br>\n\n        <span>性别: </span>\n\t\t//使用value和data中的数据对应\n        <input type="radio" id="female" v-model="user.sex" value="女">   \n        <label for="female">女</label>\n        <input type="radio" id="male" v-model="user.sex" value="男">\n        <label for="male">男</label><br>\n\n        <span>爱好: </span>\n        //使用value和data中的数据对应\n        <input type="checkbox" id="basket" v-model="user.likes" value="basket">\n        <label for="basket">篮球</label>\n        <input type="checkbox" id="foot" v-model="user.likes" value="foot">\n        <label for="foot">足球</label>\n        <input type="checkbox" id="pingpang" v-model="user.likes" value="pingpang">\n        <label for="pingpang">乒乓</label><br>\n\n        <span>城市: </span>\n        <select v-model="user.cityid">\n            <option value="">未选择</option>\n            //:value实时监听  :key指定唯一的值\n            <option v-for="(city, index) in allcitys" :key="city.id" :value="city.id">{{city.name}}</option>\n        </select><br>\n        <span>介绍: </span>\n        <textarea rows="10" v-model="user.info"></textarea><br><br>\n\n        <input type="submit" value="注册">\n    </form>\n---------------------------------------------\ndata: {\n          user: {   //user包裹对象\n              username: \'admin\',\n              pwd: \'\',\n              sex: \'女\',\n              likes: [\'foot\'],\n              cityid: \'2\',\n              info: \'\',\n          },\n\n          allcitys: [\n              {id: 1, name: \'bj\'},\n              {id: 2, name: \'sh\'},\n              {id: 3, name: \'sz\'},\n          ]\n\n      },\n      methods:{\n                register () {\n                    alert(json.stringify(this.user))\n            }\n      }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n\n\n\n# 1.9.4 v-model 修饰符\n\n1.lazy   //失去焦点或者回车时更新数据\n2.number //让输入的内容自动转换为数字类型\n3.trim   //过滤左右两边空格\n\n\n1\n2\n3\n\n\n\n# 1.9.5 代码实例\n\n<input type="text" v-model.lazy="message">{{message}}\t//lazy\n<input type="number" v-model.number="message">{{message}}//number\n<input type="text" v-model.trim="message">{{message}}\t//trim\n----------------------------------------------------\nnew vue({\n    el: "#app",\n    data: {\n      message: "hello"\n    },\n  })\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 1.10. vue 实例生命周期\n\n\n# 1.10.1. 生命周期流程图\n\n\n\n\n# 1.10.2 . vue 生命周期分析\n\n//vue中的this指向vue的实例对象vm，所有操作指的是界面的操作\n1. vue对象的生命周期\n  1). 初始化显示\n    beforecreate()\n    --------------实现数据代理: 后面可以通过vm读取data中的数据\n    created()\n    beforemount()\n\t--------------渲染界面\n    mounted()\n  2). 更新状态\n    beforeupdate()\n\t--------------更新界面\n    updated()\n  3). 销毁vue实例: vm.$destory()\n    beforedestory()\n\t--------------销毁数据\n    destoryed()\n2. 常用的生命周期方法\n  mounted(): 发送ajax请求, 启动定时器等异步任务\n  beforedestory(): 做收尾工作, 如: 清除定时器\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 1.11. 过渡 & 动画\n\n\n# 1.11.1. 过渡\n\n/* 显示的过渡样式 */\n        .yyy-enter-active {\n            transition: all 1s;\n        }\n\n/* 隐藏的过渡样式 */\n        .yyy-leave-active {\n            transition: all 5s;\n        }\n\n/* 隐藏时的样式 */\n        .yyy-enter, .yyy-leave-to {\n            opacity: 0;\n            transform: translatex(20px);\n        }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n实例代码\n\n <style>\n        /* 显示的过渡样式 */\n        .yyy-enter-active {\n            transition: all 1s;\n        }\n\n        /* 隐藏的过渡样式 */\n        .yyy-leave-active {\n            transition: all 5s;\n        }\n\n        /* 隐藏时的样式 */\n        .yyy-enter, .yyy-leave-to {\n            opacity: 0;\n            transform: translatex(20px);\n        }\n</style>\n---------------------------------------\n\t <button @click="ok">toggle</button>\n    <transition name="yyy">\n        <p v-show="show">hello</p>\n    </transition>\n---------------------------------------\n data: {\n            show: true\n        },\n  methods:{\n       ok(){\n           this.show=!this.show\n       }\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n# 1.11.2. 动画\n\n/* 显示动画样式 */\n        .xxx-enter-active {\n            animation: bounce-in .5s;\n        }\n\n/* 隐藏动画样式 */\n        .xxx-leave-active {\n            animation: bounce-in .5s reverse;\n        }\n/* 关键帧 */\n        @keyframes bounce-in {\n            0% {\n                transform: scale(0);\n            }\n            50% {\n                transform: scale(1.5);\n            }\n            100% {\n                transform: scale(1);\n            }\n        }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n实例代码\n\n/* 显示动画样式 */\n        .xxx-enter-active {\n            animation: bounce-in .5s;\n        }\n\n/* 隐藏动画样式 */\n        .xxx-leave-active {\n            animation: bounce-in .5s reverse;\n        }\n/* 关键帧 */\n        @keyframes bounce-in {\n            0% {\n                transform: scale(0);\n            }\n            50% {\n                transform: scale(1.5);\n            }\n            100% {\n                transform: scale(1);\n            }\n        }\n------------------------------------------------\n\t <button @click="ok">toggle show</button>\n    <transition name="xxx">\n        <p v-if="show" style="display: inline-block;">lorem</p>\n    </transition>\n-------------------------------------------------\ndata: {\n            show: true\n        }\nmethods:{\n       ok(){\n           this.show=!this.show\n       }\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n\n# 1.12. 过滤器\n\n\n# 1.12.1. 理解过滤器\n\n 1. 功能: 对要显示的数据进行特定格式化后再显示\n    \n\n 2. 注意: 并没有改变原本的数据, 只是产生新的对应的数据\n    \n\n\n# 1.12.2. 全局过滤器\n\n1.定义过滤器\n vue.filter("filtertime", (value,formatstr) => {\n     //value(必选)---被处理的数据，formatstr(可选)---自定义显示样式\n        return moment(value).format(formatstr || \'yyyy-mm-dd hh:mm:ss\')\t//定义默认的显示样式\n    })\n2.使用过滤器\n<p>{{currenttime | filtertime("yyyy-mm-dd")}}</p>\t\t//自己定义的显示样式\n<p>{{currenttime | filtertime("hh:mm:ss")}}</p>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 1.12.3. 代码实例\n\n<p>{{currenttime | filtertime("yyyy-mm-dd")}}</p>\n<p>{{currenttime | filtertime("hh:mm:ss")}}</p>\n----------------------------------------------\n//引入第三方格式化时间库moment\n<script src="https://cdn.bootcss.com/moment.js/2.24.0/moment.js"><\/script>\nvue.filter("filtertime", (value,formatstr) => {\n        return moment(value).format(formatstr || \'yyyy-mm-dd hh:mm:ss\')\n    })\n    new vue({\n        el: "#app",\n        data: {\n           currenttime:date.now()\n        }\n    })\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 1.12.4. 局部过滤器\n\n//注册局部过滤器\n<div id="app">{{price | showprice }}</div>\n------------------------------------------\nnew vue({\n    el: "#app",\n    data: {\n      price: 55\n    },\n    filters:{\n      showprice(price){\n        return "￥"+price.tofixed(2)\n      }\n    }\n  })\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 1.13. 内置指令与自定义指令\n\n\n# 1.13.1. 常用内置指令\n\n 1.  v-text : 更新元素的 textcontent\n     \n\n 2.  v-html : 更新元素的 innerhtml\n     \n\n 3.  v-if : 如果为true, 当前标签才会输出到页面\n     \n\n 4.  v-else: 如果为false, 当前标签才会输出到页面\n     \n\n 5.  v-show : 通过控制display样式来控制显示/隐藏\n     \n\n 6.  v-for : 遍历数组/对象\n     \n\n 7.  v-on : 绑定事件监听, 一般简写为@\n     \n\n 8.  v-bind : 强制绑定解析表达式, 可以省略v-bind\n     \n\n 9.  v-model : 双向数据绑定\n     \n\n 10. ref : 指定唯一标识，vue 对象通过 $refs 属性访问这个元素对象\n\n 11. v-cloak : 防止闪现，与 css 配合: [v-cloak]\n\n\n# 1.13.2. 自定义指令\n\n1)     注册全局指令\nvue.directive(\'my-directive\', function(el, binding){\n    //my-directive---指令名，el---指令属性所在的标签元素对象(直接用)，binding---包含指令相关信息数据的对象\n    el.innerhtml = binding.value.touppercase()\n  })\n-----------------------\n2)     注册局部指令\n\n directives : {\n    \'my-directive\' : function (el, binding) {\n      el.innerhtml = binding.value.touppercase()\n    }\n  }\n-----------------------\n3)     使用指令\n\n v-my-directive=\'xxx\'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 1.13.3. 代码实例\n\n<p v-upper-text="msg"></p>\n---------------------------\n    //定义全局（全局生效）\n    vue.directive(\'upper-text\', function (el, binding) {\n        \n        el.innertext = binding.value.touppercase()\n    })\n    new vue({\n        el: "#app",\n        data: {\n            msg:"hello"\n        },\n        //定义局部，只在当前vue生效\n        directives:{\n            "upper-text"(el, binding){\n                el.innertext = binding.value.touppercase()\n            }\n        }\n    })\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 1.14. 自定义插件\n\n\n# 1.14.1. 实例代码\n\n 1. 插件js\n    \n\n(function (window) {\n\n  // 定义插件对象\n  const myplugin = {}\n\n  // 所有的插件对象都必须有一个install方法\n  myplugin.install = function (vue, options) {\n    console.log(\'myplugin.install()\')\n    // 1. 添加全局方法或属性\n    vue.myglobalmethod = function () {\n      console.log(\'vue.myglobalmethod()\')\n    }\n  \n    // 2. 添加一个全局资源(asset)\n    vue.directive(\'my-directive\',(el, binding) => {\n      el.innertext = binding.value + \'--------\'\n    })\n  \n    // 4. 添加一个实例方法\n    vue.prototype.$mymethod = function () {\n      console.log(\'vm $mymethod()\')\n    }\n  }\n\n  // 暴露插件对象\n  window.myplugin = myplugin\n})(window)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n 2. 页面使用插件\n    \n\n// 声明使用vue插件\n  vue.use(myplugin) // 内部调用插件的install方法来安装插件\n\n  vue.myglobalmethod()\n\n  const vm = new vue({\n    el: \'#test\',\n    data() {\n      return {\n        msg: \'atguigu.com\'\n      }\n    },\n  })\n\n  vm.$mymethod()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 第 2 章：vue 组件化编码\n\n\n# 2.1. 使用 vue-cli 创建模板项目\n\n\n# 2.1.1. 说明\n\n 1. vue-cli是vue官方提供的脚手架工具\n    \n\n 2. github: https://github.com/vuejs/vue-cli\n    \n\n 3. 作用: 从https://github.com/vuejs-templates下载模板项目\n    \n\n\n# 2.1.2. 创建 vue 项目\n\n//1.vue-cli3.xx版本\nnpm install -g @vue/cli\t\t\t//安装vue/cli\n\nvue create vue-demo\t\t\t\t//创建项目，vue-demo项目名\t\n\n//2.vue-cli2.xx版本\nnpm install -g @vue/cli-init\t//安装vue/cli\n\nvue init webpack vue-demo\t\t//创建项目，vue-demo项目名\t\n \nnpm run dev\t\t\t\t\t\t//运行项目\nnpm run build\t\t\t\t\t//打包项目\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 2.1.3. 模板项目的结构（vue2.xxx）\n\n|-- build : webpack 相关的配置文件夹 (基本不需要修改)\n\n|-- dev-server.js : 通过 express 启动后台服务器\n\n|-- config: webpack 相关的配置文件夹 (基本不需要修改)\n\n|-- index.js: 指定的后台服务的端口号和静态资源文件夹\n\n|-- node_modules\n\n|-- src : 源码文件夹\n\n|-- components: vue 组件及其相关资源文件夹\n\n|-- app.vue: 应用根主组件\n\n|-- main.js: 应用入口 js\n\n|-- static: 静态资源文件夹\n\n|-- .babelrc: babel 的配置文件\n\n|-- .eslintignore: eslint 检查忽略的配置\n\n|-- .eslintrc.js: eslint 检查的配置\n\n|-- .gitignore: git 版本管制忽略的配置\n\n|-- index.html: 主页面文件\n\n|-- package.json: 应用包配置文件\n\n|-- readme.md: 应用描述说明的 readme 文件\n\n\n# 2.2. 项目的打包与发布\n\n\n# 2.2.1. 打包:\n\nnpm run build\n\n\n# 2.2.2. 发布使用静态服务器工具包\n\nnpm install -g serve\n\nserve dist\n\n访问: http://localhost:5000\n\n\n# 2.3. 组件定义与使用\n\n\n# 2.3.1. vue 文件的组成 (3 个部分)\n\n<template>\n  页面模板\n </template>\n\n<script>\n  export default {\n   data() {\n       return {}\n   },\n   methods: {},\n   computed: {},\n   components: {}\n  }\n <\/script>\n\n3)样式\n  <style>  \n  样式定义\n </style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 2.3.2. 基本使用\n\n1.创建组件\n2.注册标签\n3.使用组件\n\n\n1\n2\n3\n\n\n创建组件 home\n\n<template>\n  <div class="hello">\n    <h1>{{ msg }}</h1>\n  </div>\n</template>\n<script>\nexport default {\n  name: \'home\',\n  data () {\n    return {\n      msg: \'我是home组件\'\n    }\n  }\n}\n<\/script>\n\n<style scoped>\n\n</style>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n在 app 中使用 home\n\n<template>\n  <div id="app">\n    <home/>\t\t//3.使用组件\n  </div>\n</template>\n\n<script>\n    //1.引入home组件\nimport home from \'./components/home\'\n\nexport default {\n  name: \'app\',\n  components: {\n    home\t\t//2.注册标签\n  }\n}\n<\/script>\n\n<style>\n\n</style>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 2.4. 组件间通信\n\n\n# 2.4.1. 组件间通信基本原则\n\n 1. 不要在子组件中直接修改父组件的状态数据\n    \n\n 2. 数据在哪, 更新数据的行为(函数)就应该定义在哪\n    \n\n\n# 2.4.2. vue 组件间通信方式\n\n 1. \tprops(父传子)  \t$emit(子传父)\n    \n\n 2.     消息订阅与发布(如: pubsub库) / 事件总线\n    \n\n 3.     slot\n    \n\n 4.     vuex\n    \n\n\n# 2.5. 组件间通信 1: props $emit\n\n\n# 2.5.1. 父传子\n\napp.vue\n\n<template>\n  <div id="app">\n    <home :cmessage="message"></home>\n  </div>\n</template>\n\n<script>\nimport home from \'./components/home\'\nexport default {\n  name: \'app\',\n  data(){\n   return{\n     message:"foo"\n   }\n  },\n  components: {\n    home\n  }\n}\n<\/script>\n\n<style>\n</style>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\nhome.vue\n\n<template>\n  <div>\n    <h1>{{cmessage}}</h1>\n  </div>\n</template>\n<script>\nexport default {\n  name: \'home\',\n  props:{\n    cmessage:{\t\t//接收父组件传递的数据\n      type:string,\t//指定类型\n      required:true,//必须传\n      default:"bar"//默认值\n    },\n    cbooks:{\n              type: array,\n              default(){\t//当传递默认值的是数组或者对象时，必须是函数的形式\n                return []\n              },\n              required: true\n    }\n  }\n}\n<\/script>\n\n<style scoped>\n\n</style>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n\n# 2.5.2 子传父\n\nhome.vue\n\n<template>\n  <div>\n    <button @click="btnclcik">子传父</button>\n  </div>\n</template>\n<script>\nexport default {\n  name: \'home\',\n  data(){\n   return{\n     count:0\n   }\n  },\n  methods:{\n    btnclcik(){\n      this.$emit("change",this.count)\t//通过$emit()传递数据，change是事件名\n    }\n  }\n}\n<\/script>\n\n<style scoped>\n\n</style>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\napp.vue\n\n<template>\n  <div id="app">\n    <home @change="fchange"></home>\t\t//通过v-on接收数据,默认带着传过来的数据\n  </div>\n</template>\n\n<script>\nimport home from \'./components/home\'\n\nexport default {\n  name: \'app\',\n  components: {\n    home\n  },\n  methods:{\n    fchange(value){\t\t//value是传递过来的参数\n      console.log(value)\n}\n  }\n}\n<\/script>\n\n<style>\n\n</style>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# 2.6 组件间的访问\n\n1.父组件访问子组件：通过$children(不常用)或者$refs(常用)\n2.子组件访问父组件：通过$parent(不常用)\n3.访问根组件：通过$root\n\n\n1\n2\n3\n\n\n\n# 2.6.1 父访问子\n\napp.vue\n\n<template>\n  <div id="app">\n    <home ref="aaa"></home>\t\t//通过ref为子组件绑定标识\n    <button @click="btnclick">ref访问</button>\n  </div>\n</template>\n\n<script>\nimport home from \'./components/home\'\n\nexport default {\n  name: \'app\',\n  data(){\n   return{\n     message:"foo"\n   }\n  },\n  components: {\n    home\n  },\n  methods:{\n    btnclick(){\n      console.log(this.$refs.aaa.count)\t//通过$refs获取子组件的内容\n}\n  }\n}\n<\/script>\n\n<style>\n\n</style>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\nhome.vue\n\n<template>\n  <div>\n\n  </div>\n</template>\n<script>\nexport default {\n  name: \'home\',\n  data(){\n   return{\n     count:0\n   }\n  }\n\n}\n<\/script>\n\n<style scoped>\n\n</style>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 2.7. 组件间通信 3: 消息订阅与发布 (pubsub-js 库)\n\n\n# 2.7.1. 订阅消息\n\npubsub.subscribe(\'msg\', function(msg, data){})\n\n\n# 2.7.2. 发布消息\n\npubsub.publish(\'msg\', data)\n\n\n# 2.7.3. 注意\n\n 1. 优点: 此方式可实现任意关系组件间通信(数据)\n    \n\n\n# 2.7.4. 事件的 2 个重要操作 (总结)\n\n 1. 绑定事件监听 (订阅消息)\n    \n\n目标：标签元素\n\n事件名 (类型): click/focus\n\n回调函数: function (event){}\n\n 2. 触发事件 (发布消息)\n    \n\ndom 事件：用户在浏览器上对应的界面上做对应的操作\n\n自定义：编码手动触发\n\n\n# 2.8. 组件间通信 4: slot\n\n\n# 2.8.1. 理解\n\n此方式用于父组件向子组件传递 标签数据\n\n\n# 2.8.2. 子组件: home.vue\n\n<template>\n  <div>\n      <slot></slot>\t\t//默认插槽\n      <slot name="center"></slot>\t//具名插槽\n      <slot name="right" :data="message"></slot>\t//作用域插槽\n  </div>\n</template>\n<script>\nexport default {\n  name: \'home\',\n  data(){\n   return{\n     message:"hello"\n   }\n  }\n\n}\n<\/script>\n\n<style scoped>\n\n</style>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 2.8.3. 父组件: app.vue\n\n<template>\n<div id="app">\n  <home>\n    //1.默认插槽   \n     <div>默认插槽</div>\n  //2.具名插槽\n    <template slot="center">\t\t\n      <div>具名插槽</div>\n    </template>\n  //3.作用域插槽，用test接收，data为访问的数据\n    <template #right="test">\t\t//v-slot="center"可以简写为#center\n      <div>{{test.data}}</div>\n    </template>\n  </home>\n\x3c!--    <div slot="center"></div>--\x3e\n\n</div>\n\n</template>\n\n<script>\nimport home from \'./components/home\'\nexport default {\nname: \'app\',\ndata(){\n return{\n   message:"foo"\n }\n},\ncomponents: {\n  home\n}\n}\n<\/script>\n\n<style>\n\n</style>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\n\n# 2.9 组件中的资源引入\n\n\n# 2.9.1 引入 css\n\n//在其他组件中引入\n<style>\n@import "./assets/css/base.css";\n</style>\n\n\n\n1\n2\n3\n4\n5\n\n\n\n# 2.9.2 文件路径 --- 起别名\n\nhttps://blog.csdn.net/asfcyg/article/details/106224090\n\n\n# 第 3 章：vue-ajax\n\n\n# 3.1. axios 的使用\n\n\n# 3.1.1. 在线文档\n\nhttps://github.com/pagekit/vue-resource/blob/develop/docs/http.md\n\n\n# 3.1.2. 下载:\n\nnpm install axios --save\n\n\n# 3.1.3 axios 的封装\n\nnetwork/request.js\n\nimport axios from "axios"; //引入axios\n//第一步\nexport function request(config) {  //创建axios实例并暴露\n  const instance=axios.create({\t\n    baseurl:"http://123.207.32.32:8000/",\n    timeout:5000\n  })\n//第二步\n  //请求拦截器\n instance.interceptors.request.use(\n    (config) => {\n    console.log(config) //在请求直接做的事情\n    return config       //必须return出去\n  },\n    (error) => {\n      // console.log()\n    }\n  )\n  //响应拦截器  \n instance.interceptors.response.use(\n    (value) => {\n      console.log(value)\n      return value  \n    },\n    (error) => {\n      // console.log(error)\n    }\n  ) \n  //第三步  \n  return instance(config)  //返回一个promise的实例\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n组件中调用\n\nimport {request} from "./network/request";  //引入封装好的axios\n\nrequest({\t\t//调用requset\n  url:"/home/multidata"\n})\n  .then((value) => {\n    console.log(value)\n  })\n  .catch((reason) => {\n    console.log(reason)\n  })\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 第 4 章：vue ui 组件库\n\n\n# 4.1. 常用\n\n 1. mint ui: \n    \n\na. 主页: http://mint-ui.github.io/#!/zh-cn\n\nb. 说明：饿了么开源的基于 vue 的移动端 ui 组件库\n\n 2. element\n    \n\na. 主页: http://element-cn.eleme.io/#/zh-cn\n\nb. 说明：饿了么开源的基于 vue 的 pc 端 ui 组件库\n\n\n# 4.2. 使用 element ui\n\n1. 下载\n\nnpm i element-ui -s\n\n\n1\n\n\n2、在 main.js 中配置 element 组件库\n\nimport elementui  from \'element-ui\'\t\t//引入elementui\nimport \'element-ui/lib/theme-chalk/index.css\'\t//全局引入css\nvue.use(elementui);\t//注册elementui\n\n\n1\n2\n3\n\n\n3. 组件中使用\n\n参考文档 http://element-cn.eleme.io/#/zh-cn\n\n\n# 第 5 章：vue-router\n\n\n# 5.1. 理解\n\n\n# 5.1.1. 说明\n\n 1. 官方提供的用来实现spa的vue插件\n    \n\n 2. github: https://github.com/vuejs/vue-router\n    \n\n 3. 中文文档: http://router.vuejs.org/zh-cn/\n    \n\n 4. 下载: npm install vue-router --save\n    \n\n\n# 5.2. 基本路由的使用\n\n\n# 5.2.1 配置路由\n\n1.导入路由，调用vue.use()\n2.创建路由实例，传入路由映射配置\n3.在vue实例中挂载路由实例\n\n\n1\n2\n3\n\n\n\n# 5.2.2. 使用路由\n\n1.创建路由组件\n2.配置路由映射\n3.使用路由 <router-link></router-link>  <router-view/>\n\n\n1\n2\n3\n\n\n\n# 5.2.3. 代码实例\n\nrouter/index.js\n\nimport router from \'vue-router\'\nvue.use(router)\t\t\t//1.导入路由，调用vue.use()\n//2.创建路由实例，传入路由映射配置\nexport default new router({\n  routes: [\n    {\n      path: \'/home\',\n      component: home\n    },\n    {\n      path: "/about",\n      component: about\n    }\n  ]\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nsrc/main.js\n\nimport router from \'./router\'\nnew vue({\n  el: \'#app\',\n  router,\t//3.在vue实例中挂载路由实例\t\n  render: h => h(app)\n})\n\n\n1\n2\n3\n4\n5\n6\n\n\n1. 创建路由组件\n\ncomponents/home,components/about\n\n<template>\n  <div>\n    home\n  </div>\n</template>\n\n<script>\n  export default {\n    name: "home"\n  }\n<\/script>\n\n<style scoped>\n\n</style>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nrouter/index.js\n\nimport home from "../components/home"\nimport about from "../components/about"\nimport router from \'vue-router\'\nvue.use(router)\t\t\t\nexport default new router({\n    //2.配置路由映射\n  routes: [\n    {\n      path: \'/home\',\n      component: home\n    },\n    {\n      path: "/about",\n      component: about\n    }\n  ]\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\nvue.app 3. 使用路由\n\n<template>\n  <div id="app">\n    <router-link to="/home">home</router-link>\t\t//路由链接\n    <router-link to="/about">about</router-link>\n    <router-view/>\t\t//用于渲染当前路由组件\n  </div>\n</template>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 5.2.4 重定向路由（默认路由）\n\nrouter/index.js\n\n routes: [\n    {\n      path: "",\n      redirect:"/home"\t//重定向到home\n    }\n  ]\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 5.2.5 配置 history\n\nrouter/index.js\n\nroutes: [],\nmode:"history"\t//配置history,默认地址栏中为hash，有#号\n\n\n1\n2\n\n\n\n# 5.2.6. router-link 其他属性\n\n 1.tag   //渲染成什么组件\n 2.replace\t//不能回退\n 3.active-class\t\t//修改默认选中的class\n 4.linkactiveclass: \'active\', // 指定选中的路由链接的class,需要在router中修改\n\n\n1\n2\n3\n4\n\n\napp.vue\n\n<template>\n  <div id="app">\n      //tag渲染标签   //replace不会回退   //active-class="active" 修改默认class\n    <router-link to="/home" tag="button" replace active-class="active">home</router-link>\n    <router-view/>\n  </div>\n</template>\n\n<style>\n.active{\n  color: red;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nrouter/index.js\n\nroutes: [],\nmode:"history",\nlinkactiveclass:"active"\t\t//全局修改选中class\n\n\n1\n2\n3\n\n\n\n# 5.2.7 其他路由跳转方式\n\n$router.push()\n$router.replace()\n\n\n1\n2\n\n\napp.vue\n\n<template>\n  <div id="app">\n    <button @click="clickhome">home</button>\n    <button @click="clickabout">about</button>\n    <router-view/>\n  </div>\n</template>\n\nexport default {\n  name: \'app\',\n  methods:{\n    clickhome(){\n      this.$router.push("/home")\t//通过$router的方式实现跳转\n    },\n    clickabout(){\n      this.$router.push("/about")\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 5.3 动态路由\n\n1.配置路由参数\n2.在组件中使用\n3.子组件拿到参数 \n\n\n1\n2\n3\n\n\nrouter/index.js\n\nroutes: [\n    {\n      path: \'/home/:id\',\t//通过id来标识，任何值都可以\n      component: home\n    }  \n  ],\n\n\n1\n2\n3\n4\n5\n6\n\n\napp.vue\n\n<router-link :to="\'/home/\'+userid">home</router-link>  //显示到地址栏上，注意一定要使用v-bind\n\n\n1\n\n\nhome.vue\n\n<h1>{{userid}}</h1>\t//使用拿到的参数\n-----------------\n<script>\n  export default {\n    name: "home",\n    data(){\n      return{\n        userid:this.$route.params.id\t\t//通过this.$route.params拿到参数\n      }\n    }\n  }\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 5.4 路由懒加载\n\nroutes: [\n    {\n      path: "",\n      redirect:"/home"\n    },\n    {\n      path: \'/home/:id\',\n      component: () => import("../components/home")\t\t//懒加载，不用导入，直接引入\n    },\n    {\n      path: "/about",\n      component: () => import("../components/about")\n    }\n  ],\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 5.5. 嵌套路由\n\n\n# 5.3.1. 子路由组件\n\nhomenews.vue\n\nhomemessage.vue\n\n\n# 5.3.2. 配置嵌套路由:\n\nrouter/index.js\n\n{\n     path: \'/home\',\n     component: () => import("../components/home"),\n     children:[\t//配置子路由\n       {\n         path: "",\n         redirect:"news"\t\n       },\n       {\n         path:"news",\t//配置news路由，不需要加/\n         component:()=> import("../components/homenews")\n       },\n       {\n         path:"message",\n         component:()=> import("../components/homemessage")\n       }\n\n     ]\n   },\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 5.3.3. 路由链接:\n\nhome.vue\n\n<template>\n<div>\n  <router-link to="/home/news">news</router-link>\n  <router-link to="/home/message">message</router-link>\n  <router-view></router-view>\n</div>\n</template>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 5.5. 向路由组件传递数据\n\n\n# 5.4.1. 方式 1: 路由路径携带参数 (param/query)\n\nrouter/index.js\n\n{\n      path: \'/home\', //query传参普通配置\n      component: () => import("../components/home"),\n}\n\n\n1\n2\n3\n4\n\n\napp.vue\n\n//以 :to="{path:\'\',query:{}}"形式传参\n<router-link :to="{path:\'/home\',query:{name:\'foo\',age:18}}">home</router-link>\n\n\n1\n2\n\n\nhome.vue\n\nthis.$route.query   //接收参数\n\n\n1\n\n\n\n# 5.4.2. 方式 2: 编程式传参\n\nthis.$router.push({\n    path:"/home",\n    query:{\n        name:"foo",\n        age:18\n    }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 5.6. keep-alive (缓存)\n\n\n# 5.6.1. 理解\n\n 1. 默认情况下, 被切换的路由组件对象会死亡释放, 再次回来时是重新创建的\n    \n\n 2. 如果可以缓存路由组件对象, 可以提高用户体验\n    \n\n\n# 5.6.2. 编码实现\n\n<keep-alive>\n\t<router-view></router-view>\n</keep-alive>  \n\n\n1\n2\n3\n\n\n\n# 5.7. 路由守卫\n\nvue 中路由守卫一共有三种，一个全局路由守卫，一个是组件内路由守卫，一个是 router 独享守卫\n\n全局路由守卫\n\nrouter.beforeeach((to, from, next) => {})\n//to: route: 即将要进入的目标 路由对象\n//from: route: 当前导航正要离开的路由\n//next: function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。\nrouter.aftereach（to，from） = {}\n\n\n1\n2\n3\n4\n5\n\n\n组件内路由守卫\n\nbeforerouteenter (to, from, next) {\n    // 注意，在路由进入之前，组件实例还未渲染，所以无法获取this实例，只能通过vm来访问组件实例\n    next(vm => {})\n}\nbeforerouteupdate (to, from, next) {\n    // 同一页面，刷新不同数据时调用，\n}\nbeforerouteleave (to, from, next) {\n    // 离开当前路由页面时调用\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nrouter 独享守卫\n\nexport default new vuerouter({\n    routes: [\n        {\n            path: \'/\',\n            name: \'home\',\n            component: \'home\',\n            beforeenter: (to, from, next) => {\n               // ...\n            }\n        }\n    ]\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n#\n\n\n# 第 6 章：vuex\n\n\n# 6.1. vuex 理解\n\n\n# 6.1.1. vuex 是什么\n\n 1. github站点: https://github.com/vuejs/vuex\n    \n\n 2. 在线文档: https://vuex.vuejs.org/zh-cn/\n    \n\n 3. 简单来说: 对vue应用中多个组件的共享状态进行集中式的管理(读/写)\n    \n\n\n# 6.1.2. 状态自管理应用\n\n 1. state: 驱动应用的数据源\n    \n\n 2. view: 以声明方式将state映射到视图\n    \n\n 3. actions: 响应在view上的用户输入导致的状态变化(包含n个更新状态的方法)\n    \n\n\n\n\n# 6.2 vuex 的基本使用\n\n\n# 6.2.1 安装\n\n1.npm install vuex --save    //安装vuex\n\n\n1\n\n\n\n# 6.2.2 创建\n\nstore/index.js\n\nimport vue from \'vue\'\nimport vuex from \'vuex\'\n// 1.挂载vuex\nvue.use(vuex)\n// 2.创建vuex并暴露\nexport default new vuex.store({\n  state:{\n\t\t//存放状态的\n  },\n  mutations:{\n\t\t//修改同步状态\n  },\n  actions:{\n\t\t//修改异步状态\t\n  },\n  getters:{\n\t\t//加工state，相当于组件中的computed\n  },\n  modules:{\n\n  }\n})\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 6.2.3 挂载 vue 实例\n\nmain.js\n\nimport vue from \'vue\'\nimport store from \'./store\'\n\nnew vue({\n  el: \'#app\',\n  store,\t//挂载\n  components: { app },\n  template: \'<app/>\'\n})\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 6.2.4 state\n\nrouter/index.js\n\nstate:{\n    count:0\t\t//保存状态\n  },\n\n\n1\n2\n3\n\n\nhome.vue\n\n<h1>{{$store.state.count}}</h1>\t\t//获取状态\n\n\n1\n\n\n\n# 6.2.5 mutations\n\nrouter/index.js\n\nmutations:{\n    increment(state){\n      state.count++\t\t\t//更新同步状态\n    },\n    addbooks(state,books){\n      console.log(books)  //传递参数\n    }\n  },\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nhome.vue\n\nmethods:{\n    add(){\n      this.$store.commit("increment")\t//获取同步状态,increment对应mutations中的方法\n    },\n    addbooks(){\n      const books={name:"java",price:100}\n      this.$store.commit("addbooks",books) //获取参数\n    }\n  }\t\t\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 6.2.6 增删 state 中的成员\n\n在 mutations 的方法中，应当使用 vue 提供的方法来进行操作。如果使用在 state 中没有初始化，则 vue 不能对数据进行实时响应。\n\nvue.set 为某个对象设置成员的值，若不存在则新增\n\nvue.set(state,"name","foo")\n\n\n1\n\n\nvue.delete 删除成员\n\nvue.delete(state,\'name\')\n\n\n1\n\n\n\n# 6.2.7 getters\n\nrouter/index.js\n\ngetters:{\n      sum(state){\t\t//state状态\n        return state.count*3\t\t//加工state\n      },\n      addsum(state,getters){ //state为当前vuex对象中的状态对象\n          \t\t\t\t\t//getters为当前getters对象，用于将getters下的其他getter拿来用\n        return getters.sum+state.count+5\n      }\n  },\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nhome.vue\n\n<h1>{{$store.getters.sum}}</h1>\t\t//获取加工后的状态\n<h1>{{$store.getters.addsum}}</h1>\t\n\n\n1\n2\n\n\n\n# 6.2.8 actions\n\n由于直接在 mutation 方法中进行异步操作，将会引起数据失效。所以提供了 actions 来专门进行异步操作，最终提交 mutation 方法。\n\nactions中的方法有两个默认参数\n\tcontext 上下文(相当于箭头函数中的this)对象\n\tpayload 挂载参数\n操作流程\n\t组件通过$store.dispatch()方法调用actions中的方法，actions通过context.commit()调用mutations中的方法来实现异步操作\n\n\n1\n2\n3\n4\n5\n\n\nrouter/index.js\n\nactions:{\n    aedit(context,payload){\n        return new promise((resolve,reject)=>{\n            settimeout(()=>{\n                context.commit(\'edit\',payload)\n                resolve()\n            },2000)\n        })\n    }\n},\nmutations:{\n    edit(state){      \n      state.info.name=\'bar\' \n    }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nhome.vue\n\n this.$store.dispatch("aupdata")\n\n\n1\n\n\n\n# 6.2.9 models\n\n# 2.2.9.1 基本使用\n\n当项目庞大，状态非常多时，可以采用模块化管理模式。vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter 、甚至是嵌套子模块 —— 从上至下进行同样方式的分割。\n\nmodels:{\n    a:{\n        state:{},\n        getters:{},\n        ....\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n组件调用状态\n\nthis.$store.state.a\n\n\n1\n\n\ncommit 和 dispatch 方法和原来的一样\n\nthis.$store.commit(\'editkey\')\nthis.$store.dispatch(\'aeditkey\')\n\n\n1\n2\n\n\n# 2.2.9.2 模块的细节\n\n模块中 mutations 和 getters 中的方法接受的第一个参数是自身局部模块内部的 state\n\nmodels:{\n    a:{\n        state:{key:5},\n        mutations:{\n            eidt(state){\n                console.log(state)\n            }\n        },\n        ....\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\ngetters 中方法的第三个参数是根节点状态\n\ngetters:{\n            eidt(state,getter,rootstate){\n                return  rootstate.key + state.key\n            }\n        },\n\n\n1\n2\n3\n4\n5\n\n\nactions 中方法获取局部模块状态是 context.state ,根节点状态是 context.rootstate\n\nactions:{\n            eidt(context){\n                \tconsole.log(context.state)\n                \tconsole.log(context.rootstate)\n                }\n            }\n        },\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 6.2.10 规范目录结构\n\nstore:.\n│  actions.js\n│  getters.js\n│  index.js\n│  mutations.js\n│  mutations_type.js   ##该项为存放mutaions方法常量的文件，按需要可加入\n│\n└─modules\n        car.js\n\t\tprofile.js\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\nindex.js\n\nimport mutations from "./mutations";\nexport default new vuex.store({\n  state:{\n   info: {name:\'foo\',age:18}\n  },\n  mutations,\n  actions,\n  getters,\n  modules\n})\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nmutations.js\n\nexport default {\n  updata(state){\n    state.info.name=\'bar\'\n  }\n}\n\n\n1\n2\n3\n4\n5\n',charsets:{cjk:!0}},{title:"vue3入门",frontmatter:{title:"vue3入门",date:"2022-04-15T16:54:07.000Z",permalink:"/pages/f2223/",categories:["Vue3"],tags:["Vue3"]},regularPath:"/views/02.%E6%8A%80%E6%9C%AF/01.vue3%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95.html",relativePath:"views/02.技术/01.vue3学习记录.md",key:"v-3451f656",path:"/pages/f2223/",headers:[{level:3,title:"1-vue3新特性",slug:"_1-vue3新特性",normalizedTitle:"1-vue3 新特性",charIndex:2},{level:3,title:"响应式系统",slug:"响应式系统",normalizedTitle:"响应式系统",charIndex:37}],lastUpdated:"5/25/2022, 6:17:07 AM",lastUpdatedTimestamp:1653459427e3,headersStr:"1-vue3新特性 响应式系统",content:"# 1-vue3 新特性\n\n 1. vue3 与 2 的最大的区别有俩个 响应式系统和组合式 api\n    \n    \n    # 响应式系统\n    \n    Vue 2 的响应式机制是基于 Object.defineProperty () 这个 API 实现的，此外，Vue 还使用了 Proxy，这两者看起来都像是对数据的读写进行拦截，但是 defineProperty 是拦截具体某个属性，Proxy 才是真正的 “代理”。\n    \n    怎么理解这两者的区别呢？我们首先看 defineProperty 这个 API，defineProperty 的使用，要明确地写在代码里，下面是示例代码：\n\nObject.defineProperty(obj, 'title', {\n  get() {},\n  set() {},\n})\n\n\n1\n2\n3\n4\n\n\n  当项目里“读取 obj.title”和“修改 obj.title”的时候被 defineProperty 拦截，但 defineProperty 对不存在的属性无法拦截，所以 Vue 2 中所有数据必须要在 data 里声明。而且，如果 title 是一个数组的时候，对数组的操作，并不会改变 obj.title 的指向，虽然我们可以通过拦截.push 等操作实现部分功能，但是对数组的长度的修改等操作还是无法实现拦截，所以还需要额外的 $set 等 API。而 Proxy 这个 API 就是真正的代理了，我们先看它的用法\n\n\nnew Proxy(obj, {\n  get() { },\n  set() { },\n})\n\n\n1\n2\n3\n4\n\n\n  需要注意的是，虽然 Proxy 拦截 obj 这个数据，但 obj 具体是什么属性，Proxy 则不关心，统一都拦截了。而且 Proxy 还可以监听更多的数据格式，比如 Set、Map，这是 Vue 2 做不到的。当然，Proxy 存在一些兼容性问题，这也是为什么 Vue 3 不兼容 IE11 以下的浏览器的原因，还好现在 IE 用的人不多了。\n\n  **proxy用法详细**：[https://es6.ruanyifeng.com/#docs/proxy](https://es6.ruanyifeng.com/#docs/proxy)\n\n  ### Composition API 组合语法\n\n  Composition API 是 Vue 3 中的一个新特性，我们也叫它组合 API。\n\n  先举个 Vue 2 中的简单例子，一个累加器，并且还有一个计算属性显示累加器乘以 2 的结果。\n\n\n<div id=\"app\">\n\n  <h1 @click=\"add\">{{count}} * 2 = {{double}}</h1>\n</div>\n<script src=\"https://unpkg.com/vue@next\"><\/script>\n<script>\nlet App = {\n  data(){\n    return {\n      count:1\n    }\n  },\n  methods:{\n    add(){\n      this.count++\n    }\n  },\n  computed:{\n    double(){\n      return this.count*2\n    }\n  }\n}\nVue.createApp(App).mount('#app')\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n  在 Vue 3 中，除了上面这种这个写法，我们还可以采用下方的写法，新增一个 setup 配置\n\n\n<div id=\"app\">\n  <h1 @click=\"add\">{{state.count}} * 2 = {{double}}</h1>\n</div>\n<script src=\"https://unpkg.com/vue@next\"><\/script>\n<script>\nconst {reactive,computed} = Vue\nlet App = {\n  setup(){\n    const state = reactive({\n      count:1\n    })\n    function add(){\n      state.count++\n    }\n    const double = computed(()=>state.count*2)\n    return {state,add,double}\n  }\n}\nVue.createApp(App).mount('#app')\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n  #### 使用 Composition API 后，代码看起来很烦琐，没有 Vue 2 中 Options API 的写法简单好懂，但 Options API 的写法也有几个很严重的问题\n\n  1. 由于所有数据都挂载在 this 之上，因而 Options API 的写法对 TypeScript 的类型推导很不友好，并且这样也不好做 Tree-shaking 清理代码。\n  2. 新增功能基本都得修改 data、method 等配置，并且代码上 300 行之后，会经常上下反复横跳，开发很痛苦。\n  3. 代码不好复用，Vue 2 的组件很难抽离通用逻辑，只能使用 mixin，还会带来命名冲突的问题。\n\n  #### 我们使用 Composition API 后，虽然看起来烦琐了一些，但是带来了诸多好处：\n\n  1. 所有 API 都是 import 引入的。用到的功能都 import 进来，对 Tree-shaking 很友好，没用到功能，打包的时候会被清理掉 ，减小包的大小。\n  2. 不再上下反复横跳，我们可以把一个功能模块的 methods、data 都放在一起书写，维护更轻松。\n  3. 代码方便复用，可以把一个功能所有的 methods、data 封装在一个独立的函数里，复用代码非常容易。\n  4. Composotion API 新增的 return 等语句，在实际项目中使用 <script setup> 特性可以清除。\n\n  **Composition API 对我们开发 Vue 项目起到了巨大的帮助**。下面这个示例图很好地说明了问题：每一个功能模块的代码颜色一样，左边是 Options API，一个功能的代码零散的分布在 data，methods 等配置内，维护起来很麻烦，而右边的 Compositon API 就不一样了，每个功能模块都在一起维护。\n\n\n  ### 新组件\n\n  Vue 3 还内置了 Fragment、Teleport\n\n   和 Suspense 三个新组件\n\n  1. ragment: Vue 3 组件不再要求有一个唯一的根节点，清除了很多无用的占位 div。 \n  2. Teleport: 允许组件渲染在别的元素内，主要开发弹窗组件的时候特别有用。\n  3. [https://www.jianshu.com/p/30dd9ba787c8](https://www.jianshu.com/p/30dd9ba787c8)\n  4. Suspense: 异步组件，更方便开发有异步请求的组件。\n\n  详细可查看文档：[https://v3.cn.vuejs.org/api/built-in-components.html#teleport](https://v3.cn.vuejs.org/api/built-in-components.html#teleport)\n\n  ### 新一代工程化工具 Vite\n\n  [https://vitejs.cn/guide/](https://vitejs.cn/guide/)\n\n  ### 自定义渲染器\n\n  ### 全部模块使用 TypeScript 重构\n\n  类型系统带来了更方便的提示，并且让我们的代码能够更健壮\n\n\nlet name:string = '我是个靓仔'\nname = 1 // 报错\ninterface Person {\n    name: string;\n    age: number;\n}\nlet me:Person = {\n  name:'靓仔圣',\n  age:18\n}\n\nme.age = '整条街' // 报错\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n  **简而言之，Vue 3 带给我们的就是更快、更强且更易于扩展的开发体验，我们也可以用下面这个图来做个总结**\n\n\n文档摘自极客时间：http://gk.link/a/111Td 玩转 vue3 全家桶",normalizedContent:"# 1-vue3 新特性\n\n 1. vue3 与 2 的最大的区别有俩个 响应式系统和组合式 api\n    \n    \n    # 响应式系统\n    \n    vue 2 的响应式机制是基于 object.defineproperty () 这个 api 实现的，此外，vue 还使用了 proxy，这两者看起来都像是对数据的读写进行拦截，但是 defineproperty 是拦截具体某个属性，proxy 才是真正的 “代理”。\n    \n    怎么理解这两者的区别呢？我们首先看 defineproperty 这个 api，defineproperty 的使用，要明确地写在代码里，下面是示例代码：\n\nobject.defineproperty(obj, 'title', {\n  get() {},\n  set() {},\n})\n\n\n1\n2\n3\n4\n\n\n  当项目里“读取 obj.title”和“修改 obj.title”的时候被 defineproperty 拦截，但 defineproperty 对不存在的属性无法拦截，所以 vue 2 中所有数据必须要在 data 里声明。而且，如果 title 是一个数组的时候，对数组的操作，并不会改变 obj.title 的指向，虽然我们可以通过拦截.push 等操作实现部分功能，但是对数组的长度的修改等操作还是无法实现拦截，所以还需要额外的 $set 等 api。而 proxy 这个 api 就是真正的代理了，我们先看它的用法\n\n\nnew proxy(obj, {\n  get() { },\n  set() { },\n})\n\n\n1\n2\n3\n4\n\n\n  需要注意的是，虽然 proxy 拦截 obj 这个数据，但 obj 具体是什么属性，proxy 则不关心，统一都拦截了。而且 proxy 还可以监听更多的数据格式，比如 set、map，这是 vue 2 做不到的。当然，proxy 存在一些兼容性问题，这也是为什么 vue 3 不兼容 ie11 以下的浏览器的原因，还好现在 ie 用的人不多了。\n\n  **proxy用法详细**：[https://es6.ruanyifeng.com/#docs/proxy](https://es6.ruanyifeng.com/#docs/proxy)\n\n  ### composition api 组合语法\n\n  composition api 是 vue 3 中的一个新特性，我们也叫它组合 api。\n\n  先举个 vue 2 中的简单例子，一个累加器，并且还有一个计算属性显示累加器乘以 2 的结果。\n\n\n<div id=\"app\">\n\n  <h1 @click=\"add\">{{count}} * 2 = {{double}}</h1>\n</div>\n<script src=\"https://unpkg.com/vue@next\"><\/script>\n<script>\nlet app = {\n  data(){\n    return {\n      count:1\n    }\n  },\n  methods:{\n    add(){\n      this.count++\n    }\n  },\n  computed:{\n    double(){\n      return this.count*2\n    }\n  }\n}\nvue.createapp(app).mount('#app')\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n  在 vue 3 中，除了上面这种这个写法，我们还可以采用下方的写法，新增一个 setup 配置\n\n\n<div id=\"app\">\n  <h1 @click=\"add\">{{state.count}} * 2 = {{double}}</h1>\n</div>\n<script src=\"https://unpkg.com/vue@next\"><\/script>\n<script>\nconst {reactive,computed} = vue\nlet app = {\n  setup(){\n    const state = reactive({\n      count:1\n    })\n    function add(){\n      state.count++\n    }\n    const double = computed(()=>state.count*2)\n    return {state,add,double}\n  }\n}\nvue.createapp(app).mount('#app')\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n  #### 使用 composition api 后，代码看起来很烦琐，没有 vue 2 中 options api 的写法简单好懂，但 options api 的写法也有几个很严重的问题\n\n  1. 由于所有数据都挂载在 this 之上，因而 options api 的写法对 typescript 的类型推导很不友好，并且这样也不好做 tree-shaking 清理代码。\n  2. 新增功能基本都得修改 data、method 等配置，并且代码上 300 行之后，会经常上下反复横跳，开发很痛苦。\n  3. 代码不好复用，vue 2 的组件很难抽离通用逻辑，只能使用 mixin，还会带来命名冲突的问题。\n\n  #### 我们使用 composition api 后，虽然看起来烦琐了一些，但是带来了诸多好处：\n\n  1. 所有 api 都是 import 引入的。用到的功能都 import 进来，对 tree-shaking 很友好，没用到功能，打包的时候会被清理掉 ，减小包的大小。\n  2. 不再上下反复横跳，我们可以把一个功能模块的 methods、data 都放在一起书写，维护更轻松。\n  3. 代码方便复用，可以把一个功能所有的 methods、data 封装在一个独立的函数里，复用代码非常容易。\n  4. composotion api 新增的 return 等语句，在实际项目中使用 <script setup> 特性可以清除。\n\n  **composition api 对我们开发 vue 项目起到了巨大的帮助**。下面这个示例图很好地说明了问题：每一个功能模块的代码颜色一样，左边是 options api，一个功能的代码零散的分布在 data，methods 等配置内，维护起来很麻烦，而右边的 compositon api 就不一样了，每个功能模块都在一起维护。\n\n\n  ### 新组件\n\n  vue 3 还内置了 fragment、teleport\n\n   和 suspense 三个新组件\n\n  1. ragment: vue 3 组件不再要求有一个唯一的根节点，清除了很多无用的占位 div。 \n  2. teleport: 允许组件渲染在别的元素内，主要开发弹窗组件的时候特别有用。\n  3. [https://www.jianshu.com/p/30dd9ba787c8](https://www.jianshu.com/p/30dd9ba787c8)\n  4. suspense: 异步组件，更方便开发有异步请求的组件。\n\n  详细可查看文档：[https://v3.cn.vuejs.org/api/built-in-components.html#teleport](https://v3.cn.vuejs.org/api/built-in-components.html#teleport)\n\n  ### 新一代工程化工具 vite\n\n  [https://vitejs.cn/guide/](https://vitejs.cn/guide/)\n\n  ### 自定义渲染器\n\n  ### 全部模块使用 typescript 重构\n\n  类型系统带来了更方便的提示，并且让我们的代码能够更健壮\n\n\nlet name:string = '我是个靓仔'\nname = 1 // 报错\ninterface person {\n    name: string;\n    age: number;\n}\nlet me:person = {\n  name:'靓仔圣',\n  age:18\n}\n\nme.age = '整条街' // 报错\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n  **简而言之，vue 3 带给我们的就是更快、更强且更易于扩展的开发体验，我们也可以用下面这个图来做个总结**\n\n\n文档摘自极客时间：http://gk.link/a/111td 玩转 vue3 全家桶",charsets:{cjk:!0}},{title:"TypeScript入门",frontmatter:{title:"TypeScript入门",date:"2022-04-15T16:54:07.000Z",permalink:"/pages/fb23314/",categories:["TS"],tags:["TS"]},regularPath:"/views/02.%E6%8A%80%E6%9C%AF/02.TS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95.html",relativePath:"views/02.技术/02.TS学习记录.md",key:"v-35e8d6f5",path:"/pages/fb23314/",headers:[{level:4,title:"1 函数类型基本使用",slug:"_1-函数类型基本使用",normalizedTitle:"1 函数类型基本使用",charIndex:905},{level:4,title:"2 没有参数还回void （空）",slug:"_2-没有参数还回void-空",normalizedTitle:"2 没有参数还回 void （空）",charIndex:1087},{level:4,title:"3函数类型可选参数 ？号  注意：可选只能出现在参数列表的最后  与 默认值 互斥",slug:"_3函数类型可选参数-号-注意-可选只能出现在参数列表的最后-与-默认值-互斥",normalizedTitle:"3 函数类型可选参数 ？号  注意：可选只能出现在参数列表的最后  与 默认值 互斥",charIndex:null},{level:4,title:"4 函数重载",slug:"_4-函数重载",normalizedTitle:"4 函数重载",charIndex:1599},{level:4,title:"JS 中的对象是由属性和方法构成的，而 TS 对象的类型就是在描述对象的结构（有什么类型的属性和方法）",slug:"js-中的对象是由属性和方法构成的-而-ts-对象的类型就是在描述对象的结构-有什么类型的属性和方法",normalizedTitle:"js 中的对象是由属性和方法构成的，而 ts 对象的类型就是在描述对象的结构（有什么类型的属性和方法）",charIndex:2099},{level:4,title:"解释：",slug:"解释",normalizedTitle:"解释：",charIndex:2515},{level:4,title:"对象类型 箭头函数形式的方法类型",slug:"对象类型-箭头函数形式的方法类型",normalizedTitle:"对象类型 箭头函数形式的方法类型",charIndex:2760},{level:4,title:"对象类型 对象可选属性",slug:"对象类型-对象可选属性",normalizedTitle:"对象类型 对象可选属性",charIndex:2925},{level:4,title:"对象类型 适用类型别名",slug:"对象类型-适用类型别名",normalizedTitle:"对象类型 适用类型别名",charIndex:3186},{level:2,title:"TS关键字",slug:"ts关键字",normalizedTitle:"ts 关键字",charIndex:5840}],lastUpdated:"5/26/2022, 9:20:36 AM",lastUpdatedTimestamp:1653556836e3,headersStr:"1 函数类型基本使用 2 没有参数还回void （空） 3函数类型可选参数 ？号  注意：可选只能出现在参数列表的最后  与 默认值 互斥 4 函数重载 JS 中的对象是由属性和方法构成的，而 TS 对象的类型就是在描述对象的结构（有什么类型的属性和方法） 解释： 对象类型 箭头函数形式的方法类型 对象类型 对象可选属性 对象类型 适用类型别名 TS关键字",content:" * TypeScript 简称 TS 是拥有类型系统的 JavaScript 的超级 -JS 有的他都有 可以编译成 javaScript\n   \n   1. 添加了类型支持\n   2. ts 是静态类型 编译时检查 区别 js 是动态类型 执行时检查\n\n * 执行流程\n   \n   code.ts → tsc code.ts →code.js →浏览器 & node\n\n * 安装 & 简化运行 ts\n   \n   1. 安装： npm i -g typescript 或 yarn global add typescript 编译： tsc xxx.ts\n   2. 版本查看 tsc-v\n   3. npm i -g ts-node 使用：ts-node xxx.ts 注意：内部会隐式转换 只运行 不会编译成 js 代码\n   4. tsc --init 可生成 ts 配置文件\n\n * 数据类型\n   \n   可以将 TS 中的常用基础类型细分为两类：1 JS 已有类型 2 TS 新增类型\n   \n   1. JS 已有类型\n      * 原始类型： number/string/boolean/null/undefined\n      * 对象类型： object （包括，数组、对象、函数等对象）\n   2. TS 新增类型\n      * 联合类型、自定义类型 (类型别名)、接口、元组、字面量类型、枚举、void、any 等\n   * 注意：\n     1. _原始类型_在 TS 和 JS 中写法一致\n     2. _对象类型_在 TS 中更加细化，每个具体的对象（比如，数组、对象、函数）都有自己的类型语法\n\n * 基本类型定义\n\n// 基本数据类型定义  \nlet courseName:string = '玩转Vue 3 全家桶'\nlet price:number = 129\nprice = 11\nlet isOnline:boolean = true\nlet courseSales:undefin\n\n\n1\n2\n3\n4\n5\n6\n\n\n * 函数类型定义\n   \n   # 1 函数类型基本使用\n\n// 函数声明\nfunction add(num1:number,num2:number):number{ return num1 + num2 }\n// 箭头函数\nconst add = (num1:number, num2 :number) :number =>{ return num1 + num2 }\n\n\n1\n2\n3\n4\n\n\n# 2 没有参数还回 void （空）\n\nfunction greet(name:string):void{console.log(1)}\n// 如果什么都不写，此时，add 函数的返回值类型为： void\nconst add = () => {}\n// 这种写法是明确指定函数返回值类型为 void，与上面不指定返回值类型相同\nconst add = (): void => {}\n// 但，如果指定 返回值类型为 undefined，此时，函数体中必须显示的 return undefined 才可以\nconst add = (): undefined => {\n// 此处，返回的 undefined 是 JS 中的一个值\n  return undefined\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n# 3 函数类型可选参数 ？号 注意：可选只能出现在参数列表的最后 与 默认值 互斥\n\nfunction mySlice(start?:number,end?:number):void{\nconsole.log('起始索引：‘，start， '结束索引：', end)\n}\n\n\n1\n2\n3\n\n\n# 4 函数重载\n\n函数重载  使用场景：我们要求的参数是数字返回值也是数字，字符串其他类型同理\nfunction reverse (x:number):number\nlet reverse = (x:string) => string\n\nfunction reverse(x: number): number\nfunction reverse(x: string): string\nfunction reverse(x: number | string): number | string | void {\n    if (typeof x === 'number') {\n        return Number(x.toString().split('').reverse().join(''));\n    } else if (typeof x === 'string') {\n        return x.split('').reverse().join('');\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n * 对象类型定义\n   \n   # JS 中的对象是由属性和方法构成的，而 TS 对象的类型就是在描述对象的结构（有什么类型的属性和方法）\n\n对象类型的写法：\n// 空对象\nlet person:{}={}\n// 有属性的对象\nlet person:{name:string}={ name:'同学‘ }\n// 既有属性又有方法的对象\n// 在一行代码中指定对象的多个属性类型时，使用’；‘(分号)来分隔\nlet person:{name:string; sayHi():void} = { name:'jack',sayHi(){} }\n// 对象中如果有多个类型，可以换行写：\n// 通过换行来分隔多个属性类型，可以去掉 `;`\nlet person:{\nname:string\nsayHi():void\n} = {\nname:'jack',\nsayHi(){}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n# 解释：\n\n 1. 使用 {} 来描述对象结构\n 2. 属性采用 属性 ：类型的形式\n 3. 方法采用 方法名（）： 返回值类型 的形式\n 4. 对象类型 带有参数的方法类型\n 5. 如果方法有参数，就在方法名后面的小括号中指定参数类型\n\ntype Person = {\ngreet(name:string):void\n}\n\nlet person:Person = {\ngreet(name){\nconsole.log(name)\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n# 对象类型 箭头函数形式的方法类型\n\n方法的类型也可以使用箭头函数形式\ntype Person = { \ngreet:(name:string) =>void}\n\nlet person: Person = {\ngreet(name){\nconsole.log(name)\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n# 对象类型 对象可选属性\n\n- 对象的属性或方法，也可以是可选的，此时就用到可选属性了\n- 比如，我们在使用 axios({ ... }) 时，如果发送 GET 请求，method 属性就可以省略\n- 可选属性的语法与函数可选参数的语法一致，都使用 ? 来表示\ntype Config = {\nurl:string\nmethod?:string\n}\n\nfunction myAxios (config:Congig){\nconsole.log(config)\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n# 对象类型 适用类型别名\n\n// 创建类型别名\ntype Person = {\n name:string\nsayHi():void\n}\n\n// 使用类型别名作为对象的类型：\nlet person:Person = {\nname:'jack',\nsayHi(){}\n }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n * 元组 Tuple\n   \n   解释：\n   \n   1. 元组类型可以确切地标记出有多少个元素，以及每个元素的类型\n\n// 元组 使用场景：已知将要存入的数据的类型及顺序\nlet me:[string,number]=['哈哈',22] \nme = ['小欢',22]\n\n\n1\n2\n3\n\n * 字面量类型\n   * 使用模式：字面量类型配合联合类型一起使用\n   * 使用场景：用来表示一组明确的可选值列表\n   * 比如，在贪吃蛇游戏中，游戏的方向的可选值只能是上、下、左、右中的任意一个\n\n// 使用自定义类型:\ntype Direction = 'up' | 'down' | 'left' | 'right'\n\nfunction changeDirection(direction: Direction) {\n  console.log(direction)\n}\n\n// 调用函数时，会有类型提示：\nchangeDirection('up')\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n  - 解释：参数 direction 的值只能是 up/down/left/right 中的任意一个\n  - 优势：相比于 string 类型，使用字面量类型更加精确、严谨\n\n\n * 枚举类型\n   * 枚举的功能类似于字面量类型 + 联合类型组合的功能，也可以表示一组明确的可选值\n   * 枚举：定义一组命名常量。它描述一个值，该值可以是这些命名常量中的一个\n\n// 创建枚举\nenum Direction { Up, Down, Left, Right }\n\n// 使用枚举类型\nfunction changeDirection(direction: Direction) {\n  console.log(direction)\n}\n\n// 调用函数时，需要应该传入：枚举 Direction 成员的任意一个\n// 类似于 JS 中的对象，直接通过 点（.）语法 访问枚举的成员\nchangeDirection(Direction.Up)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n解释:\n\n 1. 使用 enum 关键字定义枚举\n 2. 约定枚举名称以大写字母开头\n 3. 枚举中的多个值之间通过 , （逗号）分隔\n 4. 定义好枚举后，直接使用枚举名称作为类型注解\n\n * 类型断言\n   \n   * 解释:\n     \n     1. 使用 as 关键字实现类型断言\n     2. 关键字 as 后面的类型是一个更加具体的类型（HTMLAnchorElement 是 HTMLElement 的子类型）\n     3. 通过类型断言，aLink 的类型变得更加具体，这样就可以访问 a 标签特有的属性或方法了\n     \n     详细可查阅：http://ts.xcatliu.com/basics/type-assertion.html\n\n * 类型别名\n   \n   使用 type 关键字来创建自定义类型\n   \n   1. 类型别名（比如，此处的 CustomArray）可以是任意合法的变量名称\n   2. 推荐使用大写字母开头\n   3. 创建类型别名后，直接使用该类型别名作为变量的类型注解即可\n\ntype courseScore = '好' | '非常好' |'一般好'\nlet score:courseScore = '好'\n\n\n1\n2\n\n * 类型接口\n\n// 类型接口 TS独有 关键字 Interface 使用场景：别名类似\n\ninterface 极客时间课程 {\n    课程名字:string,\n    价格:number[],\n    受众:string,\n    讲师头像?:string|boolean,\n    获取口令?:string\n}\n\nlet vueCourse: 极客时间课程 = {\n    课程名字:'玩转Vue 3全家桶',\n    价格:[59,129],\n    受众: '前端小老弟',\n    讲师头像:false,\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n// 泛型\ninterface VueCourse5{\n    name:string\n    price:number\n}\ntype CourseProps = keyof VueCourse5\nlet k:CourseProps = 'name'\nlet k1:CourseProps = 'price'\n// keyof 可以拆解类型 extends 可以进行类型判断 三元 T extends U ? X : Y 类型三元\n// T extends U ? X : Y 类型三元表达式\ntype ExtendsType<T> = T extends boolean ? \"重学前端\" : \"玩转Vue 3\"\ntype ExtendsType1 = ExtendsType<boolean> \ntype ExtendsType2 = ExtendsType<string> \n// extends 相当于 TypeScript 世界中的条件语句，\n// 然后 in 关键字可以理解为 TypeScript 世界中的遍历。下面的代码中我们通过 k in Courses 语法，相当于遍历了 Courses 所有的类型作为 CourseObj 的属性，值的类型是 number。\n\ntype Courses = '玩转Vue 3'|'重学前端'\ntype CourseObj = {\n    [k in Courses]:number // 遍历Courses类型作为key\n}\n// infer 关键字 作用：给变量设置类型变量\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n * 类写法\n\n\n\n\n1\n\n * TS 关键字及作用\n   * keyof keyof 与 Object.keys 相似 不过 keyof 是用来获取对象类型的键的\n\ninterface Person {\n  age: number;\n  name: string;\n}\n\ntype Player = {\n  age: number;\n  name: string;\n};\n\ntype PersonKeys = keyof Person; //  --\x3e \"age\" | \"name\"\ntype PlayerKey = keyof Player; //  --\x3e \"age\" | \"name\"\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n * typeof typeof 用来返回一个值的 type\n * extends extends 用来继承 只有 interface 和 class 才可以继承 type 关键字声明的类型别名无法继承\n * in in 关键字可以生成映射类型 类似循环\n\nenum Letter {\n  A = 'a',\n  B = 'b',\n  C = 'c',\n}\n\ntype LetterMap = {\n  [key in Letter]: string;\n};\n\n// 等价于\ntype _LetterMap = {\n  a: string;\n  b: string;\n  c: string;\n};\n\ntype Keys = 'name' | 'sex';\n\ntype PersonMap = {\n  [key in Keys]: string;\n};\n\n// 等价于\ntype _PersonMap = {\n  name: string;\n  sex: string;\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n  - is  is 用作类型保护\n  - infer  infer 可以帮助我们推断出函数的返回值\n\n\n\n# TS 关键字\n\nTS关键字 \n  ！ 断言操作符   忽略null与undefined\n  ?. 链判断运算符 可选\n  ?? 空值合并运算符 当左侧操作数为 null 或 undefined 时，其返回右侧的操作数，否则返回左侧的操作数。\n  ?: 可选属性 \n  &  交叉类型 可将多个类型合并为一个类似继承又不完全是\n  |  分隔符 联合类型 联合类型使用 | 分隔每个类型。联合类型通常与 null 或 undefined 一起使用\n  is 自定义类型保护的类型谓词 type predicate\n  type 类型别名定义\n  interface  类型接口定义\n  typeof 可获取一个变量的声明类型\n  keyof 获取类型的所有key-键 \n  in 类似循环 可遍历枚举类型\nTS中的一些内置类型\n  Partial<T>将类型属性变成可选\n  Required<T>将类型属性变成必选\n  Pick<T>从某个类型中挑出一些属性来\n  Mutable<T>将类型的属性变成可修改\n  Readonly<T>类型的属性变成只读\n  ReturnType 用来得到一个函数的返回值类型\n  Record  可以获得根据 K 中所有可能值来设置 key 以及 value 的类型\n 类型断言：俩种语法 <>尖括号 | as语法\n  let someValue: any = \"this is a string\";\n  let strLength: number = (<string>someValue).length;\n  let someValue: any = \"this is a string\";\n  let strLength: number = (someValue as string).length;\n  \n 常见的泛型变量代表的意思\n   T type 类型\n   K key 表示对象中键类型\n   V value 表示对象中值类型\n   E element 表示元素类型\n   P props 表示属性\n   U 多个类型\n  function identity <T, U>(value: T, message: U) : T {\n  console.log(message);\n  return value;\n}\n\nconsole.log(identity<Number, string>(68, \"Semlinker\"));\n\n 解析分割\n    Number()\n    parseInt()\n    parseFloat()\n    \n @xxx 装饰器\n 装饰器语法\n @Plugin({\n  pluginName: 'Device',\n  plugin: 'cordova-plugin-device',\n  pluginRef: 'device',\n  repo: 'https://github.com/apache/cordova-plugin-device',\n  platforms: ['Android', 'Browser', 'iOS', 'macOS', 'Windows'],\n})\n@Injectable()\nexport class Device extends IonicNativePlugin {}\n装饰器分类\n  TS装饰器分为类装饰器、属性装饰器、方法装饰器和参数装饰器四大类\n \n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n\n\n练习：https://www.typescriptlang.org/play?#code/FAehAJC+9Q66MA3lHnrQMhGGO5QgB6F+E9gnU0AByhZBKA\n\n类型体操：https://github.com/type-challenges/type-challenges/blob/master/README.zh-CN.md\n\n文档查阅：http://ts.xcatliu.com/",normalizedContent:" * typescript 简称 ts 是拥有类型系统的 javascript 的超级 -js 有的他都有 可以编译成 javascript\n   \n   1. 添加了类型支持\n   2. ts 是静态类型 编译时检查 区别 js 是动态类型 执行时检查\n\n * 执行流程\n   \n   code.ts → tsc code.ts →code.js →浏览器 & node\n\n * 安装 & 简化运行 ts\n   \n   1. 安装： npm i -g typescript 或 yarn global add typescript 编译： tsc xxx.ts\n   2. 版本查看 tsc-v\n   3. npm i -g ts-node 使用：ts-node xxx.ts 注意：内部会隐式转换 只运行 不会编译成 js 代码\n   4. tsc --init 可生成 ts 配置文件\n\n * 数据类型\n   \n   可以将 ts 中的常用基础类型细分为两类：1 js 已有类型 2 ts 新增类型\n   \n   1. js 已有类型\n      * 原始类型： number/string/boolean/null/undefined\n      * 对象类型： object （包括，数组、对象、函数等对象）\n   2. ts 新增类型\n      * 联合类型、自定义类型 (类型别名)、接口、元组、字面量类型、枚举、void、any 等\n   * 注意：\n     1. _原始类型_在 ts 和 js 中写法一致\n     2. _对象类型_在 ts 中更加细化，每个具体的对象（比如，数组、对象、函数）都有自己的类型语法\n\n * 基本类型定义\n\n// 基本数据类型定义  \nlet coursename:string = '玩转vue 3 全家桶'\nlet price:number = 129\nprice = 11\nlet isonline:boolean = true\nlet coursesales:undefin\n\n\n1\n2\n3\n4\n5\n6\n\n\n * 函数类型定义\n   \n   # 1 函数类型基本使用\n\n// 函数声明\nfunction add(num1:number,num2:number):number{ return num1 + num2 }\n// 箭头函数\nconst add = (num1:number, num2 :number) :number =>{ return num1 + num2 }\n\n\n1\n2\n3\n4\n\n\n# 2 没有参数还回 void （空）\n\nfunction greet(name:string):void{console.log(1)}\n// 如果什么都不写，此时，add 函数的返回值类型为： void\nconst add = () => {}\n// 这种写法是明确指定函数返回值类型为 void，与上面不指定返回值类型相同\nconst add = (): void => {}\n// 但，如果指定 返回值类型为 undefined，此时，函数体中必须显示的 return undefined 才可以\nconst add = (): undefined => {\n// 此处，返回的 undefined 是 js 中的一个值\n  return undefined\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n# 3 函数类型可选参数 ？号 注意：可选只能出现在参数列表的最后 与 默认值 互斥\n\nfunction myslice(start?:number,end?:number):void{\nconsole.log('起始索引：‘，start， '结束索引：', end)\n}\n\n\n1\n2\n3\n\n\n# 4 函数重载\n\n函数重载  使用场景：我们要求的参数是数字返回值也是数字，字符串其他类型同理\nfunction reverse (x:number):number\nlet reverse = (x:string) => string\n\nfunction reverse(x: number): number\nfunction reverse(x: string): string\nfunction reverse(x: number | string): number | string | void {\n    if (typeof x === 'number') {\n        return number(x.tostring().split('').reverse().join(''));\n    } else if (typeof x === 'string') {\n        return x.split('').reverse().join('');\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n * 对象类型定义\n   \n   # js 中的对象是由属性和方法构成的，而 ts 对象的类型就是在描述对象的结构（有什么类型的属性和方法）\n\n对象类型的写法：\n// 空对象\nlet person:{}={}\n// 有属性的对象\nlet person:{name:string}={ name:'同学‘ }\n// 既有属性又有方法的对象\n// 在一行代码中指定对象的多个属性类型时，使用’；‘(分号)来分隔\nlet person:{name:string; sayhi():void} = { name:'jack',sayhi(){} }\n// 对象中如果有多个类型，可以换行写：\n// 通过换行来分隔多个属性类型，可以去掉 `;`\nlet person:{\nname:string\nsayhi():void\n} = {\nname:'jack',\nsayhi(){}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n# 解释：\n\n 1. 使用 {} 来描述对象结构\n 2. 属性采用 属性 ：类型的形式\n 3. 方法采用 方法名（）： 返回值类型 的形式\n 4. 对象类型 带有参数的方法类型\n 5. 如果方法有参数，就在方法名后面的小括号中指定参数类型\n\ntype person = {\ngreet(name:string):void\n}\n\nlet person:person = {\ngreet(name){\nconsole.log(name)\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n# 对象类型 箭头函数形式的方法类型\n\n方法的类型也可以使用箭头函数形式\ntype person = { \ngreet:(name:string) =>void}\n\nlet person: person = {\ngreet(name){\nconsole.log(name)\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n# 对象类型 对象可选属性\n\n- 对象的属性或方法，也可以是可选的，此时就用到可选属性了\n- 比如，我们在使用 axios({ ... }) 时，如果发送 get 请求，method 属性就可以省略\n- 可选属性的语法与函数可选参数的语法一致，都使用 ? 来表示\ntype config = {\nurl:string\nmethod?:string\n}\n\nfunction myaxios (config:congig){\nconsole.log(config)\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n# 对象类型 适用类型别名\n\n// 创建类型别名\ntype person = {\n name:string\nsayhi():void\n}\n\n// 使用类型别名作为对象的类型：\nlet person:person = {\nname:'jack',\nsayhi(){}\n }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n * 元组 tuple\n   \n   解释：\n   \n   1. 元组类型可以确切地标记出有多少个元素，以及每个元素的类型\n\n// 元组 使用场景：已知将要存入的数据的类型及顺序\nlet me:[string,number]=['哈哈',22] \nme = ['小欢',22]\n\n\n1\n2\n3\n\n * 字面量类型\n   * 使用模式：字面量类型配合联合类型一起使用\n   * 使用场景：用来表示一组明确的可选值列表\n   * 比如，在贪吃蛇游戏中，游戏的方向的可选值只能是上、下、左、右中的任意一个\n\n// 使用自定义类型:\ntype direction = 'up' | 'down' | 'left' | 'right'\n\nfunction changedirection(direction: direction) {\n  console.log(direction)\n}\n\n// 调用函数时，会有类型提示：\nchangedirection('up')\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n  - 解释：参数 direction 的值只能是 up/down/left/right 中的任意一个\n  - 优势：相比于 string 类型，使用字面量类型更加精确、严谨\n\n\n * 枚举类型\n   * 枚举的功能类似于字面量类型 + 联合类型组合的功能，也可以表示一组明确的可选值\n   * 枚举：定义一组命名常量。它描述一个值，该值可以是这些命名常量中的一个\n\n// 创建枚举\nenum direction { up, down, left, right }\n\n// 使用枚举类型\nfunction changedirection(direction: direction) {\n  console.log(direction)\n}\n\n// 调用函数时，需要应该传入：枚举 direction 成员的任意一个\n// 类似于 js 中的对象，直接通过 点（.）语法 访问枚举的成员\nchangedirection(direction.up)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n解释:\n\n 1. 使用 enum 关键字定义枚举\n 2. 约定枚举名称以大写字母开头\n 3. 枚举中的多个值之间通过 , （逗号）分隔\n 4. 定义好枚举后，直接使用枚举名称作为类型注解\n\n * 类型断言\n   \n   * 解释:\n     \n     1. 使用 as 关键字实现类型断言\n     2. 关键字 as 后面的类型是一个更加具体的类型（htmlanchorelement 是 htmlelement 的子类型）\n     3. 通过类型断言，alink 的类型变得更加具体，这样就可以访问 a 标签特有的属性或方法了\n     \n     详细可查阅：http://ts.xcatliu.com/basics/type-assertion.html\n\n * 类型别名\n   \n   使用 type 关键字来创建自定义类型\n   \n   1. 类型别名（比如，此处的 customarray）可以是任意合法的变量名称\n   2. 推荐使用大写字母开头\n   3. 创建类型别名后，直接使用该类型别名作为变量的类型注解即可\n\ntype coursescore = '好' | '非常好' |'一般好'\nlet score:coursescore = '好'\n\n\n1\n2\n\n * 类型接口\n\n// 类型接口 ts独有 关键字 interface 使用场景：别名类似\n\ninterface 极客时间课程 {\n    课程名字:string,\n    价格:number[],\n    受众:string,\n    讲师头像?:string|boolean,\n    获取口令?:string\n}\n\nlet vuecourse: 极客时间课程 = {\n    课程名字:'玩转vue 3全家桶',\n    价格:[59,129],\n    受众: '前端小老弟',\n    讲师头像:false,\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n// 泛型\ninterface vuecourse5{\n    name:string\n    price:number\n}\ntype courseprops = keyof vuecourse5\nlet k:courseprops = 'name'\nlet k1:courseprops = 'price'\n// keyof 可以拆解类型 extends 可以进行类型判断 三元 t extends u ? x : y 类型三元\n// t extends u ? x : y 类型三元表达式\ntype extendstype<t> = t extends boolean ? \"重学前端\" : \"玩转vue 3\"\ntype extendstype1 = extendstype<boolean> \ntype extendstype2 = extendstype<string> \n// extends 相当于 typescript 世界中的条件语句，\n// 然后 in 关键字可以理解为 typescript 世界中的遍历。下面的代码中我们通过 k in courses 语法，相当于遍历了 courses 所有的类型作为 courseobj 的属性，值的类型是 number。\n\ntype courses = '玩转vue 3'|'重学前端'\ntype courseobj = {\n    [k in courses]:number // 遍历courses类型作为key\n}\n// infer 关键字 作用：给变量设置类型变量\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n * 类写法\n\n\n\n\n1\n\n * ts 关键字及作用\n   * keyof keyof 与 object.keys 相似 不过 keyof 是用来获取对象类型的键的\n\ninterface person {\n  age: number;\n  name: string;\n}\n\ntype player = {\n  age: number;\n  name: string;\n};\n\ntype personkeys = keyof person; //  --\x3e \"age\" | \"name\"\ntype playerkey = keyof player; //  --\x3e \"age\" | \"name\"\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n * typeof typeof 用来返回一个值的 type\n * extends extends 用来继承 只有 interface 和 class 才可以继承 type 关键字声明的类型别名无法继承\n * in in 关键字可以生成映射类型 类似循环\n\nenum letter {\n  a = 'a',\n  b = 'b',\n  c = 'c',\n}\n\ntype lettermap = {\n  [key in letter]: string;\n};\n\n// 等价于\ntype _lettermap = {\n  a: string;\n  b: string;\n  c: string;\n};\n\ntype keys = 'name' | 'sex';\n\ntype personmap = {\n  [key in keys]: string;\n};\n\n// 等价于\ntype _personmap = {\n  name: string;\n  sex: string;\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n  - is  is 用作类型保护\n  - infer  infer 可以帮助我们推断出函数的返回值\n\n\n\n# ts 关键字\n\nts关键字 \n  ！ 断言操作符   忽略null与undefined\n  ?. 链判断运算符 可选\n  ?? 空值合并运算符 当左侧操作数为 null 或 undefined 时，其返回右侧的操作数，否则返回左侧的操作数。\n  ?: 可选属性 \n  &  交叉类型 可将多个类型合并为一个类似继承又不完全是\n  |  分隔符 联合类型 联合类型使用 | 分隔每个类型。联合类型通常与 null 或 undefined 一起使用\n  is 自定义类型保护的类型谓词 type predicate\n  type 类型别名定义\n  interface  类型接口定义\n  typeof 可获取一个变量的声明类型\n  keyof 获取类型的所有key-键 \n  in 类似循环 可遍历枚举类型\nts中的一些内置类型\n  partial<t>将类型属性变成可选\n  required<t>将类型属性变成必选\n  pick<t>从某个类型中挑出一些属性来\n  mutable<t>将类型的属性变成可修改\n  readonly<t>类型的属性变成只读\n  returntype 用来得到一个函数的返回值类型\n  record  可以获得根据 k 中所有可能值来设置 key 以及 value 的类型\n 类型断言：俩种语法 <>尖括号 | as语法\n  let somevalue: any = \"this is a string\";\n  let strlength: number = (<string>somevalue).length;\n  let somevalue: any = \"this is a string\";\n  let strlength: number = (somevalue as string).length;\n  \n 常见的泛型变量代表的意思\n   t type 类型\n   k key 表示对象中键类型\n   v value 表示对象中值类型\n   e element 表示元素类型\n   p props 表示属性\n   u 多个类型\n  function identity <t, u>(value: t, message: u) : t {\n  console.log(message);\n  return value;\n}\n\nconsole.log(identity<number, string>(68, \"semlinker\"));\n\n 解析分割\n    number()\n    parseint()\n    parsefloat()\n    \n @xxx 装饰器\n 装饰器语法\n @plugin({\n  pluginname: 'device',\n  plugin: 'cordova-plugin-device',\n  pluginref: 'device',\n  repo: 'https://github.com/apache/cordova-plugin-device',\n  platforms: ['android', 'browser', 'ios', 'macos', 'windows'],\n})\n@injectable()\nexport class device extends ionicnativeplugin {}\n装饰器分类\n  ts装饰器分为类装饰器、属性装饰器、方法装饰器和参数装饰器四大类\n \n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n\n\n练习：https://www.typescriptlang.org/play?#code/faehajc+9q66ma3lhnrqmhggo5qgb6f+e9gnu0abyhzbka\n\n类型体操：https://github.com/type-challenges/type-challenges/blob/master/readme.zh-cn.md\n\n文档查阅：http://ts.xcatliu.com/",charsets:{cjk:!0}},{title:"在浏览器输入url后都发生了什么",frontmatter:{title:"在浏览器输入url后都发生了什么",date:"2022-05-10T23:18:53.000Z",permalink:"/pages/aa976e/",categories:["url"],tags:["url"]},regularPath:"/views/02.%E6%8A%80%E6%9C%AF/03.%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5url%E5%90%8E%E9%83%BD%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88.html",relativePath:"views/02.技术/03.在浏览器输入url后都发生了什么.md",key:"v-15200237",path:"/pages/aa976e/",lastUpdated:"5/25/2022, 6:17:07 AM",lastUpdatedTimestamp:1653459427e3,headersStr:null,content:"图片取自",normalizedContent:"图片取自",charsets:{cjk:!0}},{title:"如何保证setTimeout准确性",frontmatter:{tags:["setTimeout"],title:"如何保证setTimeout准确性",date:"2022-05-10T23:36:07.000Z",permalink:"/pages/599f44/",categories:["views","技术"]},regularPath:"/views/02.%E6%8A%80%E6%9C%AF/04.%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81setTimeout%E5%87%86%E7%A1%AE%E6%80%A7.html",relativePath:"views/02.技术/04.如何保证setTimeout准确性.md",key:"v-a8d784d4",path:"/pages/599f44/",headers:[{level:2,title:"系统时间修复法",slug:"系统时间修复法",normalizedTitle:"系统时间修复法",charIndex:2}],lastUpdated:"5/25/2022, 6:17:07 AM",lastUpdatedTimestamp:1653459427e3,headersStr:"系统时间修复法",content:"# 系统时间修复法\n\nfunction timer() {\n   var speed = 500,\n   counter = 1, \n   start = new Date().getTime();\n   \n   function instance()\n   {\n    var ideal = (counter * speed),\n    real = (new Date().getTime() - start);\n    \n    counter++;\n \n    var diff = (real - ideal);\n    form.diff.value = diff;\n \n    window.setTimeout(function() { instance(); }, (speed - diff)); // 通过系统时间进行修复\n \n   };\n   \n   window.setTimeout(function() { instance(); }, speed);\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n更多 https://blog.csdn.net/lgno2/article/details/116574487",normalizedContent:"# 系统时间修复法\n\nfunction timer() {\n   var speed = 500,\n   counter = 1, \n   start = new date().gettime();\n   \n   function instance()\n   {\n    var ideal = (counter * speed),\n    real = (new date().gettime() - start);\n    \n    counter++;\n \n    var diff = (real - ideal);\n    form.diff.value = diff;\n \n    window.settimeout(function() { instance(); }, (speed - diff)); // 通过系统时间进行修复\n \n   };\n   \n   window.settimeout(function() { instance(); }, speed);\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n更多 https://blog.csdn.net/lgno2/article/details/116574487",charsets:{cjk:!0}},{title:"Jenkins+nginx",frontmatter:{tags:["Jenkins","Nginx"],title:"Jenkins+nginx",date:"2022-05-17T21:49:27.000Z",permalink:"/pages/9d8967/",categories:["views","技术"]},regularPath:"/views/02.%E6%8A%80%E6%9C%AF/05.Jenkins+nginx.html",relativePath:"views/02.技术/05.Jenkins+nginx.md",key:"v-8d5acd68",path:"/pages/9d8967/",headers:[{level:2,title:"1-安装JAVA环境",slug:"_1-安装java环境",normalizedTitle:"1 - 安装 java 环境",charIndex:41},{level:2,title:"2-安装Jenkins",slug:"_2-安装jenkins",normalizedTitle:"2 - 安装 jenkins",charIndex:227},{level:2,title:"3-安装nginx",slug:"_3-安装nginx",normalizedTitle:"3 - 安装 nginx",charIndex:2304},{level:2,title:"4-配置 nginx",slug:"_4-配置-nginx",normalizedTitle:"4 - 配置 nginx",charIndex:2594}],lastUpdated:"5/25/2022, 6:17:07 AM",lastUpdatedTimestamp:1653459427e3,headersStr:"1-安装JAVA环境 2-安装Jenkins 3-安装nginx 4-配置 nginx",content:"# 前端自动化部署之 Linux 下部署 Jenkins 及 nginx\n\n\n# 1 - 安装 JAVA 环境\n\nUbuntu：\nsudo apt-get install openjdk-8-jdk\n查看安装是否成功\njava -version 有版本信息则为成功否则失败\nCentos：\ndnf search java-1.8\ndnf install java-1.8.0-openjdk.x86_64\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 2 - 安装 Jenkins\n\nUbuntu：\nsudo apt-get install jenkins\n如果没有就更新安装包在进行安装\nwget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -\nsudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'\nsudo apt-get update\nsudo apt-get install jenkins\n以上是四条命令，确保每条都执行成功了\nCentos：\nwget –O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo\n\n# 导入GPG密钥以确保您的软件合法\nrpm --import https://pkg.jenkins.io/redhat/jenkins.io.key\n# 或者\nrpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key\n编辑一下文件/etc/yum.repos.d/jenkins.repo\n\n- 可以通过vim编辑\n[jenkins]\n\nname=Jenkins-stable\n\nbaseurl=http://pkg.jenkins.io/redhat\n\ngpgcheck=1\n安装Jenkins\ndnf install jenkins # --nogpgcheck(可以不加)\n启动Jenkins的服务：\nsystemctl start jenkins\nsystemctl status jenkins\nsystemctl enable jenkins\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n### 注意：Jenkins 默认使用 8080 端口提供服务：防火墙打开 8080\n\n手动部署 Jenkins\n1-创建部署目录\ncd /home/openailab/\nmkdir jenkins\n2-下载Jenkins\ncd jenkins\nwget https://mirrors.tuna.tsinghua.edu.cn/jenkins/war/latest/jenkins.war\n3-日志存放目录\nmkdir logs\n4-启动脚本设置\nvim run_jenkins.sh\n写入内容：\n#!/bin/bash\nexport JENKINS_HOME=/home/openailab/jenkins\ncd $JENKINS_HOME\nnohup java -Dhudson.model.DownloadService.noSignatureCheck=true -Xmx2g -jar jenkins.war --httpPort=8080 > logs/jenkins.log 2>&1 &\ntail -f logs/jenkins.log\n5-创建配置文件\nvim hudson.model.UpdateCenter.xml\n写入内容：\n<?xml version='1.1' encoding='UTF-8'?>\n<sites>\n  <site>\n    <id>default</id>\n    <url>https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</url>\n  </site>\n</sites>\n注意：\n1-URl内为镜像源，插件系统连不上可以更换源试试，具体百度\n2-换源前结束进程 ps -aux | grep jenkins | grep -v grep   ,  pkill -9 jenkins 或 kill -9 进程号\n6-运行Jenkins\nsudo chmod 777 run_jenkins.sh\nsh run_jenkins.sh\n\n完成上述六步恭喜你就可以开始访问了\n直接输入你的主机名或域名后面加上后缀:8080\n7- 解锁 Jenkins\ncat /home/openailab/jenkins/secrets/initialAdminPassword\n把这里面的东西粘上去就行\n8- 按提示创建账户就行了\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n\n\n\n# 3 - 安装 nginx\n\nubuntu\n安装 sudo apt-get install nginx \n  使用：启动 service nginx start\n    查看状态 service nginx status\n    重启 service nginx restart\nCentos\n安装 dnf install nginx\n  使用：启动 systemctl start nginx\n   查看状态 systemctl status nginx\n    重启 systemctl enable nginx\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 4 - 配置 nginx\n\ncd /etc/nginx/nginx.config\nuser 哪项改成 urer root；\n\n\n\n1\n2\n3\n\n\n通过Linux命令创建文件夹和文件：\nmkdir /root/mall_cms\ncd /root/mall_cms\ntouch index.html\n\nvi index.html\n配置访问目录：\nservice {\n    location / {\n    # First attempt to serve request as file, then\n    # as directory, then fall back to displaying a 404.\n    root /root/mall_cms/dist;\n    index index.html;\n    try_files $uri $uri/ /index.html;  # 错误重定向\n  }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n",normalizedContent:"# 前端自动化部署之 linux 下部署 jenkins 及 nginx\n\n\n# 1 - 安装 java 环境\n\nubuntu：\nsudo apt-get install openjdk-8-jdk\n查看安装是否成功\njava -version 有版本信息则为成功否则失败\ncentos：\ndnf search java-1.8\ndnf install java-1.8.0-openjdk.x86_64\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 2 - 安装 jenkins\n\nubuntu：\nsudo apt-get install jenkins\n如果没有就更新安装包在进行安装\nwget -q -o - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -\nsudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'\nsudo apt-get update\nsudo apt-get install jenkins\n以上是四条命令，确保每条都执行成功了\ncentos：\nwget –o /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo\n\n# 导入gpg密钥以确保您的软件合法\nrpm --import https://pkg.jenkins.io/redhat/jenkins.io.key\n# 或者\nrpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key\n编辑一下文件/etc/yum.repos.d/jenkins.repo\n\n- 可以通过vim编辑\n[jenkins]\n\nname=jenkins-stable\n\nbaseurl=http://pkg.jenkins.io/redhat\n\ngpgcheck=1\n安装jenkins\ndnf install jenkins # --nogpgcheck(可以不加)\n启动jenkins的服务：\nsystemctl start jenkins\nsystemctl status jenkins\nsystemctl enable jenkins\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n### 注意：jenkins 默认使用 8080 端口提供服务：防火墙打开 8080\n\n手动部署 jenkins\n1-创建部署目录\ncd /home/openailab/\nmkdir jenkins\n2-下载jenkins\ncd jenkins\nwget https://mirrors.tuna.tsinghua.edu.cn/jenkins/war/latest/jenkins.war\n3-日志存放目录\nmkdir logs\n4-启动脚本设置\nvim run_jenkins.sh\n写入内容：\n#!/bin/bash\nexport jenkins_home=/home/openailab/jenkins\ncd $jenkins_home\nnohup java -dhudson.model.downloadservice.nosignaturecheck=true -xmx2g -jar jenkins.war --httpport=8080 > logs/jenkins.log 2>&1 &\ntail -f logs/jenkins.log\n5-创建配置文件\nvim hudson.model.updatecenter.xml\n写入内容：\n<?xml version='1.1' encoding='utf-8'?>\n<sites>\n  <site>\n    <id>default</id>\n    <url>https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</url>\n  </site>\n</sites>\n注意：\n1-url内为镜像源，插件系统连不上可以更换源试试，具体百度\n2-换源前结束进程 ps -aux | grep jenkins | grep -v grep   ,  pkill -9 jenkins 或 kill -9 进程号\n6-运行jenkins\nsudo chmod 777 run_jenkins.sh\nsh run_jenkins.sh\n\n完成上述六步恭喜你就可以开始访问了\n直接输入你的主机名或域名后面加上后缀:8080\n7- 解锁 jenkins\ncat /home/openailab/jenkins/secrets/initialadminpassword\n把这里面的东西粘上去就行\n8- 按提示创建账户就行了\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n\n\n\n# 3 - 安装 nginx\n\nubuntu\n安装 sudo apt-get install nginx \n  使用：启动 service nginx start\n    查看状态 service nginx status\n    重启 service nginx restart\ncentos\n安装 dnf install nginx\n  使用：启动 systemctl start nginx\n   查看状态 systemctl status nginx\n    重启 systemctl enable nginx\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 4 - 配置 nginx\n\ncd /etc/nginx/nginx.config\nuser 哪项改成 urer root；\n\n\n\n1\n2\n3\n\n\n通过linux命令创建文件夹和文件：\nmkdir /root/mall_cms\ncd /root/mall_cms\ntouch index.html\n\nvi index.html\n配置访问目录：\nservice {\n    location / {\n    # first attempt to serve request as file, then\n    # as directory, then fall back to displaying a 404.\n    root /root/mall_cms/dist;\n    index index.html;\n    try_files $uri $uri/ /index.html;  # 错误重定向\n  }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n",charsets:{cjk:!0}},{title:"浏览器缓存机制",frontmatter:{title:"浏览器缓存机制",date:"2022-05-24T21:16:07.000Z",permalink:"/pages/7dcd08/",categories:["views","技术"],tags:["浏览器缓存机制"]},regularPath:"/views/02.%E6%8A%80%E6%9C%AF/06.%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6.html",relativePath:"views/02.技术/06.浏览器缓存机制.md",key:"v-1fb6a18a",path:"/pages/7dcd08/",headers:[{level:2,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:16},{level:2,title:"概念",slug:"概念",normalizedTitle:"概念",charIndex:150},{level:2,title:"分析",slug:"分析",normalizedTitle:"分析",charIndex:142},{level:3,title:"Cache-Control",slug:"cache-control",normalizedTitle:"cache-control",charIndex:370},{level:3,title:"Pragma",slug:"pragma",normalizedTitle:"pragma",charIndex:385},{level:3,title:"Expires",slug:"expires",normalizedTitle:"expires",charIndex:393},{level:2,title:"强缓存命中条件",slug:"强缓存命中条件",normalizedTitle:"强缓存命中条件",charIndex:852},{level:2,title:"服务器端校验资源是否修改机制",slug:"服务器端校验资源是否修改机制",normalizedTitle:"服务器端校验资源是否修改机制",charIndex:1181},{level:3,title:"Last-Modified/If-Modified-Since",slug:"last-modified-if-modified-since",normalizedTitle:"last-modified/if-modified-since",charIndex:1200},{level:3,title:"ETag/If-None-Match",slug:"etag-if-none-match",normalizedTitle:"etag/if-none-match",charIndex:1408},{level:2,title:"浏览器缓存的使用",slug:"浏览器缓存的使用",normalizedTitle:"浏览器缓存的使用",charIndex:1815}],lastUpdated:"5/25/2022, 6:17:07 AM",lastUpdatedTimestamp:1653459427e3,headersStr:"介绍 概念 分析 Cache-Control Pragma Expires 强缓存命中条件 服务器端校验资源是否修改机制 Last-Modified/If-Modified-Since ETag/If-None-Match 浏览器缓存的使用",content:"# 理解浏览器缓存机制\n\n\n# 介绍\n\n浏览器缓存可以提高网页打开速度、减少 Http 请求，在提高用户体验、重复利用资源、减少网络带宽上发挥着重要的作用。特别是现在用户对网站响应速度要求特别高的情况下，高效地利用浏览器缓存机制可以使网站性能优化事半功倍。\n下面对浏览器缓存机制做一些分析。\n\n\n# 概念\n\nHTTP 缓存可以分为强缓存和协商缓存:\n\n强缓存：强缓存命中不会发送请求到服务器端，直接从本地缓存中获取资源，状态码 200 (from cache)\n协商缓存：协商缓存会发送请求到服务器，服务器通过请求头部字段来验证资源是否命中协商缓存，如果命中，则返回状态码 304 (not modified)，通知浏览器从缓存中获取资源。\n示意图\n\n\n\n# 分析\n\n根据响应头部的字段确定浏览器缓存策略\n响应头中与缓存策略相关的字段包括 Cache-Control, Pragma, Expires, 下面分析这三个字段。\n\n\n# Cache-Control\n\nCache-Control 是 Http/1.1 新增的字段，是控制浏览器缓存的主要字段。它的主要内容如下：\n\nno-cache：资源可以被缓存，但立刻过期，下次访问必须验证资源有效性\nmax-age：缓存资源，在指定时间后过期 (单位为秒)\nno-store：资源不会被缓存\npublic：资源可以被浏览器和代理服务器缓存\nprivate： 资源只能被浏览器缓存\n\n\n# Pragma\n\nPragma 是 Http/1.0 的头部字段，只有一个值 no-cache， 功能和 Cache-Control:no-cache 一样。\n\n\n# Expires\n\nExpires 是缓存到期时间，以服务器时间为参考，优先级比 Cache-Control: max-age 低。\n\n在一些场景中必须避免浏览器缓存，推荐的做法是设置请求头：Cache-Control: no-cache, no-store, must-revalidate\n\n\n# 强缓存命中条件\n\n我们会发现，最优的做法是让一些公开资源命中强缓存，这是响应最快的。那么命中强缓存的条件又是什么呢？\n\n请求头部不包括 Pragma 字段\n响应头部 Cache-Control 中不包括 no-cache、no-store\n响应头部 max-age 或者 Expires 大于请求日期\n如果我们在很短的一段时间内多次访问同一个资源，并且响应头部却没有 max-age 或者 Expires 信息，是不是就不会命中强缓存了呢？不是的，浏览器会做出优化，默认采用一个启发式算法，取响应头的 (Date - Last-Modified) * 0.1 作为缓存有效时间，只要是在这段时间内请求这个资源，即使没有缓存过期字段，也会命中强缓存。\n\n\n# 服务器端校验资源是否修改机制\n\n\n# Last-Modified/If-Modified-Since\n\n服务器响应资源的时候返回一个头部字段 Last-Modified，代表该资源最后修改时间，当浏览器再次向服务器请求该资源时，会传送 If-Modified-Since 信息，值就是上次服务器响应的最后修改时间， 服务器将这个请求时间与本地资源实际最后修改时间做对比，如果文件没有被修改，则返回状态码 304，通知浏览器从缓存中读取资源文件。\n\n\n# ETag/If-None-Match\n\nETag 是一个响应首部字段，它是根据资源内容生成的一段 hash 字符串，标识资源的状态，由服务端产生。当浏览器再次向服务器请求该资源时，会传送 If-None-Match 字段，服务器收到请求后，拿 If-None-Match 字段的值与资源的实际 ETage 值进行比较，若相同，则命中协商缓存，返回状态码 304。ETag 优先级比 Last-Modified 高，同时存在时会以 ETag 为准。\n\n那已经有了 Last-Modified 机制，为什么要引入 ETage 机制呢？\n\n某些服务器不能精确得到资源的最后修改时间，这样就无法通过最后修改时间判断资源是否更新\n如果资源修改非常频繁，在秒以下的时间内进行修改，而 Last-Modified 只能精确到秒\n一些资源的最后修改时间改变了，但是内容没改变，使用 ETag 就能判别出资源内容是否被修改\n\n\n# 浏览器缓存的使用\n\n使用缓存的过程其实就是根据场景设置 Cache-Control 的值的过程：\n",normalizedContent:"# 理解浏览器缓存机制\n\n\n# 介绍\n\n浏览器缓存可以提高网页打开速度、减少 http 请求，在提高用户体验、重复利用资源、减少网络带宽上发挥着重要的作用。特别是现在用户对网站响应速度要求特别高的情况下，高效地利用浏览器缓存机制可以使网站性能优化事半功倍。\n下面对浏览器缓存机制做一些分析。\n\n\n# 概念\n\nhttp 缓存可以分为强缓存和协商缓存:\n\n强缓存：强缓存命中不会发送请求到服务器端，直接从本地缓存中获取资源，状态码 200 (from cache)\n协商缓存：协商缓存会发送请求到服务器，服务器通过请求头部字段来验证资源是否命中协商缓存，如果命中，则返回状态码 304 (not modified)，通知浏览器从缓存中获取资源。\n示意图\n\n\n\n# 分析\n\n根据响应头部的字段确定浏览器缓存策略\n响应头中与缓存策略相关的字段包括 cache-control, pragma, expires, 下面分析这三个字段。\n\n\n# cache-control\n\ncache-control 是 http/1.1 新增的字段，是控制浏览器缓存的主要字段。它的主要内容如下：\n\nno-cache：资源可以被缓存，但立刻过期，下次访问必须验证资源有效性\nmax-age：缓存资源，在指定时间后过期 (单位为秒)\nno-store：资源不会被缓存\npublic：资源可以被浏览器和代理服务器缓存\nprivate： 资源只能被浏览器缓存\n\n\n# pragma\n\npragma 是 http/1.0 的头部字段，只有一个值 no-cache， 功能和 cache-control:no-cache 一样。\n\n\n# expires\n\nexpires 是缓存到期时间，以服务器时间为参考，优先级比 cache-control: max-age 低。\n\n在一些场景中必须避免浏览器缓存，推荐的做法是设置请求头：cache-control: no-cache, no-store, must-revalidate\n\n\n# 强缓存命中条件\n\n我们会发现，最优的做法是让一些公开资源命中强缓存，这是响应最快的。那么命中强缓存的条件又是什么呢？\n\n请求头部不包括 pragma 字段\n响应头部 cache-control 中不包括 no-cache、no-store\n响应头部 max-age 或者 expires 大于请求日期\n如果我们在很短的一段时间内多次访问同一个资源，并且响应头部却没有 max-age 或者 expires 信息，是不是就不会命中强缓存了呢？不是的，浏览器会做出优化，默认采用一个启发式算法，取响应头的 (date - last-modified) * 0.1 作为缓存有效时间，只要是在这段时间内请求这个资源，即使没有缓存过期字段，也会命中强缓存。\n\n\n# 服务器端校验资源是否修改机制\n\n\n# last-modified/if-modified-since\n\n服务器响应资源的时候返回一个头部字段 last-modified，代表该资源最后修改时间，当浏览器再次向服务器请求该资源时，会传送 if-modified-since 信息，值就是上次服务器响应的最后修改时间， 服务器将这个请求时间与本地资源实际最后修改时间做对比，如果文件没有被修改，则返回状态码 304，通知浏览器从缓存中读取资源文件。\n\n\n# etag/if-none-match\n\netag 是一个响应首部字段，它是根据资源内容生成的一段 hash 字符串，标识资源的状态，由服务端产生。当浏览器再次向服务器请求该资源时，会传送 if-none-match 字段，服务器收到请求后，拿 if-none-match 字段的值与资源的实际 etage 值进行比较，若相同，则命中协商缓存，返回状态码 304。etag 优先级比 last-modified 高，同时存在时会以 etag 为准。\n\n那已经有了 last-modified 机制，为什么要引入 etage 机制呢？\n\n某些服务器不能精确得到资源的最后修改时间，这样就无法通过最后修改时间判断资源是否更新\n如果资源修改非常频繁，在秒以下的时间内进行修改，而 last-modified 只能精确到秒\n一些资源的最后修改时间改变了，但是内容没改变，使用 etag 就能判别出资源内容是否被修改\n\n\n# 浏览器缓存的使用\n\n使用缓存的过程其实就是根据场景设置 cache-control 的值的过程：\n",charsets:{cjk:!0}},{title:"requestAnimationFrame实践",frontmatter:{title:"requestAnimationFrame实践",date:"2022-05-24T21:35:39.000Z",permalink:"/pages/9357b2/",categories:["views","技术"],tags:["requestAnimationFrame"]},regularPath:"/views/02.%E6%8A%80%E6%9C%AF/07.requestAnimationFrame%E5%AE%9E%E8%B7%B5.html",relativePath:"views/02.技术/07.requestAnimationFrame实践.md",key:"v-cd5c72dc",path:"/pages/9357b2/",headers:[{level:2,title:"背景",slug:"背景",normalizedTitle:"背景",charIndex:2},{level:2,title:"优点",slug:"优点",normalizedTitle:"优点",charIndex:291},{level:2,title:"场景",slug:"场景",normalizedTitle:"场景",charIndex:546},{level:2,title:"大数据渲染",slug:"大数据渲染",normalizedTitle:"大数据渲染",charIndex:1069},{level:2,title:"兼容性",slug:"兼容性",normalizedTitle:"兼容性",charIndex:1846}],lastUpdated:"5/25/2022, 6:17:07 AM",lastUpdatedTimestamp:1653459427e3,headersStr:"背景 优点 场景 大数据渲染 兼容性",content:"# 背景\n\n传统的 javascript 动画是通过定时器 setTimeout 或者 setInterval 实现的。但是定时器动画一直存在两个问题，第一个就是动画的循时间环间隔不好确定，设置长了动画显得不够平滑流畅，设置短了浏览器的重绘频率会达到瓶颈，推荐的最佳循环间隔是 17ms（大多数电脑的显示器刷新频率是 60Hz，1000ms/60）；第二个问题是定时器第二个时间参数只是指定了多久后将动画任务添加到浏览器的 UI 线程队列中，如果 UI 线程处于忙碌状态，那么动画不会立刻执行。为了解决这些问题，H5 中加入了 requestAnimationFrame;\n\n\n# 优点\n\nrequestAnimationFrame 会把每一帧中的所有 DOM 操作集中起来，在一次重绘或回流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率\n在隐藏或不可见的元素中，requestAnimationFrame 将不会进行重绘或回流，这当然就意味着更少的 CPU、GPU 和内存使用量\nrequestAnimationFrame 是由浏览器专门为动画提供的 API，在运行时浏览器会自动优化方法的调用，并且如果页面不是激活状态下的话，动画会自动暂停，有效节省了 CPU 开销\n\n\n# 场景\n\njs 动画\nrequestAnimationFrame 本来就是为动画而生的，所以在处理 js 动画不在话下，与定时器的用法非常相似，下面是一个例子，点击元素时开始转动，再次点击转动速速增加。\n\nvar deg = 0;\nvar id;\nvar div = document.getElementById(\"div\");\ndiv.addEventListener('click', function () {\n    var self = this;\n    requestAnimationFrame(function change() {\n        self.style.transform = 'rotate(' + (deg++) + 'deg)';\n        id = requestAnimationFrame(change);\n    });\n});\ndocument.getElementById('stop').onclick = function () {\n    cancelAnimationFrame(id);\n};\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 大数据渲染\n\n在大数据渲染过程中，比如表格的渲染，如果不进行一些性能策略处理，就会出现 UI 冻结现象，用户体验极差。有个场景，将后台返回的十万条记录插入到表格中，如果一次性在循环中生成 DOM 元素，会导致页面卡顿 5s 左右。这时候我们就可以用 requestAnimationFrame 进行分步渲染，确定最好的时间间隔，使得页面加载过程中很流畅。\n\nvar total = 100000;\nvar size = 100;\nvar count = total / size;\nvar done = 0;\nvar ul = document.getElementById('list');\n\nfunction addItems() {\n    var li = null;\n    var fg = document.createDocumentFragment();\n\n    for (var i = 0; i < size; i++) {\n        li = document.createElement('li');\n        li.innerText = 'item ' + (done * size + i);\n        fg.appendChild(li);\n    }\n\n    ul.appendChild(fg);\n    done++;\n\n    if (done < count) {\n        requestAnimationFrame(addItems);\n    }\n};\n\nrequestAnimationFrame(addItems);\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# 兼容性\n\nfirefox、chrome、ie10 以上， requestAnimationFrame 的支持很好，但不兼容 IE9 及以下浏览器，但是我们可以用定时器来做一下兼容，以下是兼容代码：\n\n(function () {\n    var lastTime = 0;\n    var vendors = ['webkit', 'moz'];\n    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n        window.cancelAnimationFrame =\n            window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];\n    }\n\n    if (!window.requestAnimationFrame)\n        window.requestAnimationFrame = function (callback) {\n            /*调整时间，让一次动画等待和执行时间在最佳循环时间间隔内完成*/\n            var currTime = new Date().getTime();\n            var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n            var id = window.setTimeout(function () {\n                    callback(currTime + timeToCall);\n                },\n                timeToCall);\n            lastTime = currTime + timeToCall;\n            return id;\n        };\n\n    if (!window.cancelAnimationFrame)\n        window.cancelAnimationFrame = function (id) {\n            clearTimeout(id);\n        };\n}());\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n性能对比\n以上面大数据渲染为例，我们向一个页面中插入 1 万条数据。\n下面是用 setTimeout 后浏览器帧率：\n\n\n下面是用 requestAnimationFrame 后浏览器帧率：\n\n\n我们会发现，性能提升的还是很多的。所以还是很推荐使用 requestAnimationFrame;",normalizedContent:"# 背景\n\n传统的 javascript 动画是通过定时器 settimeout 或者 setinterval 实现的。但是定时器动画一直存在两个问题，第一个就是动画的循时间环间隔不好确定，设置长了动画显得不够平滑流畅，设置短了浏览器的重绘频率会达到瓶颈，推荐的最佳循环间隔是 17ms（大多数电脑的显示器刷新频率是 60hz，1000ms/60）；第二个问题是定时器第二个时间参数只是指定了多久后将动画任务添加到浏览器的 ui 线程队列中，如果 ui 线程处于忙碌状态，那么动画不会立刻执行。为了解决这些问题，h5 中加入了 requestanimationframe;\n\n\n# 优点\n\nrequestanimationframe 会把每一帧中的所有 dom 操作集中起来，在一次重绘或回流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率\n在隐藏或不可见的元素中，requestanimationframe 将不会进行重绘或回流，这当然就意味着更少的 cpu、gpu 和内存使用量\nrequestanimationframe 是由浏览器专门为动画提供的 api，在运行时浏览器会自动优化方法的调用，并且如果页面不是激活状态下的话，动画会自动暂停，有效节省了 cpu 开销\n\n\n# 场景\n\njs 动画\nrequestanimationframe 本来就是为动画而生的，所以在处理 js 动画不在话下，与定时器的用法非常相似，下面是一个例子，点击元素时开始转动，再次点击转动速速增加。\n\nvar deg = 0;\nvar id;\nvar div = document.getelementbyid(\"div\");\ndiv.addeventlistener('click', function () {\n    var self = this;\n    requestanimationframe(function change() {\n        self.style.transform = 'rotate(' + (deg++) + 'deg)';\n        id = requestanimationframe(change);\n    });\n});\ndocument.getelementbyid('stop').onclick = function () {\n    cancelanimationframe(id);\n};\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 大数据渲染\n\n在大数据渲染过程中，比如表格的渲染，如果不进行一些性能策略处理，就会出现 ui 冻结现象，用户体验极差。有个场景，将后台返回的十万条记录插入到表格中，如果一次性在循环中生成 dom 元素，会导致页面卡顿 5s 左右。这时候我们就可以用 requestanimationframe 进行分步渲染，确定最好的时间间隔，使得页面加载过程中很流畅。\n\nvar total = 100000;\nvar size = 100;\nvar count = total / size;\nvar done = 0;\nvar ul = document.getelementbyid('list');\n\nfunction additems() {\n    var li = null;\n    var fg = document.createdocumentfragment();\n\n    for (var i = 0; i < size; i++) {\n        li = document.createelement('li');\n        li.innertext = 'item ' + (done * size + i);\n        fg.appendchild(li);\n    }\n\n    ul.appendchild(fg);\n    done++;\n\n    if (done < count) {\n        requestanimationframe(additems);\n    }\n};\n\nrequestanimationframe(additems);\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# 兼容性\n\nfirefox、chrome、ie10 以上， requestanimationframe 的支持很好，但不兼容 ie9 及以下浏览器，但是我们可以用定时器来做一下兼容，以下是兼容代码：\n\n(function () {\n    var lasttime = 0;\n    var vendors = ['webkit', 'moz'];\n    for (var x = 0; x < vendors.length && !window.requestanimationframe; ++x) {\n        window.requestanimationframe = window[vendors[x] + 'requestanimationframe'];\n        window.cancelanimationframe =\n            window[vendors[x] + 'cancelanimationframe'] || window[vendors[x] + 'cancelrequestanimationframe'];\n    }\n\n    if (!window.requestanimationframe)\n        window.requestanimationframe = function (callback) {\n            /*调整时间，让一次动画等待和执行时间在最佳循环时间间隔内完成*/\n            var currtime = new date().gettime();\n            var timetocall = math.max(0, 16 - (currtime - lasttime));\n            var id = window.settimeout(function () {\n                    callback(currtime + timetocall);\n                },\n                timetocall);\n            lasttime = currtime + timetocall;\n            return id;\n        };\n\n    if (!window.cancelanimationframe)\n        window.cancelanimationframe = function (id) {\n            cleartimeout(id);\n        };\n}());\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n性能对比\n以上面大数据渲染为例，我们向一个页面中插入 1 万条数据。\n下面是用 settimeout 后浏览器帧率：\n\n\n下面是用 requestanimationframe 后浏览器帧率：\n\n\n我们会发现，性能提升的还是很多的。所以还是很推荐使用 requestanimationframe;",charsets:{cjk:!0}},{title:"git突然连不上github解决方案",frontmatter:{title:"git突然连不上github解决方案",date:"2022-05-25T13:16:07.000Z",permalink:"/pages/e7b715/",categories:["views","技术"],tags:["git"]},regularPath:"/views/02.%E6%8A%80%E6%9C%AF/08.git%E7%AA%81%E7%84%B6%E8%BF%9E%E4%B8%8D%E4%B8%8Agithub%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html",relativePath:"views/02.技术/08.git突然连不上github解决方案.md",key:"v-17e6fd65",path:"/pages/e7b715/",headers:[{level:2,title:"场景回顾",slug:"场景回顾",normalizedTitle:"场景回顾",charIndex:28},{level:3,title:"我的解决方法",slug:"我的解决方法",normalizedTitle:"我的解决方法",charIndex:763},{level:2,title:"总结",slug:"总结",normalizedTitle:"总结",charIndex:943},{level:3,title:"方法1",slug:"方法1",normalizedTitle:"方法 1",charIndex:950},{level:3,title:"方法2",slug:"方法2",normalizedTitle:"方法 2",charIndex:1024},{level:3,title:"方法3",slug:"方法3",normalizedTitle:"方法 3",charIndex:1089},{level:4,title:"以上为个人解决纪录，本人不善写作有误导之处欢迎提出",slug:"以上为个人解决纪录-本人不善写作有误导之处欢迎提出",normalizedTitle:"以上为个人解决纪录，本人不善写作有误导之处欢迎提出",charIndex:1157}],lastUpdated:"5/25/2022, 6:17:07 AM",lastUpdatedTimestamp:1653459427e3,headersStr:"场景回顾 我的解决方法 总结 方法1 方法2 方法3 以上为个人解决纪录，本人不善写作有误导之处欢迎提出",content:"# git 连不上 github 解决方法归总\n\n\n# 场景回顾\n\n晚上写完代码准备推送休息了，突然推送报错 ，第一时间当然是检查网络了，因为国内访问 github 需要科学上网的吗！\n1 检查了我的代理发现没问题\n2 用浏览器访问了 github，可以正常访问，然后我就重新推送咯，结果还是不行，就很纳闷了\n3 然后用终端 ping 了一下 github 的地址 ，发现居然 ping 不通，然而浏览器却可以访问\n4 查了报错信息 ssh: Could not resolve hostname github.com: No address associated with hostname 连不上目标主机，\n清空了 DNS 缓存 ipconfig/flushdns ，改了 C:\\Windows\\System32\\drivers\\etc 下面的 hosts 文件 添加了对 github 的解析 ，然后能 ping 通了，赶紧推送\n5 结果白高兴一场，又报 Open ssL 什么错误 ，又去 C:\\Users\\【主机名】 下面给了 .gitconfig 配置文件 还是不行\n6 以为是验证上面出了问题 又重新生成了 key 密钥 ，替换旧的，结果还是验证失败\n7 给 git 添加代理\n\n添加\ngit config --global http.proxy http://127.0.0.1:1080\ngit config --global https.proxy http://127.0.0.1:1080\n移除\ngit config --global --unset http.proxy \ngit config --global --unset https.proxy \n\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 我的解决方法\n\n后面是通过在虚拟机获取到 GitHub.com 的 ip 添加到 C:\\Windows\\System32\\drivers\\etc 下面的 hosts 再通过 ssh -T git@github.com 验证，通过之后，把.ssh 下面的 known_hosts 替换到真实主机得以解决 ， 场景不同解决方法也不一样，上面的方法都可一试\n\n\n# 总结\n\n\n# 方法 1\n\n给 git 添加代理 git config --global http.proxy http://127.0.0.1:1080\n\n\n# 方法 2\n\n给本地主机添加解析 C:\\Windows\\System32\\drivers\\etc 下面的 hosts 文件\n\n\n# 方法 3\n\n我那个方法不过有点麻烦 ，可以去朋友电脑上拷贝一份文件，因为我电脑刚好有虚拟机所以正好，其实因该还是验证这块出了问题\n\n# 以上为个人解决纪录，本人不善写作有误导之处欢迎提出",normalizedContent:"# git 连不上 github 解决方法归总\n\n\n# 场景回顾\n\n晚上写完代码准备推送休息了，突然推送报错 ，第一时间当然是检查网络了，因为国内访问 github 需要科学上网的吗！\n1 检查了我的代理发现没问题\n2 用浏览器访问了 github，可以正常访问，然后我就重新推送咯，结果还是不行，就很纳闷了\n3 然后用终端 ping 了一下 github 的地址 ，发现居然 ping 不通，然而浏览器却可以访问\n4 查了报错信息 ssh: could not resolve hostname github.com: no address associated with hostname 连不上目标主机，\n清空了 dns 缓存 ipconfig/flushdns ，改了 c:\\windows\\system32\\drivers\\etc 下面的 hosts 文件 添加了对 github 的解析 ，然后能 ping 通了，赶紧推送\n5 结果白高兴一场，又报 open ssl 什么错误 ，又去 c:\\users\\【主机名】 下面给了 .gitconfig 配置文件 还是不行\n6 以为是验证上面出了问题 又重新生成了 key 密钥 ，替换旧的，结果还是验证失败\n7 给 git 添加代理\n\n添加\ngit config --global http.proxy http://127.0.0.1:1080\ngit config --global https.proxy http://127.0.0.1:1080\n移除\ngit config --global --unset http.proxy \ngit config --global --unset https.proxy \n\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 我的解决方法\n\n后面是通过在虚拟机获取到 github.com 的 ip 添加到 c:\\windows\\system32\\drivers\\etc 下面的 hosts 再通过 ssh -t git@github.com 验证，通过之后，把.ssh 下面的 known_hosts 替换到真实主机得以解决 ， 场景不同解决方法也不一样，上面的方法都可一试\n\n\n# 总结\n\n\n# 方法 1\n\n给 git 添加代理 git config --global http.proxy http://127.0.0.1:1080\n\n\n# 方法 2\n\n给本地主机添加解析 c:\\windows\\system32\\drivers\\etc 下面的 hosts 文件\n\n\n# 方法 3\n\n我那个方法不过有点麻烦 ，可以去朋友电脑上拷贝一份文件，因为我电脑刚好有虚拟机所以正好，其实因该还是验证这块出了问题\n\n# 以上为个人解决纪录，本人不善写作有误导之处欢迎提出",charsets:{cjk:!0}},{title:"让vue3更好用的vite插件",frontmatter:{title:"让vue3更好用的vite插件",date:"2022-05-26T13:49:52.000Z",permalink:"/pages/918535/",categories:["views","前端","Vue"],tags:["vite","Vue3"]},regularPath:"/views/02.%E6%8A%80%E6%9C%AF/09.%E8%AE%A9vue3%E6%9B%B4%E5%A5%BD%E7%94%A8%E7%9A%84vite%E6%8F%92%E4%BB%B6.html",relativePath:"views/02.技术/09.让vue3更好用的vite插件.md",key:"v-719fae6a",path:"/pages/918535/",headers:[{level:2,title:"1 vite-plugin-vue-setup-extend",slug:"_1-vite-plugin-vue-setup-extend",normalizedTitle:"1 vite-plugin-vue-setup-extend",charIndex:2},{level:3,title:"安装：",slug:"安装",normalizedTitle:"安装：",charIndex:87},{level:3,title:"配置：vite.config.ts 文件中",slug:"配置-vite-config-ts-文件中",normalizedTitle:"配置：vite.config.ts 文件中",charIndex:139},{level:2,title:"2 unplugin-auto-import",slug:"_2-unplugin-auto-import",normalizedTitle:"2 unplugin-auto-import",charIndex:332},{level:3,title:"安装：",slug:"安装-2",normalizedTitle:"安装：",charIndex:87},{level:3,title:"配置：",slug:"配置",normalizedTitle:"配置：",charIndex:139},{level:2,title:"3 unplugin-vue-components",slug:"_3-unplugin-vue-components",normalizedTitle:"3 unplugin-vue-components",charIndex:1239},{level:3,title:"安装：",slug:"安装-3",normalizedTitle:"安装：",charIndex:87},{level:3,title:"配置：",slug:"配置-2",normalizedTitle:"配置：",charIndex:139},{level:2,title:"4 vite-plugin-compression",slug:"_4-vite-plugin-compression",normalizedTitle:"4 vite-plugin-compression",charIndex:1925},{level:3,title:"安装：",slug:"安装-4",normalizedTitle:"安装：",charIndex:87},{level:3,title:"配置：",slug:"配置-3",normalizedTitle:"配置：",charIndex:139},{level:2,title:"5 rollup-plugin-visualizer",slug:"_5-rollup-plugin-visualizer",normalizedTitle:"5 rollup-plugin-visualizer",charIndex:2404},{level:3,title:"安装：",slug:"安装-5",normalizedTitle:"安装：",charIndex:87},{level:3,title:"配置：",slug:"配置-4",normalizedTitle:"配置：",charIndex:139},{level:2,title:"6 vite-plugin-vue-images :有点小问题",slug:"_6-vite-plugin-vue-images-有点小问题",normalizedTitle:"6 vite-plugin-vue-images : 有点小问题",charIndex:2701},{level:3,title:"安装：",slug:"安装-6",normalizedTitle:"安装：",charIndex:87},{level:3,title:"配置：",slug:"配置-5",normalizedTitle:"配置：",charIndex:139},{level:3,title:"使用：注意用大写开头，惨痛教训",slug:"使用-注意用大写开头-惨痛教训",normalizedTitle:"使用：注意用大写开头，惨痛教训",charIndex:3061},{level:2,title:"7 vue-global-api",slug:"_7-vue-global-api",normalizedTitle:"7 vue-global-api",charIndex:3389},{level:3,title:"安装:",slug:"安装-7",normalizedTitle:"安装:",charIndex:3463},{level:3,title:"配置：main.ts添加",slug:"配置-main-ts添加",normalizedTitle:"配置：main.ts 添加",charIndex:3498}],lastUpdated:"5/31/2022, 12:12:23 PM",lastUpdatedTimestamp:1653999143e3,headersStr:"1 vite-plugin-vue-setup-extend 安装： 配置：vite.config.ts 文件中 2 unplugin-auto-import 安装： 配置： 3 unplugin-vue-components 安装： 配置： 4 vite-plugin-compression 安装： 配置： 5 rollup-plugin-visualizer 安装： 配置： 6 vite-plugin-vue-images :有点小问题 安装： 配置： 使用：注意用大写开头，惨痛教训 7 vue-global-api 安装: 配置：main.ts添加",content:"# 1 vite-plugin-vue-setup-extend\n\n解决 vue3 下 script setup 语法糖 下 ，手动设置组件 name 不方便的问题\n\n\n# 安装：\n\nnpm i vite-plugin-vue-setup-extend -D\n\n\n1\n\n\n\n# 配置：vite.config.ts 文件中\n\nimport setupExtend from 'vite-plugin-vue-setup-extend';\n\nexport default defaultConfig({\n  \n  plugins: [\n     ...\n     setupExtend()\n   ],\n})\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 2 unplugin-auto-import\n\n自动导入插件，可实现不用引入直接使用 ref watch computed router 等等...\n\n\n# 安装：\n\n npm i unplugin-auto-import -D\n\n\n1\n\n\n\n# 配置：\n\nexport default defaultConfig({\n  plugins:[\n     AutoImport({\n      include: [\n        /\\.[tj]sx?$/, // .ts, .tsx, .js, .jsx\n        /\\.vue$/,\n        /\\.vue\\?vue/, // .vue\n        /\\.md$/ // .md\n      ],\n      // global imports to register\n      imports: ['vue', 'vue-router'],\n      eslintrc: {\n        enabled: false,   // 会生成eslintrc文件 filepath 配置文件名\n        filepath: './.eslintrc-auto-import.json',\n        globalsPropValue: true\n      }\n    }),\n  ]\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n用了自动引入后 eslint 和 ts 会报错 解决方法如下：\n把上面生成的 ./.eslintrc-auto-import.json 加入到 eslint 配置里面 .eslintrc.js 文件中\n\n  extends: [\n    ...\n    './.eslintrc-auto-import.json'\n  ],\n\n\n1\n2\n3\n4\n\n\n在 tsconfig.json 文件中 auto-imports.d.ts 会自动生成\n\n\"include\": [..., \"auto-imports.d.ts\"],\n\n\n1\n\n\n\n# 3 unplugin-vue-components\n\n实现 vue 组件库的自动按需导入，这样就不用手动导入了\n\n\n# 安装：\n\nnpm i unplugin-vue-components -D\n\n\n1\n\n\n\n# 配置：\n\n  import AutoImport from 'unplugin-auto-import/vite';\nimport Components from 'unplugin-vue-components/vite';\nimport { ElementPlusResolver } from 'unplugin-vue-components/resolvers';\nexport default defineConfig({\n  plugins: [\n    vue(),\n    AutoImport({\n      imports: [\n        'vue',\n        'vue-router',\n        {\n          vuex: ['useStore']\n        }\n      ],\n      resolvers: [ElementPlusResolver()],\n      dts: false\n    }),\n    Components({\n      resolvers: [ElementPlusResolver()]\n    }),\n  ]\n});\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 4 vite-plugin-compression\n\n静态资源压缩\n\n\n# 安装：\n\nnpm i vite-plugin-compression -D\n\n\n1\n\n\n\n# 配置：\n\n// 静态资源压缩\nimport viteCompression from 'vite-plugin-compression';\nexport default defineConfig({\n  plugins: [\n    ...\n    viteCompression({\n      verbose: true,\n      disable: false, // 不禁用压缩\n      deleteOriginFile: false, // 压缩后是否删除原文件\n      threshold: 10240, // 压缩前最小文件大小\n      algorithm: 'gzip', // 压缩算法\n      ext: '.gz' // 文件类型\n    })\n  ],\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 5 rollup-plugin-visualizer\n\n打包分析\n\n\n# 安装：\n\nnpm i rollup-plugin-visualizer -D\n\n\n1\n\n\n\n# 配置：\n\nimport visualizer from 'rollup-plugin-visualizer';\nexport default defineConfig({\n  plugins: [\n    ...\n    visualizer({\n        // 打包后自动打开分析报告\n        open: true\n      })\n  ],\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 6 vite-plugin-vue-images : 有点小问题\n\n图片自动导入，配置后图片可直接使用\n\n\n# 安装：\n\nnpm i vite-plugin-vue-images -D\n\n\n1\n\n\n\n# 配置：\n\n// vite.config.ts\nimport { defineConfig } from 'vite'\nimport ViteImages from 'vite-plugin-vue-images'\n\nexport default defineConfig({\n  plugins: [\n    ViteImages({\n      dirs: ['src/assets/image'] // 指明图片存放目录\n    })\n  ]\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 使用：注意用大写开头，惨痛教训\n\n<template>\n  <div class=\"home\">\n    <img :src=\"Logo\"  />\n    <img :src=\"TestName1\"  /> \n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport Logo from '@/assets/logo.png'\nimport TestName1 from '@/assets/test/name1.jpg'\n<\/script>\n\n<style lang=\"less\" scoped>\n</style>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 7 vue-global-api\n\nunplugin-auto-import 插件的继承者，解决因为它的自动导入导致的 eslint 报错\n\n\n# 安装:\n\nnpm i vue-global-api\n\n\n1\n\n\n\n# 配置：main.ts 添加\n\nimport 'vue-global-api'",normalizedContent:"# 1 vite-plugin-vue-setup-extend\n\n解决 vue3 下 script setup 语法糖 下 ，手动设置组件 name 不方便的问题\n\n\n# 安装：\n\nnpm i vite-plugin-vue-setup-extend -d\n\n\n1\n\n\n\n# 配置：vite.config.ts 文件中\n\nimport setupextend from 'vite-plugin-vue-setup-extend';\n\nexport default defaultconfig({\n  \n  plugins: [\n     ...\n     setupextend()\n   ],\n})\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 2 unplugin-auto-import\n\n自动导入插件，可实现不用引入直接使用 ref watch computed router 等等...\n\n\n# 安装：\n\n npm i unplugin-auto-import -d\n\n\n1\n\n\n\n# 配置：\n\nexport default defaultconfig({\n  plugins:[\n     autoimport({\n      include: [\n        /\\.[tj]sx?$/, // .ts, .tsx, .js, .jsx\n        /\\.vue$/,\n        /\\.vue\\?vue/, // .vue\n        /\\.md$/ // .md\n      ],\n      // global imports to register\n      imports: ['vue', 'vue-router'],\n      eslintrc: {\n        enabled: false,   // 会生成eslintrc文件 filepath 配置文件名\n        filepath: './.eslintrc-auto-import.json',\n        globalspropvalue: true\n      }\n    }),\n  ]\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n用了自动引入后 eslint 和 ts 会报错 解决方法如下：\n把上面生成的 ./.eslintrc-auto-import.json 加入到 eslint 配置里面 .eslintrc.js 文件中\n\n  extends: [\n    ...\n    './.eslintrc-auto-import.json'\n  ],\n\n\n1\n2\n3\n4\n\n\n在 tsconfig.json 文件中 auto-imports.d.ts 会自动生成\n\n\"include\": [..., \"auto-imports.d.ts\"],\n\n\n1\n\n\n\n# 3 unplugin-vue-components\n\n实现 vue 组件库的自动按需导入，这样就不用手动导入了\n\n\n# 安装：\n\nnpm i unplugin-vue-components -d\n\n\n1\n\n\n\n# 配置：\n\n  import autoimport from 'unplugin-auto-import/vite';\nimport components from 'unplugin-vue-components/vite';\nimport { elementplusresolver } from 'unplugin-vue-components/resolvers';\nexport default defineconfig({\n  plugins: [\n    vue(),\n    autoimport({\n      imports: [\n        'vue',\n        'vue-router',\n        {\n          vuex: ['usestore']\n        }\n      ],\n      resolvers: [elementplusresolver()],\n      dts: false\n    }),\n    components({\n      resolvers: [elementplusresolver()]\n    }),\n  ]\n});\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 4 vite-plugin-compression\n\n静态资源压缩\n\n\n# 安装：\n\nnpm i vite-plugin-compression -d\n\n\n1\n\n\n\n# 配置：\n\n// 静态资源压缩\nimport vitecompression from 'vite-plugin-compression';\nexport default defineconfig({\n  plugins: [\n    ...\n    vitecompression({\n      verbose: true,\n      disable: false, // 不禁用压缩\n      deleteoriginfile: false, // 压缩后是否删除原文件\n      threshold: 10240, // 压缩前最小文件大小\n      algorithm: 'gzip', // 压缩算法\n      ext: '.gz' // 文件类型\n    })\n  ],\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 5 rollup-plugin-visualizer\n\n打包分析\n\n\n# 安装：\n\nnpm i rollup-plugin-visualizer -d\n\n\n1\n\n\n\n# 配置：\n\nimport visualizer from 'rollup-plugin-visualizer';\nexport default defineconfig({\n  plugins: [\n    ...\n    visualizer({\n        // 打包后自动打开分析报告\n        open: true\n      })\n  ],\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 6 vite-plugin-vue-images : 有点小问题\n\n图片自动导入，配置后图片可直接使用\n\n\n# 安装：\n\nnpm i vite-plugin-vue-images -d\n\n\n1\n\n\n\n# 配置：\n\n// vite.config.ts\nimport { defineconfig } from 'vite'\nimport viteimages from 'vite-plugin-vue-images'\n\nexport default defineconfig({\n  plugins: [\n    viteimages({\n      dirs: ['src/assets/image'] // 指明图片存放目录\n    })\n  ]\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 使用：注意用大写开头，惨痛教训\n\n<template>\n  <div class=\"home\">\n    <img :src=\"logo\"  />\n    <img :src=\"testname1\"  /> \n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport logo from '@/assets/logo.png'\nimport testname1 from '@/assets/test/name1.jpg'\n<\/script>\n\n<style lang=\"less\" scoped>\n</style>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 7 vue-global-api\n\nunplugin-auto-import 插件的继承者，解决因为它的自动导入导致的 eslint 报错\n\n\n# 安装:\n\nnpm i vue-global-api\n\n\n1\n\n\n\n# 配置：main.ts 添加\n\nimport 'vue-global-api'",charsets:{cjk:!0}},{title:"Vue3有哪些新特性",frontmatter:{title:"Vue3有哪些新特性",date:"2022-05-26T17:13:30.000Z",permalink:"/pages/ac678c/",categories:["views","技术"],tags:[null]},regularPath:"/views/02.%E6%8A%80%E6%9C%AF/10.Vue3%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B0%E7%89%B9%E6%80%A7.html",relativePath:"views/02.技术/10.Vue3有哪些新特性.md",key:"v-08080aae",path:"/pages/ac678c/",lastUpdated:"5/26/2022, 9:20:36 AM",lastUpdatedTimestamp:1653556836e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"EvenLoop有哪些",frontmatter:{title:"EvenLoop有哪些",date:"2022-05-26T17:14:36.000Z",permalink:"/pages/5cf57d/",categories:["views","技术"],tags:["EventLoop"]},regularPath:"/views/02.%E6%8A%80%E6%9C%AF/11.EventLoop%E6%9C%89%E5%93%AA%E4%BA%9B.html",relativePath:"views/02.技术/11.EventLoop有哪些.md",key:"v-681aa372",path:"/pages/5cf57d/",headers:[{level:2,title:"1 宏任务和微任务是什么",slug:"_1-宏任务和微任务是什么",normalizedTitle:"1 宏任务和微任务是什么",charIndex:2},{level:2,title:"2 宏任务、微任务有哪些",slug:"_2-宏任务、微任务有哪些",normalizedTitle:"2 宏任务、微任务有哪些",charIndex:670},{level:2,title:"3 宏任务、微任务是怎么执行的",slug:"_3-宏任务、微任务是怎么执行的",normalizedTitle:"3 宏任务、微任务是怎么执行的",charIndex:916}],lastUpdated:"5/26/2022, 9:20:36 AM",lastUpdatedTimestamp:1653556836e3,headersStr:"1 宏任务和微任务是什么 2 宏任务、微任务有哪些 3 宏任务、微任务是怎么执行的",content:"# 1 宏任务和微任务是什么\n\n首先，我们要先了解下 Js 。js 是一种单线程语言，简单的说就是：只有一条通道，那么在任务多的情况下，就会出现拥挤的情况，这种情况下就产生了 ‘多线程’ ，但是这种 “多线程” 是通过单线程模仿的，也就是假的。那么就产生了同步任务和异步任务。\n\njs 同步任务和异步任务\n\nES6 规范中，microtask 称为 jobs，macrotask 称为 task\n宏任务是由宿主发起的，而微任务由 JavaScript 自身发起。\n\n在 ES3 以及以前的版本中，JavaScript 本身没有发起异步请求的能力，也就没有微任务的存在。在 ES5 之后，JavaScript 引入了 Promise，这样，不需要浏览器，JavaScript 引擎自身也能够发起异步任务了。\n\ns 宏任务（macrotask） 微任务（microtask）\n谁发起的 宿主（Node、浏览器） JS 引擎\n具体事件 1. script (可以理解为外层同步代码) 2. setTimeout/setInterval3. UI rendering/UI 事件 4. postMessage，MessageChannel5. setImmediate，I/O（Node.js） 1. Promise2. MutaionObserver3. Object.observe（已废弃；Proxy 对象替代）4. process.nextTick（Node.js）\n谁先运行 后运行 先运行\n会触发新一轮 Tick 吗 会 不会\n\n\n# 2 宏任务、微任务有哪些\n\n宏任务：1. script (可以理解为外层同步代码) 2. setTimeout/setInterval3. UI rendering/UI 事件 4. postMessage，MessageChannel5. setImmediate，I/O（Node.js）\n\n微任务：1. Promise2.process.nextTick（Node.js） 3. Object.observe（已废弃；Proxy 对象替代）4. MutaionObserver\n\n\n# 3 宏任务、微任务是怎么执行的\n\n执行顺序：先执行同步代码，遇到异步宏任务则将异步宏任务放入宏任务队列中，遇到异步微任务则将异步微任务放入微任务队列中，当所有同步代码执行完毕后，再将异步微任务从队列中调入主线程执行，微任务执行完毕后再将异步宏任务从队列中调入主线程执行，一直循环直至所有任务执行完毕。\n\n这里容易产生一个错误的认识：就是微任务先于宏任务执行。实际上是先执行同步任务，异步任务有宏任务和微任务两种，先将宏任务添加到宏任务队列中，将宏任务里面的微任务添加到微任务队列中。所有同步执行完之后执行异步，再将异步微任务从队列中调入主线程执行，微任务执行完毕后再将异步宏任务从队列中调入主线程执行。之后就一直循环...",normalizedContent:"# 1 宏任务和微任务是什么\n\n首先，我们要先了解下 js 。js 是一种单线程语言，简单的说就是：只有一条通道，那么在任务多的情况下，就会出现拥挤的情况，这种情况下就产生了 ‘多线程’ ，但是这种 “多线程” 是通过单线程模仿的，也就是假的。那么就产生了同步任务和异步任务。\n\njs 同步任务和异步任务\n\nes6 规范中，microtask 称为 jobs，macrotask 称为 task\n宏任务是由宿主发起的，而微任务由 javascript 自身发起。\n\n在 es3 以及以前的版本中，javascript 本身没有发起异步请求的能力，也就没有微任务的存在。在 es5 之后，javascript 引入了 promise，这样，不需要浏览器，javascript 引擎自身也能够发起异步任务了。\n\ns 宏任务（macrotask） 微任务（microtask）\n谁发起的 宿主（node、浏览器） js 引擎\n具体事件 1. script (可以理解为外层同步代码) 2. settimeout/setinterval3. ui rendering/ui 事件 4. postmessage，messagechannel5. setimmediate，i/o（node.js） 1. promise2. mutaionobserver3. object.observe（已废弃；proxy 对象替代）4. process.nexttick（node.js）\n谁先运行 后运行 先运行\n会触发新一轮 tick 吗 会 不会\n\n\n# 2 宏任务、微任务有哪些\n\n宏任务：1. script (可以理解为外层同步代码) 2. settimeout/setinterval3. ui rendering/ui 事件 4. postmessage，messagechannel5. setimmediate，i/o（node.js）\n\n微任务：1. promise2.process.nexttick（node.js） 3. object.observe（已废弃；proxy 对象替代）4. mutaionobserver\n\n\n# 3 宏任务、微任务是怎么执行的\n\n执行顺序：先执行同步代码，遇到异步宏任务则将异步宏任务放入宏任务队列中，遇到异步微任务则将异步微任务放入微任务队列中，当所有同步代码执行完毕后，再将异步微任务从队列中调入主线程执行，微任务执行完毕后再将异步宏任务从队列中调入主线程执行，一直循环直至所有任务执行完毕。\n\n这里容易产生一个错误的认识：就是微任务先于宏任务执行。实际上是先执行同步任务，异步任务有宏任务和微任务两种，先将宏任务添加到宏任务队列中，将宏任务里面的微任务添加到微任务队列中。所有同步执行完之后执行异步，再将异步微任务从队列中调入主线程执行，微任务执行完毕后再将异步宏任务从队列中调入主线程执行。之后就一直循环...",charsets:{cjk:!0}},{title:"win10下关闭进程",frontmatter:{title:"win10下关闭进程",date:"2022-05-31T14:33:34.000Z",permalink:"/pages/597c89/",categories:["views","技术"],tags:["win"]},regularPath:"/views/02.%E6%8A%80%E6%9C%AF/12.win10%E4%B8%8B%E5%85%B3%E9%97%AD%E8%BF%9B%E7%A8%8B.html",relativePath:"views/02.技术/12.win10下关闭进程.md",key:"v-5f3aa21a",path:"/pages/597c89/",lastUpdated:"5/31/2022, 12:12:23 PM",lastUpdatedTimestamp:1653999143e3,headersStr:null,content:'1、找到端口名（3004）\n\nnetstat -aon | findstr "3004"\n2、找到 pid\n\ntasklist|findstr "6412"\n\n3、关闭端口\n\ntaskkill /pid 6412 -t -f\n\n面向对象编程\n1 封装\n2 继承\n3 多态\n继承是实现多态的基础，多态是继承的目的\n--- 多态提供了 “接口与实现分离”。\n多态不但能改变程序的组织架构和可读性，更便利与开发出 “可扩充” 的程序。\n继承是多态的基础，多态是继承的目的。\n合理的运用基于类继承的多态、基于接口继承的多态和基于模版的多态，能增强程序的简洁性、灵活性、可维护性、可重用性和可扩展性\n\n函数式编程\n1 头等函数 在该语言中是一等公民，可当数据类型一样使用\n2 高阶函数 函数可作为参数传递，可作为返回值输出\n\nJS 应用开发常用的两种编程范式：\n原型继承（js 的 OOP 是通过原型继承实现的）\n函数式编程（closures，First Class Functions， Lambdas）',normalizedContent:'1、找到端口名（3004）\n\nnetstat -aon | findstr "3004"\n2、找到 pid\n\ntasklist|findstr "6412"\n\n3、关闭端口\n\ntaskkill /pid 6412 -t -f\n\n面向对象编程\n1 封装\n2 继承\n3 多态\n继承是实现多态的基础，多态是继承的目的\n--- 多态提供了 “接口与实现分离”。\n多态不但能改变程序的组织架构和可读性，更便利与开发出 “可扩充” 的程序。\n继承是多态的基础，多态是继承的目的。\n合理的运用基于类继承的多态、基于接口继承的多态和基于模版的多态，能增强程序的简洁性、灵活性、可维护性、可重用性和可扩展性\n\n函数式编程\n1 头等函数 在该语言中是一等公民，可当数据类型一样使用\n2 高阶函数 函数可作为参数传递，可作为返回值输出\n\njs 应用开发常用的两种编程范式：\n原型继承（js 的 oop 是通过原型继承实现的）\n函数式编程（closures，first class functions， lambdas）',charsets:{cjk:!0}},{title:"JS设计模式",frontmatter:{title:"JS设计模式",date:"2022-06-02T19:55:20.000Z",permalink:"/pages/427ffd/",categories:["views","技术"],tags:["设计模式"]},regularPath:"/views/02.%E6%8A%80%E6%9C%AF/13.JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html",relativePath:"views/02.技术/13.JS设计模式.md",key:"v-43c814b9",path:"/pages/427ffd/",headers:[{level:2,title:"设计模式分类",slug:"设计模式分类",normalizedTitle:"设计模式分类",charIndex:2},{level:3,title:"创建型",slug:"创建型",normalizedTitle:"创建型",charIndex:13},{level:3,title:"结构类",slug:"结构类",normalizedTitle:"结构类",charIndex:74},{level:3,title:"行为型",slug:"行为型",normalizedTitle:"行为型",charIndex:154}],lastUpdated:"6/7/2022, 4:54:23 PM",lastUpdatedTimestamp:1654620863e3,headersStr:"设计模式分类 创建型 结构类 行为型",content:"# 设计模式分类\n\n\n# 创建型\n\n1 - 单例模式\n\n2 - 原型模式\n\n3 - 工厂模式\n\n4 - 抽象工厂模式\n\n5 - 建造者模式\n\n\n# 结构类\n\n1 - 适配器模式\n\n2 - 装饰器模式\n\n3 - 代理模式\n\n4 - 外观模式\n\n5 - 桥接模式\n\n6 - 组合模式\n\n7 - 亨元模式\n\n\n# 行为型\n\n1 - 观察者模式\n\n2 - 迭代器模式\n\n3 - 策略模式\n\n4 - 模板方法模式\n\n5 - 职责链模式\n\n6 - 命令模式\n\n7 - 备忘录模式\n\n8 - 状态模式\n\n9 - 访问者模式\n\n10 - 中介者模式\n\n11 - 解释器模式",normalizedContent:"# 设计模式分类\n\n\n# 创建型\n\n1 - 单例模式\n\n2 - 原型模式\n\n3 - 工厂模式\n\n4 - 抽象工厂模式\n\n5 - 建造者模式\n\n\n# 结构类\n\n1 - 适配器模式\n\n2 - 装饰器模式\n\n3 - 代理模式\n\n4 - 外观模式\n\n5 - 桥接模式\n\n6 - 组合模式\n\n7 - 亨元模式\n\n\n# 行为型\n\n1 - 观察者模式\n\n2 - 迭代器模式\n\n3 - 策略模式\n\n4 - 模板方法模式\n\n5 - 职责链模式\n\n6 - 命令模式\n\n7 - 备忘录模式\n\n8 - 状态模式\n\n9 - 访问者模式\n\n10 - 中介者模式\n\n11 - 解释器模式",charsets:{cjk:!0}},{title:"谷歌调试快捷键",frontmatter:{title:"谷歌调试快捷键",date:"2022-06-23T20:01:44.000Z",permalink:"/pages/423757/",categories:["views","技术"],tags:["快捷键"]},regularPath:"/views/02.%E6%8A%80%E6%9C%AF/14.%E8%B0%B7%E6%AD%8C%E8%B0%83%E8%AF%95%E5%BF%AB%E6%8D%B7%E9%94%AE.html",relativePath:"views/02.技术/14.谷歌调试快捷键.md",key:"v-028a6853",path:"/pages/423757/",headers:[{level:2,title:"谷歌调试常用快捷键收录",slug:"谷歌调试常用快捷键收录",normalizedTitle:"谷歌调试常用快捷键收录",charIndex:2},{level:3,title:"window",slug:"window",normalizedTitle:"window",charIndex:1641},{level:3,title:"浏览器",slug:"浏览器",normalizedTitle:"浏览器",charIndex:1675}],lastUpdated:"6/23/2022, 1:56:50 PM",lastUpdatedTimestamp:165599261e4,headersStr:"谷歌调试常用快捷键收录 window 浏览器",content:'# 谷歌调试常用快捷键收录\n\n1.Console()\nCtrl + L : 清除控制台消息\nTab : 自动完成通用常缀\n→: 接受建议\nCtrl  +  U: 清除console的提示\n↓ / ↑ :选中下一行/上一行\nEnter: 执行代码或者命令\n\n\n2.Debugger(调试面板)\nF8  or  Ctrl + \\: 暂停/继续\nF10  or  Ctrl + \': 单步执行\nF11  or Ctrl +;: 单步进入\nShift + F11  or Ctrl + Shift+;: 单步退出\nCtrl +./Ctrl+, : 上一帧/下一帧\nCtrl +Shift+E: 被选中代码在控制台中打印出console信息\nCtrl + Shift + A: 添加到debugger的watch里面,可以关注你选中内容的变化\nCtrl + B: 打断点/取消断点(很实用)\n\n\n3.Text Editor(文本编辑器)\nCtrl + Shift+P : 跳转到某个成员\nCtrl + Space: 自动完成\nCtrl + G : 跳转到某行\nCtrl + Shift + E\nAlt + -: 跳转到之前的编辑位置\nAlt + +: 跳转到下一个编辑的位置\nCtrl + /: 快捷键注释\nAlt + ↑: 调整CSS度量单位,每次增加一个单元\nAlt + ↓: 调整CSS度量单位,每次减少一个单元\nAlt + PageUp: 调整CSS度量单位,每次**增加**10个单元\nAlt + PageDown: 调整CSS度量单位,每次**减少**10个单元\nCtrl + D: 选择选中内容的下一个匹配内容\nCtrl + U: 软撤销\nCtrl + M: 进入匹配的括号\nAlt + W: 关闭编辑便签\nAlt + O: 切换相同名字的或者不同后缀的文件\n\n\n4.All Panels(所有面板)\nCtrl + [ / Ctrl + ]:切换面板(向左向右)\nCtrl + Shift + [ / Ctrl + Shift+] : 返回之前之后的面板状态\nCtrl + Tilde[~]:显示Console\nEsc: 小菜单弹出隐藏\nCtrl + Shift + M: 进入仿真设备模式(移动平板屏幕)\nCtrl + Shift + D: 切换调试面板在底部还是侧边栏展示\nCtrl + F: 搜索内容\nCtrl + Shift + F: 在所有代码中搜索(跨域),很实用\nCtrl + Shift + C: 选择页面节点并且查看代码,最常用!!\nCtrl + P: 快速切换源码文件,很常用!\nStyle Pane(风格面板)\nTab / Shift + Tab: 下一个/上一个属性\n↑: 增加CSS度量单位->1单元\n↓:减少CSS度量单位->1单元\nPageUporShift + ↑:增加CSS度量单位->10单元\nPageDownorShift + ↓:减少CSS度量单位->10单元\nShift + PageUp:增加CSS度量单位->100单元\nShift + PageDown:减少CSS度量单位->100单元\nAlt + ↑:增加CSS度量单位->0.1单元\nAlt + ↓:减少CSS度量单位->0.1单元\n\n\n5.Timeline Panel(时间轴面板)\nCtrl + E:开始\nCtrl + S:保存时间轴数据\nCtrl + O:加载时间轴数据\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n\n\n\n# window\n\nAlt + 空格键 + N：最小化当前窗口\n\n\n# 浏览器\n\nCtrl + T：新建标签页，并跳转到该标签页\nCtrl + Shift +W：关闭所有打开的标签页和浏览器\nCtrl + L：快速选中地址栏中的地址\nCtrl + D：将当前网页保存为书签\nCtrl + Tab：跳转到下一个打开的标签页\nCtrl + Shift + Tab：跳转到上一个打开的标签页\nCtrl + Shift + Delete：打开"清除浏览数据"选项\nCtrl + R ：刷新 类似 F5\n',normalizedContent:'# 谷歌调试常用快捷键收录\n\n1.console()\nctrl + l : 清除控制台消息\ntab : 自动完成通用常缀\n→: 接受建议\nctrl  +  u: 清除console的提示\n↓ / ↑ :选中下一行/上一行\nenter: 执行代码或者命令\n\n\n2.debugger(调试面板)\nf8  or  ctrl + \\: 暂停/继续\nf10  or  ctrl + \': 单步执行\nf11  or ctrl +;: 单步进入\nshift + f11  or ctrl + shift+;: 单步退出\nctrl +./ctrl+, : 上一帧/下一帧\nctrl +shift+e: 被选中代码在控制台中打印出console信息\nctrl + shift + a: 添加到debugger的watch里面,可以关注你选中内容的变化\nctrl + b: 打断点/取消断点(很实用)\n\n\n3.text editor(文本编辑器)\nctrl + shift+p : 跳转到某个成员\nctrl + space: 自动完成\nctrl + g : 跳转到某行\nctrl + shift + e\nalt + -: 跳转到之前的编辑位置\nalt + +: 跳转到下一个编辑的位置\nctrl + /: 快捷键注释\nalt + ↑: 调整css度量单位,每次增加一个单元\nalt + ↓: 调整css度量单位,每次减少一个单元\nalt + pageup: 调整css度量单位,每次**增加**10个单元\nalt + pagedown: 调整css度量单位,每次**减少**10个单元\nctrl + d: 选择选中内容的下一个匹配内容\nctrl + u: 软撤销\nctrl + m: 进入匹配的括号\nalt + w: 关闭编辑便签\nalt + o: 切换相同名字的或者不同后缀的文件\n\n\n4.all panels(所有面板)\nctrl + [ / ctrl + ]:切换面板(向左向右)\nctrl + shift + [ / ctrl + shift+] : 返回之前之后的面板状态\nctrl + tilde[~]:显示console\nesc: 小菜单弹出隐藏\nctrl + shift + m: 进入仿真设备模式(移动平板屏幕)\nctrl + shift + d: 切换调试面板在底部还是侧边栏展示\nctrl + f: 搜索内容\nctrl + shift + f: 在所有代码中搜索(跨域),很实用\nctrl + shift + c: 选择页面节点并且查看代码,最常用!!\nctrl + p: 快速切换源码文件,很常用!\nstyle pane(风格面板)\ntab / shift + tab: 下一个/上一个属性\n↑: 增加css度量单位->1单元\n↓:减少css度量单位->1单元\npageuporshift + ↑:增加css度量单位->10单元\npagedownorshift + ↓:减少css度量单位->10单元\nshift + pageup:增加css度量单位->100单元\nshift + pagedown:减少css度量单位->100单元\nalt + ↑:增加css度量单位->0.1单元\nalt + ↓:减少css度量单位->0.1单元\n\n\n5.timeline panel(时间轴面板)\nctrl + e:开始\nctrl + s:保存时间轴数据\nctrl + o:加载时间轴数据\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n\n\n\n# window\n\nalt + 空格键 + n：最小化当前窗口\n\n\n# 浏览器\n\nctrl + t：新建标签页，并跳转到该标签页\nctrl + shift +w：关闭所有打开的标签页和浏览器\nctrl + l：快速选中地址栏中的地址\nctrl + d：将当前网页保存为书签\nctrl + tab：跳转到下一个打开的标签页\nctrl + shift + tab：跳转到上一个打开的标签页\nctrl + shift + delete：打开"清除浏览数据"选项\nctrl + r ：刷新 类似 f5\n',charsets:{cjk:!0}},{title:"前端常用设计模式",frontmatter:{title:"前端常用设计模式",date:"2023-04-01T19:57:13.000Z",permalink:"/pages/a72718/",categories:["views","技术"],tags:[null]},regularPath:"/views/02.%E6%8A%80%E6%9C%AF/15.%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html",relativePath:"views/02.技术/15.前端常用设计模式.md",key:"v-02e7991c",path:"/pages/a72718/",headers:[{level:2,title:"工厂模式",slug:"工厂模式",normalizedTitle:"工厂模式",charIndex:17},{level:2,title:"单例模式",slug:"单例模式",normalizedTitle:"单例模式",charIndex:26},{level:2,title:"观察者/发布订阅模式",slug:"观察者-发布订阅模式",normalizedTitle:"观察者 / 发布订阅模式",charIndex:35},{level:2,title:"迭代器模式",slug:"迭代器模式",normalizedTitle:"迭代器模式",charIndex:52},{level:2,title:"装饰器模式",slug:"装饰器模式",normalizedTitle:"装饰器模式",charIndex:62},{level:2,title:"代理模式",slug:"代理模式",normalizedTitle:"代理模式",charIndex:72},{level:2,title:"原型模式",slug:"原型模式",normalizedTitle:"原型模式",charIndex:81}],lastUpdated:"4/1/2023, 12:50:49 PM",lastUpdatedTimestamp:1680353449e3,headersStr:"工厂模式 单例模式 观察者/发布订阅模式 迭代器模式 装饰器模式 代理模式 原型模式",content:"# 前端常用设计模式七种\n\n\n# 工厂模式\n\n\n# 单例模式\n\n\n# 观察者 / 发布订阅模式\n\n\n# 迭代器模式\n\n\n# 装饰器模式\n\n\n# 代理模式\n\n\n# 原型模式",normalizedContent:"# 前端常用设计模式七种\n\n\n# 工厂模式\n\n\n# 单例模式\n\n\n# 观察者 / 发布订阅模式\n\n\n# 迭代器模式\n\n\n# 装饰器模式\n\n\n# 代理模式\n\n\n# 原型模式",charsets:{cjk:!0}},{title:"单行多行文本超出隐藏解决方法",frontmatter:{title:"单行多行文本超出隐藏解决方法",date:"2022-05-07T23:12:13.000Z",permalink:"/pages/43a79122/",categories:["css"],tags:["css"]},regularPath:"/views/03.UI/01.%E5%8D%95%E8%A1%8C%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E8%B6%85%E5%87%BA%E9%9A%90%E8%97%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html",relativePath:"views/03.UI/01.单行多行文本超出隐藏解决方法.md",key:"v-103bdf26",path:"/pages/43a79122/",lastUpdated:"5/25/2022, 6:17:07 AM",lastUpdatedTimestamp:1653459427e3,headersStr:null,content:"  /* 单行行文字超出变省略号 */\n.ellipsis{\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n   \n  /* 多行文字超出变省略号 */\n.ellipsis{\n  word-break: break-all;\n  overflow: hidden;          //  超出隐藏\n  text-overflow: ellipsis;   //  超出显示省略号\n  display: -webkit-box;\n  /*! autoprefixer: off */\n  -webkit-box-orient: vertical;\n  /* autoprefixer: on */ // 有时orient不会生效所以需要加上这俩段注释\n  -webkit-line-clamp: 5; // 超出省略行数\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n",normalizedContent:"  /* 单行行文字超出变省略号 */\n.ellipsis{\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n   \n  /* 多行文字超出变省略号 */\n.ellipsis{\n  word-break: break-all;\n  overflow: hidden;          //  超出隐藏\n  text-overflow: ellipsis;   //  超出显示省略号\n  display: -webkit-box;\n  /*! autoprefixer: off */\n  -webkit-box-orient: vertical;\n  /* autoprefixer: on */ // 有时orient不会生效所以需要加上这俩段注释\n  -webkit-line-clamp: 5; // 超出省略行数\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n",charsets:{cjk:!0}},{title:"flex布局优缺点",frontmatter:{title:"flex布局优缺点",date:"2022-05-26T16:44:10.000Z",permalink:"/pages/44fc09/",categories:["views","UI"],tags:["flex","css"]},regularPath:"/views/03.UI/02.flex%E5%B8%83%E5%B1%80%E4%BC%98%E7%BC%BA%E7%82%B9.html",relativePath:"views/03.UI/02.flex布局优缺点.md",key:"v-3a43f612",path:"/pages/44fc09/",headers:[{level:2,title:"css flex布局的优点:flex布局使用方便，根据flex规则很容易达到一定的布局效果。css flex布局的缺点:浏览器兼容性差，只能兼容ie9及以上。",slug:"css-flex布局的优点-flex布局使用方便-根据flex规则很容易达到一定的布局效果。css-flex布局的缺点-浏览器兼容性差-只能兼容ie9及以上。",normalizedTitle:"css flex 布局的优点:flex 布局使用方便，根据 flex 规则很容易达到一定的布局效果。css flex 布局的缺点：浏览器兼容性差，只能兼容 ie9 及以上。",charIndex:2},{level:3,title:"1.什么是flex布局？",slug:"_1-什么是flex布局",normalizedTitle:"1. 什么是 flex 布局？",charIndex:93},{level:3,title:"2.flex中涉及的概念",slug:"_2-flex中涉及的概念",normalizedTitle:"2.flex 中涉及的概念",charIndex:405},{level:3,title:"3、容器的属性",slug:"_3、容器的属性",normalizedTitle:"3、容器的属性",charIndex:842},{level:3,title:"4.项目的属性",slug:"_4-项目的属性",normalizedTitle:"4. 项目的属性",charIndex:2181}],lastUpdated:"6/7/2022, 4:54:23 PM",lastUpdatedTimestamp:1654620863e3,headersStr:"css flex布局的优点:flex布局使用方便，根据flex规则很容易达到一定的布局效果。css flex布局的缺点:浏览器兼容性差，只能兼容ie9及以上。 1.什么是flex布局？ 2.flex中涉及的概念 3、容器的属性 4.项目的属性",content:"# css flex 布局的优点:flex 布局使用方便，根据 flex 规则很容易达到一定的布局效果。css flex 布局的缺点：浏览器兼容性差，只能兼容 ie9 及以上。\n\n\n# 1. 什么是 flex 布局？\n\n官方声明：Flex 是 Flexible Box 的缩写，意思是 “灵活布局”，用于为 Box 模型提供最大的灵活性。任何容器都可以指定为灵活布局。\n\n民间说法:flex 是一种布局，类似于 block、inline-block 等。\n\nFlex 是一种布局方法，用于确保页面需要适应不同的屏幕大小和设备类型时，元素具有适当的行为。\n\nflex Box 模块旨在提供一种更有效的方法来制作、调整和分发容器中的项目布局 (基于一维)，即使它们的大小未知或动态。\n\n优点：使用方便，根据 flex 规则很容易达到一定的布局效果。\n\n缺点：浏览器兼容性比较差，只能兼容 ie9 及以上；\n\n\n# 2.flex 中涉及的概念\n\nFlex 布局的主要思想是使容器能够改变其宽度、高度 (甚至顺序)，并以最佳方式填充可用空间 (主要是为了适应所有类型的显示设备和屏幕大小)。Flex 容器扩展子项目 (伸缩项目) 以填充可用空间，或者收缩子项目以防止容器溢出。\n\nflex 的基本功能是让布局更简单，比如 “垂直居中” 等等。当然，还有更多。要搞清楚 Flex 的功能，首先要了解一些概念。\n\n具有灵活布局的元素被称为灵活容器，或简称为 “容器”。它的所有子元素自动成为容器成员，这被称为弹性项，或简称为 “项”。\n\n默认情况下，容器有两个轴：水平主轴和垂直横轴。主轴的起始位置 (与机架的交点) 称为主起点，终点位置称为主终点；。横轴的起始位置称为十字起点，结束位置称为十字终点。默认情况下，项目沿主轴排列。单个项目占用的主轴空间称为主尺寸，占用的横轴空间称为十字尺寸。只要记住 “容器”、“物品”、“主轴 (横轴)” 和 “横轴 (纵轴)” 的含义和方向就行了。\n\n\n# 3、容器的属性\n\n3.1 弯曲方向\n\n伸缩方向决定了主轴的方向 (即物品的排列方向)。它有四个可能的值：行 (默认值): 主轴是水平的，起点在容器的左端。 row-reverse: 主轴水平，起点在容器右端。-4 列：主轴垂直，起点在容器上边缘。-5 柱 - 反转：主轴垂直，起点在容器下缘。\n\n3.2 软包\n\n默认情况下，容器中的所有项目都排成一行，flex-wrap 定义了如果一行不合适，如何换行。有三种可能的值:nowrap (默认): 不换行。 wrap: wrap，第一行在顶部。 wrap-reverse: wrap，第一行在底部。\n\n3.3 柔性流\n\nflex-flow 属性是 flex-direction 属性和 flex-wrap 属性的简称，默认值是 row nowrap。\n\n3.4 对齐 - 内容对齐 - 内容定义项目在主轴上的对齐。有五种可能的值:flex-start: 与主轴的起始位置对齐，即从主轴的起始位置开始排列。如果使用伸缩方向属性来更改主轴的方向，项目的排列也会发生变化。\n\n。容器 {display:flex；弯曲方向：行；内容:flex-start；} 12345\n\n。容器 {display:flex；弯曲方向：行反转；内容:flex-start；} 12345 flex-end: 与主轴的末端位置对齐，即从主轴的末端位置开始排列。和 flex-start 一样，也和 flex-direction 有关。\n\n。容器 {display:flex；弯曲方向：行；调整内容：灵活结束；} 12345\n\n中心：中心\n\n。容器 {display:flex；弯曲方向：行；内容：居中；} 12345\n\n间距：如果有两个以上的项目，容器主轴的开始和结束位置分别为一，其他项目均匀排列，项目之间的间隔相等。排列顺序也与伸缩方向有关。如果只有两项，每边一项。如果只有一个项目，它将只排列在容器主轴的开始 141 空间 - 周围：每一个项目的两边之间的间隔相等。因此，项目之间的间隔是项目和边框之间的间隔的两倍。排列顺序也与伸缩方向有关。如果只有一项，则安排在中间。\n\n3.5 对齐项目属性\n\nalign-items 属性定义项目在横轴 (纵轴) 上的对齐方式。可以取五个值。具体的对齐方式和横轴的方向有关，假设横轴是从上到下的。Flex-start: 横轴起点对齐。 flex-end: 横轴的端点对齐。中心：横轴的中点对齐。基线：项目第一行文本的基线对齐方式。 stretch (默认值): 如果项目的高度未设置或设置为 auto，它将占据整个容器的高度。\n\n3.6 对齐 - 内容属性\n\n对齐内容属性定义多轴 (多行) 的对齐方式。如果项目只有一个轴 (一条线)，此属性无效。如果弹性方向的值为列，则此属性定义多列的对齐方式。如果该项只有一列，则该属性不能为左或右。拉伸 (默认值): 多条线占据整个横轴。 flex-start: 与横轴的起点对齐。 flex-end: 与横轴的端点对齐。中心：与横轴的中点对齐。间距：与横轴两端对齐，轴间距均匀分布。空间环绕：每个轴两侧的间隔相等。因此，轴之间的间隔是轴和框架之间的间隔的两倍。\n\n\n# 4. 项目的属性\n\n4.1 订单属性\n\n。项目 {订单:& ltinteger>。；} 123order 属性定义项目的顺序。值越小，排名越高，默认值为 0。\n\n4.2 弹性增长属性\n\n。项目 {flex-grow:& lt；number>。；} 1234flex-grow 属性定义项目的放大倍数，默认值为 0。如果所有项目的伸缩值相同，则主轴上的宽度以项目宽度为最小值均匀分布。如果没有为项目设置宽度，所有项目将平均分配主轴上的剩余宽度 (额外空间)。如果项目的伸缩值不同，则是根据相应的比例分配主轴上的剩余宽度 (额外空间)。按项目设置的宽度是最小值。如果项目设置为最大宽度，则扩大的宽度不会超过该值。\n\n4.3 伸缩属性\n\nflex-shrink 属性定义了项目的缩减比例，默认值为 1，即如果空间不足，项目将被缩减。\n\n。项目 {flex-shrink: number；} 123 如果所有项目的 flex-shrink 属性为 1，则当空间不足时，它们将被同等地缩小。如果一个项目的 flex-shrink 属性为 0，而所有其他项目为 1，则前者在空间不足时不会收缩。如果容器容器设置的 flex-wrap 没有足够的空间，如果超出，它将自动换行。所以此时设置 flex-shrink 不起作用。负值对此属性无效。\n\n4.4 弹性基础属性\n\nflex-basis 属性定义了在分配多余空间之前项目占用的主要大小。浏览器根据这个属性计算主轴是否有多余的空间。它的默认值是 auto，即项目的原始大小。\n\n。项目 {flex-basis: 长度。| 自动；} 123 可以设置为与 width 或 height 属性相同的值 (例如 350px)，项目会占用固定的空间。\n\n4.5 弹性属性\n\nflex 属性是 flex - 增长、flex - 收缩和 flex-basis 的缩写，默认值为 0 1 auto。最后两个属性是可选的。\n\n。项目 {flex:none |[& lt；' 灵活发展 & # 39；>。& lt' 伸缩收缩。>。？| | & lt' 弹性基础 & # 39；>。]} 123 此属性有两个快捷方式值：自动 (1 1 自动) 和无 (0 0 自动)。建议先使用这个属性，而不是分别编写三个单独的属性，因为浏览器会计算相关的值。如果伸缩基数之和大于父代的宽度，子代将被压缩，最后选择伸缩来进行压缩计算\n\n加权值 = son1+son2+...+sonn；\n\n那么压缩后的计算公式是\n\n压缩宽度 w =(子元素弹性基值 *(弹性收缩)/ 加权值)* 溢出值\n\n如果弹性基础的总和小于父宽度，剩余宽度将基于弹性增长值的总和；\n\n扩展宽度 w =(子元素伸缩增长值 / 所有子元素伸缩增长之和)* 残值\n\n4.6 自对齐属性\n\n自对齐属性允许单个项目具有不同于其他项目的对齐方式，并且可以覆盖对齐项目属性。默认值为 auto，这意味着继承父元素的 align-items 属性。如果没有父元素，就相当于拉伸。\n\n。项目 {align-self:auto | flex-start | flex-end | center | baseline | stretch；} 有关编程的更多知识，请访问：编程教学！！这是 css 灵活布局的优点和缺点的细节，等等",normalizedContent:"# css flex 布局的优点:flex 布局使用方便，根据 flex 规则很容易达到一定的布局效果。css flex 布局的缺点：浏览器兼容性差，只能兼容 ie9 及以上。\n\n\n# 1. 什么是 flex 布局？\n\n官方声明：flex 是 flexible box 的缩写，意思是 “灵活布局”，用于为 box 模型提供最大的灵活性。任何容器都可以指定为灵活布局。\n\n民间说法:flex 是一种布局，类似于 block、inline-block 等。\n\nflex 是一种布局方法，用于确保页面需要适应不同的屏幕大小和设备类型时，元素具有适当的行为。\n\nflex box 模块旨在提供一种更有效的方法来制作、调整和分发容器中的项目布局 (基于一维)，即使它们的大小未知或动态。\n\n优点：使用方便，根据 flex 规则很容易达到一定的布局效果。\n\n缺点：浏览器兼容性比较差，只能兼容 ie9 及以上；\n\n\n# 2.flex 中涉及的概念\n\nflex 布局的主要思想是使容器能够改变其宽度、高度 (甚至顺序)，并以最佳方式填充可用空间 (主要是为了适应所有类型的显示设备和屏幕大小)。flex 容器扩展子项目 (伸缩项目) 以填充可用空间，或者收缩子项目以防止容器溢出。\n\nflex 的基本功能是让布局更简单，比如 “垂直居中” 等等。当然，还有更多。要搞清楚 flex 的功能，首先要了解一些概念。\n\n具有灵活布局的元素被称为灵活容器，或简称为 “容器”。它的所有子元素自动成为容器成员，这被称为弹性项，或简称为 “项”。\n\n默认情况下，容器有两个轴：水平主轴和垂直横轴。主轴的起始位置 (与机架的交点) 称为主起点，终点位置称为主终点；。横轴的起始位置称为十字起点，结束位置称为十字终点。默认情况下，项目沿主轴排列。单个项目占用的主轴空间称为主尺寸，占用的横轴空间称为十字尺寸。只要记住 “容器”、“物品”、“主轴 (横轴)” 和 “横轴 (纵轴)” 的含义和方向就行了。\n\n\n# 3、容器的属性\n\n3.1 弯曲方向\n\n伸缩方向决定了主轴的方向 (即物品的排列方向)。它有四个可能的值：行 (默认值): 主轴是水平的，起点在容器的左端。 row-reverse: 主轴水平，起点在容器右端。-4 列：主轴垂直，起点在容器上边缘。-5 柱 - 反转：主轴垂直，起点在容器下缘。\n\n3.2 软包\n\n默认情况下，容器中的所有项目都排成一行，flex-wrap 定义了如果一行不合适，如何换行。有三种可能的值:nowrap (默认): 不换行。 wrap: wrap，第一行在顶部。 wrap-reverse: wrap，第一行在底部。\n\n3.3 柔性流\n\nflex-flow 属性是 flex-direction 属性和 flex-wrap 属性的简称，默认值是 row nowrap。\n\n3.4 对齐 - 内容对齐 - 内容定义项目在主轴上的对齐。有五种可能的值:flex-start: 与主轴的起始位置对齐，即从主轴的起始位置开始排列。如果使用伸缩方向属性来更改主轴的方向，项目的排列也会发生变化。\n\n。容器 {display:flex；弯曲方向：行；内容:flex-start；} 12345\n\n。容器 {display:flex；弯曲方向：行反转；内容:flex-start；} 12345 flex-end: 与主轴的末端位置对齐，即从主轴的末端位置开始排列。和 flex-start 一样，也和 flex-direction 有关。\n\n。容器 {display:flex；弯曲方向：行；调整内容：灵活结束；} 12345\n\n中心：中心\n\n。容器 {display:flex；弯曲方向：行；内容：居中；} 12345\n\n间距：如果有两个以上的项目，容器主轴的开始和结束位置分别为一，其他项目均匀排列，项目之间的间隔相等。排列顺序也与伸缩方向有关。如果只有两项，每边一项。如果只有一个项目，它将只排列在容器主轴的开始 141 空间 - 周围：每一个项目的两边之间的间隔相等。因此，项目之间的间隔是项目和边框之间的间隔的两倍。排列顺序也与伸缩方向有关。如果只有一项，则安排在中间。\n\n3.5 对齐项目属性\n\nalign-items 属性定义项目在横轴 (纵轴) 上的对齐方式。可以取五个值。具体的对齐方式和横轴的方向有关，假设横轴是从上到下的。flex-start: 横轴起点对齐。 flex-end: 横轴的端点对齐。中心：横轴的中点对齐。基线：项目第一行文本的基线对齐方式。 stretch (默认值): 如果项目的高度未设置或设置为 auto，它将占据整个容器的高度。\n\n3.6 对齐 - 内容属性\n\n对齐内容属性定义多轴 (多行) 的对齐方式。如果项目只有一个轴 (一条线)，此属性无效。如果弹性方向的值为列，则此属性定义多列的对齐方式。如果该项只有一列，则该属性不能为左或右。拉伸 (默认值): 多条线占据整个横轴。 flex-start: 与横轴的起点对齐。 flex-end: 与横轴的端点对齐。中心：与横轴的中点对齐。间距：与横轴两端对齐，轴间距均匀分布。空间环绕：每个轴两侧的间隔相等。因此，轴之间的间隔是轴和框架之间的间隔的两倍。\n\n\n# 4. 项目的属性\n\n4.1 订单属性\n\n。项目 {订单:& ltinteger>。；} 123order 属性定义项目的顺序。值越小，排名越高，默认值为 0。\n\n4.2 弹性增长属性\n\n。项目 {flex-grow:& lt；number>。；} 1234flex-grow 属性定义项目的放大倍数，默认值为 0。如果所有项目的伸缩值相同，则主轴上的宽度以项目宽度为最小值均匀分布。如果没有为项目设置宽度，所有项目将平均分配主轴上的剩余宽度 (额外空间)。如果项目的伸缩值不同，则是根据相应的比例分配主轴上的剩余宽度 (额外空间)。按项目设置的宽度是最小值。如果项目设置为最大宽度，则扩大的宽度不会超过该值。\n\n4.3 伸缩属性\n\nflex-shrink 属性定义了项目的缩减比例，默认值为 1，即如果空间不足，项目将被缩减。\n\n。项目 {flex-shrink: number；} 123 如果所有项目的 flex-shrink 属性为 1，则当空间不足时，它们将被同等地缩小。如果一个项目的 flex-shrink 属性为 0，而所有其他项目为 1，则前者在空间不足时不会收缩。如果容器容器设置的 flex-wrap 没有足够的空间，如果超出，它将自动换行。所以此时设置 flex-shrink 不起作用。负值对此属性无效。\n\n4.4 弹性基础属性\n\nflex-basis 属性定义了在分配多余空间之前项目占用的主要大小。浏览器根据这个属性计算主轴是否有多余的空间。它的默认值是 auto，即项目的原始大小。\n\n。项目 {flex-basis: 长度。| 自动；} 123 可以设置为与 width 或 height 属性相同的值 (例如 350px)，项目会占用固定的空间。\n\n4.5 弹性属性\n\nflex 属性是 flex - 增长、flex - 收缩和 flex-basis 的缩写，默认值为 0 1 auto。最后两个属性是可选的。\n\n。项目 {flex:none |[& lt；' 灵活发展 & # 39；>。& lt' 伸缩收缩。>。？| | & lt' 弹性基础 & # 39；>。]} 123 此属性有两个快捷方式值：自动 (1 1 自动) 和无 (0 0 自动)。建议先使用这个属性，而不是分别编写三个单独的属性，因为浏览器会计算相关的值。如果伸缩基数之和大于父代的宽度，子代将被压缩，最后选择伸缩来进行压缩计算\n\n加权值 = son1+son2+...+sonn；\n\n那么压缩后的计算公式是\n\n压缩宽度 w =(子元素弹性基值 *(弹性收缩)/ 加权值)* 溢出值\n\n如果弹性基础的总和小于父宽度，剩余宽度将基于弹性增长值的总和；\n\n扩展宽度 w =(子元素伸缩增长值 / 所有子元素伸缩增长之和)* 残值\n\n4.6 自对齐属性\n\n自对齐属性允许单个项目具有不同于其他项目的对齐方式，并且可以覆盖对齐项目属性。默认值为 auto，这意味着继承父元素的 align-items 属性。如果没有父元素，就相当于拉伸。\n\n。项目 {align-self:auto | flex-start | flex-end | center | baseline | stretch；} 有关编程的更多知识，请访问：编程教学！！这是 css 灵活布局的优点和缺点的细节，等等",charsets:{cjk:!0}},{title:"css速写",frontmatter:{title:"css速写",date:"2022-05-26T16:46:21.000Z",permalink:"/pages/7bc80c/",categories:["views","UI"],tags:["css"]},regularPath:"/views/03.UI/03.css%E9%80%9F%E5%86%99.html",relativePath:"views/03.UI/03.css速写.md",key:"v-04bb221c",path:"/pages/7bc80c/",headers:[{level:2,title:"Emment 基本语法",slug:"emment-基本语法",normalizedTitle:"emment 基本语法",charIndex:2},{level:2,title:"基础用法",slug:"基础用法",normalizedTitle:"基础用法",charIndex:174}],lastUpdated:"5/26/2022, 9:20:36 AM",lastUpdatedTimestamp:1653556836e3,headersStr:"Emment 基本语法 基础用法",content:'# Emment 基本语法\n\nE 代表HTML标签。\nE#id 代表id属性。\nE.class 代表class属性。\nE[attr=foo] 代表某一个特定属性。\nE{foo} 代表标签包含的内容是foo。\nE>N 代表N是E的子元素。\nE+N 代表N是E的同级元素。\nE^N 代表N是E的上级元素。\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 基础用法\n\n元素 (Elements)\n您可以使用元素的名称，如 div 或 p 来生成 HTML 标签。Emmet 没有一组可用的标签名称，可以写任何单词并将其转换为标签。也就是只要知道元素的缩写，Emmet 会自动转换成对应标签.\n形如:\n\ndiv => <div> </div>\nfoo => <foo> </foo>\nhtml:5 => 将生成html5标准的包含body为空基本dom\nhtml:xt => 生成XHTML过渡文档类型,DOCTYPE为XHTML\nhtml:4s => 生成HTML4严格文档类型,DOCTYPE为HTML 4.01\na:mail          => <a href="mailto:"></a>\na:link          => <a href="http://"></a>\nbase            => <base href="">\nbr              => <br>\nlink            => <link rel="stylesheet" href="">\nscript:src      => <script src=""><\/script>\nform:get        => <form action="" method="get"></form>\nlabel           => <label for=""></label>\ninput           => <input type="text">\ninp             => <input type="text" name="" id="">\ninput:hidden    => <input type="hidden" name=""> input:h亦可\ninput:email     => <input type="email" name="" id="">\ninput:password  => <input type="password" name="" id="">\ninput:checkbox  => <input type="checkbox" name="" id="">\ninput:radio     => <input type="radio" name="" id="">\nselect          => <select name="" id=""></select>\noption          => <option value=""></option>\nbq              => <blockquote></blockquote>\nbtn             => <button></button>\nbtn:s           => <button type="submit"></button>\nbtn:r           => <button type="reset"></button>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n1.准备工作\n编辑器使用Visual Code,下载地址访问https://code.visualstudio.com/，新建一个HTML文件，并保存。\n\n \n\n2.生成 HTML 文档初始结构\nHTML 文档的初始结构，就是包括 doctype、html、head、body 以及 meta 等内容。你只需要输入一个 “!” 就可以生成一个 HTML5 的标准文档初始结构，你没有看错，输入一个感叹号（当然是英文符号），然后按 “Tab” 键便会生成代码，就会发现生成了下面的结构：\n\n<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>\n这就是一个 HTML5 的标准结构，也是默认的 HTML 结构。如果你想生成 HTML4 的过渡型结构，那么输入指令 html:xt,然后按 “Tab” 键, 即可生成如下结构：\n\n<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">\n<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">\n<head>\n    <meta http-equiv="Content-Type" content="text/html;charset=UTF-8">\n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>\nEmmet 会自动把 doctype 给你补全了，怎么样，这样的功能会不会让你动心？简单总结一下常用的 HTML 结构指令：\n\nhtml:5 或者 ! 生成 HTML5 结构\nhtml:xt 生成 HTML4 过渡型\nhtml:4s 生成 HTML4 严格型\n3.任意一个 html 标签输入都会生成完整的闭合标签\n例如输入 p 按 tab 则 生成：<p></p>\n\n \n\n4.生成带有 id 、class 的 HTML 标签\n例如输入 div#header.section 则生成\n\n<div id="header" class="section"></div>\n \n5.生成后代：>\n例如输入p>span 则生成 \n\n<p><span></span></p>\n \n6.生成兄弟标签：+\n例如输入p+div 则生成\n\n<p></p><div></div>\n \n7.生成上级标签： ^\n例如输入ul>li>a^div 则生成\n\n<ul>\n  <li><a href=""></a></li>\n  <div></div>\n</ul>\n也可以使用多个 ^,例如输入ul>li>a^^div 则生成\n\n<ul>\n    <li><a href=""></a></li>\n</ul>\n<div></div>\n \n8.重复生成多个标签 *\n例如输入ul>li*5 则生成\n\n<ul>\n      <li></li>\n      <li></li>\n      <li></li>\n      <li></li>\n      <li></li>\n  </ul>\n \n9.生成分组的标签: ()\n例如输入ul>(li>a)*5 则生成\n\n <ul>\n      <li><a href=""></a></li>\n      <li><a href=""></a></li>\n      <li><a href=""></a></li>\n      <li><a href=""></a></li>\n      <li><a href=""></a></li>\n  </ul>\n注意和ul>li>a*5 生成是不一样的\n\n<ul>\n      <li>\n          <a href=""></a>\n          <a href=""></a>\n          <a href=""></a>\n          <a href=""></a>\n          <a href=""></a>\n      </li>\n  </ul>\n \n10.生成自定义属性：[]\n例如输入img[http://www.cnblogs.com/images/logo_small.gif][alt=www.cnblogs.com] 则生成\n\n <img src="http://www.cnblogs.com/images/logo_small.gif" alt="www.cnblogs.com" />\n \n11.生成递增的属性标签等: $\n例如输入ul>li.item$*5 则生成\n\n<ul>\n      <li class="item1"></li>\n      <li class="item2"></li>\n      <li class="item3"></li>\n      <li class="item4"></li>\n      <li class="item5"></li>\n  </ul>\n \n12.生成多位递增的呢：$$$\n例如输入ul>li.item$$$*5 则生成\n\n<ul>\n      <li class="item001"></li>\n      <li class="item002"></li>\n      <li class="item003"></li>\n      <li class="item004"></li>\n      <li class="item005"></li>\n</ul>\n想生成几位输入几个$\n\n \n13.要生成递减的呢：@-\n例如输入ul>li.item$@-*5 则生成\n\n<ul>\n      <li class="item5"></li>\n      <li class="item4"></li>\n      <li class="item3"></li>\n      <li class="item2"></li>\n      <li class="item1"></li>\n</ul>\n \n14.想要从某个特定的顺序开始呢：@N\n例如输入ul>li.item$@10*5 则生成\n\n<ul>\n   <li class="item10"></li>\n   <li class="item11"></li>\n   <li class="item12"></li>\n   <li class="item13"></li>\n   <li class="item14"></li>\n</ul>\n \n15.逆序生成到某个数：@-\n例如输入ul>li.item$@-10*5 则生成\n\n<ul>\n      <li class="item14"></li>\n      <li class="item13"></li>\n      <li class="item12"></li>\n      <li class="item11"></li>\n      <li class="item10"></li>\n  </ul>\n \n16.生成文本内容：{}\n例如输入p{我是文字内容} 则生成\n\n <p>我是文字内容</p>\n \n17.缺省元素:\n声明一个带class的div 可以不用输入div；.header+.footer 则生成:\n\n<div class="header"></div>\n<div class="footer"></div>\n \n\nEmmet 还会根据父标签进行判定例如输入ul>.item*3 则生成：\n\n<ul>\n   <li class="item"></li>\n   <li class="item"></li>\n   <li class="item"></li>\n</ul>\n \n\n下面是所有的隐式标签名称：\n\nli：用于 ul 和 ol 中\ntr：用于 table、tbody、thead 和 tfoot 中\ntd：用于 tr 中\noption：用于 select 和 optgroup 中\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n',normalizedContent:'# emment 基本语法\n\ne 代表html标签。\ne#id 代表id属性。\ne.class 代表class属性。\ne[attr=foo] 代表某一个特定属性。\ne{foo} 代表标签包含的内容是foo。\ne>n 代表n是e的子元素。\ne+n 代表n是e的同级元素。\ne^n 代表n是e的上级元素。\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 基础用法\n\n元素 (elements)\n您可以使用元素的名称，如 div 或 p 来生成 html 标签。emmet 没有一组可用的标签名称，可以写任何单词并将其转换为标签。也就是只要知道元素的缩写，emmet 会自动转换成对应标签.\n形如:\n\ndiv => <div> </div>\nfoo => <foo> </foo>\nhtml:5 => 将生成html5标准的包含body为空基本dom\nhtml:xt => 生成xhtml过渡文档类型,doctype为xhtml\nhtml:4s => 生成html4严格文档类型,doctype为html 4.01\na:mail          => <a href="mailto:"></a>\na:link          => <a href="http://"></a>\nbase            => <base href="">\nbr              => <br>\nlink            => <link rel="stylesheet" href="">\nscript:src      => <script src=""><\/script>\nform:get        => <form action="" method="get"></form>\nlabel           => <label for=""></label>\ninput           => <input type="text">\ninp             => <input type="text" name="" id="">\ninput:hidden    => <input type="hidden" name=""> input:h亦可\ninput:email     => <input type="email" name="" id="">\ninput:password  => <input type="password" name="" id="">\ninput:checkbox  => <input type="checkbox" name="" id="">\ninput:radio     => <input type="radio" name="" id="">\nselect          => <select name="" id=""></select>\noption          => <option value=""></option>\nbq              => <blockquote></blockquote>\nbtn             => <button></button>\nbtn:s           => <button type="submit"></button>\nbtn:r           => <button type="reset"></button>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n1.准备工作\n编辑器使用visual code,下载地址访问https://code.visualstudio.com/，新建一个html文件，并保存。\n\n \n\n2.生成 html 文档初始结构\nhtml 文档的初始结构，就是包括 doctype、html、head、body 以及 meta 等内容。你只需要输入一个 “!” 就可以生成一个 html5 的标准文档初始结构，你没有看错，输入一个感叹号（当然是英文符号），然后按 “tab” 键便会生成代码，就会发现生成了下面的结构：\n\n<!doctype html>\n<html lang="en">\n<head>\n    <meta charset="utf-8">\n    <title>document</title>\n</head>\n<body>\n    \n</body>\n</html>\n这就是一个 html5 的标准结构，也是默认的 html 结构。如果你想生成 html4 的过渡型结构，那么输入指令 html:xt,然后按 “tab” 键, 即可生成如下结构：\n\n<!doctype html public "-//w3c//dtd xhtml 1.0 transitional//en" "http://www.w3.org/tr/xhtml1/dtd/xhtml1-transitional.dtd">\n<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">\n<head>\n    <meta http-equiv="content-type" content="text/html;charset=utf-8">\n    <title>document</title>\n</head>\n<body>\n    \n</body>\n</html>\nemmet 会自动把 doctype 给你补全了，怎么样，这样的功能会不会让你动心？简单总结一下常用的 html 结构指令：\n\nhtml:5 或者 ! 生成 html5 结构\nhtml:xt 生成 html4 过渡型\nhtml:4s 生成 html4 严格型\n3.任意一个 html 标签输入都会生成完整的闭合标签\n例如输入 p 按 tab 则 生成：<p></p>\n\n \n\n4.生成带有 id 、class 的 html 标签\n例如输入 div#header.section 则生成\n\n<div id="header" class="section"></div>\n \n5.生成后代：>\n例如输入p>span 则生成 \n\n<p><span></span></p>\n \n6.生成兄弟标签：+\n例如输入p+div 则生成\n\n<p></p><div></div>\n \n7.生成上级标签： ^\n例如输入ul>li>a^div 则生成\n\n<ul>\n  <li><a href=""></a></li>\n  <div></div>\n</ul>\n也可以使用多个 ^,例如输入ul>li>a^^div 则生成\n\n<ul>\n    <li><a href=""></a></li>\n</ul>\n<div></div>\n \n8.重复生成多个标签 *\n例如输入ul>li*5 则生成\n\n<ul>\n      <li></li>\n      <li></li>\n      <li></li>\n      <li></li>\n      <li></li>\n  </ul>\n \n9.生成分组的标签: ()\n例如输入ul>(li>a)*5 则生成\n\n <ul>\n      <li><a href=""></a></li>\n      <li><a href=""></a></li>\n      <li><a href=""></a></li>\n      <li><a href=""></a></li>\n      <li><a href=""></a></li>\n  </ul>\n注意和ul>li>a*5 生成是不一样的\n\n<ul>\n      <li>\n          <a href=""></a>\n          <a href=""></a>\n          <a href=""></a>\n          <a href=""></a>\n          <a href=""></a>\n      </li>\n  </ul>\n \n10.生成自定义属性：[]\n例如输入img[http://www.cnblogs.com/images/logo_small.gif][alt=www.cnblogs.com] 则生成\n\n <img src="http://www.cnblogs.com/images/logo_small.gif" alt="www.cnblogs.com" />\n \n11.生成递增的属性标签等: $\n例如输入ul>li.item$*5 则生成\n\n<ul>\n      <li class="item1"></li>\n      <li class="item2"></li>\n      <li class="item3"></li>\n      <li class="item4"></li>\n      <li class="item5"></li>\n  </ul>\n \n12.生成多位递增的呢：$$$\n例如输入ul>li.item$$$*5 则生成\n\n<ul>\n      <li class="item001"></li>\n      <li class="item002"></li>\n      <li class="item003"></li>\n      <li class="item004"></li>\n      <li class="item005"></li>\n</ul>\n想生成几位输入几个$\n\n \n13.要生成递减的呢：@-\n例如输入ul>li.item$@-*5 则生成\n\n<ul>\n      <li class="item5"></li>\n      <li class="item4"></li>\n      <li class="item3"></li>\n      <li class="item2"></li>\n      <li class="item1"></li>\n</ul>\n \n14.想要从某个特定的顺序开始呢：@n\n例如输入ul>li.item$@10*5 则生成\n\n<ul>\n   <li class="item10"></li>\n   <li class="item11"></li>\n   <li class="item12"></li>\n   <li class="item13"></li>\n   <li class="item14"></li>\n</ul>\n \n15.逆序生成到某个数：@-\n例如输入ul>li.item$@-10*5 则生成\n\n<ul>\n      <li class="item14"></li>\n      <li class="item13"></li>\n      <li class="item12"></li>\n      <li class="item11"></li>\n      <li class="item10"></li>\n  </ul>\n \n16.生成文本内容：{}\n例如输入p{我是文字内容} 则生成\n\n <p>我是文字内容</p>\n \n17.缺省元素:\n声明一个带class的div 可以不用输入div；.header+.footer 则生成:\n\n<div class="header"></div>\n<div class="footer"></div>\n \n\nemmet 还会根据父标签进行判定例如输入ul>.item*3 则生成：\n\n<ul>\n   <li class="item"></li>\n   <li class="item"></li>\n   <li class="item"></li>\n</ul>\n \n\n下面是所有的隐式标签名称：\n\nli：用于 ul 和 ol 中\ntr：用于 table、tbody、thead 和 tfoot 中\ntd：用于 tr 中\noption：用于 select 和 optgroup 中\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n',charsets:{cjk:!0}},{title:"网站",frontmatter:{title:"网站",permalink:"/pages/beb6c0bd8a66cea6",date:"2021-03-17T11:33:04.000Z",article:!1},regularPath:"/views/04.%E6%94%B6%E8%97%8F/01.%E7%BD%91%E7%AB%99.html",relativePath:"views/04.收藏/01.网站.md",key:"v-c75e5df8",path:"/pages/beb6c0bd8a66cea6/",headers:[{level:2,title:"文档",slug:"文档",normalizedTitle:"文档",charIndex:12},{level:2,title:"社区",slug:"社区",normalizedTitle:"社区",charIndex:200},{level:2,title:"博客",slug:"博客",normalizedTitle:"博客",charIndex:397},{level:2,title:"电子书",slug:"电子书",normalizedTitle:"电子书",charIndex:461},{level:2,title:"文章",slug:"文章",normalizedTitle:"文章",charIndex:343},{level:2,title:"科学上网",slug:"科学上网",normalizedTitle:"科学上网",charIndex:528},{level:2,title:"视频",slug:"视频",normalizedTitle:"视频",charIndex:592},{level:3,title:"电视直播",slug:"电视直播",normalizedTitle:"电视直播",charIndex:727},{level:2,title:"Github",slug:"github",normalizedTitle:"github",charIndex:207},{level:2,title:"在线工具",slug:"在线工具",normalizedTitle:"在线工具",charIndex:848},{level:3,title:"开发",slug:"开发",normalizedTitle:"开发",charIndex:190},{level:3,title:"代码编辑",slug:"代码编辑",normalizedTitle:"代码编辑",charIndex:926},{level:3,title:"Emoji表情",slug:"emoji表情",normalizedTitle:"emoji 表情",charIndex:990},{level:3,title:"图片工具",slug:"图片工具",normalizedTitle:"图片工具",charIndex:1094},{level:3,title:"作图",slug:"作图",normalizedTitle:"作图",charIndex:1281},{level:3,title:"CSS",slug:"css",normalizedTitle:"css",charIndex:515},{level:3,title:"CDN加速",slug:"cdn加速",normalizedTitle:"cdn 加速",charIndex:1558},{level:3,title:"正则",slug:"正则",normalizedTitle:"正则",charIndex:1619},{level:3,title:"其他",slug:"其他",normalizedTitle:"其他",charIndex:1636},{level:2,title:"设计",slug:"设计",normalizedTitle:"设计",charIndex:371},{level:3,title:"图库",slug:"图库",normalizedTitle:"图库",charIndex:2640},{level:2,title:"有趣",slug:"有趣",normalizedTitle:"有趣",charIndex:2801},{level:2,title:"交互",slug:"交互",normalizedTitle:"交互",charIndex:1773},{level:2,title:"教程",slug:"教程",normalizedTitle:"教程",charIndex:67},{level:2,title:"产品",slug:"产品",normalizedTitle:"产品",charIndex:3541},{level:2,title:"实用",slug:"实用",normalizedTitle:"实用",charIndex:3590},{level:2,title:"Talk",slug:"talk",normalizedTitle:"talk",charIndex:3872},{level:2,title:"算法",slug:"算法",normalizedTitle:"算法",charIndex:1711},{level:2,title:"生活",slug:"生活",normalizedTitle:"生活",charIndex:3952}],excerpt:'<h1 id="个人收藏夹"><a class="header-anchor" href="#个人收藏夹">#</a> 个人收藏夹</h1>\n',lastUpdated:"4/28/2022, 6:08:46 PM",lastUpdatedTimestamp:1651169326e3,headersStr:"文档 社区 博客 电子书 文章 科学上网 视频 电视直播 Github 在线工具 开发 代码编辑 Emoji表情 图片工具 作图 CSS CDN加速 正则 其他 设计 图库 有趣 交互 教程 产品 实用 Talk 算法 生活",content:"# 个人收藏夹\n\n\n# 文档\n\n * MDN | MDN-JS 标准内置对象 Web 技术权威文档\n * 现代 JavaScript 教程 以最新标准为基准的 JS 教程\n * ES5 教程 阮一峰的 JS 教程\n * ES6 教程 阮一峰的 ES6 教程\n * Bash 脚本教程 阮一峰编写\n * ECMA ECMA 官网\n * 菜鸟教程 涵盖多种语言的初级教程\n * 腾讯云开发者手册\n\n\n# 社区\n\n * Github 程序员同性交友社区\n * 掘金 一个帮助开发者成长的社区\n * 简书 有很多频道的创作社区\n * 思否 解决技术问题的社区\n * stack overflow 同上，外网的\n * InfoQ\n * V2EX\n * 鱼塘热榜 划水网站，收集了很多网站，当天热门文章\n * 码力全开资源库 很全很强大，独立开发者 / 设计干货 / 优质利器 / 工具资源...\n\n\n# 博客\n\n * 阮一峰的网络日志\n * samanthaming 对前端小知识点的总结，并为每个知识点制作精美的小卡片。\n\n\n# 电子书\n\n * 前端电子书收集\n * SoBooks 免费的电子书资源网站\n\n\n# 文章\n\n * 灵活运用 CSS 开发技巧\n\n\n# 科学上网\n\n * 谷歌 chrome 商店访问助手\n\n * 谷歌云 (GCP) 一键搭建 V2Ray 让你畅快科学上网\n\n\n# 视频\n\n * 慕课网 实战视频教程\n * 妙味课堂 比较系统的前端入门视频教程\n * 中国大学 MOOC 涵盖计算机、外语、心理学等专业免费课程\n * bilibili B 站，上面也有一些可供学习的免费视频\n * egghead 质量还不错的短视频教程，外网\n\n\n# 电视直播\n\n * CCTV、卫视高清直播\n\n\n# Github\n\n * github 短域名服务\n * shields 徽章图标\n * followers 全球排名\n * star-history 展示一个项目 Stars 增长曲线\n\n\n# 在线工具\n\n\n# 开发\n\n * Can I use 查看属性和方法的兼容性\n * 30 seconds of code 收集了许多有用的代码小片段\n\n\n# 代码编辑\n\n * codepen 在线代码编辑与演示\n * codesandbox 内嵌 VSCode 的在线 IDE\n\n\n# Emoji 表情\n\n * emoji 表情\n * emoji 表情备忘录\n * gitmoji 通过 emoji 表达 git 的操作内容\n\n> windows 系统下按Win+.快速打开表情选择框\n\n\n# 图片工具\n\n * tinypng 图片压缩 压缩 png 很有用\n * Squoosh 谷歌出品在线免费图片压缩工具\n * waifu2x 通过卷积网络放大图片\n * vectormagic 转换矢量图\n * vectorizer 真正的 png 转 svg 神器\n * 在线 AI 图片处理 黑白修复、无损放大、动漫化、铅笔画等。\n * remove AI 抠图\n\n\n# 作图\n\n * processon 在线作图 流程图、思维导图、原型图等\n * 百度脑图 思维导图\n\n\n# CSS\n\n * CSS Tricks CSS 技巧收集与演示\n * CSS 生成器\n * CSS 渐变生成器\n * CSS3-Box Shadow (阴影)\n * 贝塞尔曲线生成器\n * 花纹背景生成器\n * 花纹背景 - pattern.css\n * 3D 字体\n * css-tricks css 技巧文章\n * You-need-to-know-css CSS 的各种 DEMO，很全\n * animista CSS 动画可视化工具\n\n\n# CDN 加速\n\n * jsDelivr 国外的一家优秀的公共 CDN 服务提供商\n * unpkg cdn 服务\n\n\n# 正则\n\n * 正则可视化\n\n\n# 其他\n\n * Linux 命令手册\n * 代码图片生成器\n\n\n# 设计\n\n * 创造师导航\n * 设计师网址导航\n * remove AI 抠图，抠图算法很厉害\n * Manypixels 插画\n * Undraw 插画\n * uimovement 能从这个网站找到不少动画交互的灵感\n * awwwards 是一个一个专门为设计精美的网站以及富有创意的网站颁奖的网站\n * dribbble 经常能在上面找到很多有创意好看的 gif 或者图片\n * Bēhance dribbble 是设计师的微博，Bēhance 是设计师的博客\n * Logojoy 使用 ai 做 logo 的网站，做出来的 logo 质量还不错。\n * brandmark 另一个在线制作 logo 网站\n * instant 又一个 logo 制作网站\n * namecheap 又一个 logo 制作网站\n * logo-maker 又一个 logo 制作网站 这个更简单点 就是选模板之后微调\n * coolors 帮你在线配色的网站 你能找到不少配色灵感\n * colorhunt 另一个配色网站\n * uigradients 渐变色网站\n * designcap 在线海报设计\n * Flat UI 色表 Flat UI 色表\n * 0to255 颜色梯度\n * Ikonate 提供免费的图标 icons\n * remixicon 又一个提供免费图标 icons\n * feather 免费的 icons\n * nord 北欧性冷淡风主题配色\n * Unsplash 提供免费的高清图片\n * Pexels 提供免费的高清图片\n * colorkitty 从你的图片中提取配色\n * design.youzan 有赞设计原则\n\n * iconfont 阿里巴巴矢量图标库\n\n * undraw 免费的矢量插画\n\n * icomoon 矢量图标库\n\n * cssicon 所有的 icon 都是纯 css 画的 缺点：icon 不够多\n\n * CSS triangle generator 帮你快速用 css 做出三角形\n\n * clippy 在线帮你使用 css clip-path 做出各种形状的图形\n\n * Lorem Picsum 提供免费的占位图\n\n * Canva 可画 生成插画、封面、海报、头像等\n\n\n# 图库\n\n * uigradients 渐变色生成工具\n * freepik banner 图库\n * 觅元素一天免费下载十张 psd\n * 搞定设计 可以抠图\n * vectorizer 真正的 png 转 svg 神器\n * 站酷\n * 花瓣\n * 虎克 Ps 学习教程\n * beTheme\n * UI 中国\n\n\n# 有趣\n\n * 奇趣网站收藏家 收藏了很多有趣的网站\n * 帮你百度一下 可以 点我测试一下 -\n * 国际版 同 帮我百度一下 - 点我测试一下 -\n * wallhaven 壁纸网站 -\n * URL 地址播放 Emojis 动画 在地址栏里面播放 emoji\n * Can't Unsee 强烈建议前端、客户端、UI 开发的同学玩下，检查一下自己对设计稿的敏感度怎么样\n * ggtalk 平时一直在听的一个技术博客\n * awesome-comment 里面收集了很多有趣的代码注释\n * text-img 都将图片转化为 ascii 用来写注释\n * weird-fonts 将普通字母转化为 特殊 unicode\n * snake 在地址栏里面玩贪吃蛇\n * zero-width-lib 利用零宽度字符实现 隐形水印、加密信息分享、逃脱词匹配，很有创意\n * abbreviations 查看一个简写是什么意思的网站\n * magi ai 搜索神器，超屌\n * 诺基亚短信图片生成器\n\n\n# 交互\n\n * 微交互 里面收集了市面上很多很好的微交互例子 值得学习\n * Little Big Details 同上，一个国外微交互汇集网站\n * cruip 登录页的各种页面设计，可以免费下载模板\n * Comixify 一个波兰团队做了非常好玩的工具，可以把视频自动转成漫画，上图是他们提供的 demo，效果很棒。\n * taiko-web 太鼓达人网页版 只能说很 6\n\n\n# 教程\n\n * npx 教你怎么合理的使用 npx\n * hacksplaining 网络安全学习网站\n * mobile-web-best-practice 移动 web 最佳实践\n\n\n# 产品\n\n * 产品大牛 什么有很多完整的产品原型可以借鉴\n * 磨刀 快速出 ui 原型\n\n\n# 实用\n\n * browser-update 浏览器版本更新提示插件\n * typeform 一个国外的在线调查问卷网站\n * VideoFk VideoFk 视频在线解析下载\n * 全历史 历史内容聚合网站\n * UzerMe 云端办公工具\n * SoBooks 强大的电子书资源网站\n * 稿定设计 键式设计工具 + 智能抠图\n * 大力盘 百度网盘搜索\n * ENFI 下载器 不限速下载器\n * 来画视频 像做 PPT 一样做短视频\n * Arkie 海报制作工具\n * 优品 PPT\n * 比格 PPT\n * 高清免费图片\n * 高清免费图片 2\n\n\n# Talk\n\n * peerigon-talks 收集了不少有意思的 talks\n\n\n# 算法\n\n * leetcode 用 js 刷 leetcode\n\n\n# 生活\n\n * Ventusky 风雨气温图",normalizedContent:"# 个人收藏夹\n\n\n# 文档\n\n * mdn | mdn-js 标准内置对象 web 技术权威文档\n * 现代 javascript 教程 以最新标准为基准的 js 教程\n * es5 教程 阮一峰的 js 教程\n * es6 教程 阮一峰的 es6 教程\n * bash 脚本教程 阮一峰编写\n * ecma ecma 官网\n * 菜鸟教程 涵盖多种语言的初级教程\n * 腾讯云开发者手册\n\n\n# 社区\n\n * github 程序员同性交友社区\n * 掘金 一个帮助开发者成长的社区\n * 简书 有很多频道的创作社区\n * 思否 解决技术问题的社区\n * stack overflow 同上，外网的\n * infoq\n * v2ex\n * 鱼塘热榜 划水网站，收集了很多网站，当天热门文章\n * 码力全开资源库 很全很强大，独立开发者 / 设计干货 / 优质利器 / 工具资源...\n\n\n# 博客\n\n * 阮一峰的网络日志\n * samanthaming 对前端小知识点的总结，并为每个知识点制作精美的小卡片。\n\n\n# 电子书\n\n * 前端电子书收集\n * sobooks 免费的电子书资源网站\n\n\n# 文章\n\n * 灵活运用 css 开发技巧\n\n\n# 科学上网\n\n * 谷歌 chrome 商店访问助手\n\n * 谷歌云 (gcp) 一键搭建 v2ray 让你畅快科学上网\n\n\n# 视频\n\n * 慕课网 实战视频教程\n * 妙味课堂 比较系统的前端入门视频教程\n * 中国大学 mooc 涵盖计算机、外语、心理学等专业免费课程\n * bilibili b 站，上面也有一些可供学习的免费视频\n * egghead 质量还不错的短视频教程，外网\n\n\n# 电视直播\n\n * cctv、卫视高清直播\n\n\n# github\n\n * github 短域名服务\n * shields 徽章图标\n * followers 全球排名\n * star-history 展示一个项目 stars 增长曲线\n\n\n# 在线工具\n\n\n# 开发\n\n * can i use 查看属性和方法的兼容性\n * 30 seconds of code 收集了许多有用的代码小片段\n\n\n# 代码编辑\n\n * codepen 在线代码编辑与演示\n * codesandbox 内嵌 vscode 的在线 ide\n\n\n# emoji 表情\n\n * emoji 表情\n * emoji 表情备忘录\n * gitmoji 通过 emoji 表达 git 的操作内容\n\n> windows 系统下按win+.快速打开表情选择框\n\n\n# 图片工具\n\n * tinypng 图片压缩 压缩 png 很有用\n * squoosh 谷歌出品在线免费图片压缩工具\n * waifu2x 通过卷积网络放大图片\n * vectormagic 转换矢量图\n * vectorizer 真正的 png 转 svg 神器\n * 在线 ai 图片处理 黑白修复、无损放大、动漫化、铅笔画等。\n * remove ai 抠图\n\n\n# 作图\n\n * processon 在线作图 流程图、思维导图、原型图等\n * 百度脑图 思维导图\n\n\n# css\n\n * css tricks css 技巧收集与演示\n * css 生成器\n * css 渐变生成器\n * css3-box shadow (阴影)\n * 贝塞尔曲线生成器\n * 花纹背景生成器\n * 花纹背景 - pattern.css\n * 3d 字体\n * css-tricks css 技巧文章\n * you-need-to-know-css css 的各种 demo，很全\n * animista css 动画可视化工具\n\n\n# cdn 加速\n\n * jsdelivr 国外的一家优秀的公共 cdn 服务提供商\n * unpkg cdn 服务\n\n\n# 正则\n\n * 正则可视化\n\n\n# 其他\n\n * linux 命令手册\n * 代码图片生成器\n\n\n# 设计\n\n * 创造师导航\n * 设计师网址导航\n * remove ai 抠图，抠图算法很厉害\n * manypixels 插画\n * undraw 插画\n * uimovement 能从这个网站找到不少动画交互的灵感\n * awwwards 是一个一个专门为设计精美的网站以及富有创意的网站颁奖的网站\n * dribbble 经常能在上面找到很多有创意好看的 gif 或者图片\n * behance dribbble 是设计师的微博，behance 是设计师的博客\n * logojoy 使用 ai 做 logo 的网站，做出来的 logo 质量还不错。\n * brandmark 另一个在线制作 logo 网站\n * instant 又一个 logo 制作网站\n * namecheap 又一个 logo 制作网站\n * logo-maker 又一个 logo 制作网站 这个更简单点 就是选模板之后微调\n * coolors 帮你在线配色的网站 你能找到不少配色灵感\n * colorhunt 另一个配色网站\n * uigradients 渐变色网站\n * designcap 在线海报设计\n * flat ui 色表 flat ui 色表\n * 0to255 颜色梯度\n * ikonate 提供免费的图标 icons\n * remixicon 又一个提供免费图标 icons\n * feather 免费的 icons\n * nord 北欧性冷淡风主题配色\n * unsplash 提供免费的高清图片\n * pexels 提供免费的高清图片\n * colorkitty 从你的图片中提取配色\n * design.youzan 有赞设计原则\n\n * iconfont 阿里巴巴矢量图标库\n\n * undraw 免费的矢量插画\n\n * icomoon 矢量图标库\n\n * cssicon 所有的 icon 都是纯 css 画的 缺点：icon 不够多\n\n * css triangle generator 帮你快速用 css 做出三角形\n\n * clippy 在线帮你使用 css clip-path 做出各种形状的图形\n\n * lorem picsum 提供免费的占位图\n\n * canva 可画 生成插画、封面、海报、头像等\n\n\n# 图库\n\n * uigradients 渐变色生成工具\n * freepik banner 图库\n * 觅元素一天免费下载十张 psd\n * 搞定设计 可以抠图\n * vectorizer 真正的 png 转 svg 神器\n * 站酷\n * 花瓣\n * 虎克 ps 学习教程\n * betheme\n * ui 中国\n\n\n# 有趣\n\n * 奇趣网站收藏家 收藏了很多有趣的网站\n * 帮你百度一下 可以 点我测试一下 -\n * 国际版 同 帮我百度一下 - 点我测试一下 -\n * wallhaven 壁纸网站 -\n * url 地址播放 emojis 动画 在地址栏里面播放 emoji\n * can't unsee 强烈建议前端、客户端、ui 开发的同学玩下，检查一下自己对设计稿的敏感度怎么样\n * ggtalk 平时一直在听的一个技术博客\n * awesome-comment 里面收集了很多有趣的代码注释\n * text-img 都将图片转化为 ascii 用来写注释\n * weird-fonts 将普通字母转化为 特殊 unicode\n * snake 在地址栏里面玩贪吃蛇\n * zero-width-lib 利用零宽度字符实现 隐形水印、加密信息分享、逃脱词匹配，很有创意\n * abbreviations 查看一个简写是什么意思的网站\n * magi ai 搜索神器，超屌\n * 诺基亚短信图片生成器\n\n\n# 交互\n\n * 微交互 里面收集了市面上很多很好的微交互例子 值得学习\n * little big details 同上，一个国外微交互汇集网站\n * cruip 登录页的各种页面设计，可以免费下载模板\n * comixify 一个波兰团队做了非常好玩的工具，可以把视频自动转成漫画，上图是他们提供的 demo，效果很棒。\n * taiko-web 太鼓达人网页版 只能说很 6\n\n\n# 教程\n\n * npx 教你怎么合理的使用 npx\n * hacksplaining 网络安全学习网站\n * mobile-web-best-practice 移动 web 最佳实践\n\n\n# 产品\n\n * 产品大牛 什么有很多完整的产品原型可以借鉴\n * 磨刀 快速出 ui 原型\n\n\n# 实用\n\n * browser-update 浏览器版本更新提示插件\n * typeform 一个国外的在线调查问卷网站\n * videofk videofk 视频在线解析下载\n * 全历史 历史内容聚合网站\n * uzerme 云端办公工具\n * sobooks 强大的电子书资源网站\n * 稿定设计 键式设计工具 + 智能抠图\n * 大力盘 百度网盘搜索\n * enfi 下载器 不限速下载器\n * 来画视频 像做 ppt 一样做短视频\n * arkie 海报制作工具\n * 优品 ppt\n * 比格 ppt\n * 高清免费图片\n * 高清免费图片 2\n\n\n# talk\n\n * peerigon-talks 收集了不少有意思的 talks\n\n\n# 算法\n\n * leetcode 用 js 刷 leetcode\n\n\n# 生活\n\n * ventusky 风雨气温图",charsets:{cjk:!0}},{title:"资源",frontmatter:{title:"资源",date:"2021-03-17T08:58:56.000Z",permalink:"/pages/eee83a9211a70f9d",article:!1},regularPath:"/views/04.%E6%94%B6%E8%97%8F/02.%E8%B5%84%E6%BA%90.html",relativePath:"views/04.收藏/02.资源.md",key:"v-4f41d284",path:"/pages/eee83a9211a70f9d/",headers:[{level:2,title:"前端常用",slug:"前端常用",normalizedTitle:"前端常用",charIndex:41},{level:2,title:"Vue",slug:"vue",normalizedTitle:"vue",charIndex:57},{level:2,title:"移动端",slug:"移动端",normalizedTitle:"移动端",charIndex:91},{level:2,title:"工具 & 插件",slug:"工具-插件",normalizedTitle:"工具 &amp; 插件",charIndex:null},{level:2,title:"Node",slug:"node",normalizedTitle:"node",charIndex:200},{level:2,title:"博客",slug:"博客",normalizedTitle:"博客",charIndex:309}],lastUpdated:"4/28/2022, 6:08:46 PM",lastUpdatedTimestamp:1651169326e3,headersStr:"前端常用 Vue 移动端 工具 & 插件 Node 博客",content:"# 个人收藏夹\n\n提示\n\n收集一些常用的库、插件等资源，正在整理中...\n\n\n# 前端常用\n\n> 待整理\n\n\n# Vue\n\n * Vuesax 一个优质的 vue 的组件库\n\n\n# 移动端\n\n * fastclick 解决移动端点击延迟 300ms 问题\n * better-scroll 移动端滚动插件\n\n\n# 工具 & 插件\n\n * codota AI 代码智能提示（应用于代码编辑器）\n\n\n# Node\n\n * commander 提供了用户命令行输入和参数解析的强大功能\n * inquirer 与命令行进行交互\n * chalk 美化命令行打印样式\n\n文章\n\n * 跟着老司机玩转 Node 命令行\n\n\n# 博客\n\n * Gitalk |\n   Valine |\n   Vssue 静态博客评论插件",normalizedContent:"# 个人收藏夹\n\n提示\n\n收集一些常用的库、插件等资源，正在整理中...\n\n\n# 前端常用\n\n> 待整理\n\n\n# vue\n\n * vuesax 一个优质的 vue 的组件库\n\n\n# 移动端\n\n * fastclick 解决移动端点击延迟 300ms 问题\n * better-scroll 移动端滚动插件\n\n\n# 工具 & 插件\n\n * codota ai 代码智能提示（应用于代码编辑器）\n\n\n# node\n\n * commander 提供了用户命令行输入和参数解析的强大功能\n * inquirer 与命令行进行交互\n * chalk 美化命令行打印样式\n\n文章\n\n * 跟着老司机玩转 node 命令行\n\n\n# 博客\n\n * gitalk |\n   valine |\n   vssue 静态博客评论插件",charsets:{cjk:!0}},{title:"Vue资源",frontmatter:{title:"Vue资源",date:"2021-03-17T11:39:43.000Z",permalink:"/pages/12df8ace52d493f6",article:!1},regularPath:"/views/04.%E6%94%B6%E8%97%8F/03.Vue%E8%B5%84%E6%BA%90.html",relativePath:"views/04.收藏/03.Vue资源.md",key:"v-14b8cce8",path:"/pages/12df8ace52d493f6/",headers:[{level:2,title:"官方资源",slug:"官方资源",normalizedTitle:"官方资源",charIndex:13},{level:2,title:"外部资源",slug:"外部资源",normalizedTitle:"外部资源",charIndex:83},{level:2,title:"工作门户",slug:"工作门户",normalizedTitle:"工作门户",charIndex:509},{level:2,title:"社区",slug:"社区",normalizedTitle:"社区",charIndex:621},{level:2,title:"会议",slug:"会议",normalizedTitle:"会议",charIndex:695},{level:2,title:"播客",slug:"播客",normalizedTitle:"播客",charIndex:756},{level:2,title:"Youtube 渠道",slug:"youtube-渠道",normalizedTitle:"youtube 渠道",charIndex:1537},{level:2,title:"官方例子",slug:"官方例子",normalizedTitle:"官方例子",charIndex:1577},{level:2,title:"讲解",slug:"讲解",normalizedTitle:"讲解",charIndex:1690},{level:2,title:"事例",slug:"事例",normalizedTitle:"事例",charIndex:11656},{level:2,title:"书籍",slug:"书籍",normalizedTitle:"书籍",charIndex:20600},{level:2,title:"博客文章",slug:"博客文章",normalizedTitle:"博客文章",charIndex:22134},{level:2,title:"开源的",slug:"开源的",normalizedTitle:"开源的",charIndex:22459},{level:2,title:"商业产品",slug:"商业产品",normalizedTitle:"商业产品",charIndex:30648},{level:2,title:"应用/网站",slug:"应用-网站",normalizedTitle:"应用 / 网站",charIndex:31363},{level:2,title:"互动体验",slug:"互动体验",normalizedTitle:"互动体验",charIndex:38775},{level:2,title:"企业用途",slug:"企业用途",normalizedTitle:"企业用途",charIndex:39086},{level:2,title:"A11y",slug:"a11y",normalizedTitle:"a11y",charIndex:39352},{level:2,title:"表格",slug:"表格",normalizedTitle:"表格",charIndex:30711},{level:2,title:"通知",slug:"通知",normalizedTitle:"通知",charIndex:31637},{level:2,title:"装载机",slug:"装载机",normalizedTitle:"装载机",charIndex:43094},{level:2,title:"进度条",slug:"进度条",normalizedTitle:"进度条",charIndex:43437},{level:2,title:"工具提示",slug:"工具提示",normalizedTitle:"工具提示",charIndex:44374},{level:2,title:"覆盖",slug:"覆盖",normalizedTitle:"覆盖",charIndex:44797},{level:2,title:"视差",slug:"视差",normalizedTitle:"视差",charIndex:46638},{level:2,title:"图标",slug:"图标",normalizedTitle:"图标",charIndex:18547},{level:2,title:"菜单",slug:"菜单",normalizedTitle:"菜单",charIndex:27466},{level:2,title:"输入",slug:"输入",normalizedTitle:"输入",charIndex:48622},{level:2,title:"轮播",slug:"轮播",normalizedTitle:"轮播",charIndex:45600},{level:2,title:"图表",slug:"图表",normalizedTitle:"图表",charIndex:5308},{level:2,title:"时间",slug:"时间",normalizedTitle:"时间",charIndex:17047},{level:2,title:"日历",slug:"日历",normalizedTitle:"日历",charIndex:33431},{level:2,title:"地图",slug:"地图",normalizedTitle:"地图",charIndex:8964},{level:2,title:"音频视频",slug:"音频视频",normalizedTitle:"音频视频",charIndex:54189},{level:2,title:"无限滚动",slug:"无限滚动",normalizedTitle:"无限滚动",charIndex:54667},{level:2,title:"拉动刷新",slug:"拉动刷新",normalizedTitle:"拉动刷新",charIndex:54886},{level:2,title:"降价",slug:"降价",normalizedTitle:"降价",charIndex:55291},{level:2,title:"PDF",slug:"pdf",normalizedTitle:"pdf",charIndex:55595},{level:2,title:"树",slug:"树",normalizedTitle:"树",charIndex:3542},{level:2,title:"社交分享",slug:"社交分享",normalizedTitle:"社交分享",charIndex:56364},{level:2,title:"搜索",slug:"搜索",normalizedTitle:"搜索",charIndex:22215},{level:2,title:"其他",slug:"其他",normalizedTitle:"其他",charIndex:25526},{level:2,title:"标签",slug:"标签",normalizedTitle:"标签",charIndex:26012},{level:2,title:"电话号码输入格式器",slug:"电话号码输入格式器",normalizedTitle:"电话号码输入格式器",charIndex:62274},{level:2,title:"选择器",slug:"选择器",normalizedTitle:"选择器",charIndex:52499},{level:2,title:"发电机",slug:"发电机",normalizedTitle:"发电机",charIndex:62419},{level:2,title:"日期选择器",slug:"日期选择器",normalizedTitle:"日期选择器",charIndex:52497},{level:2,title:"选择",slug:"选择",normalizedTitle:"选择",charIndex:7113},{level:2,title:"滑块",slug:"滑块",normalizedTitle:"滑块",charIndex:49022},{level:2,title:"拖放",slug:"拖放",normalizedTitle:"拖放",charIndex:13849},{level:2,title:"自动完成",slug:"自动完成",normalizedTitle:"自动完成",charIndex:66666},{level:2,title:"类型选择",slug:"类型选择",normalizedTitle:"类型选择",charIndex:67240},{level:2,title:"颜色选择器",slug:"颜色选择器",normalizedTitle:"颜色选择器",charIndex:67603},{level:2,title:"开关",slug:"开关",normalizedTitle:"开关",charIndex:67826},{level:2,title:"屏蔽输入",slug:"屏蔽输入",normalizedTitle:"屏蔽输入",charIndex:68468},{level:2,title:"RTF 编辑",slug:"rtf-编辑",normalizedTitle:"rtf 编辑",charIndex:69620},{level:2,title:"图像处理",slug:"图像处理",normalizedTitle:"图像处理",charIndex:70650},{level:2,title:"视频操作",slug:"视频操作",normalizedTitle:"视频操作",charIndex:71458},{level:2,title:"上下文菜单",slug:"上下文菜单",normalizedTitle:"上下文菜单",charIndex:48036},{level:2,title:"其他",slug:"其他-2",normalizedTitle:"其他",charIndex:25526},{level:2,title:"向导",slug:"向导",normalizedTitle:"向导",charIndex:74128},{level:2,title:"CSV",slug:"csv",normalizedTitle:"csv",charIndex:23327},{level:2,title:"评论系统",slug:"评论系统",normalizedTitle:"评论系统",charIndex:74380},{level:2,title:"帆布",slug:"帆布",normalizedTitle:"帆布",charIndex:74484},{level:2,title:"链接预览",slug:"链接预览",normalizedTitle:"链接预览",charIndex:74776},{level:2,title:"游览",slug:"游览",normalizedTitle:"游览",charIndex:74818},{level:2,title:"UI 布局",slug:"ui-布局",normalizedTitle:"ui 布局",charIndex:74890},{level:2,title:"自适应",slug:"自适应",normalizedTitle:"自适应",charIndex:42168},{level:2,title:"手机",slug:"手机",normalizedTitle:"手机",charIndex:39029},{level:2,title:"组件集合",slug:"组件集合",normalizedTitle:"组件集合",charIndex:78541},{level:2,title:"管理模板",slug:"管理模板",normalizedTitle:"管理模板",charIndex:24829},{level:2,title:"服务器端渲染",slug:"服务器端渲染",normalizedTitle:"服务器端渲染",charIndex:8838},{level:2,title:"静态网站生成器",slug:"静态网站生成器",normalizedTitle:"静态网站生成器",charIndex:27766},{level:2,title:"其他",slug:"其他-3",normalizedTitle:"其他",charIndex:25526},{level:2,title:"事件处理",slug:"事件处理",normalizedTitle:"事件处理",charIndex:80650},{level:2,title:"响应式设计",slug:"响应式设计",normalizedTitle:"响应式设计",charIndex:53597},{level:2,title:"验证",slug:"验证",normalizedTitle:"验证",charIndex:1743},{level:2,title:"调整大小",slug:"调整大小",normalizedTitle:"调整大小",charIndex:59465},{level:2,title:"滚动",slug:"滚动",normalizedTitle:"滚动",charIndex:40477},{level:2,title:"路由",slug:"路由",normalizedTitle:"路由",charIndex:2632},{level:2,title:"延迟加载",slug:"延迟加载",normalizedTitle:"延迟加载",charIndex:49639},{level:2,title:"分页",slug:"分页",normalizedTitle:"分页",charIndex:13128},{level:2,title:"动画",slug:"动画",normalizedTitle:"动画",charIndex:1312},{level:2,title:"元标记",slug:"元标记",normalizedTitle:"元标记",charIndex:88238},{level:2,title:"传送门",slug:"传送门",normalizedTitle:"传送门",charIndex:88458},{level:2,title:"过滤器",slug:"过滤器",normalizedTitle:"过滤器",charIndex:40662},{level:2,title:"SVG",slug:"svg",normalizedTitle:"svg",charIndex:16887},{level:2,title:"其他",slug:"其他-4",normalizedTitle:"其他",charIndex:25526},{level:2,title:"WebGL",slug:"webgl",normalizedTitle:"webgl",charIndex:90075},{level:2,title:"全屏",slug:"全屏",normalizedTitle:"全屏",charIndex:38585},{level:2,title:"页面可见性",slug:"页面可见性",normalizedTitle:"页面可见性",charIndex:90365},{level:2,title:"打印",slug:"打印",normalizedTitle:"打印",charIndex:90483}],lastUpdated:"4/28/2022, 6:08:46 PM",lastUpdatedTimestamp:1651169326e3,headersStr:"官方资源 外部资源 工作门户 社区 会议 播客 Youtube 渠道 官方例子 讲解 事例 书籍 博客文章 开源的 商业产品 应用/网站 互动体验 企业用途 A11y 表格 通知 装载机 进度条 工具提示 覆盖 视差 图标 菜单 输入 轮播 图表 时间 日历 地图 音频视频 无限滚动 拉动刷新 降价 PDF 树 社交分享 搜索 其他 标签 电话号码输入格式器 选择器 发电机 日期选择器 选择 滑块 拖放 自动完成 类型选择 颜色选择器 开关 屏蔽输入 RTF 编辑 图像处理 视频操作 上下文菜单 其他 向导 CSV 评论系统 帆布 链接预览 游览 UI 布局 自适应 手机 组件集合 管理模板 服务器端渲染 静态网站生成器 其他 事件处理 响应式设计 验证 调整大小 滚动 路由 延迟加载 分页 动画 元标记 传送门 过滤器 SVG 其他 WebGL 全屏 页面可见性 打印",content:"# vue 资源\n\n\n# 官方资源\n\n * 官方指南\n * API 参考\n * GitHub 回购\n * 发行说明\n * 样式指南\n * Vue.js 新闻\n\n\n# 外部资源\n\n * vue.js 资料まとめ (日语)by @hashrock\n * Vue.js 新闻稿 - 每周精选的 Vue.js 新闻的剂量\n * Vue.js 提示 - 成为更好的 Vue.js 开发人员的提示\n * Vue.js Wikipedia\n * Vue.js Radar - 精选的新闻通讯和网站，涵盖了新的 Vue.js 版本 / 贡献。\n * Vue 新闻 - 专注于最新 Vue.js 新闻和信息的社交网站。\n * Vue 精选资源 - 推荐的 Vue.js 课程和教程。\n * BuiltForVue - 所有 Vue.js 组件和软件包的 NPM 镜像。\n * Vue School - 通过核心成员和行业专家的视频课程学习 Vue.js\n * VueDose。有关忙碌的开发人员的 Vue 生态系统的提示和技巧。\n * Vuelibs。基于 awesome-vue 存储库的 Vue.js 库和组件的简约列表。\n\n\n# 工作门户\n\n * Vue.js 职位 - VueJobs - 一个 Vue.js 职位门户，可为您所有的 Vue.js 职位招聘或录用。\n * Vue.js 面试问题 - 300 个 VueJS 面试问题和答案列表\n\n\n# 社区\n\n * Twitter\n * 官方论坛\n * vue-requests - 请求您希望存在的 Vue.js 模块或获取有关模块的想法\n\n\n# 会议\n\n * VueConf\n * Vue.js 伦敦\n * VueConf US\n * VueConf 多伦多\n\n\n# 播客\n\n * Full Stack Radio＃30(11-23-2015)\n * JavaScript Jabber＃187(11-25-2015)\n * Changelog＃184(11-27-2015)\n * 软件工程日报 (2015 年 12 月 29 日)\n * JavaScript Air 016 (2016 年 3 月 30 日)\n * [Codecasts＃2-Falando Sobre Vuejs e Web Components(2016-08-19)pt-BR]\n * Full Stack Radio＃50(09-21-2016)\n * [和 Vue.js 框架的作者聊聊前端框架开发背后的故事 zh-CN]\n * MW S04E08-Vue.js 与 Evan You 和 Sarah Drasner (04-27-2017)\n * 提交请求＃12 - 众筹开源 (Vue.js)(06-15-2017)\n * The Web Platform Podcast 132：Vue.js(07-27-2017)\n * 带有 MaximilianSchwarzmüller 的 JavaScript Jabber＃276 (08-29-2017)\n * 使用 Sarah Drasner 动画 VueJS (软件工程日报 01-12-2017)\n * Vue 观看次数 (Vue 每周播客开始于 2018 年 3 月 6 日)\n * 官方 Vue.js 新闻播客\n * 通过 QIT 技术播客索引器播出的 Vue 播客列表\n * DNE 138-Vale a pena VueJS 吗？(01-05-2018)\n * Cynical Developer＃99(10-15-2018)\n * 语法＃130 (03-27-2019)\n\n\n# Youtube 渠道\n\n * VueNYC\n * VueConf 欧盟\n\n\n# 官方例子\n\n * 基本示例\n * Vue.js TodoMVC\n * CoffeeScript 版本\n * Vue.js HackerNews Clone\n * Vue.js 2.0 HackerNews Clone\n\n\n# 讲解\n\n * Vue.js 屏幕录像关于 Laracasts -Auth0 博客上的 Vuejs 2 身份验证教程\n * [Scotch.io 上的使用 Vue.js 创建 GitHub File Explorer\n * Vue.js 教程关于 Vegibit\n * Vue.js 使用 webpack，vue-loader 和热重装从零开始构建设置\n * Vuex 基础：教程和说明\n * Vuex 简介视频 - 来自伦敦 Vue.js 聚会＃1 的 James Browne -Laravist 上的 Vue.js 中文系列视频教程\n * [craigmckenna.com 上的使用 Vue.js 开发反应式发票应用程序\n * 带有葡萄牙语的 Laravel 和 Vue.js 的混合应用示例，作者 @vedovelli -oguzhan.in 上的 Vue.js 土耳其语简介\n * Vue.js 西班牙语视频教学系列 (3-8-2016) 在 YouTube 上由 JuanAndrésNúñez 制作\n * [Stude.net 上的 Vue.js 西班牙语电视广播系列 -bhnddowinf 上的讲解 Vue.js 官网中文 - 含代码，百度云，youtube\n * [Pusher 上的使用 VueJS，ES2015 和 Webpack 探索实时应用] -sekolahkoding.com 上的印尼语中的 Vue.js\n * .dev 中来自 Scratch 系列的 Vue.js 俄语\n * [Flask，RethinkDB，Vue.js，ч。СтвореннясервісудлязберіганняфайлівзFlask。1 乌克兰\n * VueJS 2 法语教程 Françaispar Grafikart\n * Jayway Vue.js 2 研讨会。使用 vue-router，vuex 和 vue-resource 构建一个电子商务站点\n * 如何使用 Wijmo 控件创建出色的 VueJS 应用程序 -bhnddowinf 上的讲解 Vue.js 2 官网中文 - 含代码，百度云，youtube\n * Vue.js 备忘单：服务器端应用程序，路由器，Vuex 存储，GraphQL 等由 @xpepermint\n * 使用 Vue.js 加载类似图片的媒体\n * [Metric Loop] 上的如何在 Laravel Spark 项目中使用 Vuex /metricloop.com/blog)\n * [Metric Loop] 上的如何在 Vuex 中设置模块 (https://metricloop.com/blog) - 关于 Laracasts 的学习 Vue 2：循序渐进\n * Vue.js 中文教程\n * 在 Vue.js 2.0 框架上启动和运行在 SitePoint 上\n * [Metric Loop] 上的如何使用 Vuex 进行 API 调用 (https://metricloop.com/blog)\n * [度量循环](https：//metricloop) 上的如何使用 Vuex 构建功能。 com /blog) -DevMarketer 在 YouTube 上发布了 Vue.js 2.0 基础知识\n * [无知的 Vuex-Vue 的应用程序数据存储上缺少的入门手册](https://medium.com/js-dojo/vuex-for-the-clueless-the-missing-primer-on-vues-application-data -store-33fa51ffc3af＃.2j25xpfui)\n * 实时网格组件 Laravel，Vue.js，Vuex 和 Socket.io\n * VueJS 2 - 完整指南 (包括 Vuex)-Udemy 教程\n * [在 egghead.io 上使用 Vue.js 开发 Web 应用](https://egghead.io/courses/develop-web-apps-with-vue-js)\n * Vue.js 2 - 入门\n * Vue.js 2 和 Vuex (基本)\n * Fatih Acet 在 YouTube 上的 TürkçeVueJSEğitimVideoları\n * [通过六个步骤从头开始在 Vue.js 中构建 JSON 树视图组件](https://devblog.digimondo.io/building-a-json-tree-view-component-in-vue-js-from-scratch - 由 Arvid Kahl 在 digimondo devblog 上的 - in-six-steps-ce0c05c2fdd8＃.738ok0l4p)\n * Vue！-Illya Klymov 在 YouTube 上的 OpenLecture 2017.01 俄语 (@xanf)\n * @afropolymath(https://afropolymath.svbtle.com/bootstrapping-your-first-vue-js-project/)。 com / afropolymath)\n * [@分离] 的从头开始构建 vue-hackernews-2.0(https://github.com/Detachment)\n * [使用 vue-kindergarten 为您的 Vue.js 和 Nuxt.js 应用程序提供基于角色的授权](https://medium.com/@JiriChara/role-based-authorization-for-your-vue-js-and-nuxt- js 应用程序使用 vue 幼儿园 - fd483e013ec5＃.kp81np177)\n * 完整的 Vue.js 应用程序教程 - 使用 Vue 创建简单的预算应用程序，作者为 @matthiaswh\n * Vue.js 教程：经过渲染的 SEO 友好示例\n * [Vue.js 简介，供仅了解足够的 jQuery 的人使用](https://medium.com/@mattrothenberg/vue-js-introduction-for-people-who-know-just-enough-jquery-to - 通过 eab5aa193d77 获取)\n * 使用 Vue.js 和 Axios 从第三方 API 获取数据\n * Vue 2 的趣味项目 (视频)，作者：Packt 的 Peter van Meijgaard。(2017 年 4 月)\n * [Vue JS：同时运行 Express 和 Webpack Dev Server](Henrik Fogelberg) 在媒体上的 (https://medium.com/dailyjs/vue-js-simultanelyly-running-express-and-webpack-dev-server-292f4a7ed7a3)\n * [The Net Ninja] 在 YouTube 上发布了 Vue JS 2 教程 (https://www.thenetninja.co.uk)\n * 在 5 分钟内将无头 CMS 添加到 VueJ 中\n * vue 架构中的观察者\n * 使用 Vue.js 构建您的第一个应用\n * 5 个学习 Vue.js 的实用示例\n * [@jesalg] 的从 KnockoutJS 迁移至 VueJS(https://twitter.com/jesalg)\n * 通过 Vue.js 创建测验由 [@ rap2h](https://twitter.com/rap2h)\n * [@chadcampbell] 的 Vue.js：入门 (https://twitter.com/chadcampbell)\n * Vue.js 2 和 Firebase - 构建实时单页 Web 应用程序\n * Vue.js 2 和 Vue 资源 - 具有外部 API 访问权限的实际应用程序\n * 面向初学者的 Vue.js 交互式屏幕录像\n * [AliGÖREN] 在 YouTube 上发布的 Vue.JS ile NASAAPI'ınıKullanarak VeriÇekme(https://aligoren.com)\n * 使用 Vue.js 2 进行 Web 开发 (视频)，作者是 Packt 的 Olga Filipova。(2017 年 6 月)\n * 使用 VueJS 和 Pusher 建立实时图表\n * Vue 简介，前端大师课程的回购\n * 关于 CSS 技巧的 Vue 指南\n * 在您的 VueJS 应用中使用打字稿 - 关于 nodelover 的 Vue.js 视频系列，免费，入门，实战 -ninghao.net 上的 Vue.js 预览\n * [@chadcampbell] 的 Vue.js：开发机器设置 (https://twitter.com/chadcampbell)\n * 使用 Vue-router 构建 Vue v2 JS 应用 @mikestreety\n * [@Atom_Hernandez][https://medium.com/@davidatomhernandez/how-to-a-simple-carousel-with-vue-138715d615d7) 制作自己的旋转木马](https://twitter.com/ Atom_Hernandez)\n * [使用官方 Vue 测试工具和 Jest 对 Vue.js 组件进行单元测试](https://alexjoverm.github.io/series/Unit-Testing-Vue-js-Components-with-the-Official-Vue-Testing- @alexjoverm 的 Tools-and-Jest /)\n * [创建 Vue.js 过渡和动画：实时示例，作者为 @udyuxdev\n * 创建自定义 Vue.js 插件\n * VueJS 第 1 部分中的异步\n * VueJS 第 2 部分中的异步\n * [@mikestreety] https://www.mikestreety.co.uk/blog/vue-js-using-localstorage-with-the-vuex-store) 使用 [不带插件的 Vuex 存储使用 localStorage] //twitter.com/mikestreety)\n * [@mikestreety] 的使用道具通过 Vue Router 访问组件内的 URL 参数 (@mikestreety)(https://twitter.com/mikestreety)\n * [使用 Pm2 和 Nginx 在生产中部署 Vue.js — SSR (Vuetify)](https://medium.com/@kamerk22/deploy-vue-js-ssr-vuetify-on-production-with-pm2-and- nginx-ec7b5c0748a3)\n * laracast 上的 Testing Vue Components\n * [[CodyLSeibert] 的 [使用 Vue.js 和 Express.js 构建全栈 Web 应用](https://twitter.com/CodyLSeibert )\n * Vue.js 2 条食谱 (视频)，由 Packt 的 Peter van Meijgaard 撰写。(2017 年 9 月)\n * [Sabe.io] 上的 Vue.js 入门 (https://sabe.io/)\n * 使用 Vue 2 构建您的第一个高级 CRUD 应用程序 (视频)(https://www.packtpub.com/web-development/building-your-first-advanced-crud-application-vue-2-video) 范・迈加德 (Pack Meitgaard)(2017 年 7 月)\n * 프론트엔드Vue.js입문서\n * [Inflearn] 上的누구나다루기쉬운Vue.js (视频) ](https://www.inflearn.com/)，由 Captain Pangyo\n * 在 2 小时内建立一个 Vue.js 博客顶部在 Snipcart\n * [Sales Bhatnagar @sachinbee 的 VueJS 2 入门 Udemy\n * [Sabe.io] 上的 Vuex 入门：在 Vue.js 中管理状态 (https://sabe.io/)\n * [Sergii Stotskyi 的使用 CASL 的 Vue2 ACL]\n * [简化 JavaScript 选择 - Angular 诉 React 诉 Vue (视频)](https://www.packtpub.com/application-development/javascript-choice-made-easy-% E2%80%93-angular- v-react-v-vue-video)，Packt 的 Daniel Kmak。(2017 年 11 月) -Storyblok 博客上的使用 Auth0 的 Vuejs 2.5 + 身份验证教程\n * 带有 Vue 的 GraphCMS 初学者指南在 GraphCMS 上\n * 在 Chrome 和 VS Code 中调试 Vue.js 此食谱展示了如何将 Debugger for Chrome 扩展程序与 VS Code 一起使用调试由 Vue CLI 生成的 Vue.js 应用程序。\n * [Packet Sachin Bhatnagar 的 Vue JS 2 入门 (视频)。(2018 年 1 月)\n * 使用 Vue.js 构建电影应用界面，作者是 Hassan Djirdeh，[@ djirdehh](https： //twitter.com/djirdehh)\n * 让我们建立一个自定义的 Vue.js 路由器，作者：Hassan Djirdeh，[@djirdehh](https：//twitter .com/djirdehh)\n * 由 Vue，Webpack 4 和 Babel 入门，作者是 Bjorn Krols，[@ KrolsBjorn](https ：//twitter.com/KrolsBjorn)\n * 如何将 Bootstrap 4 添加到您的 Vue 项目，作者：Bjorn Krols，@ KrolsBjorn\n * [如何将语义 UI 添加到您的 Vue 项目中](作者：Bjorn Krols，@KrolsBjorn( https://twitter.com/KrolsBjorn)\n * [Bjorn Krols 的如何将 ESLint 添加到您的 Vue 项目，@KrolsBjorn\n * 如何通过 Vue 中的 URL 查询参数使内容动态化 (https://medium.com/@BjornKrols/tutorial-dynamic-content-via-url-query-parameters-in-vue-js-d2df19b66633) Krols，@KrolsBjorn\n * 如何为 AWS S3 托管的 Vue 应用程序启用历史记录模式作者：Bjorn Krols，@KrolsBjorn\n * [Bjorn Krols 的使用断点调试 Vue 应用程序的基本介绍，@ KrolsBjorn\n * 使用 ButterCMS 无头后端构建 Vue.Js 电子商务应用程序\n * MASTER VUE.JS\n * 使用 Go 和 Vue.js 构建投票应用程序\n * 使用 Vue.js 构建协作绘画应用程序\n * 使用 Stripe 构建实时付款信息中心\n * 使用 Vue.js 构建加密货币跟踪器\n * 使用 Vue.js 构建设计反馈应用程序\n * 使用 Flask 和 Vue.js 开发单页应用\n * 使用 Stripe，Vue.js 和 Flask 接受付款\n * [serverlarup.net 上的使用 Laravel 和 VueJS 进行 API 驱动的开发 (免费课程)\n * 在 Vue.js 中管理状态，作者：哈桑・吉尔德 (Hassan Djirdeh)，@djirdehh\n * 由 Vue.js 制作的真实世界项目，由 Packt 的 Daniel Khalil 撰写。(2018 年 8 月)\n * [Heartbeat (Vue + NW.js 视频系列)] https://goo.gl/8p3msR)，作者：@@ ackzell (https://github.com/ackzell)(2017-2018)\n * 带有 Nuxt.js 的 Firebase 服务器端渲染 Vue 应用程序 (带有 JavaScript 框架的服务器端渲染)\n * Firebase 使用 Nuxt.js (使用 JavaScript 框架的服务器端渲染) 测量 Vue SSR 性能)\n * 使用 D3 和 Vue 创建交互式地图 (2018 年 10 月)\n * 编写通用的，支持 SSR 的 Vue 组件的指南\n * [Vue School] 的 Vue.js 基础知识 (https://vueschool.io)\n * Vuex for Everyone 由 Vue School\n * [Vue School] 的 Vue.js 表单验证 (https://vueschool.io)\n * [Vue School] 的 Vue.js 大师班 (https://vueschool.io)\n * [Vue School] 的 Vue.js Firebase 实时数据库 (https://vueschool.io)\n * [Vue School] 的 Vue.js Firebase 身份验证 (https://vueschool.io)\n * [Vue School] 的带有 Vue.js 的动态表单 (https://vueschool.io)\n * [Vue School] 的 Custom Vue.js Directives(https://vueschool.io)\n * Vue.js 应用程序开发要点，作者是 Packt 的 BartłomiejPotaczek。(2018 年 10 月)\n * 对 Vue.js 进行故障排除，作者：克里斯蒂安・赫尔 (Packet Hur)，帕特。(2018 年 10 月)\n * Nuxt.js - 类固醇上的 Vue.js，作者：MaximilianSchwarzmüller，Packt。(2018 年 10 月)\n * 使用 Quasar (和 Vue) 构建电子文件资源管理器，作者：@@ hawkeye64](https://github.com/hawkeye64)。(2018 年 11 月)\n * [Udemy] 上的使用 Vue JS 2 和 Firebase 构建 Web 应用程序 (https：// [The Net Ninja] 的 www.udemy.com/)(https://www.thenetninja.co.uk/)\n * [Udemy] 上的 Vue JS 2 - 完整指南 (包括 Vue Router 和 Vuex)( https://www.udemy.com/)，MaximilianSchwarzmüller\n * [使用 Vue.js，Vuex，Vuetify 和 Firebase 的 SPA 应用程序 (第 1 部分)](https://www.jenniferbland.com/spa-application-using-vue-js-vuex-vuetify-and-firebase-part -1 /) 由 Jennifer Bland @ratracegrad。(2018 年 11 月)\n * [使用 Vue.js，Vuex，Vuetify 和 Firebase 的 SPA 应用程序 (第 2 部分)](https://www.jenniferbland.com/spa-application-using-vue-js-vuex-vuetify-and-firebase-part -2 /) 由 Jennifer Bland @ratracegrad。(2018 年 11 月)\n * [使用 Vue.js，Vuex，Vuetify 和 Firebase 的 SPA 应用程序 (第 3 部分)](https://www.jenniferbland.com/spa-application-using-vue-js-vuex-vuetify-and-firebase-part -3 /) 由 Jennifer Bland @ratracegrad。(2018 年 11 月)\n * [使用 Vue.js，Vuex，Vuetify 和 Firebase 的 SPA 应用程序 (第 4 部分)](https://www.jenniferbland.com/spa-application-using-vue-js-vuex-vuetify-and-firebase-part -4 /)，作者是 Jennifer Bland @ratracegrad。(2018 年 11 月)\n * [詹妮弗・布兰德 (Jennifer Bland)@ratracegrad 将国际化添加到 Vue 应用程序 )。(2018 年 11 月)\n * 由 Vue JS 2 编写的实用项目，作者是 Packt 的 Jack Herrington。(2018 年 12 月)\n * [Lessipe](https：//lessipe) 的 Lessipe 上的 Vue.js기초다지기(视频) .com /)\n * 由 Vue.js 和 Node.js 进行的全栈 Web 开发，作者 Haider Rehman， Packt。(2019 年 1 月)\n * Designer for Vue，由 Design + Code 提供 (2019 年 2 月)\n * [Talat Tufekci] 的 Vue 土耳其语简介 (https://www.onbirkod.com)\n * [Talat Tufekci] 的使用土耳其语的 Vue-Resource 提取数据 (https://www.onbirkod.com)\n * [Talat Tufekci] 的使用土耳其语 Vue-router 的 Spa 应用程序 /www.onbirkod.com)\n * [Talat Tufekci] 的使用土耳其语的 Vue-cli 创建 Vue 项目 https://www.onbirkod.com)\n * [Taul Tufekci] 的 Vue 组件和土耳其语 Vuex 之间的消息传递 .onbirkod.com)\n * [作者：Michael Thiessen] 如何在 vue 中动态添加类名称\n * 使用 ScaffoldHub 使用 Vue JS，Node JS 和 SQL 或 MongoDB 构建图书馆 Web 应用程序作者 Felipe Lima [@scaffoldhub_io](https：//twitter.com/scaffoldhub_io)\n * 使用 NativeScript + Vue 构建实时位置跟踪应用，由 Saibbyweb 撰写\n\n\n# 事例\n\n * 使用 Laravel 中的 JWT Auth + 示例后端 API 的入门应用程序\n * 节点 Webkit + Vue 示例 @brandonjpierce\n * Vue 样本 @superlloyd\n * 使用 vue.js + vue-router 的 HackerNews 克隆，作者 @kazupon\n * 电子 + Vue 示例，@ bradstewart\n * [Boris Okunskiy] 的单页应用程序示例 (Vue + Voie)(https://github.com/inca)\n * 开始 - 用 Vue + 流明编写的 Task Manager SPA，作者是 Raj Abishek\n * [BosNaufal] 的 Vue Mini Shop(https://github.com/BosNaufal)\n * Vue SoundCloud 由 mul14\n * 功能请求 (Laravel + Vue 组合) 由 haydenbbickerton\n * [@ yjj5855] 的 Vue Cookbook (Vue1.0 + Express)(https://github.com/yjj5855)：演示服务的第一个屏幕渲染\n * Strong Together - 一个启动器项目，基于 Browserify 和 Semantic-，以独立或 Laravel / Laravel Spark 项目的形式构建单页 Vue.js 应用程序， ui) 由 WebSemantics\n * vuetest：在 iframe 中具有用户身份验证，bootstrap ui，上传器，所见即所得编辑器的广告管理网站\n * vue-shopping 由 andylei18\n * Vue-cnodejs，060 由 @shinygang\n * vue-zhihu-daily 由 hilongjw\n * VueChess- [gustaYo] 的多人在线国际象棋游戏 (https://github.com/gustaYo)\n * Ngexplorer-vuejs-client- Nugexplorer 的正式客户端](https://github.com/gustaYo)\n * [Vue 2048 (Vue + Webpack)][https：//pengfu](https：//pengfu](https://github.com/pengfu) 的 https://pengfu.github.io/vue-2048/)：流行的 2048 游戏使用 Vue 实现，Webpack，Sass，ES6\n * [BosNaufal] 的 Vue Simple PWA(https://github.com/BosNaufal)\n * Tour of Heroes(Vue 2.0)：Angular 2.0 的 Vue 2.0 端口 [Tour of Heroes](https：//angular。 io /docs/ts /latest/tutorial /) 演示应用程序。亮点：ES6 / 7，渲染功能，JSX，revue (Vue 的 Redux 绑定)，[vue-router](https://github.com/vuejs/vue-router)，Airbnb eslint，webpack。由 @ aweber1\n * vue-table-pagination 由 echovic 进行分页的表\n * Feathers and Vue 2.0 Blog Admin Demo 演示了如何在 Vue 2.0 中使用 Feathers。它包含 [delay] 的身份验证，vue 路由器，vue 无限加载和角色 (https://github.com/delay)\n * vue-zhihudaily-2.0Zhihudaily 演示程序是使用 Vue 2.0，vue-router 和 vuex 构建的，并具有服务器端渲染功能。由 cs1707\n * vue-demo-todolist 是一个简单的 vue2.0 演示，它使用 Vue 2.0 vue-cli 构建。通过 fishenal\n * [liueans] 的 vue-AdminLte(https://github.com/liujians)\n * vue (2.0)+ Node.js：博客内容管理系统 (CMS)，作者 @ycwalker\n * ngexplorer-quasar- Ngexplorer 的实现与 [quasar 框架](https： //gust.Yo 的 //github.com/rstoenescu/quasar-framework)(https://github.com/gustaYo)\n * zhihu-daily-vuemoonou 基于 vue2.0 的 zhihu 日报\n * loopback-vueloopback + vue + vue-resource，ionic-app，vue 页面分页功能，验证权限控制，访问令牌机制，凭证，CI ，docker qxl1231\n * vue-s3-dropzoneVue.js 拖放组件可将文件无服务器上传到 AWS S3\n * easy-vue 一个简单的示例，使用 vue 在 vue 2.0，vuex 2.0，vue-router 2.0，vue-infinite-scroll 2.0， [TIGERB] 的 vue-progressbar 2.0 (https://github.com/tigerb)\n * [度量循环] 的 Vuex 事件消息演示 (https://metricloop.com/blog)\n * vue-memo 使用 Vue.js (> 2.x。)，vue-router (> 2.x。)，vuex ( > 2.x。)，vuex-router-sync @ next (> 3.x。) 和 Firebase (> 3.6.x)，作者为 akifo\n * Resume Vue [ChangJoo Park] 的基于 JSON 的基于 Vue 2.0 的简历 (https://github.com/ChangJoo-Park/) - 使用 Phoenix Framework，Vue 和 Vue Router (demo 开发的具有 JWT 身份验证的应用示例 phoenix-vue-auth.herokuapp.com))@ Angarsk8\n * 在 Vue 2.0 中使用路由器示例 CRUD 应用 (https://github.com/shershen08/vue.js-v2-crud-application)(https://github.com/shershen08)\n * [@mgyongyosi] 的 ASP.NET Core Vue.js 服务器端呈现示例 (https://github.com/mgyongyosi)\n * vuefire-quickstart - 通过 @sejr 记录的带 Webpack 和 eslint 的 Firebase 集成。\n * hello-vue-django Vue.js 和 Django 集成入门项目，带有热代码重载\n * 实时社交新闻应用，是由 Phoenix，Vue，Vue Router 和 Vuex ([_demo _](https ：//loopa-news.herokuapp.com))，作者为 @ Angarsk8\n * vue-calculator 是一个使用 Vue 2.0 构建的简单计算器，vue-cli (webpack-simple)。通过 CaiYiLiang\n * Wikipedia-viewer 一个简单的 Wikipedia-viewer 页面，使用 vue2.x，vue-router，vue-cli (webpack) 构建 - simple) 和 ajax (jsonp)。通过 CaiYiLiang\n * vue2.x-douban 使用 vue2.x，vue-router 和 axios (豆瓣电影) 构建豆瓣电影的简单方法。通过超人\n * vue-laravel-exampleVue-Laravel - 示例是使用 Laravel 设置 Vue 的简单示例。通过 Jiajian Chan\n * vue-foundation 一个演示应用程序，将 VueJS 与 Zurb Foundation 集成，使用 webpack vue-cli f\n * aspnetcore-Vue-starter 一个 VueJS 2 入门模板，它是 asp.net MVC dotnetcore 项目的一部分。该模板包括 VueJS 客户端应用程序和后端 API 控制器。\n * vue-reddit-app 使用 Vue 2 构建的 Reddit SPA demo。 X，Vue 路由器 2，Vuex 和 axios。@ yujiahaol68 使用 Muse-UI 和 vue-cli Webpack 模板\n * vue-music-qq 一个 qq-music 项目基于 vue-cli。页面简单流畅\n * 带有 Vue-Redux 和 Plain VueJSX 的 NavigationTab 导航选项卡同时具有普通 Vue JSX 和 Vue + Redux 绑定\n * Veggie Map 使用 Vuejs + Vue 路由器 + Leaflet 和 Firebase 的交互式演示\n * vuejs-d3 示例如何使用 d3 进行可视化的示例。\n * vue-twitter-client 使用 Vue 2.X，Vuex，electron-vue 和 Electron 构建的 Twitter 客户端应用程序\n * Douban 使用 Vue2.x + Vuex + Vue-router + vue-resource 创建的很棒的 douban 示例。通过 jeneser\n * Storyblok vuejs-boilerplate - 集成 Storyblok 的组件系统，允许创建可编辑的网站。\n * Vuexpresso - 使用 VueX，Vue-Router，Vue-Apollo，webpack，GraphQL，Apollo-client，express 和 mongo 的样板\n * 带有 Sails.js 示例项目的 Vue.js - 该项目适用于单页应用程序的新手，并希望通过实际学习例。\n * Vue.js＆Pyramid Web 框架应用程序 - 使用 Pylons Pyramid Webframework 后端 Vuejs webpack2，vue-router，yarn (数据包管理器) 的样板\n * vue-feathers-chat 在前端使用 Vue，在后端使用 Feathers 进行的示例实时聊天，但仅使用 Socket.IO-Client 进行通信\n * vue-xplan 使用 Vue 和 three.js 创建的旋转地球演示页面\n * vueSocketChatRoom 使用 vue2.x，vuex2.x，vue-router2.x，vux2.x，socket.io 的套接字聊天室\n * @Binaryify 的 vue-tetris (使用 Vue，Vuex，不可变代码 Tetris 编码)：使用 Vue，Vuex，Immutable 编码俄罗斯方块。\n * @kasheftin 的 route-planner-vue：用于规划具有多个路线的工具 Google 地图上可排序的图层，可拖动的方向，标记和形状。\n * MyDiary-Vue 使用 Vue 2.X 构建的日记应用程序，还具有联系人和待办事项列表功能\n * AliGÖREN 在 Github 上的 VueJS 示例项目\n * todo-mvc-webpack 由 voluntapear 使用 webpack-basic 在 Vue 2 上实现 TodoMVC 模板，并带有显示 vuex，vue-router，中央事件总线和 VueFire 的示例。\n * [gustaYo] 的 Chess Storybook Example 与 Vue 2.0 (https://github.com/gustaYo)\n * Vue Weather Notifier 一个带有 SVG 和 Vuex 的小型示例动画应用程序\n * Nuxt 类型一个带有 Nuxt 的示例 Vue 项目，用于路由 / SSR 到演示页面转换\n * VueBlog 一个博客系统，支持 wmui 的服务端渲染\n * Cinemateka - 用 Vue v1 和 Laravel 5 制作的 SPA 的示例。电影和活动时间表。俄罗斯的评论。\n * vue-2.x-boilerplate - 适用于 Vue 项目 Vuex + vue-router 的简单入门套件\n * vue-minesweeper - 由 [rhapsodyn] 开发的带有 vuejs 的致命简单扫雷游戏 (https://github.com/rhapsodyn)\n * X-Flowchart-Vue- [OXOYO] 的 SVG 和 Vue 流程图编辑器 (https://github.com/OXOYO)\n * koa-vue-notes-web - 充实的 SPA，在后端使用 Koa 2.3，在前端使用 Vue 2.4。包括功能齐全的用户身份验证组件，针对用户笔记的 CRUD 操作以及 Vuex 存储模块。\n * Vuejs 购物车 - 使用 Vuejs 和 Firebase 的购物车示例\n * PokedexVueJs@ rchung95\n * vuefire-auth 使用 Firebase 进行 Vuefire Vue2-Auth-Email 验证\n * vuefire-realtimedatabase 具有 Firebase 的 Vuefire Vue2-RealtimeDatabaseCRUD\n * vuefire-storage 具有 Firebase 的 Vuefire Vue2-Storage\n * vue2-PWA-Blog@ deepak-singh\n * vue-firebase-auth-vuex 具有 Vuex 的 Vue2 Firebase 身份验证，并支持渐进式 Web 应用程序\n * vue-chart-stater-kit 使用 Vue 路由器，Vue 图表，Element-UI 的快速入门\n * vue2.0-demos 使用 mint-ui，Element-UI，并有一些演示 (选择城市等)\n * conwayConway 在 Vue 中的生活游戏。\n * vuex-feature-scoped-structure 功能范围 vuex 应用程序结构的示例应用程序\n * vuex-examples - 有关使用 Vuex 构建真实世界应用程序的简单示例\n * vue-vuex-todomvc - 示例 TodoMVC Vue.js 应用程序具有通过 REST 的 Vuex 存储和服务器后端以及使用赛普拉斯 (Cypress) 的全套 E2E 测试。 io 测试运行程序。\n * vuejs-sqljs-boilerplate - 这是同时使用 Vue.js 和 sql.js 的样板\n * X-WebDesktop-Vue- [OXOYO] 基于 Vue 的 WebDesktop 系统 (https://github.com/OXOYO)\n * vuejs-music-player - 一个 Vue.js 精简音乐播放器\n * Vue.js 最佳实践示例项目 - 使用 Vue.js + Vue 路由器 + Vuex + Vuelidate 的最佳实践示例项目\n * [Vue.js 一个] 客户端 - [一个] 用 Vue2.5 编写的客户端\n * Vue.js 2.5，带有 vue-cli v3，包括使用 auth0 进行身份验证，作者多米尼克・安格 (Dominik Angerer)，Storyblok\n * Skeleton Vue + TypeScript-TypeScript，VueJS，ElementUI，Vue Router，Vuex，材质图标，BrowserSync，Dockerfile\n * @jesalg 的 PENV Starter - 有关如何在 VueJS，Express 和 PostgreSQL 中使用的基本示例连词。\n * vue-relay-examples - 使用 vue-relay 的示例应用程序的集合。\n * laravel-vue-boilerplate - 具有用户 CRUD 的 Laravel 5.5 SPA 样板，使用 Vue.js 2.5，Bootstrap 4，TypeScript，Sass，Pug 和笑话。\n * Vue 设计系统 - 用于使用 Vue.js 构建 UI 设计系统的开源样板。\n * Vue Bulma 演示 - 一个简单的演示网站，可联合检查 Bulma / Vue JS 和 express。\n * 准备好使用 TypeScript，vuex，vue-router，HMR 等进行生产的入门应用程序\n * vue.js 与 laravel 结合的前阶段分离开发模板 - laravel 护照 / Vue.JS 和 Element UI 的模板网站。\n * 由 Vue.js 进行的 Web 开发动手，作者：Roman Kuba，Packt。(2018 年 5 月)\n * Vue 在线商城 - 在线 SPA 演示，基于 VUE 开发的前分离电子商城前端项目\n * FUE - 使用 Vue.js + Vue 路由器 + Vuex + Vuetify + FeathersJS 的 Admin SPA 客户端和服务器端样板\n * Vue + TypeScript 食谱 - 一本小小的食谱，涵盖了一些不太明显的解决方案，供人们开始使用 Vue + TypeScript\n * Vuejs 示例\n * ASP.NET Core Vue 入门 CLI 3.0 使用 Vue CLI 3.0 和自定义配置 (默认 TypeScript，Vue，路由器) 的 Vue 入门模板，Vuex，Vuetify) 通过 @SoftwareAteliers 与 ASP。＆＃8203; NET Core 集成 (2018 年 9 月)\n * vue-soundcloud 由 Soroush Chehresa 用 Vue.js 2 构建的 Soundcloud 客户端。\n * vue-cart 一个由 vue，vuex 和 vue 路由器制成的简单购物车。通过 crisgon\n * Nuxt + Apollo + Element 一个带有 Nuxt，Element (自定义主题) 和 Vue Apollo 的 Vue.js SSR 样板。\n * vue-daily-zhihu 由 walleeeee 使用 Vue 2.0 和 vue-router＆vuex 构建的简单演示)\n * 木炭使用 Vue CLI 3.0 并由 [Seth Davis] 用 Bulma 样式设置的入门模板 (https://github.com/setholito)\n * 带有 TypeScript 的多页 ASP.NET Core Vue - 多页 ASP.NET Core Vue，Typescript，Vuex，Vue 路由器，布尔玛，Sass 和 Jest 应用程序。有关如何在.NET Core MVC 中将 Vue.js 用作多页 (多个迷你 spa) 应用程序的模板 / 起点。\n * CION-Vue.js 的设计系统样板 - 一个主要为 Vue.js 应用程序设计的设计系统。它利用设计令牌，带有集成代码游乐场的生活风格指南以及用于常见 UI 任务的可重用组件。\n * Vue websockets 示例 - 使用 Vue.js 2 + Node 项目的 Websockets 使用的基本示例，以获取完整的工作示例。\n * Vue (2.0)+ Node.js：一个博客，作者 @ FatDong1\n * vue-todo-list 待办事项列表示例应用程序基于 Vue + Vuex + Vuetify + Vee-Validate\n * Vue.js 和 Ionic v4 示例 - 一组如何在 Vue.js 中使用 Ionic v4 的示例\n * 使用 Vue，Vuex 和 Vue-Router 的个人网站 - MuratcanŞentürk 用 vue，vuex 和 vue-router 制作的简单网站示例\n * 客户端 Vue.js- 演示 - Vue.js 客户端端，用于 [Justin Wash] 的微型，快速加载，无 node.js 的单页应用程序 (https://github.com/Trifectuh)\n * 大型 Vue.js 应用样板 + Vuex\n * 无画布的 Vue.js 上的蛇游戏\n * 使用 CometChat 构建 Vue 聊天应用\n\n\n# 书籍\n\n * Vue.js je 下，作者：Alex Kyriakidis 和 Packt 的 Kostas Maniatis。(2016 年 11 月)\n * 学习 Vue.js 2，作者：Packt 的 Olga Filipova。(2016 年 12 月)\n * Vue.js 2 的威严，作者：Alex Kyriakidis 和 Lestapub 的 Kostas Maniatis。(2017 年 3 月)\n * Vue.js 2 Cookbook，作者是 Andrea Passaglia，Packt。(2017 年 5 月)\n * Vue.js 实战，作者 Erik Hanchett 和 Benjamin Listwon (2018 年春季)\n * 测试 Vue.js 应用程序作者 Edd Yerburgh (2018 年夏季)\n * Vue.js 2 和 Bootstrap 4 Web 开发，Packt 的 Olga Filipova。(2017 年 9 月) -Casa doCódigo 的 Leonardo Vilarinho 的 Front-end com Vue.js。(2017 年 11 月) -Packt 的 Guillaume Chau 撰写的 Vue.js 2 个 Web 开发项目。(2017 年 11 月)\n * Full-Stack Vue.js 2 和 Laravel 5，Packt Anthony Gore。(2017 年 12 月)\n * [Package Mike Street 的 Vue.js 2.x 示例。(2017 年 12 月) -Oleksandr Kocherhin 的 Mastering Vue.js。(2018 年 1 月)\n * Fullstack Vue：Vue.js 完整指南，作者：哈桑・迪吉德 (Hassan Djirdeh)，内特・默里 (Nate Murray) 和阿里・勒纳 (Ari Lerner)。(2018 年 3 月) -Packt 的 Paul Halliday 撰写的 Vue.js 2 设计模式和最佳做法。(2018 年 3 月)\n * Vuex 快速入门指南，作者：Packt 的 Andrea Koutifaris。(2018 年 4 月)\n * 使用 Vue.js 和 Node 进行全栈 Web 开发，作者：Aneeta Sharma，Packt。(2018 年 5 月) -Flavio Copes 的 Vue 手册。(2018 年 7 月)\n * ASP.NET Core 2 和 Vue.js，作者：Stuart Ratcliffe，Packt。(2018 年 7 月)\n * [Vue.js：解释性解释](Casa doCódigo 的 Caio Incau)(https://www.casadocodigo.com.br/products/livro-vue)。(2017 年 9 月)\n * 了解 Vue.js，作者是 Brett Nelson，Apress。(2018 年 8 月)\n * 精益：构建与部署，作者 Leanpub 的 Daniel Schmitz。(2018 年 9 月)\n * 由 Spring 5 和 Vue.js 2 构建应用程序，作者：James J. Ye，Packt。(2018 年 10 月)\n * Vue.js 快速入门指南，Packt 的 Ajdin Imsirovic。(2018 年 10 月) -Frederik Dietz 撰写的 Vue.js 组件模式课程 (2019 年 4 月)\n\n\n# 博客文章\n\n * Vue x Hasura GraphQL\n * 在 Vue.js 中使用 GraphQL 突变\n * 了解如何使用 Vue.JS 构建数据驱动的搜索 UI\n * 使用 GitLab CI / CD 将 Vue.js 应用程序自动部署到 AWS S3\n * 将 Vue 应用程式码头化\n * 使用 Docker 和 Gitlab CI 将 Flask and Vue 应用程序部署到 Heroku\n * [Kevin Peters] 的大型 Vuex 应用程序结构\n * [Kevin Peters] 的在 Vue.js 中构成计算属性\n * 通过实际示例了解如何重构 Vue.js 单个文件组件由 Kevin Peters\n\n\n# 开源的\n\n * PageKit - 使用 Symfony 组件和 Vue.js 构建的模块化轻量级 CMS。\n * npmcharts.com - 比较 npm 软件包并发现下载趋势。\n * Koel - 可以正常工作的个人音乐流服务器。\n * Raven 阅读器 - 使用原子电子和 vue.js 制作的简单 RSS 阅读器。\n * Gokotta - 由电子和 vue 构建的简单音乐播放器。\n * CoPilot - 基于 AdminLTE 和 vue.js 集成的管理门户。\n * Retrospectify - 在敏捷团队中进行协作回顾的简单工具。\n * jade-press - 基于 mongodb，nodejs，koa，vue 等的 Cms。\n * astralapp - 轻松组织 GitHub Stars。\n * EME - 优雅的 Markdown 编辑器。\n * Github-explorer - 一个可以帮助您更好地检查 github 的水疗中心。\n * 酒店 - 从浏览器启动开发服务器，并在几秒钟内获得本地域。\n * Surfbird - 使用现代网络技术编写的 Twitter 客户端。\n * Approach0 - 一个可识别数学的搜索引擎。\n * Flox - 自托管电影，系列和动漫观看列表。\n * JavaScript Guessing Game - 用于识别 JavaScript 工具和库的游戏。\n * vue-ghpages-blog-Vue.js 2 + Webpack 2 基于 GitHub 页面的博客。\n * Vuedo - 使用 Laravel 和 Vue.js 构建的博客平台。\n * vue-music163 - 一个 Vue.js 音乐项目。\n * Tomato5 - 实时协作工具，它将 Pomodoro 技术与团队状态共享板结合在一起。\n * Web 学习 - 一种服务，可让您轻松访问有关 Web 开发和编程的数千个视频教程。\n * ExcelJSON - 一种将 CSV，TSV 与 JSON 相互转换的工具。\n * Materialize-blog - 使用 Laravel5.3 和 Vue2.x 构建的材料博客。\n * VueCompomnentGenerator - 在浏览器上生成 vue 单个文件组件。\n * SDR 新闻 - 来自多个来源 (Reddit，Hacker News 和 Prominent Blogs) 的 Web 设计人员和开发人员新闻。\n * PJ Blog - 使用 Laravel 和 Vue.js 构建的开源博客。\n * Lulumi-browser-Lulumi-browser 是使用 Vue.js 2 和 Electron 编码的轻型浏览器。\n * vue-wordpress-pwa\n * OpenAPI 3 查看器 - 浏览并测试 OpenAPI 3.0 规范中描述的 REST API\n * Stacer-Linux 系统优化程序和监视\n * Distrochooser.de-Linux 初学者的入门指南\n * Buka - 电子书管理\n * 文档 - 一个无需构建过程即可编写文档的框架\n * pm86-Node.js 应用网站的生产流程经理\n * vms - 一个 Vue.js 2.0 管理系统\n * nativescript-vue-NativeScript 渲染器的 Vue.js 实现。\n * piper - 基于 Vue 的拖放式移动网站构建器。\n * mmf-blog-vue2 - 基于 Vue2 (Vue-router，Vuex) 和 Webpack2 的博客。\n * 媒体管理器 - Web 文件管理器。\n * dyu / bookmarks - 一个由 leveldb 驱动的自包含，自托管的书签应用程序，由 Vue2.1.x 构建。\n * JSON 模式编辑器 - JSON 模式的直观编辑器。使用 Vue.js 2 和 Firebase 开发。\n * npm-stats-npm 包下载统计信息面板\n * vue2-admin-lte - 一个将 AdminLTE 转换为可与 Vuejs (v2.x) 一起使用的项目。\n * Dockeron - 基于 Electron + Vue.js 构建的桌面 Docker 项目。\n * Flamme - 一个基于 Education 和 Vue.js 构建的开源 Tinder 桌面客户端，用于教育目的\n * Goldfish - 使用 VueJS，Golang 和 Bulma CSS 构建的 HashiCorp Vault UI\n * 管理 - 基于 Vuetify 的管理控制台，请选中 [在线演示](http：//adminify。 genyii.com)\n * 提示 - 用 Vue.js 编写的框架，用于在 Web 浏览器中创建类似命令行的界面。\n * Hare-🐇 基于 Vue.js 2.x，Koa 2.x，Element-UI 和 Nuxt.js 的应用程序样板\n * Paper-Dashboard - 为 Vue 制作的 Creative Tim Paper Dashboard\n * AdminLTE-VueJS2 - 一个在 AdminLTE 上实现 VueJS (v2.x) 的开源项目。\n * 材质仪表板 - 为 Vue 制作的创意 Tim 材质仪表板\n * Explore-Github-VueJS 2 Github Explorer 使用 API v3\n * CoreUI - 由 Vue.js 支持的开源管理模板\n * ChuckNorris - 使用 VueJS + api.chucknorris.io 构建的 Chuck Norris 笑话生成器\n * LeafPlayer - 一个简单，快速，私有的音乐流服务器。\n * JSON 编辑器 - 一种可识别架构的 JSON 编辑器。用 Vue2 开发。\n * Voten - 使用 Vue2 和 Laravel 构建的类似 Reddit 的平台。\n * News Weaver - 使用 VueJS 和 VuetifyJS 制作的基于 Web 的 RSS 阅读器 / 聚合器\n * 唤醒 Billie Joe！- 根据绿日的歌曲 “唤醒我，当九月结束” 而倒计时到十月的网站。使用 Vue 和 Firebase 创建。\n * Astrum - 旨在包含在任何 Web 项目中的轻量级模式库。\n * vue2-pwa-vision - 带有 Vue2 + Vuetify + 渐进式 Web App 的人脸检测 Google Cloud Vision\n * vue2-pwa-rekognition - 使用 Vue2 + Vuetify + Progressive Web App 进行人脸检测的 Amazon Rekognition\n * AmmoBin.ca - 有关加拿大在线弹药价格的元搜索网站\n * SPA-asp.net-api-vuejs-- 用于使用基本任务管理和消息传递的 Vue.js 单页应用程序 ASP .NET Webapi 2 和 SQL Server\n * Book-Trading-Club - 与您所在地区的其他图书读者进行贸易或借阅图书。使用 nodejs 和 vuejs2 构建\n * vuejs-extension-pack vscode - 扩展 packf 或 vscode，具有用于 Vue.js 开发的流行 VS Code 扩展。\n * Wiki.js - 基于 NodeJS，Git 和 Markdown 构建的现代，轻量级且功能强大的 Wiki 应用程序\n * vue-pwa-speech - 在 Vue2 + Vuetify + Progressive Web App 上使用 Google Cloud 进行文字演讲\n * vue-speech-streaming - 在渐进式 Web App 上执行流式语音识别可通过 Google Cloud Speech + socket.io 实时生成语音到文本\n * 我的动画列表 - 一个易于获取 CSS 动画代码的工具\n * vue-input-streaming - 使用 Pusher 进行 TextInput 流实时和双向数据绑定广播\n * TidyTab - 一个 Chrome 扩展程序，用于整理这些标签。\n * peregrine-cms - 基于 Vue.js 和 Apache Sling 的可选 CMS\n * concept-to-clinic - 具有 Vue.js 界面的肺癌预测项目\n * grid-awesome - 使用 css 显示为网格布局生成样板 css：grid; 属性。\n * Light Bootstrap 仪表板 - 为 Vue 制作的创意 Tim Light Bootstrap 仪表板\n * Hubaga - 适用于开发人员和其他数字商店的免费轻量级 WordPress 电子商务插件。\n * vue-webpack-buefy - 具有全功能 Webpack 和 Buefy 的 Vue.js 入门\n * Coypu - 类似文本编辑器的每周计划\n * 核心服务器 - 高度可扩展的 VueJs 框架，具有集成的 API 系统和多种高级功能。\n * discord-logo - 基于 SVG 的 Vue.js 动画不和谐徽标生成器。(Github 页面)\n * node-vue-template - 用于使用 Node.js (API) 和 Vue.js (SPA) 构建完整应用程序的入门模板，其中包括一些软件包和配置，以帮助快速开始开发。\n * vue-storefront-Vue.js 店面 - 电子商务的 PWA。100％离线，与平台无关，无头，支持 Magento2。\n * fd-vue-IoT 框架的 Vue.js 客户端\n * wildfire - 其他注释插件的替代品。\n * 收据 - 简单的自动化桌面应用程序，可以从 Uber 和 Lyft 下载并整理您的税款发票。\n * vue-chrome-extension-boilerplate - 使用 Vue.js 和 Webpack 进行 Chrome 扩展的样板\n * TimeMark - 一个可以记录您的时间的时间管理器，还将开发更多功能。\n * Laravel Enso - 由 Bulma，VueJS 和 Laravel 构建的 SPA 管理面板，开箱即用地打包了很多功能。\n * 代码说明 - 针对使用 Electron＆Vue.js 构建的开发人员的简单代码段管理器。\n * Pomotroid - 简单，美观且可自定义的 Pomodoro 计时器。\n * XMR Miner - 加密货币 (XMR) 挖掘应用程序，使用 Vue.js 构建并使用 D3 进行可视化\n * XMR Paper-Monero 钱包生成器，使用 Vue.js 构建\n * JoyProxy-Chrome 扩展程序，用于处理代理设置\n * 活动自动化 - 管理日常活动并及时获取报告。\n * jsettlers-web 流行的德国棋盘游戏，用赚来的资源建造六角形，定居点，城市，道路\n * Tamiat CMS-Tamiat 是面向前端的 CMS，使用 Vue.JS 作为前端，并与 Firebase 集成了后端功能。\n * vuegg-vue GUI 生成器：一次性创建模型和代码！它通过其可视化编辑器利用页面，组件和样式的创建。为您的下一个 vuejs 项目生成所有脚手架代码。\n * Podlove Web Player - 经过 Podcast 优化的基于 HTML5 的音频播放器，具有章节，字幕和嵌入功能。\n * Leo Vue - 使用开源 Leo 概述编辑器 / IDE 创建带有嵌套菜单的 Web 应用程序，并支持内容中的 Vue 组件。\n * Justine - 使用 Vue 组件作为文档模板的可配置 HTML 文档生成器 (当前支持 JSDoc)\n * Deezer-Vue - 使用 Vue \\ Vuex 构建的 Deezer 客户端\n * Vuep.run-Vue 的在线 SFC 编辑器\n * V·oogle-Google.com，已修订\n * Pomidorus - 使用 Vue 和 D3 构建 Pomodoro 时间跟踪器 🍅\n * Hubble-：telescope：浏览 GitHub Stars 的历史。\n * Vuepress - 简约的 Vue 驱动的静态网站生成器\n * Socialhome - 具有社交网络功能的联合富个人资料生成器\n * GenVue - 一个可托管的 Web 应用程序，允许机密用户上传和共享基于 Vue.js，Vuetifyjs 和 NetCore WebAPI 堆栈的私有文件\n * vue-array-Vue 下的数组对象操作，Vue 下的数组对象操作使用此包可操作数组。Vue 可以监视阵列中的更改\n * Laqu-l - 具有 Quasar Framework，带有 OAUTH 2.0 身份验证的 GraphQL API 后端，Firebase 就绪，多语言功能等的完整应用入门套件。\n * Protovue - 一个原型组件库，可帮助设计人员和开发人员快速搭建抽象的应用程序布局。\n * Chattier - 使用 Laravel 5.6，Vue.js 2 和 Bulma (Buefy 组件 + Bulmaswatch 主题) 构建的 SPA 社交网络。还使用 JWT 身份验证。\n * chrome-ribbon-reminder - 使用 Vue 和 Async / Await 编写的 Chrome 扩展程序。使用弹出显示并更改徽章计数。\n * 收藏夹 - 一个简单的简单收藏夹生成器。\n * 模块化家谱 - 使用 Laravel 5.7，Vue.js 2.5 和各种组件的家谱 / 族谱管理系统。工作正在进行中。\n * 最小注释 - 使用 Vue.js 构建 Web 应用\n * 烘焙一个应用程序，旨在帮助咖啡爱好者在学习 Laravel + Vue.js 的同时找到他们的下一杯咖啡。\n * 堆栈编辑 - 浏览器内 Markdown 编辑器\n * Bael 博客模板 - 静态生成的博客模板，该模板使用 Netlify CMS 作为后端，使用 Netlify 进行托管。具有野蛮美学，模糊搜索，无服务器电子邮件注册等功能。\n * Buefy Shop 示例商店，开源的，具有 Nuxt，Stripe，Firebase，Bulma 和无服务器功能。\n * sysmon 用于 Linux 的 AB / S 模式系统监视器。您可以在任何地方通过 Web 浏览器远程监视系统资源的使用情况。\n * eth-vue 一个松露盒子，提供您快速构建具有 Vue.js 身份验证功能的以太坊 dApp 所需的一切，包括易于部署到 Vue.js 的配置。 Ropsten 网络。它还具有 Gravatar 功能。\n * Nippon-color 受 nipponcolors 点 com 的启发。这是使用 vue-cli 3 的日本彩色 PWA 版本。\n * Saleina CMS 一个静态网站内容管理系统，使用 git 作为后端使用 vue 构建。\n * Vuido 用于创建本机桌面应用程序的框架。它可以使用本机 GUI 组件在 Windows，OS X 和 Linux 上运行。\n * YouGetYouTube 视频 / 音频 / 字幕下载器 + Cutter\n * Vue Pug 手写笔 Vue + Pug + 手写笔样板 💚🐶🖌\n * Crypto News 允许您转换加密货币，查看每个 ICO 的最新新闻和汇率–来自一个加密货币世界的所有数据。\n * Epiboard 一个新的选项卡页面扩展，具有材料设计和有用的功能：new：：tada：\n * zhudyos / duic 分布式配置中心：新：\n * Vuemmerce 使用 Vue.js 和 Bulma 框架构建的免费电子商务模板：新：\n * Nucleus 分层体系结构 ASP.NET Core API 和 Vuejs 客户端应用程序启动模板\n * Carpoolear 阿根廷拼车应用程序的开源 Vue.js 前端 (移动和 Cordova 应用程序)：[Carpoolear](https://carpoolear.com。 ar)\n * Statusfy：Statusfy 是一个状态页面系统，易于使用且完全开源。\n * DynamoDb-GUI-Client：DynamoDb 的跨平台 GUI 客户端\n * RosterWebApp 开源名册 Web 应用程序，允许对员工 / 团队的名册进行工作会议和其他功能。\n * Vue 电子商店 Templet - 带有 vue /vuex/vue-router 和 bootstrap4 的电子商务 Templet。\n * Kitty Ipsum - 生成由不同语言的 “喵” 组成的 lorem ipsum。\n * Git Superstar - 计算您的 git 星级和顶级存储库。\n * Twill - 用于 Laravel 的开源 CMS 工具包，可帮助开发人员快速创建直观，强大而灵活的自定义管理控制台。\n * MATH_BOT - 通过对机器人编程来学习数学。\n * Vue 填字游戏 - 一个基于 Vue.js 的填字游戏构建器和填充前端应用程序。使用 CodeSandbox 构建。\n * Vue 组织结构图 - 免费管理和发布您的交互式组织结构图 (orgchart)，无需网络服务器。\n * 哔 - 使用 Vue.js 和 Ionic 4 构建的帐户安全扫描程序\n * Vue CRUD - 基于 Vue.js 的 REST-ful CRUD 系统。Vue CRUD 允许您轻松创建快速应用程序，例如 CMS 或 CRM。\n * Vue HQ 管理员仪表板–由 Vue，Sass，Firestore 和 Netlify 支持的现代管理仪表板。\n * MToDo - 带有简单身份验证的迷你待办事项列表，该身份验证是使用 Vue.js 和 JSON Server 作为数据模拟构建的。非常适合作为发现有关真实 Vue.js 参考的任何人的参考\n * FireX 代理 - FireX 代理是用户值得信赖的 Chrome 和 Firefox 浏览器扩展程序，可让您解除阻止任何网站的权限并私密安全地浏览 Web。🛡\n * VueSolitaire - 接龙 (spider，klondike) 包含在 Vue.js 中。\n * Thermal - 一站式访问所有 Git 存储库。\n * QMK Configurator-Vue.js 中的 QMK 固件键盘配置 UI。\n * Eplee 用 Vue.js 和 Electron.js 制作的甜美，简单的 epub 阅读器。\n * vue-realworld-example-app - 示例性全栈 Medium.com 克隆\n * 每日 - 精选的开发新闻已传递到您的新标签页 👩🏽‍💻\n * Laravel 文件管理器 - Laravel 的强大文件管理器\n * Vue 加密仪表板 - 用 Vue.js 制作的 Cryptocurrency 仪表板\n\n\n# 商业产品\n\n * Wijmo - 具有 VueJS 支持的 UI 控件的集合。\n * 整理说明\n * Formester - 表格，电子邮件营销自动化变得容易\n * ChatWoot - 通过 Facebook Messenger 进行 Livechat 和代理协作。\n * VueA - 具有多种布局和 laravel 版本的 VueJS 管理模板。\n * Teleo - 团队合作应用在讲话，计划和做事之间轻松移动\n * Cover - 基于 Vue.js 构建的高质量组件库\n * EducationLink - 适用于教育代理商和大学的 CRM 和销售自动化。\n * Pragmatic v2.0 - 使用 Vue.js 和 Element 构建的响应式和可配置管理模板。\n * 座位 - 简单而现代的团队沟通和协作解决方案。\n * Moonitor - 台式机的加密货币跟踪器。\n * Deskree - 将想法，任务和问题集中在一处的在线协作平台。\n * OSHCExpress-OSHC (海外学生健康保险) 保险 (澳大利亚国际学生保险) 的比较和电子商务。\n * Agiloo - 适用于 Scrum 和看板的项目管理应用\n * ScaffoldHub - 带有 NodeJS，MongoDB 或 SQL 的 VueJS 在线 Web App 生成器。\n * Commandeer - 可以重新构想管理。使用 Vue.js 和 Electron 构建的桌面云管理应用程序。\n * SA Email Builder - 使用 VueJS 和 Quasar Framework 做出响应的电子邮件模板构建器\n\n\n# 应用 / 网站\n\n * Laravel Spark\n * 副视频\n * 表格\n * Laracasts\n * esa.io\n * 稀土掘金\n * 布拉格机场\n * 投资组合网站\n * 乐风乐团\n * Atiiv - 面向私人教练及其客户的应用程序。\n * 统计\n * Embalses！- 使用美国地质调查局数据库报告水坝水位的工具。\n * TravelMap - 旅行者基于地图创建博客的简单方法。\n * 适当的衬衫制造商 - 定制衬衫的制造商。\n * CheckIt\n * Reddit 新闻 - 浏览器扩展程序，用于显示来自 reddit 的通知和新闻。\n * 卡通网络自行制作 Powerpuff\n * 小桃酱\n * cloudradioo-Web 应用程序，可随机播放 soundcloud 图表中的前 50 首歌曲\n * vNotes - 使用 Vue.js 和本地存储 API 的 Markdown 简洁漂亮的记事本。\n * 开放功能计算机\n * Dermail - 用 Vue.js 编写的针对 Dermail 的 Webmail 客户端，Dermail 是用 node.js 编写的邮件系统。\n * octimine - 专利搜索引擎。\n * Draxed - 基于 Web 的 MySQL 和 PostgreSQL 数据浏览器和仪表板管理器。\n * Leapspotleap - 查找您附近的 Wikipedia 文章的简单方法。或只是导航到一个地方并找到有趣的维基百科信息。响应式 Web 应用程序。\n * X-SONGTAO - 个人博客。FE 和 CMS 位于同一 vue SPA 中。\n * Jobinja - 在伊朗运营的求职委员会和职业平台。\n * 滚蛋吧！莆田系 - 显示所有 Put 田医院的信息\n * Jobi：招聘平台\n * 香料屋 - 高质量香料的电子商务网站。结帐，购物车，产品详细信息页面和搜索是使用 Vue 构建的。Checkout 是用 Vue＆Vuex 编写的单页应用程序。\n * Livestorm - 网络研讨会 / 直播活动应用。\n * Metric Loop - 一个技术服务和解决方案网站。\n * 保持\n * 全球考试 - 语言能力测试在线培训\n * SlugSurvival - 一个可帮助学生更好地计划课程的网络应用程序 (业余项目，不属于 UCSC)。\n * FreePoll.Online - 使用 Vue.js，vue 可排序，语义 UI 和 Zappa 构建的群体决策工具。\n * GitRelease - 使用带有电子的 vue.js 在 mac 菜单栏上跟踪 github 项目的新版本。\n * 12BAY.VN - 在线预订机票。\n * PLAYCODE.IO - 快速前端实验的游乐场。\n * The Void Radio - 地下室内音乐在线广播。\n * Bitly Vue - 使用 VueJS 和 Bitly API 缩短 URL。\n * Storyblok - 使用 VueJS 作为前端的基于 API 的 / 分离的 CMS。\n * WizzAir\n * 移至 HTTPS - 有关将不同平台 / 托管站点移至 HTTPS 的指南\n * Booknshelf - 发现有关不同主题的出色书籍和书架。\n * Top HN - 在 Hacker News 上实时显示最新新闻活动\n * Euronews-Euronews 是一种多语言新闻媒体服务，总部位于法国里昂。\n * Roozameروزامه??-Roozame 是波斯语的智能新闻媒体服务。\n * Koumoul\n * NinjaCalc - 一组与嵌入式工程相关的计算器，使用 vue.js 作为开源单页应用程序构建。\n * Vue.js Feed - 最新的 Vue.js 新闻，教程，插件等。基于 Vuedo，使用 Vue.js 和 Laravel 制作。\n * 蒜瓣 - 使用 Vue2.0 和 Douban API 开发的网络应用\n * 猜对了 - 一个 “猜单词” 游戏 - 用 Vue /vuex/vue-router (前端) 和 Laravel / MySQL (后端) 编写。代码是 GitHub 上的开源 (尽管不是在 kdcinfo 上运行游戏的实时文件)。\n * GRAP - 商业通讯服务\n * 简易模拟\n * mmf-blog-vue2-ssr 使用 Vue 2.0，vue-router 和 vuex 构建的博客，并具有服务器端渲染\n * JSON 模式编辑器 - 使用 Vue.js 和 Firebase 构建的 JSON 模式的直观编辑器。\n * Winsome Trivia - 一个单人或多人琐事游戏，具有由 Vue.js 构建并由 Open Trivia 数据库提供支持的 2,000 多个独特问题。\n * Moon Organizer - 农历日历应用\n * Flash-Vue-“未来的抽认卡” 将学习无处不在：rocket：\n * Kinderbesteck - 具有 Vue2.0，Vuex，Vue 路由器的完整在线商店 SPA\n * n2ex-vue ssr (必须) 网站，请使用 v2ex API\n * 词库 - 众包在线词库\n * Chattanosy - 由社区提供的田纳西州查塔努加新事物的数据库。\n * PAIXIN - 正版图片销售网站\n * CodeBottle - 将代码段拖放到您的项目中\n * 1XBET - 自 2007 年开始运营的博彩公司\n * MyOwnTV - 用于创建互联网电视的流媒体网站\n * CrowdCircus - 欧洲最大的众筹和众筹平台\n * 与某人交谈 - 与世界各地的陌生人进行免费，匿名和保密的在线文本聊天。\n * 车轮工厂 - ui 组件和库共享网站\n * ابیاتنابپارسی- 波斯诗集\n * Ripplectron-Ripple (区块链硬币) vue-electron 的电子钱包桌面客户端\n * PingBreak 使用 vuejs 作为实时仪表板的免费，简单的网站监控服务\n * Todoist 致敬 - Todoist 克隆，用 Rails + Vue 编写\n * JSON 编辑器 - 使用 Vue2 和 firebase 构建的可识别架构的 JSON 编辑器。\n * Develteam - 独立游戏开发者的社交网络。\n * Mixsii - 适用于青少年，成人，家人和朋友的免费视频聊天室网站。\n * PipQuest-Vue 中内置的复古益智游戏\n * Matryx - 去中心化的协作平台。\n * iPrevYou-YouTube™ 播放器 - 用于在桌面上观看 youtube 视频的 Chrome 应用。\n * 物品管理器 - 传送命运 2 游戏物品的应用程序。\n * 前端大师 Vue 简介 - 前端大师全日制课程\n * TR-101 - 鼓合成器 / 音序器。\n * Bazaar - 媒体共享平台。\n * WynnStats - 非官方的 WynnCraft 统计信息。\n * Vectr - 免费的矢量图形软件\n * 大脑位 - Emotiv 耳机的 P300 在线拼写机制\n * Coin Dashboard - 完全客户端的加密货币资产仪表板。\n * Habitica - 角色扮演游戏形式的在线任务管理应用程序。\n * MadeWithVueJs - 由 Vue.js 制作的项目图库 (网站本身也使用 Vue.js)\n * CodeDependencyScanner - 显示.Net 汇编代码依赖关系的 AC＃dektop 应用程序使用 Vue，Neutronium 和 D3.js 构建。\n * 千以太坊首页 - 百万美元首页被重新构想为以太坊 DApp。在 Vue.js 上构建并开源。\n * 让我们着迷 - 免费的在线图像升级和神经网络增强功能。\n * Pi.TEAM - 在线发票和会计 - 简单易用的在线会计和发票，单用户和自由职业者免费。\n * Vuethwallet - 一个简单的应用程序使用 vuejs 生成以太坊钱包。\n * Tipe - 下一代 API 优先的 CMS。使用功能强大的编辑工具创建内容，并使用 GraphQL 或 REST API 从任何地方访问它。停止让 CMS 决定如何构建应用。\n * Vuethexplore - 一个简单的应用程序使用 vuejs 探索以太坊区块链。\n * Fintechers - 以 Fintech 为重点的工作委员会。\n * Devjournal - 项目和构想的协作待办事项列表。\n * Bubbleflat - 一种在线平台，可通过搜索具有相似生活方式，兴趣爱好或学校的人来帮助学生和年轻的专业人 士找到理想的室友。Laravel 和 Vuejs\n * TeaQuinox Tea Co - 专门从事散叶茶的电子商务网站。\n * blip - 测试网站的速度，移动友好性，安全性和 HTML5 文档类型。在某个位置查找商家，然后整体测试其网站，或者只是测试您自己的 URL。\n * sunpos - 太阳位置，仰角，方位角，黄道 / 赤道坐标和日出 / 日落时间 (朱利安日) 计算和转换实用程序。使用纯 JS，Vuejs 和 i18n Vuejs 本地化插件对网站进行编程。可视化是使用 D3.js 创建的。\n * U3xyz - 基于 vue ssr 的个人博客。\n * 27.ua - 乌克兰的互联网大型超市\n * 国际象棋守护者 - 从您自己的游戏中回答国际象棋位置问题。\n * 二十一点休息 - 二十一点的快速游戏\n * MECHANICAL - 适用于 Firefox 的 Reddit mod，可显示上下文数据见解。\n * GameVix - 与他人交换您使用过的视频游戏光盘，无忧。具有材料设计的 PWA。\n * VivifyScrum - 适用于交付团队的敏捷项目管理应用程序。可定制的 Scrum 和看板板。\n * 9GAG - 流行的在线平台和社交媒体网站\n * CryptoVue - 实时加密货币仪表板\n * 厨房故事 - 烹饪平台\n * MailRabbit - 在没有开发人员的情况下创建，A / B 测试和监视交易电子邮件。\n * Vue 资源精选 - 出色的 Vue 组件列表，类别，内嵌演示秀和简介\n * Cronhub - 无痛 Cron 监控工具\n * wrkprty - 针对自由职业者，远程工作者和希望离开办公室的专业人员的弹出协作活动。\n * 用爱制造 - 世界各地的 “用爱制造 ❤️” 倡议是庆祝 🎉，促进 📣 和建立 build 品牌的运动。它从 Dribbble，ProductHunt，Behance 和 Techcrunch 等多个来源获取 Tech 新闻，设计灵感和趋势。💝\n * 产品路径 - 在创业公司和科技公司中发现超过 1,000 个产品工作。\n * V·oogle-Google.com，已修订。一个笑话项目。😃\n * 经纪人注释 -' 研究成为房地产经纪人 '：房屋：\n * SyncLounge-SyncLounge 是用于在多个位置的多个播放器之间同步 Plex 内容的工具。\n * HCE.it - 一家意大利代理商的网站，完全由 Vue 使用基于 Laravel 的无头 CMS 创建。\n * 页面 - 网页设计灵感\n * Scrumpy - 敏捷团队的漂亮项目管理工具\n * Spektrum-Spektrum Media Agency 网站\n * SPKSPK 生态系统的网站\n * IDDEF☪️ 重视人类的网页，CMS，CRM 和捐赠以及所有电子商务页面的协会联合会均使用 Vue.js，Vuex 和纯 JavaScript 设计 🙏\n * 配置文件管理 - 一种管理配置文件的简单方法\n * 烘焙这个应用程序旨在帮助咖啡爱好者在学习 Laravel + Vue.js 的同时找到他们的下一杯咖啡。\n * YBR - 集中的 YBS 公开电子投诉管理系统。(全 SPA)\n * Regex Fiddler\n * Myanpwel - 活动票务平台的网站。\n * CryptoArte - 以太坊的艺术品收藏，不可替代的代币和 Dapp。\n * Muuviez - 具有时尚设计的电影发现和跟踪网站\n * NAGA VIRTUAL-NAGA VIRTUAL 是第一个独立的虚拟商品市场。\n * Scroll.in-Scroll.in 是独立的新闻，信息和娱乐企业。\n * Akunyi - 慈善网站\n * Mark Ruffalo 会做什么？- 动机网站基于 Mark Ruffalo 在获得成功之前在数百次试镜中失败的故事。\n * 白兰地 - 菜单栏的品牌资产管理器。\n * Ruster 社区 - CN 的 Rust 全栈社区论坛。\n * NBC Sports-NBC Sports 是一家体育新闻网站。\n * WITHIN - 虚拟现实中的非凡故事。\n * plottr.io - 规划跑步和骑车路线\n * beCamp - 在弗吉尼亚州夏洛茨维尔举行的由社区组织的技术会议。网站代码是开源的。\n * Trustpilot - 免费开放给所有评论平台。\n * Lagom - 简单，直观且响应迅速的 WHMCS 主题\n * ScoutMyTrip-Roadtrip Planner - 印度的公路旅行计划应用程序，可帮助旅行者建立行程，发现景点，寻找酒店，加油站，美食餐厅等沿路线。\n * Podflix - 播客应用。\n * GamersClub - 巴西最大的电子竞技社区发展公司\n * MIT - 麻省理工学院的官方网站。\n * Elvenar-Elvenar 是一个基于浏览器的幻想城市建设者游戏。\n * 信标 -：blue_heart：这项服务可让您在多个网站之间共享内容。\n * Artfinder-Artfinder 是买卖艺术品的网站。\n * Rolodromo - 专门用于桌面 RPG 的西班牙语网站。\n * GitHubExplorer - 用于探索 GitHub 的纯静态页面 webapp。使用 Vuejs 和 GitHub GraphQL API v4 。\n * 主题演讲 - 与 Vue 一同展示。\n * HappyPlants - 用于组织植物的渐进式 Web 应用 🌱。\n * Pocket Lists - 世界上最友好的待办事项列表应用程序。\n * Padlet - 协作公告板\n * Glovo - 按需交付\n * MySigMail-MySigMail 是一个免费的浏览器电子邮件签名生成器，无需创建帐户\n * Wordguru - 一个简单的口头游戏，您可以分成几个小组，并尝试猜测尽可能多的关键字。\n * ApiFlash - 基于 Chrome 的截图 API，基于 AWS Lambda 开发人员专用\n * Kitty Ipsum - 生成由不同语言的 “喵” 组成的 lorem ipsum。\n * Git Superstar - 计算您的 git 星级和顶级存储库。\n * DECS - 分散的多合一工作区，用于管理代码段并保护敏感数据。\n * Careup - 牙医 🦷 的业务管理工具。\n * Asciiur - 互联网的 ascii 艺术收藏\n * Tapestri Designer - 用于设计用于基因组测序实验 (NGS) 的 PCR 引物的免费工具\n * Remote-Access-SSH - 使用 node-ssh 的基于 Web 的远程主机访问\n * 地图标记生成器 - 一个免费的在线工具，可即时生成自定义地图图标\n * Monocle Reader - 在一个地方关注提要，Twitter，YouTube，博客和其他所有内容。\n * 前站导航 - 前端社区，文档收录。\n * Geenes - 生成调色板并将其应用于 UI，然后将其导出到草图或代码中。\n * Blurrish-Mac / Windows 加密的 Morning Pages 日记，由 Vue 和 Electron 构建。书写时模糊，因此可以在公共工作区中记录日志。\n * ExifShot - 摄影的方式和方式，精美绝伦。\n * Studolog - 用于学生的在线文件共享平台，包括测试人员和评论。目前仅捷克语 🇨🇿。\n * sum.cumo–数字业务模型 (以 Vue 作为技术堆栈的核心)。\n * Gamebrary - 用于组织视频游戏收藏的开源工具。\n * Guds - 比较各大超市的价格。仅适用于墨西哥 🇲🇽。\n * Premium Poker Tools - 扑克玩家用来学习的东西。\n * QMK Configurator - 从浏览器配置，构建和下载自定义 QMK 固件。\n * Worksome - 适用于合格的 IT 专业人员，自由职业者以及希望雇用他们的公司的市场 / 平台。\n * Translator-vuejs - 使用 Vuejs，Yandex API 和 ResponsiveVoice.js API 构建的翻译应用程序。\n * 大计时器 - 用于研讨会，会议和演示的全屏倒数计时器。Big Timer 可以帮助研讨会主持人，会议椅，设计短跑选手，演示者和有抱负的游戏节目主持人坚持自己的计划。\n * Wirenook - 用于构建响应式网站线框的免费在线应用程序。高保真和低保真，项目共享和 svg 下载。\n * Kvalitetskontroll - 为建筑业量身定制的挪威管理系统。\n * Poolside FM - 复古音乐播放器\n\n\n# 互动体验\n\n * Jean-Pierre Morin | 1700 LAPOSTE\n * Facebook NewsFeed\n * YouTube AdBlitz 2016\n * Omnisense 体验\n * Louis Ansa 网站 (投资组合)\n * Djeco.com\n * Tolks.io\n * 遇见 Graham\n * NOIZE 原创\n * TR-101 合成鼓机\n * Bootstrap 4 编辑器\n * Subtletab - 浏览器扩展\n * web-riimote - 将您的智能手机变成 3D 控制器 (源代码)\n * CSS ColorVars - 交互式工具代码生成 (源代码)\n\n\n# 企业用途\n\n * 塞恩斯伯里的\n * AREX - 大疆创新 -Octimine GmbH - 浑力集\n * GitLab\n * Clemenger BBDO Melbourne\n * ZenMate\n * 代码\n * Storyblok\n * Monito - 建立 Booking.com 以进行国际汇款\n * Hypefactors - 数据驱动的 PR 专业人员的软件 -Adobe -IBM\n * Cotabox\n * Aromajoin - 基于硬件，软件和材料技术的协调发展最好的数字气味产品。\n * 家乐福\n\n\n# A11y\n\n * Vue A11y 项目 - Vue.js 社区项目，用于改善 Web 可访问性。\n * vue-skip-to - 它可以帮助仅使用键盘的人跳到最重要的地方。\n * vue-axe-Vue.js 应用程序的可访问性审核。\n * vue-announcer-Vue 的一种简单方法，可为屏幕阅读器宣布任何有用的信息。\n * eslint-plugin-vue-a11y - 用于.vue 中元素可访问性规则的静态 AST 检查器\n * vue-focus-lock - 这是一个陷阱！焦点锁定。A11y util，用于确定焦点。\n * vue-a11y-calendar - 可访问的国际化 Vue 日历。\n\n\n# 表格\n\n * vuetable-2 数据表简化\n * vue-tables-2-Vue.js 2 网格组件。\n * vue-datasource - 一个 vue.js 服务器端组件，用于创建动态表。\n * ag-grid-vue - 用于 ag-Grid 的 Vue 适配器。\n * vue-data-tables-Vue2.0 数据表，基于 element-ui。\n * vue-floatThead - 用于 floatThead 的 Vue 2.0 组件，floatThead 是一个浮动的粘性表头插件。\n * vuetiful-datatable - 具有排序，过滤，分页，分组和聚合的数据表组件。\n * vue-materialize-datatable-Materialize CSS 的 VueJS 数据表\n * vue-good-table - 一个易于使用的 VueJS (2.x) 表插件，具有排序，列过滤，分页等功能。\n * vue-grid-Vue.js 的灵活网格组件\n * vue-easytable - 基于 Vue2.x 的功能强大的表组件\n * vue2-datatable-component - 永远不会烂的 Vue.js 2.x 最佳数据表\n * vue-js-grid-Vue.js 2.x 响应式网格系统，具有平滑的排序，拖放和重新排序\n * vue-handsontable-official 用于 Handsontable 电子表格组件的 Vue.js 包装器\n * vue-grid - 用于 Vue.js 2.x 的功能强大的 flexbox 网格系统，使用内联样式构建\n * vue-data-tablee - 基于 vue-good-table，一个简单漂亮的表组件\n * vue-scrolling-table - 具有 flexbox 大小的简单表格组件，滚动表格主体 (水平和垂直)，所有 tr /th/td 的插槽渲染。\n * el-search-table-pagination - 将 Element UI 的 Form，Table 和 Pagination 组件组合在一起。基于 Vue 2.x。(详细信息)\n * vue-crud-x - 使用 Vuetify 布局的可扩展 Crud 组件，除了通常的页面，排序，过滤器之外，它还能嵌套的 CRUD，自定义表单，过滤器，操作。\n * Vue 数据表 - VueJS 支持的数据表，具有 Laravel 服务器端加载和 JSON 模板设置\n * v2-table - 一个基于 Vue 2.x 的简单表组件。\n * vue-cheetah-grid - 在 Vue.js 的画布上工作的高性能网格引擎。\n * vue-table-component - 直指 Vue 组件以显示表。\n * @ lossendae / vue-table-Vue.js 2.x 的简单表组件，具有分页和可排序的列。\n * el-data-table - 基于 element-ui，可以轻松完成任务\n * DevExtreme Vue 网格 - 用于 Bootstrap 的基于插件的高性能 Vue 数据网格。\n * vue-ads-table-tree - 具有过滤，排序和分页功能的 vue Table 组件。行可以具有子行，因此可以构建树结构。它还支持异步调用以从后端加载行。它是使用 CSS 框架 tailwindcss 构建的\n * 用于 Vue 的 Synfusion 数据网格 - 显示和处理具有分页，排序，过滤，编辑和分组等功能的表格数据。\n * @ marketconnect / vue-pivot-table - 数据透视表的 vue 组件\n * vue-teible-Web 的轻巧灵活的表组件：zap：\n * vue-jqxgrid - 具有过滤，排序，编辑，分组，数据导出和其他功能的 Vue 数据网格。\n * vue-jqxpivotgrid - 具有枢轴设计器的 Vue 枢轴数据网格，钻取单元格，枢轴功能。\n * toast-ui.vue-grid- [TOAST UI Grid] 的 Vue 包装器 (http://ui.toast.com/tui -grid /)。\n * vueye-datatable-Vueye 数据表是基于 Vue.js 2 的响应数据表组件，它按页面组织数据以便于浏览。\n * vue-sorted-table - 一个将表转换为排序表的插件。支持嵌套的对象键，自定义图标和可重用组件。\n * vue-bootstrap4-table - 基于 Vue 2 和 Bootstrap 4 的高级数据表，其中包括多列过滤，多列排序，分页和信息，复选框行和高度可定制的插槽选项。\n * vuejs-smart-table - 直截了当的表格组件，使用原始 HTML 表格结构，并具有开箱即用的排序，过滤，分页和选择功能。\n * @ myena / vue-table - 用于客户端 / 服务器数据处理的表组件。筛选，排序，分页，分组，展开详细信息行。高度可定制的通孔，用于过滤器，标题，列，分页，详细信息行。\n * vue-jd-table-Vue 2 的高级且灵活的数据表组件。功能丰富：搜索，过滤，导出，分页 (传统和虚拟) 滚动) 等等！\n * vue-grd - 用于网格布局的简单，轻巧和灵活的 Vue.js 组件。\n * iview-table-page - 将 iview UI 的表和页面组件组合在一起。基于 Vue2.x。并听到了一些使用 iview-table-page 的示例。\n\n\n# 通知\n\n * vue-notifications-Vue.js 不可知的非阻塞通知库。\n * vue-easy-toast-vue /vue2 的 Toast 插件。\n * vue-toasted - 适用于 VueJS 的自适应 Touch 兼容 Toast 插件。\n * vue-notifikation-Vue.js 通知插件。\n * vue-notification - 使用 Velocity 制作动画的 Vue.js 2 + 通知插件。\n * vs-notify - 微小但功能强大的通知组件，没有依赖项。\n * vue2-notify-Vue.js 2 + 通知插件。\n * vue-notifyjs - 极简主义，3kb 可通知通知插件\n * vueup-Vue.js 的简单，轻巧和优雅的全局通知弹出窗口\n * vuex-flash-Vuex 2.x 中用于 VueJS 2.x 的 Flash 消息组件。\n * vue-snotify-Vue.js 2 通知中心\n * vue-notify-me-Vue 的可堆叠通知警报\n * vue-noty - 围绕 Noty 的 Vue.js 2 包装器\n * vue-notice-Vue.js 2 使用本机 API 围绕 Noty.js 进行包装\n * vue-flash-message - 简单但灵活的通知插件\n * @ voerro / vue-notifications - 具有 HTML 和样式支持的简单 Vue.js 2 通知插件。\n * vue-awesome-notifications - 具有高级异步支持的轻量级 Vue.js 通知库。\n * vue-izitoast - 围绕 IziToast 的 Vue.js 2 包装器。\n * vue-toastr-2 - 基于 toastr 的 Vue.js 的简单敬酒通知)\n * vue-snack - 基于 Google Material 的 Snackbars 的 Vue.JS 插件。\n * vue-m-message-vue 的消息插件。\n * vue-notification-bell - 用于显示通知的 Vue UI 组件。\n * v-tostini-Vue.js 2.x 真正纯正的吐司通知机制。不包括 CSS。\n * vue-toast-notification - 另一个 Vue.js Toast 通知插件。\n\n\n# 装载机\n\n * vue-radial-progress-Vue.js 的径向进度栏组件。\n * vue-simple-spinner - 适用于 Vue.js 的简单灵活的微调器\n * vue-wait - 适用于 Vue / Vuex 和 Nuxt 应用程序的复杂加载程序管理。\n * vue-progress-path - 支持任何自定义 SVG 路径的可自定义进度指示器和微调器。\n * vue-blockui - 用于 vue 2 的 BlockUI，类似于 jquery blockUI，可用于加载屏幕。\n * epic-spinners - 易于使用的带有 vue.js 集成的 css spinners 集合。\n * svg-progress-bar-Vue.js 的简单进度条。\n * vue-loading-overlay - 微小的全屏加载指示器\n * vue-loaders- [loaders.css] 的 vue 包装器 (https://github.com/ConnorAtherton/loaders.css)\n * vue-promise-btn - 小巧而强大的异步按钮 (或任何其他标签) 工具，带有精美的内置微调器\n * vue-spinkit-🌈 带有 VueJS CSS 动画的加载指示器集合\n * vue2-form-loading-VueJS 指令可与表单一起使用，以便在加载下一页时禁用提交按钮\n * vue-element-loading-⏳ 在容器内加载或全屏显示 Vue.js\n * tb-skeleton-Vue.js 的骨架屏幕加载\n * vue-spinners-💫 为 Vuejs 加载微调器组件的集合\n * vue-progress-bar - 这是一个基于 vue 的级联进度条插件\n * vue-loading-button-👇 带有滑动加载指示器的直截了当按钮\n\n\n# 进度条\n\n * vue-progressbar-vue 的轻量级进度条。\n * vue2-loading-bar - 最简单的 YouTube，例如 Vue 2 的加载条组件。\n * vue-top-progress - 另一个为 Vue.js 加载栏组件的顶级进度。\n * vue-nprogress - 进度条基于 Vue 的 nprogress。\n * vue-progress-button-Vue.js 2.x 动画按钮组件。\n * vue-simple-progress-Vue.js 的简单，灵活的进度栏\n * vue-component-loading - 管理每个组件内部的加载状态，并使用进度条显示全局加载状态。\n * vue-scroll-progress - 用于页面滚动进度条的简单 Vue.js 插件\n * vue-read-progress - 页面顶部的可自定义进度条，显示滚动进度\n * easy-circular-progress - 具有计数效果的简单循环进度组件\n\n\n# 工具提示\n\n工具提示 / 弹出窗口\n\n * v-tooltip - 使用 Vue 2.x 的简单工具提示。\n * vue-popper-component-Vue.js 的 Popper.js 指令。\n * vue-directive-tooltip - 简单，灵活的工具提示指令 (基于 Popper.js)！[Vue.js](https：// img.shields.io/badge/vue-2-green.svg)\n * vue-popperjs - 基于 VueJS 2.x popover 组件的 popper.js\n * vue-tooltipster - 基于 VueJS 2.x 工具提示组件的 tooltipster.js。支持 html 内容，悬停和悬停 + 单击事件。\n * k-pop - 基于 popper.js 的简单 popover 组件。高度可定制的。带有主题。支持自定义触发器，并且可以监听任何事件。\n\n\n# 覆盖\n\n * vuedals - 一个 VueJS (2.x) 插件，用于具有单个组件实例的多个模态窗口。\n * sweet-modal-vue - 发生模态的最甜的库。现在可用于 Vue.js。\n * vue-js-modal - 简单易用，高度可定制，移动友好的 Vue.js 2.0 + 模态，具有 0 个依赖关系。\n * vudal-vue.js 的模态窗口\n * vodal - 具有动画的 Vue 模态。\n * vue-image-lightbox - 一个 Vue 图像灯箱 / 图库，可以很好地显示图像。\n * vue2-simplert-Vue 2 简单警报组件 (受 SweetAlert 启发)，作者：Irfan Maulana\n * Vue-Semantic-Modal - 不具有 jQuery 依赖关系的 Vue 2 语义 - UI 模态组件\n * v-img - 易于安装的图库。\n * vue-dialog-drag - 可拖动对话框\n * vue-ya-semantic-modal-Vue2 的另一个语义 UI 模态组件，没有 Jquery 但具有 Vue 转换\n * vue-pure-lightbox - 非常简单的灯箱插件，没有任何依赖性 - 仅 Vue！🖼\n * v-viewer - 基于 [viewer.js] 的 vue 图像查看器组件，支持旋转，缩放，缩放等 (https：//github.com/fengyuanchen/viewerjs)\n * vue-messagebox-Vue 上易于定制的消息框组件。\n * vuejs-dialog - 轻量级，基于承诺的警报，提示和确认对话框。\n * @ hscmap / vue-window-vue2 的窗口 UI 组件。\n * vue-gallery-VueJS 响应式和可自定义的图像和视频库，轮播和灯箱，已针对移动和桌面 Web 浏览器进行了优化。基于 blueimp-gallery\n * vue-swal - 用于将 SweetAlert 集成到 Vuejs 的小型包装器。(与 SSR 兼容)\n * vue-modal-dialogs-✨ 承诺自己的对话框！\n * vue-img-view-Vue.js 的插件，您可以在任意位置拖动 / 查看 / 旋转图片\n * vue-modaltor-vuejs 的最先进的可配置模态组件\n * v-modal-backdrop - 用于 vue 的简单通用背景组件\n * vue-cute-modal - 适用于 Vue 应用程序的简单易用的 Modal 组件。\n * v-dialogs - 一个简单而强大的对话框，包括基于 Vue2.x 的 Modal，Alert，Mask 和 Toast 模式\n * vue-gallery-slideshow-VueJS 的响应式画廊组件\n * vue-a11y-dialog - 用于可访问对话框 [ a11y-dialog ](https://github.com 的 Vue.js 组件包装器。 com /edenspiekermann/a11y-dialog)。\n * vue-slideout-panel-VueJS 的可堆叠面板组件\n * v-gallery - 用于在 “gallery” 或 “ carousel” 中显示图像的 Vue2 插件\n * vue2-image-loader-vue2 的图像 lazyLoad loader 组件\n * vue-my-photos - 一个简单的无依赖图像灯箱组件，具有过滤功能\n * vue-img-orientation-changer - 一个 Vue.js 指令，可自动调整您的 img 以更正方向。\n * vue-topmodal - 一个完全可定制，易于使用的 Vue.js 模态组件。(自适应，可堆叠，可滚动，动画)\n * vue-modal🖼- 为多个可切换模态内容提供对象数组或快速内联您的内容。完全可定制的 Vue 模态组件。\n * @ innologica / vue-stackable-modal - 用于可堆叠的模态对话框的库。完全可定制且非常易于使用。\n * vue-sweetalert2-sweetlaert2 的包装器，支持 TypeScript，Nuxt 和 SSR\n\n\n# 视差\n\n * vue-parallax - 以比窗口慢的速度滚动图像以产生整洁的光学效果。\n * vue-parallaxy - 用于视差图像滚动效果的 Vue.js 组件。\n * vue-mouse-parallax - 一个易于使用的鼠标视差组件 - 由 Vue.js 制成\n * vue-parallax-js - 微小的 vue 组件，为元素上的视差效果添加了指令。\n\n\n# 图标\n\n * vue-awesome-Vue.js 的 Font Awesome 组件，使用嵌入式 SVG。\n * vue-material-design-icons - 单个 SVG Material Design 图标集合文件组件。\n * vue-icon-font-Vuejs 的 iconfont 插件 (支持 Font-class 和 Symbol)。\n * vue-ionicons - 来自离子团队的 Vue 图标集组件。\n * vue-ico - 具有嵌入式浏览器支持和选择性捆绑功能的 Vue 简易图标\n * mdi-vue-Vuejs 的 Material Design 图标组件\n * vue-fontawesome-Font Awesome 5 Vue 组件\n * g-icon-svg 图标的简单图标组件 (与类似于 Font Awesome 的字体工具包兼容)\n * vue-simple-line-icons-Vuejs 的简单线条图标组件\n * vue-country-flag - 国家标记图标的 Vue 组件 - vicon- Vicon 是用于 vue 的简单 iconfont 组件。\n * md-svg-vue-Google 为 Vue.js 和 Nuxt.js 提供的 Material Design 图标 (服务器端支持 (带缓存)，内嵌 svg) 渲染，官方图标名称)\n * vue-lang-code-flags-Vue 组件，显示语言来源国的标志\n * vue-zondicons - 精美 [Zondicon] 的 Vue 组件 (http://www.zondicons.com/icons.html) svg 图标\n * vue-eva-icons - 简单漂亮的开源 eva 图标作为 Vue 组件。\n * vue-unicons - 为您的下一个项目提供超过 1000 个像素完美的 svg unicons 作为 Vue 组件。\n * vue-fa - 简单的 FontAwesome 5 Vue.js 2 组件。\n * vue-cryptoicon - 美丽的像素完美的 400 + 加密货币和 10 + 法定货币图标。\n\n\n# 菜单\n\n * vue-accordion - 适用于 Vue.js 的简单手风琴导航菜单组件。\n * vue-js-dropdown-Vue.js 2 下拉菜单组件。轻巧，易于使用和扩展，无外部缺陷。\n * vue-slideout - 流行的库 [slideout] 的 Vue 实现 (https://github.com/Mango/slideout)\n * vue-quick-menu - 这是基于 vue.js2 的 Web 导航组件。\n * @ hscmap / vue-menu-vue2 的菜单 / 上下文菜单组件。\n * vue-router-nav - 简约的响应式导航栏，呈现 vue-router 的路线。\n * vue-drawer-layout - 一个简单的 DrawerLayout 组件 (例如 Android) 具有 Vue.js。\n * vue-simple-menu - 具有一组基本功能的简单菜单组件，在 80％的情况下足够\n * vue-tree-navigation - 具有 vue-router 支持的 Vue.js 2 树导航\n * bp-vuejs-dropdown-Vuejs => 2 下拉菜单。易于使用，无需外部，可选。\n * vue-bulma-accordion - 简单，易于配置的手风琴或具有 Bulma 自定义样式的可折叠样式或内置的可用图标\n * v-selectmenu - 针对 Vue2 的简单，容易和高度定制的菜单解决方案。\n * vue-burger-menu - 具有不同 CSS 动画的画布外边栏 Menu 组件。\n * vue-dynamic-dropdown - 一个高度可定制的，易于使用的优雅下拉组件\n * vue-navigation-bar - 适用于您的 Vue 项目的简单，漂亮的导航栏。\n * vue-simple-search-dropdown - 一个没有外部依赖关系的简单可搜索输入下拉组件\n * @ innologica / vue-dropdown-menu-Vue 的下拉菜单组件。任何元素都可以是下拉触发器，任何内容都可以下拉内容。\n * vue-menu-aim - 菜单三角形选择，又名亚马逊\n\n\n# 输入\n\n * minus-plus-input - 带正负号的数字输入；包含在 Vue.js v1 和 v2 中。\n * vue-integer-plusminus - 带有 vue 2 增量和减量按钮的整数输入。\n * vue-numeric-input - 带有控件的数字输入组件。\n * vue-number-smarty - 数字输入可以在聚焦字段时更改滚动值。\n * vuetify-number-smarty - 数字输入可在字段聚焦时更改滚动值 (Vuetify.js 实现)。\n\n\n# 轮播\n\n * vue-easy-slider-Vue.js 的滑块组件。\n * vue-l-carousel-Vue.js v2.x + 的响应式轮播 (即滑块或滑动) 组件。\n * vue-awesome-swiper-Vue.js (1.x〜2.x) 的 Swiper (slide) 组件。\n * vue-lory - 基于 lory 的 Vue 滑块组件。\n * vue-slick-Slick-carousel 的 Vue 组件。\n * vue-flickity-Flickity.js 的 Vue 组件。\n * vue-carousel-3d-Vue Carousel 3D-Vue.js 美观，灵活且受触摸支持的 3D Carousel。\n * vue-carousel - 适用于 Vue.js 的灵活，响应迅速，触摸友好的轮播。\n * vue-coverflow-vue2.x Coverflow 组件。\n * vue-agile–受 Slick 启发的轮播组件，仅以 Vue.js 和 Vanilla JS 编写。\n * vue-tiny-slider–由 ganlanyuan 创建的轮播组件，用 Vue.js 编写。没有 jQuery。适用于 IE8 +。\n * vue2-text-swimlane - 用于 Vue.js 的 Text Swimlane 插件\n * vue-picture-swipe-Vue Picture Swipe Gallery (具有缩略图，延迟加载和轻扫的图像画廊) 由 photowipe 支持。\n * vue2-siema - 非常小的 Siema 转盘 / 滑块库的插件包装。\n * vue-flux - 带有 20 个炫酷过渡的图片滑块。\n * vue-glide- [Glide.js] 上方的 Vue 滑块和轮播组件 (https://github.com/glidejs/glide)\n * vue-owl-carousel- [Owl Carousel 2] 的 Vue 组件 (https://owlcarousel2.github.io/OwlCarousel2/)\n * vueper-slides - 适用于 Vue JS 的易于触摸且响应迅速的幻灯片 / 轮播。\n * vue-canvas-carousel- [vuc-carousel] 的 Vue 画布组件 (http://vuc.tianchenyong.top/#/carousel)\n * 胡珀 - 针对 Vue 优化的可自定义的可访问轮播滑块\n * 语言 - Vue 的简单图像库组件，在下面显示带有缩略图的大图像\n * vue-piece-slider - 动画幻灯片的碎片化外观\n * vue2-photo-carousel-Vue2 的照片轮播组件\n\n\n# 图表\n\n * vue-morris-VueJS 组件包装了 Morris.js。\n * vue-charts - 适用于 Vue.js 的 Google Charts 插件。\n * vue-chartjs-Chart.js 的 Vue.js 包装器。\n * hchs-vue-charts - 基于 ChartJs 的 Vue2.0 包装器。\n * vue-echarts-Vue.js 的 ECharts 组件。\n * vuetrend-Vue.js 的简洁优雅火花线。\n * vue-highcharts-Vue 的 Highcharts 组件。\n * vue-echarts-v3-ECharts.js (v3.x +) 的 Vue.js (v2.x +) 组件包装。\n * vue-chartist-Chartist 的 Vue.js 2.0 组件包装。\n * g2-vue - 用于在 Vue 组件中轻松使用 G2 的工厂包装。\n * vuebars - 适用于 Vue.js 的简洁优雅的火花棒。\n * vue-d3-network - 使用 d3-force 绘制网络图形的 Vue 组件\n * vue2vis- Visjs 的 Vue2 包装器。\n * vue-c3 - 用于 c3 图表的可重用 vue 组件\n * vue-d2b-d2b 图表的 Vue 组件。(包括轴，饼图，sankey 和森伯斯特图)\n * VueChart - 一个非常简单的 Chart Vue 包装器。\n * vue-chartkick - 用一行 Vue 创建漂亮的 JavaScript 图表\n * d3vue - 用于在 VueJS 中创建反应性数据可视化的 D3 插件\n * vue2-frappe-VueJS 的 Frappe Charts 的简单包装\n * vue-google-charts-Google Charts lib 的反应性 Vue.js 包装器\n * vue-graph - 数据可视化库，用于 Vue.js 中的仪表板实现\n * vue.d3.sunburst - 基于 D3.js 的反应性旭日形组件\n * v-chart-plugin - 一个可定制的组件，用于添加绑定到组件数据的 D3 图表。\n * vue-jqxchart - 具有饼图，气泡，甜甜圈，线，条，栏，面积，瀑布，极地和蜘蛛系列的制图组件。\n * toast-ui.vue-chart- [TOAST UI 图表] 的 Vue 包装器 (http://ui.toast.com/tui - 图表 /)。\n * vue-apexcharts- [ApexCharts] 的 Vue.js 组件 (https://github.com/apexcharts/apexcharts.js)。\n * vue-doughnut-chart-Vue.js 的甜甜圈图组件。\n * v-charts - 基于 Vue2.x 和 Echarts 的图表组件。\n * vue-css-donut-chart - 用于绘制纯 CSS 甜甜圈图的轻量级 Vue 组件。\n * vue-trend-chart-Vue.js 的简单趋势图\n * vueplotlib - 声明性，交互式，链接的绘图组件\n * vgauge-GaugeJS 的 Vue 包装器 - 创建漂亮的量规\n * vue-plotly- plotly.js 声明性图表库的包装，随附 20 图表类型，包括 3D 图表，统计图和 SVG 地图。\n * vue-funnel-graph-js-Vue.js 的漏斗图绘制库。创建垂直和水平动画 SVG 漏斗图，并添加标签，值，图例和其他信息。\n * pure-vue-chart - 在没有任何图表库相关性的情况下实现的轻量级 vue 图表\n\n\n# 时间\n\n * vue-timeago-Vue 的一个很小的 timeago 组件。\n * vue-moment-jalaali - 针对您的 Vue.js 项目的 Jalaali Moment.js 过滤器。\n * vue-countdown-timer - 添加了时区转换支持。\n * vue-analog-clock-range - 显示时差的模拟时钟范围。\n * vue-moment-lib - 使用相同的 momentjs API 的简单 Vue.js 2.0 MomentJS 库 (过滤器和全局变量)。\n * vuejs-countdown - 适用于 vue js 2.0 的简单倒数计时器组件\n * vue2-flip-countdown-Vue 2.x 具有倒转效果的倒数计时器\n * timeline-vuejs-Vue 的简约时间表\n * vue-awesome-countdown-Vue 2.5.0 + 具有高性能和高精度的倒计时插件。官方网站：https://vac.js.org\n * vue-clock2 - 显示 Vue 的时钟组件。\n * vuemodoro-Pomodoro 计时器作为单个文件 Vue 组件。\n\n\n# 日历\n\n * vue-fullcalendar-Vue 日历 fullCalendar。无需 jQuery。安排事件管理。\n * vue-event-calendar-Vue2 的简单事件日历，除 Vue2 外没有其他依赖项。\n * vue-calendar-picker - 用于事件显示，时段选择和日期选择器的轻量级日历组件。\n * vue-lunar-calendar - 农历的 vue 组件。使用 Moment.js 进行日期操作。\n * vue-simple-calendar - 基于 Flexbox 的 Vue 月历功能；支持多日活动，本地化，节日表情符号，拖放。没有依赖关系。\n * vue2-calendar - 一个简单的完整日历组件，旨在灵活而轻巧。\n * vue-jlunar-datepicker - 具有节日和节气的中国农历日期选择器组件。\n * vue-full-calendar-Vue 1 和 2 的完整 fullcalendar.io 包装器\n * v-calendar - 动画日历 / 日期选择器，显示简单和重复日期的区域，指标和日弹出窗口。\n * vue-infinite-calendar-Vue 2 的简单无限日历实现\n * vue-calendar - 适用于 Vue 2.1.5 + 的简单日历组件，支持自定义内容。没有依赖关系。\n * vue2-event-calendar-Vue2 的事件日历，支持自定义事件项和日历标题。\n * vue2-datePicker-infinite-Vue2 的无限 datePicker，易于使用且没有依赖性。\n * vue2-slot-calendar-vue 2 日历，支持月球或日期事件的日期选择器组件，引导程序样式。\n * quasar-calendar - 使用 Quasar 框架的 vue.js 日历，可实现每月，多天和议程视图。\n * vue2-datepicker-Vue2 的漂亮 datepicker /datetimepicker 组件\n * vue-pikaday- Pikadaydatepicker 的 VueJS 包装器组件\n * vue-tuicalendar- tui.calendar 日历的 VueJS 包装器组件\n * vue-jqxscheduler-VueJS Scheduler 组件。\n * toast-ui.vue-calendar- [TOAST UI 日历] 的 Vue 包装器 (http://ui.toast.com/tui - 日历)。\n * vue-functional-calendar - 基于 Vue 的轻量级高性能日历组件 (日期选择器，日期范围)。\n * vue-cal-Vue JS 完整日历，无依赖项，无 BS。🤘。\n * vue-draggableCal - 不是普通的日期选择器。一个 Vuejs 可拖动的日期选择器，具有全新的响应式设计，可移动使用且具有 0 个依赖项，已压缩 17kb\n * vue-material-year-calendar-Vue2 的全年 (每页 12 个月) 日历。使用 dayjs。\n * vuelendar - 用 VueJS 编写的简洁日历\n\n\n# 地图\n\n * vue2-google-maps-Google Maps 组件，用于带有 2 向数据绑定的 vue。\n * vue2-leaflet - 传单地图的 Vue 2 组件。\n * vue-mapbox-gl-Mapbox GL JS 的 Vue 2.x 组件\n * vue-yandex-maps-Yandex Maps 的 Vue 2.x 组件\n * vue-baidu-map - 百度地图的 Vue 2.x 组件。\n * vue-choropleth-Vue 2.x 组件，用于显示一个 Choropleth 贴图。\n * vuelayers-Vue 2 组件可与 OpenLayers 一起使用。\n * vue-googlemaps-Vue 2.x 组件，用于集成 Google Maps。\n * vue-static-map-Vue 2.x 简单组件，可生成静态 Google 地图\n * vue-mapbox-Mapbox GL JS 库周围的 Vue 2.x 包装器，提供了与地图交互的途径。\n\n\n# 音频视频\n\n * Vue-APlayer-：cake：用于 Vue 2.x 的易于配置的音乐播放器。\n * vue-audio - 音频标签包装器；Vue 2.x 的声音播放器组件\n * vue-dplayer - 基于 DPlayer 的 Vue 2.x 视频播放器组件。\n * vue-canvasvideo - 一个 Vue 2.x 组件，用于在 iOS / Safari 上播放视频背景和自动播放视频。\n * vue-music - 基于 html5`` 的 Vue 组件。\n * vue-audio-visual-Vue HTML5 音频可视化组件。\n * vue-plyr - 一组用于 plyr 视频和音频播放器的 Vue 组件。\n * v-playback - 一个 Vue2 插件，可简化视频播放。\n * vue-audio-recorder-Vue.js 的音频记录器。它允许在服务器上创建，播放，下载和存储记录\n * vue-video-section-Vue 的简单视频标头 / 部分组件。适用于视频背景并在其上叠加内容。\n\n\n# 无限滚动\n\n * vue-infinite-loading - 适用于 Vue.js 1.0 和 Vue.js 2.0 的无限滚动插件。\n * vue-mugen-scroll-Vue.js 的无限滚动组件 2。\n * vue-infinite-scroll-vue.js 的无限滚动指令。\n * vue-loop-Vue.js 2 的无限内容循环组件。\n * vue-scroller-Vue.js 2 的无限内容循环组件，包括诸如 “拉动刷新”，“无限加载” 之类的功能，'snaping-scroll'。\n * vue-infinite-list - 无限列表 mixin 可以为 Vue.js 2 回收 dom\n * vue-infinite-slide-bar-∞ 无限滑动条组件。\n * vue-virtual-infinite-scroll - 基于 Iscroll 的 vue2 组件，支持具有高性能滚动，无限负载和拉动的大数据列表刷新。\n\n\n# 拉动刷新\n\n * vue-pull-refresh - 拉动刷新 Vue.js 2.0 的组件。\n * vue-pull-to - 下拉刷新和上拉为 Vue.js 组件加载了更多内容并无限滚动。\n * vue-data-loading - 另一个用于无限滚动和向下 / 向上加载数据的组件。\n * vue-quick-loadmore-Vue 的下拉刷新和上拉无限滚动插件。\n\n\n# 降价\n\n * vue-markdown - 适用于 Vue 的强大，高速 Markdown 解析器。\n * vue-mavonEditor - 基于 Vue 的降价编辑器，支持多种个性化功能。\n * vue-simple-markdown - 适用于 Vue 的简单，高速 Markdown 解析器。\n * vue-simplemde- simplemde 的包装。不论是初学者还是专家，都可轻松编辑。具有内置的自动保存和拼写检查功能。\n * toast-ui.vue-editor- [TOAST UI 编辑器] 的 Vue 包装器 (http://ui.toast.com/tui - 编辑)。\n\n\n# PDF\n\n * vue-pdf - 基于 mozilla 的 PDF.js 的 pdf 查看器\n * pdfvuer-Vue 的 PDF 查看器，使用 Mozilla 的 PDF.js 和文本支持。演示\n\n\n# 树\n\n * Vue.D3.tree - 基于 [D3.js] 的树状视图 (https://d3js.org/)\n * vue-json-tree-view-Vue.js 的 JSON 树视图组件。\n * vue-tree-Vue.js 2.X 的树组件。\n * liquor-tree - 惊人的 Vue 树组件\n * vue-trees-ui - 基于 Vue 的 Tree Ui。\n * Bosket - 前端框架 (Vue，React，Angular 和 Riot) 的树视图组件的集合。\n * plantain-00 / tree-component - 一个 reactjs，angular 和 vuejs 树组件。\n * sl-vue-tree - 适用于 Vue.js 的简单可定制的可拖动树组件\n * vue-draggable-nested-tree - 适用于 Vuejs2 [@phphe](https://github.com 的功能强大的可自定义可拖动树视图组件。 com /phphe)\n * vuejs-tree - 高度可定制的 VueJs 树查看器\n * vue-jstree - 适用于 Vue2 的树形插件，带有漂亮的图标和拖放功能\n * vue-vtree-Vue.js 的通用且灵活的树组件\n * vue-json-component-JSON 树视图，没有依赖项，TypeScript 支持且易于定制。\n * vue-tree-list - 用于树形结构的 vue 组件\n\n\n# 社交分享\n\n * vue-social-sharing - 一个 Vue.js 组件，用于共享指向社交网络的链接，可与 Vue.js 1.X 或 2.X 一起使用。\n * vue-goodshare - 用于社交共享的 Vue.js 组件，具有精美的按钮设计。简单的安装，丰富的文档，开发人员支持，SEO 友好，干净的代码，无需脚本即可快速跟踪页面上的用户活动。使用 Vue.js2.x。\n * vue-socialmedia-share - 一个 Vue.js 组件，用于使用 Vue 2.X 共享与社交网络的链接\n * vue-picture-sharesheet - 一个 Vue 图片共享表组件，受到苹果新闻编辑室中图片共享表的启发\n * vue-twitter - 用于嵌入 Twitter 小部件 (例如时间线，按钮) 的 Vue.js 组件\n * vue-share-buttons-Vue.js 组件，用于在您的项目中放置按钮，您可以共享任何东西\n\n＃＃ 二维码\n\n * vue-qriously - 一个 Vue.js 2 组件，用于使用 qrious 在 HTML Canvas 上绘制 QR 代码。\n * vue-qart-vue 2.x 用于 qart.js 的指令。\n * vue-qrcode-reader - 一个 Vue.js 2 组件，可从相机流中检测和解码 QR 码。\n\n\n# 搜索\n\n * vue-fuse - 模糊搜索库 Fuse.js 的轻量级插件\n * vue-instantsearch - 使用 Algolia 创建即时搜索体验的终极工具箱。\n * vue-innersearch - 用于 Elasticsearch 的 Vue.js 包装器\n * reactivesearch-vue - 用于使用 Elasticsearch 构建数据驱动的应用程序的 UI 组件\n\n\n# 其他\n\n * vue-avatar-vue.js 的头像组件。\n * vue-touch-ripple-Vue.js 的触摸波纹组件 (1.x〜2.x)。\n * vue-typer-Vue 组件，用于模拟用户键入，选择和擦除文本。\n * vue-keyboard-Vue 2 虚拟键盘组件。\n * vue-twentytwenty - 图像比较组件，可与 Vue.js 2.x 一起使用\n * vue-cookie-law-Vue.js 2.x 的 Cookie 信息插件\n * vue-gravatar - 适用于 Vue.js 2.x 的简陋的 gravatar 组件\n * vue-clipboard2 - 一种易于使用的 Vue.js 2.x 剪贴板剪贴板绑定\n * vue-flashcard - 带有 Vue.js 2.x 动画的 FLashcard 组件：bulb：\n * vue-truncate-collapsed - 一个简单的组件，它会截断文本并为 Vue.js 2 添加可点击的 “阅读更多 / 显示较少”。 X\n * vue-kanban - 灵活的拖放式看板板组件\n * vue-letter-avatar-vue.js 的简单优雅的字母头像组件\n * vue-highlightjs - 使用 highlight.js 突出显示语法\n * v-clipboard - 简单，小巧且易于使用的指令将您的模型保存到剪贴板 (最小 2kb，无依赖项)\n * vue-invisible-recaptcha - 超级简单的 Google 隐形 reCAPTCHA 集成\n * vue-embed-Embed 组件基于 Vue 2.x 的 embed.js，该组件可嵌入表情符号，媒体，地图，tweet，要点，代码，服务和减价。\n * vue-particles - 粒子背景的 Vue.js 组件\n * vue-uniq-ids-Vue.js 2.x 插件，可帮助使用与 ID 相关的属性，且无副作用\n * vue-multivue - 在同一页面上使用同一类的多个 vue 应用。\n * vue-affix - 一个 Vue.js 2.x 插件，可在滚动时在窗口中添加元素，类似于 Bootstrap Affix，但更简单，更智能\n * X-Browser-Update-Vue - 一个 Vue.js 浏览器更新插件。\n * vue-query-builder - 用于使用嵌套条件构建复杂查询的 UI 组件。\n * vue-info-card - 一个简单漂亮的卡片组件，带有优美的火花线和 CSS3 翻转动画。\n * v-offline - 简单，小巧且易于使用的 Vue 应用程序检测离线和在线事件 (最小 390b)\n * vue-word-cloud - 词云生成器。\n * vue-flat-surface-shader- Vue-flat-surface-shader\n * vue-easteregg-Easey 在您的 Vue 应用中添加了 Easteregg (默认使用 konami 代码)\n * vue-barcode-scanner\n * vue-heatmapjs - 用于跟踪和可视化鼠标活动的 Vue 指令\n * vue-maze - 由 Vue.js 组件制作的小巧迷宫游戏\n * vue-drag-verify - 这是一个 vue 组件，可以滑动以解锁以进行登录或注册。\n * vue-balloon-Vue 组件，用于在页面一角创建固定的，可缩放的容器。与 gmail 中使用的邮件撰写包装类似。\n * vue-sticker - 任意方向的贴纸效果\n * v-rating-⭐️ 使用 VueJS 制作的语义 UI 中的评级组件 (<500B 压缩，速度非常快)\n * vue-content-placeholders - 用于在 vue 中渲染诸如 Facebook 之类的伪造 (渐进) 内容的可组合组件\n * vue-page-designer-Vue 组件，用于拖放来设计和构建移动网站。\n * vue-creativecommons-CreativeCommons.org Vue.js 组件库。\n * vue-status-indicator - 一个 Vue.js 组件，用于将状态指示器显示为彩色圆点。\n * vue-google-adsense - 具有 InFeed 和 InArticle Ads 支持的 Vue.js Google Adsense 组件\n * emoji-vue-Vue.js 项目的 Emoji😎👌🏻 下拉菜单\n * vue-chessboard - 棋盘 vue 组件可加载位置，创建位置并查看威胁。\n * vue-mindmap - 用于 mindnode 映射的 Vue 组件。\n * v-currency - 用于格式化货币的 Vue 组件。\n * vue-emoji-picker - 高度可定制的 Unicode 表情符号选择器 🔥🚀\n * vue-8-puzzle - 一个由 Vue.js 组件制作的小巧幻灯片益智游戏\n * vue-e164 - 具有 E.164 标准支持的可自定义电话格式化程序\n * vue-pgn-Vue.js 组件，用于以 pgn 格式查看棋牌游戏\n * vue-avatar-editor - 使用清晰的用户界面调整大小，旋转并裁剪上传的头像。\n * vue-connection-listener-Vue 事件总线插件监听在线 / 离线更改。\n * vue-sauce-Vue 的 “查看源代码” 指令。\n * vue-prom-Vue 承诺包装器组件。\n * 数字键盘 - 用于移动浏览器的数字键盘。\n * vue-zoom-on-hover - 鼠标悬停时图像缩放\n * vue-sensitive-image-Vue 组件，可让您快速创建具有最佳数量的所有设备图像源的响应式图像标签。\n * vue-highlight-text-Vue 组件，用于突出显示单词的多个实例\n * vue-cast-props - 提供了一种将 props 转换为常见数据类型的便捷方法。\n * vue2-heropatterns - 一个 Vue2 实现，允许您将流行的 Hero Patterns 添加到任何 Div 上\n * vue-link - 一个将所有链接都链接在一起的组件 (处理外部和内部链接相同)\n * vue-identify-network-⚡️ 识别您的用户正在使用哪种互联网！\n * vue-cloneya - 用于克隆 DOM 元素的 vue 组件\n * vue-survey-builder-vue.js 应用程序的调查生成器\n * vue-if-bot - 一个轻量级的组件，用于基于用户代理向客户端隐藏 / 显示内容\n * vue-clampy-Vue.js (2+) 指令，通过在其中包含内容的元素加上省略号来限制元素的内容太长。\n * vue-cookie-accept-decline - 在页面上显示带有文字，拒绝按钮和接受按钮的横幅。记住使用 cookie 进行选择。使用创建时的当前选择来发出事件。符合 GDPR 要求。\n * @ lossendae / vue-avatar-VueJS 2.0 的头像组件。\n * vue-text-highlight-Vue.js 的文本荧光笔库 💄\n * vue2-hammerVue 2.x 的 Hammer.js 包装器支持移动触摸。\n * vue-countable-countable.js 的 Vue 绑定。提供实时的段落，句子，单词和字符计数。\n * v-show-slide - 一个 Vue.js 指令，用于将元素上下移动动画：自动滑动。\n * vue-swipe-actions - 适用于 Vue.js 的 iOS 样式滑动操作\n * vue-friendly-iframe - 用于创建超快速加载，无阻塞 iframe 的 Vue js 组件。\n * vue-beautiful-chat - 一个简单而美丽的 Vue 聊天组件后端不可知，完全可自定义和可扩展。\n * vue-magnifier-Vue.js 2.x 的简单图像缩放 / 放大组件。\n * vue-highlight-words-Vue 组件可在较大的文本正文中突出显示单词。从 [react-highlight-words] 移植 (https://github.com/bvaughn/react-highlight-words)\n * vue-tags-ball - 使用此插件创建漂亮的球形标签\n * vue-rippler - 用于自定义波纹效果的简单 Vue.js 插件\n * vue-contacts-Vue 的移动通讯录组件\n * basic-vue-chat - 易于使用的 Vue.js 聊天\n * vue-resize-text - 一个 vue 指令，可根据元素宽度自动调整字体大小。\n * vue-github-profile - 一个 Vue 组件，用于查看确定的用户的配置文件和存储库\n * vue-niege-🎅 单文件 Vue 组件可通过画布添加暴风雪。\n * vue-dynamic-star-rating - 高度动态的 Vue 明星评分组件，例如 Google Play 评分 ⭐️⭐️⭐️⭐️⭐️⭐️\n * vue-katex - 在 Vue.js 中使用 KaTeX 进行数学排版的简单插件\n * vue-canvas-identify- [vuc-identify] 的 Vue 画布组件 (http://vuc.tianchenyong.top)\n * vue-canvas-material- [vuc-material] 的 Vue 画布组件 (http://vuc.tianchenyong.top/#/materia)\n * vue-baberrage - 一个基于 Vue.js 的简单弹幕插件 😎\n * vue-terminal-ui-🖥TerminalUI 模拟器 Vue：自定义和基本命令\n * vue-command - 完全正常工作的 Vue.js 终端模拟器\n * vue-ribbon-GitHub 功能区的 Vue 组件\n * avatio-avatar - 插图化身的 Vue 组件 - Avatio 使用\n * vue-jazzicon - 用于 Vue 的简陋的 Jazzicon 组件。\n * vue-star-rating - 一个简单的，高度可定制的星级评分组件 ⭐️⭐️⭐️\n * vue-fixed-header - 简单且跨浏览器友好的由 TypeScript 编写的 Vue.js 固定标头组件。\n * vue-particle-effect-buttons 一个爆发粒子效果按钮组件。\n * vue-insomnia - 防止显示屏进入休眠状态 (唤醒锁定)。\n * vue-car-plate-keyboard - 用于 VueJS 2.x 的汽车牌照号码键盘。能源车牌 🚗🚗🚗)\n * vue-dataflow-editor-Vue2 数据流图编辑器\n * cool-emoji-picker-Vue 的快速即插即用 [Tw] emoji Picker (用于 Twemoji 渲染的 + textarea) 组件。\n\n\n# 标签\n\n * vue-tabs - 简单的标签和药丸。\n * vue-swipe-tabs-vue.js (vue2) 的触摸滑动选项卡组件。\n * vue-tabs-component - 一种使用 Vue 显示标签的简便方法。\n * vue-k-tabs - 具有 Gitlab 设计的简单标签组件。\n * vue-tabs-with-active-line - 简单的 Vue 2 组件，可让您制作带有移动底线的标签\n * vue-tabs-chrome - 一个类似于 Chrome 的标签的 Vue 组件。\n\n\n# 电话号码输入格式器\n\n * vue-phone-number-input - 一个漂亮的输入，用于格式化与国家 / 地区代码有效的电话号码：fire：\n\n\n# 选择器\n\n * vue-smooth-picker-Vue 2.x 的平滑选择器组件，例如 iOS 本机日期时间选择器。\n\n\n# 发电机\n\n * FormSchema Native - 使用 JSON Schema 和 Vue.js 生成表单\n * vue-awesome-form - 一个 vue.js 组件，就像 json-editor\n * vue-generator-Vue 项目的初始路由器和组件。\n * vue-form-json - 从 json 生成具有验证和 bulma 样式的 vue 表单\n * form-create - 具有动态呈现，数据收集，验证和提交功能的表单生成器，支持 json 数据\n * element-form-builder - 使用 JSON 模式构建 element-ui 表单。\n * ncform - 一种非常好的配置生成表单的方式\n * Laraform - 具有 Laravel 支持的 Vue.js 的高级表单生成器\n * vue-ele-form-Vue DataForm，基于 element-ui\n\n\n# 日期选择器\n\n * vue-datepicker- [未维护] 具有用于 Vue.js 的材质设计的日历和 datepicker 组件。\n * vue2-timepicker- [未维护] Vue 2.x 的下拉时间选择器 (小时 | 分钟 | 秒)，具有灵活的时间格式支持。\n * vuejs-datepicker - 一个简单的 Vue.js datepicker 组件。支持禁用日期，内联模式，翻译。\n * vuedt- [未维护] 疯狂的轻量级 (5.5kb！) Vuejs 日期和时间选择器组件，动画效果很好，而且没有太多的模糊感。\n * vue-flatpickr-component 用于 flatpickr 日期时间选择器的 Vue.js 组件\n * vue-bootstrap-datetimepickerVue.js 组件，用于 [eonasdan-bootstrap-datetimepicker](https://github.com/Eonasdan/bootstrap- datetimepicker /)\n * vue-jalaali-datepicker-vue.js 的 Jalaali 日历和日期选择器 2。\n * vue-date-picker - 一个受材料设计启发的 vue 日期选择器组件\n * vue-monthly-picker - 仅适用于月份和年份选择器的 Vue.js 组件\n * vue-hotel-datepicker - 响应式日期范围选择器，显示选定的住宿天数，允许自定义入住 / 退房规则，屏蔽日期，本地化支持等。\n * vue2-persian-datepicker-vue 的真棒波斯 datepicker 组件。کامپوننتانتخابتاریخبرایویو。\n * vue-datetime-Vue 的移动友好日期时间选择器。支持日期，日期时间和时间模式，i18n 和禁用日期。\n * vue-rangedate-picker - 具有简单用法的范围日期选择器\n * v2-datepicker - 基于 Vue 2.x 的简单 datepicker 组件。\n * vue-datepicker-local-Vue2 的一个漂亮的 Datepicker 组件。\n * vue-airbnb-style-datepicker-Vue datepicker，外观和功能与流行的 AirBnb datepicker 相似。轻巧，可配置且良好的浏览器支持！\n * vue-persian-datetime-picker 波斯材料 datepicker。支持日期时间，日期，时间，年，月。\n * VCalendar 非常可定制且功能强大的日历 / 日期选择器组件，具有许多功能和完善的文档。\n * @ owumaro / vue-date-range-picker - 使用 Bootstrap 4 样式进行日期范围选择的 Vue 组件\n * vue-datepicker-mobile - 适用于 vue2 的移动友好日期选择器。：cn：选择日期或日期范围，然后自定义所需的日期。\n * vue-draggable-cal - 不是普通的日期选择器。一个 Vuejs 可拖动的日期选择器，具有全新的响应式设计，可移动且具有 0 个依赖项，已压缩 17kb。\n * vue-vanilla-datetime-picker-Vue 的日期时间选择器。\n * vue2-daterange-picker - 基于 bootstrap-daterangepicker 的 Vue2 日期范围选择器 (无 jQuery 依赖性)\n * vue-timeselector - 完全简单可定制的 Vue.js 功能强大的时间选择器组件。\n * vue-date-picker-Vue 2.x 的轻量级 datepicker 组件。\n * vue-ctk-date-time-picker - 一个漂亮的 VueJS 组件，用于选择日期和时间 (使用范围模式)：新：\n * simple-vue2-datetimepicker - 一个简单易用的 vue.js 组件，用于日期和时间选择。：新：\n * vue-business-hours-Vue 组件，用于在管理面板或仪表板中选择营业时间。\n * material-vue-daterange-picker-Vuejs 2.x 的 Material Design 样式的日期范围选择器，与 vuetify 和友好版本兼容手机。\n * vue-datepicker - 具有 Vuejs 2.x 的 Material Design 样式的干净响应式日期选择器。(日期 / 月 / 季度 && 日期范围选择器)：新：\n\n\n# 选择\n\n * vue-select - 一个本地 Vue.js 组件，提供与 Select2 类似的功能，而无需 jQuery 的开销。\n * vue-multiselect-Vue.js 的通用选择 / 多重选择 / 标记组件。\n * stf-vue-select - 最灵活和自定义的选择 Vue2\n * vue-select-image-Vue 2 组件，用于从列表中选择图像\n * @ riophae / vue-treeselect - 具有对 Vue.js 的嵌套选项支持的多选组件。\n * @ k186 / pd-select - 一个移动 UI 组件，例如 Vue 2.x 的 IOS 选择器，可以随便定义。\n * vue-dropdowns - 如果对 vue2.x 使用对象，则是一种显示选择框的简约且可适应的方法\n * v-cascade - 带有 Vue 2.x 的层叠选择器的一个可爱组件 (支持 PC 和 Mobile)\n * vue-multi-select - 用于对 Vue2 进行选择 / 多重选择的自定义组件。\n * v-region - 一个简单的区域选择器，提供中文行政区划数据。\n * v-selectpage-Vue2，分页列表或表格视图的强大选择器，使用标签进行多项选择，i18n 和服务器端资源支持。\n * vue-cool-select - 引导程序 / 材质设计主题，支持广告位，自动填充，事件，验证等。\n * @ myena / advanced-select - 具有搜索功能，用于 (取消) 全选和 Bootstrap 3 主题的单 / 多选择组件\n * @ alfsnd / vue-bootstrap-select-Vue 版本的 bootstrap-select。\n\n\n# 滑块\n\n * vue-slider-component-vue1.x 和 vue2.x 的滑块。\n * vue-circle-slider-vue2.x 的圆形滑块组件。\n * vue-netflix-slider - 像 Netflix 的滑块。\n * vue-slide-bar - 非常简单的 vue 滑条组件。\n * textra-Vue js 插件可滑动文本。\n * vue-knob-control-Vue.js 的旋钮控件\n\n\n# 拖放\n\n * vuedraggable-Vue 组件允许与 View-Model 同步进行拖放排序。基于 Sortable.js。\n * vue-dragula - 拖放是如此简单，很痛苦。\n * vue2-dragula-Vue2 的 vue-dragula 分支，有很多改进。\n * awe-dnd - 具有 Vue 的可排序列表指令。\n * vue-draggable-resizable - 用于可拖动和可调整大小元素的 Vue2 组件。\n * vddl - 用于使用 HTML5 拖放 API 修改列表的 Vue 组件，支持 VueJs 版本 1 和 2。\n * vue-drag-drop-HTML5 拖放 API 的最小且轻巧的包装器。\n * vue-swing - 可滑动的卡片界面，如在 Jelly 和 Tinder 等应用中所见。\n * vue-slicksort - 一套无需依赖的混合包，用于动画，触摸友好，可排序的列表\n * draggable-vue-directive - 处理任何 Vue 组件拖放的简单指令。\n * vue-smooth-dnd-smooth-dnd 库的 Vue 包装器。拖放，可分类的库，适用于许多情况。\n * vue-drag-resize - 一个无依赖的 Vue 组件，用于可拖动和可调整大小的元素，具有高宽比，反应性道具等\n * vue-drag-it-dude-Vue2 组件，可让您将对象拖动到任意位置。\n * vue-draggable-Vue 拖放库没有任何依赖性。简单易用。\n * vue-nestable - 作为 vue 组件制作的简单拖放层次列表。\n * vue-draggable-nested-tree - 适用于 Vuejs2 [@phphe](https://github.com 的功能强大的可自定义可拖动树视图组件。 com /phphe)\n\n\n# 自动完成\n\n * vue-instant-Vue 即时可让您轻松为 vue 2 应用程序创建带有自动建议的自定义搜索控件。\n * v-autocomplete-Vue.js 的自动填充组件\n * vue-awesomplete-Awesomplete 的 Vue 包装器\n * vue-auto-complete-Vue2 的自动完成。适用于对象或 api 调用。\n * vue-autosuggest-WAI-ARIA 完整的 Autosuggest 组件，对渲染和样式进行了完全自定义。\n * v-autosuggest - 一个简单的模块化 Vuejs 组件，可以自动建议来自动态或静态数据查询的输入。\n * 自动完成 - 适用于 Vue.js 2. * 的简单自动完成组件\n * vue-infinite-autocomplete-Vue 的 Vue 无限 - 自动完成包装 2。\n * vue-simple-suggest-Vue.js 的简单但功能丰富的自动完成组件\n * v-suggest - 一个 Vue2 插件，用于输入内容建议，支持键盘快速选择。\n * vue-bootstrap-typeahead - 使用 Bootstrap 4 CSS 的 Vue2 的 typeahead /autocomplete 组件。\n\n\n# 类型选择\n\n * vue-input-tag-Vue.js 2.0 输入标签组件。\n * v-distpicker 一个灵活，高度可用的区域选择器，用于为 Vue.js 2.x 挑选中国的省，市和地区。\n * vue-img-inputerVue 2 的优美，高度可定制的 img 类型输入\n * vue-img-previewvue 2 中的图像输入预览组件\n * v-image：相机：用于输入 type = file 的小组件 (<1kb，已压缩)\n * @ voerro / vue-tagsinput 一个简单的标签输入了带有 typeahead /autocomplete 的 Vue.js 2 组件\n * vue-tag-selector - 类似于标签的输入。轻巧，可自定义并处理 REGEX 验证！\n\n\n# 颜色选择器\n\n * vue-color - 适用于 Sketch，Photoshop，Chrome 等的 Vue 拾色器。\n * vue-swatches - 帮助用户选择漂亮的颜色！\n * radial-color-picker - 简约的拾色器，着重于尺寸，可访问性和性能。\n * vue-color-picker-board - 为人类设计的 Vue 拾色器组件！\n * verte - 一个完整的 Vue.js 颜色选择器组件。\n\n\n# 开关\n\n * vue-switches - 具有主题支持的 Vue.js 的开 / 关开关组件。\n * vue-js-toggle-button-Vue.js 2.0 + 切换 / 切换按钮 - 简单，漂亮，可自定义。\n * vue-checkbox-radio - 一个 Vue 组件，可轻松设置复选框和广播输入的样式。\n * vue-enhanced-check - 用于重新设计 / 标记复选框 / 无线电的 Vue 组件，包括切换 / 切换按钮。\n * pretty-checkbox-vue- [pretty-checkbox 3] 的实现 (https://lokesh-coder.github.io/pretty- checkbox /)(用于美化复选框和单选按钮的纯 CSS 库) 组件，适用于 Vue.js 2.2+。\n * vue2-collapse-Vue Collapse 是一个灵活的内容切换插件，用于手风琴列表或任何其他有条件的内容呈现。\n * vue-badger-accordion - 用于 Vue.js 2.0 + 的 Badger 手风琴的包装组件\n * vue-loading-checkbox - 具有加载状态的高度可定制的 Vue.js 复选框 UI 组件\n * vue-rocker-switch-Vue.js 的可自定义翘板开关组件。\n * vue-toggle-btn - 高度可定制，易于使用的优雅切换 / 切换按钮组件\n\n\n# 屏蔽输入\n\n * vue-masked-input-Vue.js 的蒙版输入组件。\n * vue-text-mask - 用于 React，Angular，Ember，Vue 和普通 JavaScript 的输入掩码。\n * vue-ip-input - 由 vuejs 实现的 ip 输入。\n * vue-numeric - 输入字段组件，用于显示基于 Vue 的货币值。\n * awesome-mask - 基于纯 VanillaJS 实现的 Mask 指令\n * v-money - 货币的微小 (<2k 压缩) 输入 / 指令掩码\n * vue-autonumeric - 一个 Vue.js 组件，包装了很棒的 AutoNumeric 输入格式化程序库\n * vue-inputmask-Vue.js 指令可将 Robin Herbots 的 inputmask 库添加到您的输入中 (香草 javascript)。\n * vue-input-number-Vue.js 2 的自定义输入数字组件。\n * v-unicode-Vue 指令通过 unicode 值限制输入。\n * vue-cleave-component- [cleave.js] 的 Vue.js 组件 (http://nosir.github.io/cleave.js/)\n * vue-ip - 具有端口和材料设计支持的 ip 地址输入\n * vue-r-mask - 具有类似于 javascript 正则表达式的模板的指令。\n * vue-input-code - 基于 Vue.js 2.0 + 验证码输入组件。\n * label-edit - 受 Trello 的启发。单击以显示可编辑的输入并返回值更改。这是 Vue 组件。\n * vue-jquery-mask- [jQuery Mask 插件] 的 Vue.js v2.x 组件 (https://github.com/igorescobar/jQuery - 掩码 - 插件)\n * vue-the-mask-Tiny (<2k gzipipped) 和 Vue.js 的无依赖掩码输入\n * vue-canvas-input- [vuc-input] 的 Vue 画布组件 (http://vuc.tianchenyong.top/#/identify)\n * vue-currency-input - 轻松输入 Vue.js 的货币格式数字。\n * vue-restricted-input - 基于 [restricted-input] 的 vue.js 输入掩码库 (https://github.com/braintree/ 受限输入)\n\n\n# RTF 编辑\n\n * vue-quill-editor-Vue2 的鹅毛笔编辑器组件。\n * vue-mobiledoc-editor - 适用于 Vuejs 的 mobiledoc 编辑器组件工具包。\n * vue2-medium-editor-Vue 2 的 MediumEditor 组件。\n * vue-froala - 用于 Froala 编辑器的 VueJS 包装器。\n * vue-froala-wysiwyg-Froala WYSIWIG HTML 编辑器的官方 VueJS 插件。\n * vue-at-Vue 的 At.js。\n * vue-wysiwyg 轻巧，快速且可扩展的所见即所得编辑器\n * vue-trumbowyg [Trumbowyg] 的 Vue.js 组件 (http://alex-d.github.io/Trumbowyg/) 所见即所得编辑器\n * vue-pell-editor 用于 Pell 的 Vue.js 组件所见即所得编辑器\n * vue-tinymce-editorVue2 的 Tinymce 编辑器组件。\n * vue-mce-VueJS 的 tinymce 编辑器组件。\n * Vue2-Editor - 使用 Vue.js 和 Quilljs 的 HTML 编辑器\n * vue-codemirror-Vue2 的 Codemirror 组件。\n * vue-easy-tinymce - 一个简单而强大的软件包，可在 Vue.js 项目中轻松使用 tinymce。\n * vue-highlightable-input - 输入文字时突出显示和设置样式\n * vue-trix - 用于 Vue.js 的简单轻巧的 Trix 富文本编辑器\n * tiptap-Vue.js 的不可渲染且可扩展的 RTF 编辑器\n * toast-ui.vue-editor- [TOAST UI 编辑器] 的 Vue 包装器 (http://ui.toast.com/tui - 编辑)。\n * ckeditor5-vue-Vue.js 的官方 CKEditor 5 Rich Text 编辑器组件。\n * yimo-vue-editor-Vue2 的 wangEditor2 组件。\n * vue-mathlive 适用于 Vue.hjs 的 MathLive 数学编辑器 (mathfield)\n\n\n# 图像处理\n\n * vue-core-image-upload - 一个用于裁剪和上传图像的 vue 插件。\n\n * vue-croppa - 适用于 Vue 2.0 的简单易用的可自定义轻量级移动友好图像裁剪器。\n\n * vue-cropper-vue2.0 的图片剪辑插件\n\n * toast-ui.vue-image-editor- [TOAST UI 图像编辑器] 的 Vue 包装器 (http：//ui。 toast.com/tui-image-editor)。\n\n * vue-quick-cropper-Vue 移动头像上传裁剪插件可以选择裁剪区域和缩放。\n\n * vue-canvas-image-Vue 画布组件，用于 vuc-image\n\n * vue-croppie - 另一个图像裁剪器\n\n * vue-slim-cropper-💇Vue 2.x 的简单优雅的移动图像裁剪上传组件。\n\n * vue-advanced-cropper - 先进的裁剪器，使您有机会创建几乎任何想要的裁剪器\n\n * vue-cloudinary-vue (2.0) 插件提供了可重用的指令，可通过动态操作从 Cloudinary (https://cloudinary.com) 获取图像 (调整大小 / 裁剪 / 效果 / 水印 / 缩放 / 格式化) 和优化 (webp /png/ 自动质量 / 自动视网膜)。\n\n * img-Vuer-Vue2 的 Mobile-First 图像查看器 / 图库\n\n * vue-image-loader-Vue 加载器 / 渐进式图像插件，例如 Medium。\n\n * vue-load-image - 在图像加载期间显示加载器，并在图像加载失败时显示替代内容。\n\n * vue-image-painter-V Vue 2.x 的图像魔术动画绘制效果组件。\n\n\n# 视频操作\n\n * vue-playlist - 轻量级的 vue (2.0) 组件，没有依赖关系，可提供真正无缝的 html5 视频播放。使用 Vanilla JS 进行无缝视频播放的唯一且唯一可行的解 决方案。它需要一系列视频并将它们拼接在一起成为一个视频。\n\n＃＃ 上传文件\n\n * vue-clip - 用于 VueJ 的简单且可入侵的文件上传器。支持 Vue> = 2.1。\n * vue-simple-upload-Vue.js 的简单文件上传组件。\n * vue2-multi-uploader - 使用 Vue.js v2 和 Axios 的拖放式多文件上传器组件。上载器显示文件名，大小和添加文件的总大小。它还允许设置所需的最小文件上传数量。\n * vue-dropzone-Dropzone.js 的 Vue.js (vue2) 组件 - 具有图像预览功能的拖放文件上传实用程序。\n * vue-transmit - 一个纯粹的基于 Vue 2.0 的 Dropzone.js 的 Vue.js 拖放上传器组件\n * vue-upload-component-Vue 上载组件，多文件上载，上载目录，拖动上载，拖动目录。支持 Vue> = 2.0\n * vue-uploader - 一个由 simple-uploader.js 驱动的 Vue.js 上传组件\n * ic-firebase-uploader - 用于 Firebase 存储的干净的多文件上传组件。\n * vuejs-uploader - 用于大型文件上传的可恢复的分段文件上传器。\n * vue-filepond-FilePond 的 Vue.js 组件 - 文件上传库，可以上传您扔给它的任何内容。\n * v-uploader - 一个 Vue2 插件，可以使上传文件变得更加轻松简单，您可以拖动文件或在对话框中选择文件进行上传\n\n\n# 上下文菜单\n\n * vue-context-menu-vue js 的上下文菜单组件。\n * vue-lil-context-menu-Vue 的灵活的 lil 上下文菜单组件。\n * vue-mouse-menu - 适用于 vue 2 + 的鼠标菜单组件。\n * @ hscmap / vue-menu-vue2 的菜单 / 上下文菜单组件。\n * vue-context - 用于 vue js 的简单但灵活的上下文菜单。\n * vue-simple-context-menu - 为 Vue 构建的简单上下文菜单组件。左键单击和右键单击都可以很好地工作。\n * vue-context-menu-popup-Vue 2 的上下文菜单弹出窗口。右键单击即可工作，也可以通过编程方式触发。\n * @ kiyoaki_w / vue-context - 为 Vue2 构建的可自定义上下文菜单组件，支持惊人的图标。\n\n\n# 其他\n\n * vue-gmaps - 使用 Google Maps API 搜索地点和地址。\n * vuep - 使用实时编辑器和预览渲染 Vue 组件的组件。\n * vue-places-Places 组件基于 Vue 2.x 的 places.js。将任何输入转换为地址自动完成。\n * vue-password-strength-meter-vue.js 中基于 zxcvbn 的密码强度计。\n * vue-float-label-Vue.js 的浮动标签模式。\n * vue-longpress - 一个 VueJS (2.x) 按钮组件，需要您持续按下以确认给定的动作。\n * vue-google-autocomplete - 适用于 Google Maps Places API 的 Vue.js (2.x) 自动建议组件。\n * vue-ip-input-Vue.js 2.x 的 ip 输入组件\n * vue-default-value-Vue.js 2.x 指令为可编辑元素设置默认值，而不会影响模型状态\n * vue-model-autoset - 一个 Vue.js 插件，可解决通过 v-model 指令观察动态添加的属性时 Vue 的限制\n * vue-submit-Ladda 的简单实现 ([1](http://lab.hakim.se/ladda/)，2) 不到 90 行代码，没有任何依赖关系。\n * vue-rate-Vue 的费率组件\n * vuetify-google-autocomplete - 适用于 Google Maps Places API 的 Vuetify 就绪 Vue.js (2.x) 自动建议组件。\n * vue-ripple-directive - 材质纹波效果作为 Vue 指令。\n * vue-fab-Vue 浮动操作按钮。\n * vue-complexify - 来自 jquery.complexify.js 的 Vuejs 移植库。\n * vue-mc-Vue.js 的模型和集合\n * vue-stars - 高度可定制的等级控制 (使用星号或其他字符)\n * vue-confirmation-button - 可自定义的确认按钮，要求用户在执行操作之前先阅读消息\n * vue-poll - 用于投票的 Vue.js 组件\n * vue-diagrams-vue.js 的图表组件，受 react-diagrams 启发\n * vue-easy-polls - 一个 Vue.js 组件，用于创建民意调查，投票和显示结果。它易于实现且易于定制。\n * vue-m-button-vue 的漂亮按钮组件。\n * vue-long-click - 用于 vue 的长按 (长按) 指令库，支持移动设备和台式机。\n * vue-ui-predicate - 规则编辑器，通用过滤 UI，Vue JS 的谓词组件。\n * vue-mobile-detection-Vue.js 原型函数 this。$ isMobile() 会根据布尔值是否返回布尔值用户正在使用手机浏览。\n * vue-input-contenteditable - 用于 `contenteditable' 的 Vue 组件包装，具有您通常期望的所有功能。进行漂亮的输入，不受 “input [type ='text']” 的限制。\n\n\n# 向导\n\n * vue-form-wizard - 基于选项卡的组件，可以代替经典的 bootstrap 和 jQuery 表单向导\n * vue-stepper - 一个简单的步进器，具有诸如 next，back 和 end 之类的简单动作，可以执行简单的表单。\n * vue-stepper-component - 具有 Vuex 支持和零依赖性的完全可定制的 Stepper 组件。\n\n\n# CSV\n\n * vuecsv - 来自 json 的简单 CSV 下载程序，带有选项模式面板组件。\n\n\n# 评论系统\n\n * vue-comment-grid-💬 使用 CSS Grid 和 Firebase REST API + Authentication 构建的自适应 Vue.js 注释系统插件。\n\n\n# 帆布\n\n * vue-easeljs - 对 HTML5 canvas 元素的数据驱动控制。\n * vue-canvas-effect-Vue.js 的简单画布效果集合。\n * vue-konva-Vue＆Canvas-JavaScript 库，用于使用 Vue 绘制复杂的画布图形。\n * vue-html2canvas-Vue mixin 捕获 html 并使用 Html2Canvas 将其转换为图像。\n * vue-canvas-nest - 适用于 canvas-nest 的 Vue.js 组件。\n * vue-signature-pad-V Vue 签名板组件\n\n\n# 链接预览\n\n * link-prevue - 用于生成链接预览的灵活组件。\n\n\n# 游览\n\n * vue-tour - 轻巧且可自定义的游览插件\n * vue-page-guide - 具有指令的页面游览 / 指南插件\n\n\n# UI 布局\n\n * vue-waterfall-Vue.js 的瀑布布局组件。\n * vueisotope - 用于同位素过滤器和分类魔术布局的 Vue 组件。\n * vue-grid-layout-Vue.js 的可拖动和可调整大小的网格布局。\n * vue-drag-zone-Vue.js (2.x) 的拖动区域组件。\n * vue-masonry - 用于砌体块布局的 Vue.js 指令。\n * vue-fraction-grid - 基于 Flexbox 的 Vue.js 响应式分数网格系统。\n * vue-virtual-scroll-list-Vue (2.x) 组件通过使用虚拟滚动列表支持大数据。\n * vue-virtual-scroller - 用于有效滚动大量元素的组件 (Vue 2.x)。\n * vue-virtualscroll- [Vue 2.x] 组件用于虚拟滚动内容。\n * vue-inview- [Vue 2.x] 视口，在输入或离开 DOM 元素时获取通知。\n * dnd-grid - 具有可拖动和可调整大小的框的 vuejs 网格\n * vue-extend-layout - 扩展默认布局或为 Vue.js SPA 的页面创建自定义布局\n * vue-masonry-css - 由 CSS 驱动的 Vue.js Masonry 布局组件，无依赖\n * vue-fullpage.js-Vue.js 的官方 fullPage.js 组件。\n * vue-virtual-collection - 用于有效渲染大型集合数据的 Vue 组件。\n * 自动响应 - vue-Vue 的自动响应网格布局库。\n * VueFlex - 一个 flexbox 网格系统。\n * v-chacheli - 一个 Vue.js 组件，用于创建和显示类似于仪表板的自定义网格布局。\n * vue-grid-styled - 一组轻量级的功能网格组件，从 React 的 grid-styled /jxnblk/ 网格样式 /)\n * 简单网格 - 用于网格布局的 Vue 组件，支持 flex。\n * vue-container-component - 受 Bootstrap 容器启发的简单容器组件\n * vue-colcade - 用于将 Colcade 网格布局集成到 Vuejs 的小包装。\n * vue-ads-layout - 一个小的 Vue 组件库，可快速生成带有工具栏，左 / 右抽屉和页脚的响应式 Web 应用程序布局。所有组件都可以固定或相对放置。\n * vue-magic-grid-Vue.js 2 的 Magic Grid 小端口。\n * vue-splitter-pane - 一个 Vuejs 组件，它以可调节的拆分方式 (垂直或水平) 呈现两个插槽。\n * splitpanes - 一个 Vue JS 可靠，简单且可触摸的窗格拆分器 / 缩放器。\n * vue-mock-layout - 轻松模拟 Vue 应用程序的布局。\n * vue-simple-drawer - 带有反弹动画，支持嵌套和自定义主题的小抽屉面板。方向：左 / 右 / 上 / 下\n * vue-grd - 用于网格布局的简单，轻巧和灵活的 Vue.js 组件。\n\n\n# 自适应\n\n * quasar-framework - 类星体框架。使用 VueJs 2 使用相同的代码构建响应式网站，混合移动应用程序 (在 Android 和 iOS 上看起来本机) 和 Electron 应用程序。\n * vue-material-Vue.js 的材料设计。\n * vuetify-Vue.js 的材料组件框架 2。\n * muse-ui-Vue.js 的材料组件库 2。\n * buefy - 基于布尔玛框架的组件。\n * element-ui - 用于 Web 的 Vue.js 2.0 UI 工具包。\n * vue-bulma-components - 对 vue 组件轻松使用 bulma 类语法。\n * iview-ui - 适用于 Web 的 Vue.js 2.0 UI 框架。\n * AT-UI-Vue.js 2.0 使用 ♥ 制作的专门用于桌面应用程序的全新扁平 UI-Kit\n * v-semantic-Vue 的 semantic-ui 的实现\n * bootstrap-vue-Vue.js 2 的 bootstrap-4 网格和组件的实现。\n * fish-ui - 用于 Web 的 Vue.js 2.0 UI 工具包\n * zircle-ui - 开发可缩放用户界面的前端库。\n * vue-mdc-adapter - 根据 MDC 团队 [指南] 的 Vue.js 的材料组件集成 (https://github.com/material -components /material-components-web/blob /master/docs /integrating-into-frameworks.md)。\n * Material Components Vue- [material-components-web] 的包装器 (https://github.com/material-components/material-components - 网络) 的 Vue.js\n * VueFace - 用于 Web 的 Vue.js 2.0 UI 组件库\n * vuesax-Vue.js 的前端 vue 组件。\n * vuecidity-Vue.js 2.0 的 UI 组件框架\n * ant-design-vue - 基于 Ant Design 和 Vue 2.5.0 的企业级 UI 组件\n * heyui-(https://www.heyui.top/zh)- 适用于 Web 的 Vue.js 2.0 UI 工具包。\n * Carvue.js-IBM 的 Vue.js 碳设计系统\n * BalmUI-Vue.js 的下一代 Material UI\n * Osiris UI-：art：一个 Vue.js 2.0 通用响应式 UI 组件库\n * N3-components - 使用 Vue 2 构建的漂亮 Web 组件\n * 碎片 Vue-✨ 基于 Bootstrap 4 框架的时尚＆UI 组件库。\n * 基础 Vue - 基于 SAP Fiori 基础的组件。\n * Framevuerk-🚀 快速，响应迅速，无依赖性，基于 Vue.js 的方向支持和可配置 UI 框架。\n * @ Carbon / vue-@carbon 团队的 Carbon Design System 组件。\n * NutUI - 适用于移动网络的 Vue.js 2.0 UI 工具包\n * Inkline-Inkline 是用于 Vue.js 的现代 UI / UX 框架，旨在创建完美的响应式 Web 应用程序。\n * vue-awesome-mui - 用于 Web 的 Vue.js 2.0 MUI 组件\n * MDBootstrap - 基于最新的 Bootstrap 4 和 Vue 2.6.10 的强大 UI 工具包，提供了一组平滑的，响应式页面模板，布局，组件和小部件，以快速构建响应迅速，移动优先的网站和应用。\n\n\n# 手机\n\n * Framework7-Vue - 使用 Framework7＆Vue 构建功能齐全的 iOS 和 Android 应用。\n\n * vux- [中文] 基于 WeUI 的 Vue UI 组件。\n\n * vue-onsenui - 使用 HTML5 和 JavaScript 的移动应用开发框架和 SDK。创建美观，高性能的跨平台移动应用程序。基于 Web 组件，并提供 Angular 1、2，React 和 Vue.js 的绑定。\n\n * Weex-Weex 提供了发布跨平台的功能，因此 Web，Android 和 IOS 应用程序可以使用相同的 API 开发功能。\n\n * weex-eros- [中文] Eros 是基于 Weex 和 Vue 的应用程序解决方案，使您能够使用 Vue 的 API，简单快速地开发 Vue 中小型应用程序。\n\n * mint-ui-Vue.js 的移动 UI 元素。\n\n * vant - 来自 YouZan 的 Vue.js 2.0 移动用户界面。\n\n * cube-ui-Vue.js 编写的出色的移动 ui lib 实现 2。\n\n * mand-mobile - 基于 Vue.js 2 的移动 UI 工具包，专为金融场景而设计。\n\n\n# 组件集合\n\n * vue-mdc-Vue.js 的 Material Components Web。\n * keen-ui - 用 Vue 编写并受 Material Design 启发的基本 UI 组件的轻量级集合。\n * vue-admin-Vue 管理面板框架，由 Vue 2.0 和 Bulma 0.3 提供支持。\n * vuikit - 具有 Vue 所有功能的 UIkit。\n * uiv 由 Vue2 实现的 Bootstrap3 组件。\n * wffranco / vue-strap - 使用 Vue.js 2 构建的 Bootstrap 3 组件\n * jsmod-vue-pc - 适用于 vue 2.0 的高度可扩展的 Web 组件\n * guilhermewaess / SemVue - 使用 Vue 2 实现的语义 UI 模块\n * office-ui-fabric-vue-Vue.js 的 Office UI Fabric 实现\n * vuestic-admin - 带有自定义组件集合的 Vue Admin 仪表板。内置 Vue 2 和 Bootstrap 4\n * 语义 UI Vue-Vue 的语义 UI 集成\n * vuesax-Vue.js 的前端 vue 组件。\n * Vue 的基本 JS 2 - 功能齐全的 45+ Vue.js 组件，其中包括数据网格，图表，计划程序和图表组件等。\n * Banshee - 一个几乎没有渲染的 Vue UI 组件和实用程序框架，没有 CSS。\n * vue-atlas - 漂亮的 Vue 组件库。\n * DevExtreme Vue 组件 - 65 + 响应迅速且功能完善的 Vue UI 组件，具有可自定义的 Material Design 和 Bootstrap 兼容主题。\n * jqwidgets-70 多个具有 Material Design 主题的 Vue.js 2.0 UI 组件。\n * vue-uix-Vue.js 中用于网页实现的 UI 集合\n * vuedarkmode-Vue.js 的极简暗设计系统 🎨\n * Kendo Vue 用户界面–为业务应用程序构建的 70 多个 UI 组件，包括网格。对多种设计语言 (包括材料设计和 Bootstrap) 的支持完全响应。\n * Vuent - 实现 Microsoft Fluent Design 的 Vue.js 组件\n * bpit / vue - 专注于效果的 Vue 组件库\n * vue-tailwind - 具有可自定义类的 Vue 组件可用于 TailwindCSS，但与任何框架兼容。\n\n\n# 管理模板\n\n * iView Vue 管理员 - iView Vue 管理员 / 基于 iView 2.x 的管理门户模板\n * element Vue Admin-element Vue Admin / 基于 Element UI 2.x 的管理门户模板\n * vue-element-admin - 基于 Element UI 2.x 的神奇 vue 管理员\n * D2 管理员 - vue 制作的优雅后台模板在线演示\n * rest-admin - 基于 Vue 和 Bootstrap 4 的 Restful 管理面板在线演示\n * Shards Dashboard Lite Vue-✨ 现代管理模板，具有数十个自定义组件和模板。\n * Vue 材质管理员 - Vue 材质设计管理员模板\n * element-admin - 使用 Vue CLI 3 和 element-ui 的简单而强大的 vue 管理员。\n\n\n# 服务器端渲染\n\n * Nuxt.js - 通用的 Vue.js 框架。\n * Ream - 用于构建服务器呈现的静态网站的简约框架。\n * Universal vue-Vue CLI 插件，可轻松创建通用 Vue 应用程序\n\n\n# 静态网站生成器\n\n * VuePress - 简约的 Vue 驱动的静态网站生成器。\n * Peco - 人类的静态网站生成器。未维护\n * Sabre - 一个静态网站生成器，用于使用 Vue.js 构建快速的网站。\n * Gridsome - 使用 Vue.js 构建超快速，现代化的网站\n\n\n# 其他\n\n * app-framework - 具有 HTML 和 JavaScript 的 IOS 和 Android 应用程序 - 开发，构建和部署 - 免费和开源。\n * Myfirebase - 一种已解耦的单页应用程序框架，该框架与 google firebase 高度兼容。\n * Vue-Access-Control 基于 Vue.js 的前端访问控制框架 2。\n * Basys 工具箱，用于构建完整的 Vue.js 应用程序\n * CabloyJS 基于 KoaJS＆EggJS＆VueJS＆Framework7 的终极 NodeJS 全栈业务开发平台\n\n\n# 事件处理\n\n * vue-shortkey-Vue-ShortKey-Vue.js 的插件。\n * vue-throttle-event - 基于 requestAnimationFrame 的油门事件。\n * vue-waypoint-Vue 的 Waypoint 组件，这是滚动时触发功能的最简单方法。\n * vue-clickaway - 可重用的 Vue.js 组件的可重用 clickaway 指令。\n * vue-scrollfire - 在特定的滚动位置触发事件。\n * vue-resize-directive-Vue 指令可检测具有去污和节流能力的调整大小事件。\n * v-click-outside-Vue 指令对元素外部的点击做出反应，而不会停止事件传播。\n * vue-outside-events-Vue 2.x 指令可帮助指定元素侦听发生在自身外部的特定事件。\n * vue-selectable-Vue 1.x/ 2.x 指令可通过鼠标选择项目。\n * vue-click-helper-Vue2.x 指令可处理同一元素上的 click 事件和 dblclick 事件。\n * v-hotkey-Vue 2.x 指令，用于将热键绑定到组件。\n * vue-resize-Vue 2.x 组件可检测 DOM 元素的大小调整 (基于事件 / 无 window.onresize)\n * vue-observe-visibility - 使用 Intersection Observer API 的 Vue 2.x 指令可检测元素是否可见 (在视口中是否被隐藏) CSS)。\n * v-dragged - 用于拖动事件检测的 Vue 2.x 指令插件。\n * vue-esc-Vue.js 指令，可在转义键盘上添加文档事件监听器。\n * vue-global-events–使用 Vue 的事件修饰符处理全局事件 (如快捷方式) 的组件\n * vue-edge-check–检查浏览器边缘，以防止用 `vue-router' 滑动边缘时奇怪地触发过渡效果\n * vue-mutation-observer–使用 MutationObserver API 观察 DOM 中变化的简单而微小的指令\n * vue-scroll-show–如果用户在滚动后到达该元素，则显示该元素\n * vue-tabevents–其他打开的标签页之间易于通信\n * vue-visibility-trigger-👀 滚动到视图时以声明方式触发方法\n\n\n# 响应式设计\n\n * vue-viewports - 定义您的自定义视口，并在组件中使用它们。\n * vue 响应：Vue.js (2.x) 指令用于隐藏 / 显示具有 Bootstrap 4、3 或自定义断点的 HTML 元素。\n * vue-match-media-Vue 2.x 兼容插件，提供一致，语义化的方法来使组件具有媒体查询意识。\n * vue-media-query-mixin-Vue 2 媒体查询 mixin 可以在组件 js 和组件模板中使用。与引导程序和可视化视口兼容。如果屏幕宽度为 xs，则返回 wxS；如果屏幕宽度为 sm，则返回 wSM。\n * vue-breakpoints-Vue 2 最小组件，用于显示和隐藏基于断点的元素。受到 Airbnb 的启发。\n * vue-mq - 提供一些有用的工具，以语义和移动优先的 API (Vue 2.x) 快速设置响应式设计\n * VueResizeSensor - 支持调整大小事件的容器。\n * vue-breakpoint-component - 用于 组成 CSS 断点状态。\n * fine-mq - 一个很好的 API，可以轻松地管理 JS 中的媒体查询，并且可以与 VueJS 作为插件进行一流的集成。\n * vue-response-components - 使用 ResizeObserver 创建响应组件。\n * vue-screen-size - 可以轻松，被动地访问屏幕的宽度和高度。\n\n\n# 验证\n\n * vue-formly-JavaScript 支持的 Vue.js 表单。\n\n * vue-focus - 用于可重用 Vue.js 组件的可重用 focus 指令。\n\n * vue-form-generator-Vue.js 的基于架构的表单生成器组件。\n\n * FormSchema Native - 使用 JSON Schema 和 Vue.js 生成表单\n\n * ic-formly - 由 vue-formly 提供支持的简单表单组件。\n\n * 表单生成器 - 基于 Json 模板的表单生成器，基于 Vue 和 Laravel。\n\n * vue-autofocus-directive-Vue 自动聚焦指令。\n\n * vue-awesome-form - 一个 vue.js 组件，就像 json-editor\n\n * vue-form-components - 带有验证的干净＆最小化 vue 表单元素\n\n * ncform - 一种非常好的配置生成表单的方式\n\n * vee-validate - 简单的 Vue.js 输入验证插件。\n\n * vue-rawmodel-Vue.js v2 的 RawModel.js 插件。表单验证从未如此简单。\n\n * vuelidate - 针对 Vue.js 的简单，轻量级基于模型的验证。\n\n * simple-vue-validator - 一个简单而灵活的 vue.js 验证器库。\n\n * vue-vform-Vue.js 2 表单组件，集成了 jQuery 验证和 Axios。\n\n * vue-form-Vue.js 的全面表单验证。\n\n * vuelidation - 简单，功能强大的 vuejs 验证。\n\n * laravel-vue-validator - 显示来自 laravel 验证规则的错误\n\n * vue-daval - 超级 vue 数据验证器。简便，简单，准确。\n\n * willvalidate-Vue.js 的验证表单。\n\n * vue-m-validator - 用于 VueJ 的模型数据验证库。\n\n * vue-isyourpasswordsafe - 用 Vue 编写的小型实用程序，用于检查给定的密码是否已针对 “我已被拥有” API 泄漏。\n\n * vue-form-send - 用于从表单和原始验证发送数据的 Vue.js 指令\n\n * FormVuelar - 考虑服务器端验证的 Vue 表单组件\n\n * vue-final-validate - 根据我的开发经验，Vue 验证解决方案支持嵌套，异步。\n\n * vform - 一种在 Vue 中处理 Laravel 后端验证的简单方法。\n\n\n# 调整大小\n\n * vue-not-visible-Vue 指令，用于从屏幕上小于断点的 dom (如 v-if) 元素中删除。\n * vue-window-size - 提供反应性窗口大小属性。\n * vue-sensitive-text-↔ 相对于其父节点的宽度缩放其子节点的组件\n\n\n# 滚动\n\n * vue-chat-scroll-Vue.js 2.0 的自动滚动至底部指令。\n * vue-scrollto - 添加了一个指令，该指令侦听单击事件并滚动到元素。\n * vue-next-level-scroll - 一种基于组件且支持 SSR 的方法，可使用现代 Scroll Behavior API 进行平滑滚动\n * vue-scroll-sync - 同步容器滚动位置的组件\n * v-scroll-lock - 用于正文滚动锁定而不中断目标元素滚动的 Vue.js 指令\n * vue2-perfect-scrollbar-PerfectScrollbar 简约包装器\n * vue-scroll-to - 添加了一个指令，该指令侦听单击事件并滚动到元素。\n * vue-scroll-progressbar - 可自定义的组件，用于指示进度条中滚动的相对位置。\n * vue-backtotop-Vue.js 的 Back-to-top 组件，单击该组件可将页面滚动到顶部。\n * VBar - 适用于 Vue.js 2x 的虚拟响应式跨浏览器滚动条组件。\n * Vuebar - 使用本地滚动行为的自定义滚动条的 Vue 2 指令。轻巧，高性能，可定制且无依赖性。\n * vue-detached-scrollbar - 一个简单的滚动条，可以从正在滚动的容器中分离出来。\n * vuescroll - 基于 Vue.js 的滚动插件，用于统一 PC 和移动设备中的滚动。\n * vue-simplebar-Simplebar 插件的 Vue.js 包装器。\n * smooth-vuebar - 平滑滚动条的 Vue 指令包装\n * vue-scrollview - 一个组件，该组件利用作用域的插槽来检测 vue 组件何时进入和离开视口。\n * vue-scrollactive - 根据视口中的当前部分在菜单项中添加一个活动类，单击菜单项时也会滚动到该部分。\n * vue-intersect - 一个 Vue 组件，用于向 Vue 组件或 HTML 元素添加交集观察者。\n * vue-scrollmonitor - 一个 Vue 插件，可在支持多种浏览器的情况下观看视口内部元素的可见性状态 (使用提供 / 注入，因此兼容 vue@2.2 。X)\n * vue-stroll - 适用于 Vue.js 2.x 的超棒 CSS3 列表滚动效果组件。\n * navscroll-js - 在滚动时突出显示菜单项，并且在单击菜单项时也会滚动到某个部分。用作 vue 组件，vue 指令或与 vanilla js 一起使用。\n * vue-scrollwatch - 一个轻便的插件，可检测滚动事件，在元素进入视口时自定义回调，将'scrollTo'api 暴露给特定元素。使用 vue 指令。\n * vue-check-view - 一个检查元素是否在视口中的插件。快速，小型，无依赖性，实时演示。\n * vue-stickto - 支持多个 DOM 节点的 vue 指令会自动粘贴到顶部\n * vue2-scrollspy - 一个 scrollspy 插件和动画滚动到。\n * vue-scroll-behavior - 自定义路线导航中的滚动行为。特别是哈希模式。\n * vue-scroll-stop - 到达边缘时停止传播滚动。\n * vue-seamless-scroll-Vue.js 的简单无缝 滚动。\n\n\n# 路由\n\n * vue-router-Vue.js 的官方路由器。\n * vue-router-storage-Vue.js 2 和 vue-router 2 的路由器存储和解决方案\n * vue-tidyroutes - 分散的 vue-router 路由定义\n * vue-routisan - 基于 Laravel 路由系统的 Vue 路由器的优雅路由定义\n * vue-error-page - 提供路由器视图的包装器，使您可以显示错误页面而不更改 URL\n * vue-router-sitemap - 通过 vue-router 配置生成 sitemap.xml\n * vue-smart-route - 智能路由指令，可使用 Vue.js 制作具有智能外观的应用程序。\n * vue-router-lite-Vue.js 2 的基于组件的声明性路由器。\n\n\n# 延迟加载\n\n * vue-lazyload - 一个 Vue.js 插件，用于将图像或组件延迟加载到应用程序中。\n * vue-lazy-background-images - 延迟加载 Vue 2 的背景图像。\n * vue-progressive-image-Vue 渐进式图像加载插件。\n * vue-l-lazyload-Vue.js v2.x + 的 lazyload 插件。\n * vue-lazyload-img - 专门针对移动浏览器进行了优化。支持 V2 和 v1。\n * vue-lazy-images-Vue 2.x 的 lazyload 图像插件。\n * v-lazy-img-Tiny (<0.6kb) 指令，用于 Vue 2 的渐进式图像加载。\n * vue-clazy-load - 使用 IntersecionObserver for Vue 2 的轻量级可转换图像延迟加载组件。\n * vue-lazy-this - 使用 Intersection Observer API 的延迟加载组件。\n * v2-lazy-list - 一个基于 Vue 2.x 的简单的延迟加载列表组件\n * pimg - 一个用于延迟加载图像的简单渐进图像组件。\n * vue-tiny-lazyload-img - 用于延迟加载图像的小尺寸 Vue.js v.2 + 指令\n * vue-lazy-youtube-video - 一个用于延迟加载 YouTube 视频的简单 Vue.js 组件。\n * lazyload-vue - 适用于 vanilla-lazyload 的 Vue 插件。\n\n\n# 分页\n\n * vue-paginate - 一个简单的 vue.js 插件，可对数据进行分页。\n * vue-pagination-2-Vue.js 2 分页组件。\n * vuejs-uib-pagination - 适用于 Vue.js 的最佳，完整的分页插件。受角引导分页启发。\n * vuejs-paginate - 用于创建分页的 Vue.js (v2.x +) 组件。\n * vue-pagination-bootstrap - 一个 Vue.js (1.x＆2.x) 服务器端分页组件，带有基于 Bootstrap 的模板\n * laravel-vue-semantic-ui-pagination - 与 Laravel 和 Semantic-UI 一起使用的 Vue.js 2.x 分页。\n * vue-paginate-al-Vue 分页并返回您的数据。\n * vue-tiny-pagination - 用于创建微小分页的 Vue 组件。\n * laravel-vue-pagination - 适用于 Laravel 分页器的 Vue.js 分页组件，可与 Bootstrap 一起使用。\n * vue-lpage - 低级 Vue 分页组件。\n * v 页 - 一个简单的分页栏，包括基于 Vue2.x 的长度菜单，i18n 支持。\n * vue-smart-pagination - 具有许多不错设置的任何数据的智能分页。\n * vue-paginatron - 分页组件使用范围插槽道具构建，具有最大的灵活性。\n * vue-ads-pagination - 使用 css 框架 [tailwindcss](https://tailwindcss.com/docs/what -is-tailwind /)\n\n\n# 动画\n\n * vue2-animate-Animate.css 的 Vue.js 2.0 端口。与 Vue 的内置转换一起使用。\n * animated-vue - 一个 Vue.js 2.x 插件，可轻松使用 Animate.css 动画作为过渡。就像 `` 一样简单！\n * vue-lottie - 一个 Vue.js 2.x 插件，用于基于 bodymovin 渲染特效动画\n * Vueg - 使 vue-router 具有过渡效果 / 为 webApp 提供转场特效的开源 Vue 插件\n * v-animate-css - 最容易实现 Animate.css 的 Vue 2 指令\n * vue-mixin-tween-Mixin 工厂，它将补间值添加到动画的组件上下文中\n * v-odometer - 轻松平滑地转换数字。使用此库可为您的应用程序提供平滑的动画，仅适用于数字。\n * vue2-transitions✨ 可重复使用的 Vue 2 过渡组件\n * vue-overdriveVue 应用程序的超级简单的魔术移动过渡 🎩\n * animated-number-vue 超级简单的数字动画方法。\n * vue-typed-js 集成了 Typed.js，可轻松创建打字动画。\n * vue-parent-change-transition 启用子组件在更改父组件时进行动画处理。\n * vue-smooth-reflow 响应数据变化而转换元素重排。\n * VueTween 允许组件补间其属性。\n * vue-slide-up-down 就像 jQuery 的 slideUp / slideDown 一样，但是对于 Vue！\n * vue-animejsVue 的简单 anime.js 指令。\n * Eagle.jsEagle.js 是 Vue.js 的基于 Web 的幻灯片框架。\n * vue-posePose for Vue 是一个声明式运动系统，结合了 CSS 过渡的简单性和 CSS 的强大功能和灵活性 JavaScript。\n * vue-slide-up-down-component 这是一个简单的界面，但是实现了非常灵活而强大的幻灯片动画 Vue！\n * femtoTween 具有一流 Vue 支持的简约 (零深度，小于 1k) 补间库\n * vue-sequential-entrance 插件，用于创建带有页面元素列表的优雅的连续动画入口。零努力。简单轻巧\n * vue-animate-scroll 一种超级轻量级 的方法，可在元素滚动到视图中时向其添加 CSS 动画。\n * vue-svg-transition 创建 2 状态，SVG 驱动的过渡\n * vue-page-transitionVue.js 的简单路由 / 页面转换\n\n\n# 元标记\n\n * vue-head - 管理 head 标签的元信息，一种简单的方法。\n * vue-meta - 在 Vue 2.0 组件中管理页面元信息。支持 SSR + 流媒体。\n * vue-headful - 从视图中设置文档 `` 和 meta 标签。\n * vue-simple-headful - 使用 vue.js 轻松设置元标记 - 具有 TypeScript 支持的更简单的 vue-headful 替代方法。\n\n\n# 传送门\n\n * vue-dom-portal-Vue.js 组件中 DOM 元素的转义口。\n * portal-vue - 一个 Vue 插件，用于在 DOM 中的任何位置渲染组件的模板 (在 virtualDOM 级别上有效，不会在 DOM 中移动节点)\n\n\n# 过滤器\n\n * vue2-filters - 适用于 Vue 2. * 的标准过滤器 Vue 1. * 的集合。\n * vue-morphling-Vue 2 的标准和自定义过滤器的集合。\n * vue-currency-filter - 轻巧且可自定义的 Vue 2 货币过滤器。\n * vue-trans - 一个简单的过滤器，提供了与 Symfony trans 相似的翻译方式。\n * vue-string-filter - 轻量级 Vue 2 字符串处理过滤器。\n * vue-units - 在 Vue 2 中使用的方便的单位转换过滤器的集合。\n * vue-numeral-filter - 过滤器的集合，允许在组件的模板部分内联使用 Numeral.js。\n * vue-filter-date-format-Vue 2 的简单日期时间过滤器。\n * vue-filter-pluralize-Vue 2 的简单复数过滤器。\n * vue-filter-date-parse-Vue 2 的简单解析日期时间过滤器。\n\n\n# SVG\n\n * vue-svgicon - 创建 svg 图标组件的工具。(版本 2.x)。\n * vue-content-loading-Vue 组件可轻松构建 (或使用预设) Facebook 之类的 SVG 加载卡。\n * vue-annotator - 使用任何 SVG 元素 (“rect”，“ polygon” 以及其他更多元素，即使包装了 HTML 元素如 “ canvas”，也可以为页面添加注释) 在 foreignObject 中)\n * vue-svg-sprite - 简单使用 SVG sprite (vue 2.x) 的指令。\n * vue-svg-filler - 用于自定义 svg 文件 🖍(vue 2.x) 的 Vue 组件。\n\n\n# 其他\n\n * vue-resource-progressbar-interceptor - 将进度条与所有请求联系在一起的拦截器，很明显，正在加载某些东西。\n * vue-images-loaded-Vue.js 2.0 指令可检测图像加载。\n * vue-visible-VueJS (2.x) 的 v-visible 指令，类似于 v-show 但具有可见性。\n * vue-resize-sensor - 用于检测容器大小的组件 (基于事件)\n * v-blur-Vue 指令动态模糊元素\n * vue-async-methods - 用于基于承诺的方法的帮助程序实用程序\n * vue-openseadragon - 适用于 Vue.js 的 OpenSeaDragon 组件 (缩放和平移)\n * vue-match-heights - 指令将元素的高度设置为相同。\n * vue-conditional-attrs - 用于条件渲染属性和指令的 Vue.js 组件\n * vue-cbsc - 一个 Vue.js 2.x 组件，用于以编程方式混合，着色和转换颜色。\n * vue-spatialnavigation - 用于空间导航 (键盘导航) 的 Vue 指令 (Vue.js 2.x)\n * vue-lifecycle-Vue.js 生命周期指令。\n * vue-aspect-ratio-vue 的长宽比指令。\n * @ kooljay82 / vue-m-camera - 为避免自动更改通过用户设备的相机拍摄的照片方向。\n\n\n# WebGL\n\n * vue-3d-model-Vue 组件中的 3D 模型查看器。\n * vue-pano-Vue 组件中的全景查看器。\n * vue-threejs-Three.js 的 Vue 绑定。\n * VueGL-Vue.js 组件通过 three.js 反应性地渲染 3D 图形\n * vue-vr - 使用 Vue 构建 VR 应用程序的框架\n * vue-displacement-slideshow - 一个 Vue.js 组件，可简化 Webgl 图像位移转换。\n\n\n# 全屏\n\n * vue-fullscreen - 用于全屏的简单 Vue 组件。\n\n\n# 页面可见性\n\n * vue-page-visibility-awesome - 易于配置的页面可见性 api 的 Vue 2.x 组件。\n * vue-authplugin - 美观的 auth 控制插件，支持指令和原型方法。\n\n\n# 打印\n\n * vue-html-to-paper-Vue mixin 用于将 html 元素打印到纸张上。",normalizedContent:"# vue 资源\n\n\n# 官方资源\n\n * 官方指南\n * api 参考\n * github 回购\n * 发行说明\n * 样式指南\n * vue.js 新闻\n\n\n# 外部资源\n\n * vue.js 资料まとめ (日语)by @hashrock\n * vue.js 新闻稿 - 每周精选的 vue.js 新闻的剂量\n * vue.js 提示 - 成为更好的 vue.js 开发人员的提示\n * vue.js wikipedia\n * vue.js radar - 精选的新闻通讯和网站，涵盖了新的 vue.js 版本 / 贡献。\n * vue 新闻 - 专注于最新 vue.js 新闻和信息的社交网站。\n * vue 精选资源 - 推荐的 vue.js 课程和教程。\n * builtforvue - 所有 vue.js 组件和软件包的 npm 镜像。\n * vue school - 通过核心成员和行业专家的视频课程学习 vue.js\n * vuedose。有关忙碌的开发人员的 vue 生态系统的提示和技巧。\n * vuelibs。基于 awesome-vue 存储库的 vue.js 库和组件的简约列表。\n\n\n# 工作门户\n\n * vue.js 职位 - vuejobs - 一个 vue.js 职位门户，可为您所有的 vue.js 职位招聘或录用。\n * vue.js 面试问题 - 300 个 vuejs 面试问题和答案列表\n\n\n# 社区\n\n * twitter\n * 官方论坛\n * vue-requests - 请求您希望存在的 vue.js 模块或获取有关模块的想法\n\n\n# 会议\n\n * vueconf\n * vue.js 伦敦\n * vueconf us\n * vueconf 多伦多\n\n\n# 播客\n\n * full stack radio＃30(11-23-2015)\n * javascript jabber＃187(11-25-2015)\n * changelog＃184(11-27-2015)\n * 软件工程日报 (2015 年 12 月 29 日)\n * javascript air 016 (2016 年 3 月 30 日)\n * [codecasts＃2-falando sobre vuejs e web components(2016-08-19)pt-br]\n * full stack radio＃50(09-21-2016)\n * [和 vue.js 框架的作者聊聊前端框架开发背后的故事 zh-cn]\n * mw s04e08-vue.js 与 evan you 和 sarah drasner (04-27-2017)\n * 提交请求＃12 - 众筹开源 (vue.js)(06-15-2017)\n * the web platform podcast 132：vue.js(07-27-2017)\n * 带有 maximilianschwarzmuller 的 javascript jabber＃276 (08-29-2017)\n * 使用 sarah drasner 动画 vuejs (软件工程日报 01-12-2017)\n * vue 观看次数 (vue 每周播客开始于 2018 年 3 月 6 日)\n * 官方 vue.js 新闻播客\n * 通过 qit 技术播客索引器播出的 vue 播客列表\n * dne 138-vale a pena vuejs 吗？(01-05-2018)\n * cynical developer＃99(10-15-2018)\n * 语法＃130 (03-27-2019)\n\n\n# youtube 渠道\n\n * vuenyc\n * vueconf 欧盟\n\n\n# 官方例子\n\n * 基本示例\n * vue.js todomvc\n * coffeescript 版本\n * vue.js hackernews clone\n * vue.js 2.0 hackernews clone\n\n\n# 讲解\n\n * vue.js 屏幕录像关于 laracasts -auth0 博客上的 vuejs 2 身份验证教程\n * [scotch.io 上的使用 vue.js 创建 github file explorer\n * vue.js 教程关于 vegibit\n * vue.js 使用 webpack，vue-loader 和热重装从零开始构建设置\n * vuex 基础：教程和说明\n * vuex 简介视频 - 来自伦敦 vue.js 聚会＃1 的 james browne -laravist 上的 vue.js 中文系列视频教程\n * [craigmckenna.com 上的使用 vue.js 开发反应式发票应用程序\n * 带有葡萄牙语的 laravel 和 vue.js 的混合应用示例，作者 @vedovelli -oguzhan.in 上的 vue.js 土耳其语简介\n * vue.js 西班牙语视频教学系列 (3-8-2016) 在 youtube 上由 juanandresnunez 制作\n * [stude.net 上的 vue.js 西班牙语电视广播系列 -bhnddowinf 上的讲解 vue.js 官网中文 - 含代码，百度云，youtube\n * [pusher 上的使用 vuejs，es2015 和 webpack 探索实时应用] -sekolahkoding.com 上的印尼语中的 vue.js\n * .dev 中来自 scratch 系列的 vue.js 俄语\n * [flask，rethinkdb，vue.js，ч。створеннясервісудлязберіганняфаилівзflask。1 乌克兰\n * vuejs 2 法语教程 francaispar grafikart\n * jayway vue.js 2 研讨会。使用 vue-router，vuex 和 vue-resource 构建一个电子商务站点\n * 如何使用 wijmo 控件创建出色的 vuejs 应用程序 -bhnddowinf 上的讲解 vue.js 2 官网中文 - 含代码，百度云，youtube\n * vue.js 备忘单：服务器端应用程序，路由器，vuex 存储，graphql 等由 @xpepermint\n * 使用 vue.js 加载类似图片的媒体\n * [metric loop] 上的如何在 laravel spark 项目中使用 vuex /metricloop.com/blog)\n * [metric loop] 上的如何在 vuex 中设置模块 (https://metricloop.com/blog) - 关于 laracasts 的学习 vue 2：循序渐进\n * vue.js 中文教程\n * 在 vue.js 2.0 框架上启动和运行在 sitepoint 上\n * [metric loop] 上的如何使用 vuex 进行 api 调用 (https://metricloop.com/blog)\n * [度量循环](https：//metricloop) 上的如何使用 vuex 构建功能。 com /blog) -devmarketer 在 youtube 上发布了 vue.js 2.0 基础知识\n * [无知的 vuex-vue 的应用程序数据存储上缺少的入门手册](https://medium.com/js-dojo/vuex-for-the-clueless-the-missing-primer-on-vues-application-data -store-33fa51ffc3af＃.2j25xpfui)\n * 实时网格组件 laravel，vue.js，vuex 和 socket.io\n * vuejs 2 - 完整指南 (包括 vuex)-udemy 教程\n * [在 egghead.io 上使用 vue.js 开发 web 应用](https://egghead.io/courses/develop-web-apps-with-vue-js)\n * vue.js 2 - 入门\n * vue.js 2 和 vuex (基本)\n * fatih acet 在 youtube 上的 turkcevuejsegitimvideoları\n * [通过六个步骤从头开始在 vue.js 中构建 json 树视图组件](https://devblog.digimondo.io/building-a-json-tree-view-component-in-vue-js-from-scratch - 由 arvid kahl 在 digimondo devblog 上的 - in-six-steps-ce0c05c2fdd8＃.738ok0l4p)\n * vue！-illya klymov 在 youtube 上的 openlecture 2017.01 俄语 (@xanf)\n * @afropolymath(https://afropolymath.svbtle.com/bootstrapping-your-first-vue-js-project/)。 com / afropolymath)\n * [@分离] 的从头开始构建 vue-hackernews-2.0(https://github.com/detachment)\n * [使用 vue-kindergarten 为您的 vue.js 和 nuxt.js 应用程序提供基于角色的授权](https://medium.com/@jirichara/role-based-authorization-for-your-vue-js-and-nuxt- js 应用程序使用 vue 幼儿园 - fd483e013ec5＃.kp81np177)\n * 完整的 vue.js 应用程序教程 - 使用 vue 创建简单的预算应用程序，作者为 @matthiaswh\n * vue.js 教程：经过渲染的 seo 友好示例\n * [vue.js 简介，供仅了解足够的 jquery 的人使用](https://medium.com/@mattrothenberg/vue-js-introduction-for-people-who-know-just-enough-jquery-to - 通过 eab5aa193d77 获取)\n * 使用 vue.js 和 axios 从第三方 api 获取数据\n * vue 2 的趣味项目 (视频)，作者：packt 的 peter van meijgaard。(2017 年 4 月)\n * [vue js：同时运行 express 和 webpack dev server](henrik fogelberg) 在媒体上的 (https://medium.com/dailyjs/vue-js-simultanelyly-running-express-and-webpack-dev-server-292f4a7ed7a3)\n * [the net ninja] 在 youtube 上发布了 vue js 2 教程 (https://www.thenetninja.co.uk)\n * 在 5 分钟内将无头 cms 添加到 vuej 中\n * vue 架构中的观察者\n * 使用 vue.js 构建您的第一个应用\n * 5 个学习 vue.js 的实用示例\n * [@jesalg] 的从 knockoutjs 迁移至 vuejs(https://twitter.com/jesalg)\n * 通过 vue.js 创建测验由 [@ rap2h](https://twitter.com/rap2h)\n * [@chadcampbell] 的 vue.js：入门 (https://twitter.com/chadcampbell)\n * vue.js 2 和 firebase - 构建实时单页 web 应用程序\n * vue.js 2 和 vue 资源 - 具有外部 api 访问权限的实际应用程序\n * 面向初学者的 vue.js 交互式屏幕录像\n * [aligoren] 在 youtube 上发布的 vue.js ile nasaapi'ınıkullanarak vericekme(https://aligoren.com)\n * 使用 vue.js 2 进行 web 开发 (视频)，作者是 packt 的 olga filipova。(2017 年 6 月)\n * 使用 vuejs 和 pusher 建立实时图表\n * vue 简介，前端大师课程的回购\n * 关于 css 技巧的 vue 指南\n * 在您的 vuejs 应用中使用打字稿 - 关于 nodelover 的 vue.js 视频系列，免费，入门，实战 -ninghao.net 上的 vue.js 预览\n * [@chadcampbell] 的 vue.js：开发机器设置 (https://twitter.com/chadcampbell)\n * 使用 vue-router 构建 vue v2 js 应用 @mikestreety\n * [@atom_hernandez][https://medium.com/@davidatomhernandez/how-to-a-simple-carousel-with-vue-138715d615d7) 制作自己的旋转木马](https://twitter.com/ atom_hernandez)\n * [使用官方 vue 测试工具和 jest 对 vue.js 组件进行单元测试](https://alexjoverm.github.io/series/unit-testing-vue-js-components-with-the-official-vue-testing- @alexjoverm 的 tools-and-jest /)\n * [创建 vue.js 过渡和动画：实时示例，作者为 @udyuxdev\n * 创建自定义 vue.js 插件\n * vuejs 第 1 部分中的异步\n * vuejs 第 2 部分中的异步\n * [@mikestreety] https://www.mikestreety.co.uk/blog/vue-js-using-localstorage-with-the-vuex-store) 使用 [不带插件的 vuex 存储使用 localstorage] //twitter.com/mikestreety)\n * [@mikestreety] 的使用道具通过 vue router 访问组件内的 url 参数 (@mikestreety)(https://twitter.com/mikestreety)\n * [使用 pm2 和 nginx 在生产中部署 vue.js — ssr (vuetify)](https://medium.com/@kamerk22/deploy-vue-js-ssr-vuetify-on-production-with-pm2-and- nginx-ec7b5c0748a3)\n * laracast 上的 testing vue components\n * [[codylseibert] 的 [使用 vue.js 和 express.js 构建全栈 web 应用](https://twitter.com/codylseibert )\n * vue.js 2 条食谱 (视频)，由 packt 的 peter van meijgaard 撰写。(2017 年 9 月)\n * [sabe.io] 上的 vue.js 入门 (https://sabe.io/)\n * 使用 vue 2 构建您的第一个高级 crud 应用程序 (视频)(https://www.packtpub.com/web-development/building-your-first-advanced-crud-application-vue-2-video) 范・迈加德 (pack meitgaard)(2017 年 7 月)\n * 프론트엔드vue.js입문서\n * [inflearn] 上的누구나다루기쉬운vue.js (视频) ](https://www.inflearn.com/)，由 captain pangyo\n * 在 2 小时内建立一个 vue.js 博客顶部在 snipcart\n * [sales bhatnagar @sachinbee 的 vuejs 2 入门 udemy\n * [sabe.io] 上的 vuex 入门：在 vue.js 中管理状态 (https://sabe.io/)\n * [sergii stotskyi 的使用 casl 的 vue2 acl]\n * [简化 javascript 选择 - angular 诉 react 诉 vue (视频)](https://www.packtpub.com/application-development/javascript-choice-made-easy-% e2%80%93-angular- v-react-v-vue-video)，packt 的 daniel kmak。(2017 年 11 月) -storyblok 博客上的使用 auth0 的 vuejs 2.5 + 身份验证教程\n * 带有 vue 的 graphcms 初学者指南在 graphcms 上\n * 在 chrome 和 vs code 中调试 vue.js 此食谱展示了如何将 debugger for chrome 扩展程序与 vs code 一起使用调试由 vue cli 生成的 vue.js 应用程序。\n * [packet sachin bhatnagar 的 vue js 2 入门 (视频)。(2018 年 1 月)\n * 使用 vue.js 构建电影应用界面，作者是 hassan djirdeh，[@ djirdehh](https： //twitter.com/djirdehh)\n * 让我们建立一个自定义的 vue.js 路由器，作者：hassan djirdeh，[@djirdehh](https：//twitter .com/djirdehh)\n * 由 vue，webpack 4 和 babel 入门，作者是 bjorn krols，[@ krolsbjorn](https ：//twitter.com/krolsbjorn)\n * 如何将 bootstrap 4 添加到您的 vue 项目，作者：bjorn krols，@ krolsbjorn\n * [如何将语义 ui 添加到您的 vue 项目中](作者：bjorn krols，@krolsbjorn( https://twitter.com/krolsbjorn)\n * [bjorn krols 的如何将 eslint 添加到您的 vue 项目，@krolsbjorn\n * 如何通过 vue 中的 url 查询参数使内容动态化 (https://medium.com/@bjornkrols/tutorial-dynamic-content-via-url-query-parameters-in-vue-js-d2df19b66633) krols，@krolsbjorn\n * 如何为 aws s3 托管的 vue 应用程序启用历史记录模式作者：bjorn krols，@krolsbjorn\n * [bjorn krols 的使用断点调试 vue 应用程序的基本介绍，@ krolsbjorn\n * 使用 buttercms 无头后端构建 vue.js 电子商务应用程序\n * master vue.js\n * 使用 go 和 vue.js 构建投票应用程序\n * 使用 vue.js 构建协作绘画应用程序\n * 使用 stripe 构建实时付款信息中心\n * 使用 vue.js 构建加密货币跟踪器\n * 使用 vue.js 构建设计反馈应用程序\n * 使用 flask 和 vue.js 开发单页应用\n * 使用 stripe，vue.js 和 flask 接受付款\n * [serverlarup.net 上的使用 laravel 和 vuejs 进行 api 驱动的开发 (免费课程)\n * 在 vue.js 中管理状态，作者：哈桑・吉尔德 (hassan djirdeh)，@djirdehh\n * 由 vue.js 制作的真实世界项目，由 packt 的 daniel khalil 撰写。(2018 年 8 月)\n * [heartbeat (vue + nw.js 视频系列)] https://goo.gl/8p3msr)，作者：@@ ackzell (https://github.com/ackzell)(2017-2018)\n * 带有 nuxt.js 的 firebase 服务器端渲染 vue 应用程序 (带有 javascript 框架的服务器端渲染)\n * firebase 使用 nuxt.js (使用 javascript 框架的服务器端渲染) 测量 vue ssr 性能)\n * 使用 d3 和 vue 创建交互式地图 (2018 年 10 月)\n * 编写通用的，支持 ssr 的 vue 组件的指南\n * [vue school] 的 vue.js 基础知识 (https://vueschool.io)\n * vuex for everyone 由 vue school\n * [vue school] 的 vue.js 表单验证 (https://vueschool.io)\n * [vue school] 的 vue.js 大师班 (https://vueschool.io)\n * [vue school] 的 vue.js firebase 实时数据库 (https://vueschool.io)\n * [vue school] 的 vue.js firebase 身份验证 (https://vueschool.io)\n * [vue school] 的带有 vue.js 的动态表单 (https://vueschool.io)\n * [vue school] 的 custom vue.js directives(https://vueschool.io)\n * vue.js 应用程序开发要点，作者是 packt 的 bartłomiejpotaczek。(2018 年 10 月)\n * 对 vue.js 进行故障排除，作者：克里斯蒂安・赫尔 (packet hur)，帕特。(2018 年 10 月)\n * nuxt.js - 类固醇上的 vue.js，作者：maximilianschwarzmuller，packt。(2018 年 10 月)\n * 使用 quasar (和 vue) 构建电子文件资源管理器，作者：@@ hawkeye64](https://github.com/hawkeye64)。(2018 年 11 月)\n * [udemy] 上的使用 vue js 2 和 firebase 构建 web 应用程序 (https：// [the net ninja] 的 www.udemy.com/)(https://www.thenetninja.co.uk/)\n * [udemy] 上的 vue js 2 - 完整指南 (包括 vue router 和 vuex)( https://www.udemy.com/)，maximilianschwarzmuller\n * [使用 vue.js，vuex，vuetify 和 firebase 的 spa 应用程序 (第 1 部分)](https://www.jenniferbland.com/spa-application-using-vue-js-vuex-vuetify-and-firebase-part -1 /) 由 jennifer bland @ratracegrad。(2018 年 11 月)\n * [使用 vue.js，vuex，vuetify 和 firebase 的 spa 应用程序 (第 2 部分)](https://www.jenniferbland.com/spa-application-using-vue-js-vuex-vuetify-and-firebase-part -2 /) 由 jennifer bland @ratracegrad。(2018 年 11 月)\n * [使用 vue.js，vuex，vuetify 和 firebase 的 spa 应用程序 (第 3 部分)](https://www.jenniferbland.com/spa-application-using-vue-js-vuex-vuetify-and-firebase-part -3 /) 由 jennifer bland @ratracegrad。(2018 年 11 月)\n * [使用 vue.js，vuex，vuetify 和 firebase 的 spa 应用程序 (第 4 部分)](https://www.jenniferbland.com/spa-application-using-vue-js-vuex-vuetify-and-firebase-part -4 /)，作者是 jennifer bland @ratracegrad。(2018 年 11 月)\n * [詹妮弗・布兰德 (jennifer bland)@ratracegrad 将国际化添加到 vue 应用程序 )。(2018 年 11 月)\n * 由 vue js 2 编写的实用项目，作者是 packt 的 jack herrington。(2018 年 12 月)\n * [lessipe](https：//lessipe) 的 lessipe 上的 vue.js기초다지기(视频) .com /)\n * 由 vue.js 和 node.js 进行的全栈 web 开发，作者 haider rehman， packt。(2019 年 1 月)\n * designer for vue，由 design + code 提供 (2019 年 2 月)\n * [talat tufekci] 的 vue 土耳其语简介 (https://www.onbirkod.com)\n * [talat tufekci] 的使用土耳其语的 vue-resource 提取数据 (https://www.onbirkod.com)\n * [talat tufekci] 的使用土耳其语 vue-router 的 spa 应用程序 /www.onbirkod.com)\n * [talat tufekci] 的使用土耳其语的 vue-cli 创建 vue 项目 https://www.onbirkod.com)\n * [taul tufekci] 的 vue 组件和土耳其语 vuex 之间的消息传递 .onbirkod.com)\n * [作者：michael thiessen] 如何在 vue 中动态添加类名称\n * 使用 scaffoldhub 使用 vue js，node js 和 sql 或 mongodb 构建图书馆 web 应用程序作者 felipe lima [@scaffoldhub_io](https：//twitter.com/scaffoldhub_io)\n * 使用 nativescript + vue 构建实时位置跟踪应用，由 saibbyweb 撰写\n\n\n# 事例\n\n * 使用 laravel 中的 jwt auth + 示例后端 api 的入门应用程序\n * 节点 webkit + vue 示例 @brandonjpierce\n * vue 样本 @superlloyd\n * 使用 vue.js + vue-router 的 hackernews 克隆，作者 @kazupon\n * 电子 + vue 示例，@ bradstewart\n * [boris okunskiy] 的单页应用程序示例 (vue + voie)(https://github.com/inca)\n * 开始 - 用 vue + 流明编写的 task manager spa，作者是 raj abishek\n * [bosnaufal] 的 vue mini shop(https://github.com/bosnaufal)\n * vue soundcloud 由 mul14\n * 功能请求 (laravel + vue 组合) 由 haydenbbickerton\n * [@ yjj5855] 的 vue cookbook (vue1.0 + express)(https://github.com/yjj5855)：演示服务的第一个屏幕渲染\n * strong together - 一个启动器项目，基于 browserify 和 semantic-，以独立或 laravel / laravel spark 项目的形式构建单页 vue.js 应用程序， ui) 由 websemantics\n * vuetest：在 iframe 中具有用户身份验证，bootstrap ui，上传器，所见即所得编辑器的广告管理网站\n * vue-shopping 由 andylei18\n * vue-cnodejs，060 由 @shinygang\n * vue-zhihu-daily 由 hilongjw\n * vuechess- [gustayo] 的多人在线国际象棋游戏 (https://github.com/gustayo)\n * ngexplorer-vuejs-client- nugexplorer 的正式客户端](https://github.com/gustayo)\n * [vue 2048 (vue + webpack)][https：//pengfu](https：//pengfu](https://github.com/pengfu) 的 https://pengfu.github.io/vue-2048/)：流行的 2048 游戏使用 vue 实现，webpack，sass，es6\n * [bosnaufal] 的 vue simple pwa(https://github.com/bosnaufal)\n * tour of heroes(vue 2.0)：angular 2.0 的 vue 2.0 端口 [tour of heroes](https：//angular。 io /docs/ts /latest/tutorial /) 演示应用程序。亮点：es6 / 7，渲染功能，jsx，revue (vue 的 redux 绑定)，[vue-router](https://github.com/vuejs/vue-router)，airbnb eslint，webpack。由 @ aweber1\n * vue-table-pagination 由 echovic 进行分页的表\n * feathers and vue 2.0 blog admin demo 演示了如何在 vue 2.0 中使用 feathers。它包含 [delay] 的身份验证，vue 路由器，vue 无限加载和角色 (https://github.com/delay)\n * vue-zhihudaily-2.0zhihudaily 演示程序是使用 vue 2.0，vue-router 和 vuex 构建的，并具有服务器端渲染功能。由 cs1707\n * vue-demo-todolist 是一个简单的 vue2.0 演示，它使用 vue 2.0 vue-cli 构建。通过 fishenal\n * [liueans] 的 vue-adminlte(https://github.com/liujians)\n * vue (2.0)+ node.js：博客内容管理系统 (cms)，作者 @ycwalker\n * ngexplorer-quasar- ngexplorer 的实现与 [quasar 框架](https： //gust.yo 的 //github.com/rstoenescu/quasar-framework)(https://github.com/gustayo)\n * zhihu-daily-vuemoonou 基于 vue2.0 的 zhihu 日报\n * loopback-vueloopback + vue + vue-resource，ionic-app，vue 页面分页功能，验证权限控制，访问令牌机制，凭证，ci ，docker qxl1231\n * vue-s3-dropzonevue.js 拖放组件可将文件无服务器上传到 aws s3\n * easy-vue 一个简单的示例，使用 vue 在 vue 2.0，vuex 2.0，vue-router 2.0，vue-infinite-scroll 2.0， [tigerb] 的 vue-progressbar 2.0 (https://github.com/tigerb)\n * [度量循环] 的 vuex 事件消息演示 (https://metricloop.com/blog)\n * vue-memo 使用 vue.js (> 2.x。)，vue-router (> 2.x。)，vuex ( > 2.x。)，vuex-router-sync @ next (> 3.x。) 和 firebase (> 3.6.x)，作者为 akifo\n * resume vue [changjoo park] 的基于 json 的基于 vue 2.0 的简历 (https://github.com/changjoo-park/) - 使用 phoenix framework，vue 和 vue router (demo 开发的具有 jwt 身份验证的应用示例 phoenix-vue-auth.herokuapp.com))@ angarsk8\n * 在 vue 2.0 中使用路由器示例 crud 应用 (https://github.com/shershen08/vue.js-v2-crud-application)(https://github.com/shershen08)\n * [@mgyongyosi] 的 asp.net core vue.js 服务器端呈现示例 (https://github.com/mgyongyosi)\n * vuefire-quickstart - 通过 @sejr 记录的带 webpack 和 eslint 的 firebase 集成。\n * hello-vue-django vue.js 和 django 集成入门项目，带有热代码重载\n * 实时社交新闻应用，是由 phoenix，vue，vue router 和 vuex ([_demo _](https ：//loopa-news.herokuapp.com))，作者为 @ angarsk8\n * vue-calculator 是一个使用 vue 2.0 构建的简单计算器，vue-cli (webpack-simple)。通过 caiyiliang\n * wikipedia-viewer 一个简单的 wikipedia-viewer 页面，使用 vue2.x，vue-router，vue-cli (webpack) 构建 - simple) 和 ajax (jsonp)。通过 caiyiliang\n * vue2.x-douban 使用 vue2.x，vue-router 和 axios (豆瓣电影) 构建豆瓣电影的简单方法。通过超人\n * vue-laravel-examplevue-laravel - 示例是使用 laravel 设置 vue 的简单示例。通过 jiajian chan\n * vue-foundation 一个演示应用程序，将 vuejs 与 zurb foundation 集成，使用 webpack vue-cli f\n * aspnetcore-vue-starter 一个 vuejs 2 入门模板，它是 asp.net mvc dotnetcore 项目的一部分。该模板包括 vuejs 客户端应用程序和后端 api 控制器。\n * vue-reddit-app 使用 vue 2 构建的 reddit spa demo。 x，vue 路由器 2，vuex 和 axios。@ yujiahaol68 使用 muse-ui 和 vue-cli webpack 模板\n * vue-music-qq 一个 qq-music 项目基于 vue-cli。页面简单流畅\n * 带有 vue-redux 和 plain vuejsx 的 navigationtab 导航选项卡同时具有普通 vue jsx 和 vue + redux 绑定\n * veggie map 使用 vuejs + vue 路由器 + leaflet 和 firebase 的交互式演示\n * vuejs-d3 示例如何使用 d3 进行可视化的示例。\n * vue-twitter-client 使用 vue 2.x，vuex，electron-vue 和 electron 构建的 twitter 客户端应用程序\n * douban 使用 vue2.x + vuex + vue-router + vue-resource 创建的很棒的 douban 示例。通过 jeneser\n * storyblok vuejs-boilerplate - 集成 storyblok 的组件系统，允许创建可编辑的网站。\n * vuexpresso - 使用 vuex，vue-router，vue-apollo，webpack，graphql，apollo-client，express 和 mongo 的样板\n * 带有 sails.js 示例项目的 vue.js - 该项目适用于单页应用程序的新手，并希望通过实际学习例。\n * vue.js＆pyramid web 框架应用程序 - 使用 pylons pyramid webframework 后端 vuejs webpack2，vue-router，yarn (数据包管理器) 的样板\n * vue-feathers-chat 在前端使用 vue，在后端使用 feathers 进行的示例实时聊天，但仅使用 socket.io-client 进行通信\n * vue-xplan 使用 vue 和 three.js 创建的旋转地球演示页面\n * vuesocketchatroom 使用 vue2.x，vuex2.x，vue-router2.x，vux2.x，socket.io 的套接字聊天室\n * @binaryify 的 vue-tetris (使用 vue，vuex，不可变代码 tetris 编码)：使用 vue，vuex，immutable 编码俄罗斯方块。\n * @kasheftin 的 route-planner-vue：用于规划具有多个路线的工具 google 地图上可排序的图层，可拖动的方向，标记和形状。\n * mydiary-vue 使用 vue 2.x 构建的日记应用程序，还具有联系人和待办事项列表功能\n * aligoren 在 github 上的 vuejs 示例项目\n * todo-mvc-webpack 由 voluntapear 使用 webpack-basic 在 vue 2 上实现 todomvc 模板，并带有显示 vuex，vue-router，中央事件总线和 vuefire 的示例。\n * [gustayo] 的 chess storybook example 与 vue 2.0 (https://github.com/gustayo)\n * vue weather notifier 一个带有 svg 和 vuex 的小型示例动画应用程序\n * nuxt 类型一个带有 nuxt 的示例 vue 项目，用于路由 / ssr 到演示页面转换\n * vueblog 一个博客系统，支持 wmui 的服务端渲染\n * cinemateka - 用 vue v1 和 laravel 5 制作的 spa 的示例。电影和活动时间表。俄罗斯的评论。\n * vue-2.x-boilerplate - 适用于 vue 项目 vuex + vue-router 的简单入门套件\n * vue-minesweeper - 由 [rhapsodyn] 开发的带有 vuejs 的致命简单扫雷游戏 (https://github.com/rhapsodyn)\n * x-flowchart-vue- [oxoyo] 的 svg 和 vue 流程图编辑器 (https://github.com/oxoyo)\n * koa-vue-notes-web - 充实的 spa，在后端使用 koa 2.3，在前端使用 vue 2.4。包括功能齐全的用户身份验证组件，针对用户笔记的 crud 操作以及 vuex 存储模块。\n * vuejs 购物车 - 使用 vuejs 和 firebase 的购物车示例\n * pokedexvuejs@ rchung95\n * vuefire-auth 使用 firebase 进行 vuefire vue2-auth-email 验证\n * vuefire-realtimedatabase 具有 firebase 的 vuefire vue2-realtimedatabasecrud\n * vuefire-storage 具有 firebase 的 vuefire vue2-storage\n * vue2-pwa-blog@ deepak-singh\n * vue-firebase-auth-vuex 具有 vuex 的 vue2 firebase 身份验证，并支持渐进式 web 应用程序\n * vue-chart-stater-kit 使用 vue 路由器，vue 图表，element-ui 的快速入门\n * vue2.0-demos 使用 mint-ui，element-ui，并有一些演示 (选择城市等)\n * conwayconway 在 vue 中的生活游戏。\n * vuex-feature-scoped-structure 功能范围 vuex 应用程序结构的示例应用程序\n * vuex-examples - 有关使用 vuex 构建真实世界应用程序的简单示例\n * vue-vuex-todomvc - 示例 todomvc vue.js 应用程序具有通过 rest 的 vuex 存储和服务器后端以及使用赛普拉斯 (cypress) 的全套 e2e 测试。 io 测试运行程序。\n * vuejs-sqljs-boilerplate - 这是同时使用 vue.js 和 sql.js 的样板\n * x-webdesktop-vue- [oxoyo] 基于 vue 的 webdesktop 系统 (https://github.com/oxoyo)\n * vuejs-music-player - 一个 vue.js 精简音乐播放器\n * vue.js 最佳实践示例项目 - 使用 vue.js + vue 路由器 + vuex + vuelidate 的最佳实践示例项目\n * [vue.js 一个] 客户端 - [一个] 用 vue2.5 编写的客户端\n * vue.js 2.5，带有 vue-cli v3，包括使用 auth0 进行身份验证，作者多米尼克・安格 (dominik angerer)，storyblok\n * skeleton vue + typescript-typescript，vuejs，elementui，vue router，vuex，材质图标，browsersync，dockerfile\n * @jesalg 的 penv starter - 有关如何在 vuejs，express 和 postgresql 中使用的基本示例连词。\n * vue-relay-examples - 使用 vue-relay 的示例应用程序的集合。\n * laravel-vue-boilerplate - 具有用户 crud 的 laravel 5.5 spa 样板，使用 vue.js 2.5，bootstrap 4，typescript，sass，pug 和笑话。\n * vue 设计系统 - 用于使用 vue.js 构建 ui 设计系统的开源样板。\n * vue bulma 演示 - 一个简单的演示网站，可联合检查 bulma / vue js 和 express。\n * 准备好使用 typescript，vuex，vue-router，hmr 等进行生产的入门应用程序\n * vue.js 与 laravel 结合的前阶段分离开发模板 - laravel 护照 / vue.js 和 element ui 的模板网站。\n * 由 vue.js 进行的 web 开发动手，作者：roman kuba，packt。(2018 年 5 月)\n * vue 在线商城 - 在线 spa 演示，基于 vue 开发的前分离电子商城前端项目\n * fue - 使用 vue.js + vue 路由器 + vuex + vuetify + feathersjs 的 admin spa 客户端和服务器端样板\n * vue + typescript 食谱 - 一本小小的食谱，涵盖了一些不太明显的解决方案，供人们开始使用 vue + typescript\n * vuejs 示例\n * asp.net core vue 入门 cli 3.0 使用 vue cli 3.0 和自定义配置 (默认 typescript，vue，路由器) 的 vue 入门模板，vuex，vuetify) 通过 @softwareateliers 与 asp。＆＃8203; net core 集成 (2018 年 9 月)\n * vue-soundcloud 由 soroush chehresa 用 vue.js 2 构建的 soundcloud 客户端。\n * vue-cart 一个由 vue，vuex 和 vue 路由器制成的简单购物车。通过 crisgon\n * nuxt + apollo + element 一个带有 nuxt，element (自定义主题) 和 vue apollo 的 vue.js ssr 样板。\n * vue-daily-zhihu 由 walleeeee 使用 vue 2.0 和 vue-router＆vuex 构建的简单演示)\n * 木炭使用 vue cli 3.0 并由 [seth davis] 用 bulma 样式设置的入门模板 (https://github.com/setholito)\n * 带有 typescript 的多页 asp.net core vue - 多页 asp.net core vue，typescript，vuex，vue 路由器，布尔玛，sass 和 jest 应用程序。有关如何在.net core mvc 中将 vue.js 用作多页 (多个迷你 spa) 应用程序的模板 / 起点。\n * cion-vue.js 的设计系统样板 - 一个主要为 vue.js 应用程序设计的设计系统。它利用设计令牌，带有集成代码游乐场的生活风格指南以及用于常见 ui 任务的可重用组件。\n * vue websockets 示例 - 使用 vue.js 2 + node 项目的 websockets 使用的基本示例，以获取完整的工作示例。\n * vue (2.0)+ node.js：一个博客，作者 @ fatdong1\n * vue-todo-list 待办事项列表示例应用程序基于 vue + vuex + vuetify + vee-validate\n * vue.js 和 ionic v4 示例 - 一组如何在 vue.js 中使用 ionic v4 的示例\n * 使用 vue，vuex 和 vue-router 的个人网站 - muratcansenturk 用 vue，vuex 和 vue-router 制作的简单网站示例\n * 客户端 vue.js- 演示 - vue.js 客户端端，用于 [justin wash] 的微型，快速加载，无 node.js 的单页应用程序 (https://github.com/trifectuh)\n * 大型 vue.js 应用样板 + vuex\n * 无画布的 vue.js 上的蛇游戏\n * 使用 cometchat 构建 vue 聊天应用\n\n\n# 书籍\n\n * vue.js je 下，作者：alex kyriakidis 和 packt 的 kostas maniatis。(2016 年 11 月)\n * 学习 vue.js 2，作者：packt 的 olga filipova。(2016 年 12 月)\n * vue.js 2 的威严，作者：alex kyriakidis 和 lestapub 的 kostas maniatis。(2017 年 3 月)\n * vue.js 2 cookbook，作者是 andrea passaglia，packt。(2017 年 5 月)\n * vue.js 实战，作者 erik hanchett 和 benjamin listwon (2018 年春季)\n * 测试 vue.js 应用程序作者 edd yerburgh (2018 年夏季)\n * vue.js 2 和 bootstrap 4 web 开发，packt 的 olga filipova。(2017 年 9 月) -casa docodigo 的 leonardo vilarinho 的 front-end com vue.js。(2017 年 11 月) -packt 的 guillaume chau 撰写的 vue.js 2 个 web 开发项目。(2017 年 11 月)\n * full-stack vue.js 2 和 laravel 5，packt anthony gore。(2017 年 12 月)\n * [package mike street 的 vue.js 2.x 示例。(2017 年 12 月) -oleksandr kocherhin 的 mastering vue.js。(2018 年 1 月)\n * fullstack vue：vue.js 完整指南，作者：哈桑・迪吉德 (hassan djirdeh)，内特・默里 (nate murray) 和阿里・勒纳 (ari lerner)。(2018 年 3 月) -packt 的 paul halliday 撰写的 vue.js 2 设计模式和最佳做法。(2018 年 3 月)\n * vuex 快速入门指南，作者：packt 的 andrea koutifaris。(2018 年 4 月)\n * 使用 vue.js 和 node 进行全栈 web 开发，作者：aneeta sharma，packt。(2018 年 5 月) -flavio copes 的 vue 手册。(2018 年 7 月)\n * asp.net core 2 和 vue.js，作者：stuart ratcliffe，packt。(2018 年 7 月)\n * [vue.js：解释性解释](casa docodigo 的 caio incau)(https://www.casadocodigo.com.br/products/livro-vue)。(2017 年 9 月)\n * 了解 vue.js，作者是 brett nelson，apress。(2018 年 8 月)\n * 精益：构建与部署，作者 leanpub 的 daniel schmitz。(2018 年 9 月)\n * 由 spring 5 和 vue.js 2 构建应用程序，作者：james j. ye，packt。(2018 年 10 月)\n * vue.js 快速入门指南，packt 的 ajdin imsirovic。(2018 年 10 月) -frederik dietz 撰写的 vue.js 组件模式课程 (2019 年 4 月)\n\n\n# 博客文章\n\n * vue x hasura graphql\n * 在 vue.js 中使用 graphql 突变\n * 了解如何使用 vue.js 构建数据驱动的搜索 ui\n * 使用 gitlab ci / cd 将 vue.js 应用程序自动部署到 aws s3\n * 将 vue 应用程式码头化\n * 使用 docker 和 gitlab ci 将 flask and vue 应用程序部署到 heroku\n * [kevin peters] 的大型 vuex 应用程序结构\n * [kevin peters] 的在 vue.js 中构成计算属性\n * 通过实际示例了解如何重构 vue.js 单个文件组件由 kevin peters\n\n\n# 开源的\n\n * pagekit - 使用 symfony 组件和 vue.js 构建的模块化轻量级 cms。\n * npmcharts.com - 比较 npm 软件包并发现下载趋势。\n * koel - 可以正常工作的个人音乐流服务器。\n * raven 阅读器 - 使用原子电子和 vue.js 制作的简单 rss 阅读器。\n * gokotta - 由电子和 vue 构建的简单音乐播放器。\n * copilot - 基于 adminlte 和 vue.js 集成的管理门户。\n * retrospectify - 在敏捷团队中进行协作回顾的简单工具。\n * jade-press - 基于 mongodb，nodejs，koa，vue 等的 cms。\n * astralapp - 轻松组织 github stars。\n * eme - 优雅的 markdown 编辑器。\n * github-explorer - 一个可以帮助您更好地检查 github 的水疗中心。\n * 酒店 - 从浏览器启动开发服务器，并在几秒钟内获得本地域。\n * surfbird - 使用现代网络技术编写的 twitter 客户端。\n * approach0 - 一个可识别数学的搜索引擎。\n * flox - 自托管电影，系列和动漫观看列表。\n * javascript guessing game - 用于识别 javascript 工具和库的游戏。\n * vue-ghpages-blog-vue.js 2 + webpack 2 基于 github 页面的博客。\n * vuedo - 使用 laravel 和 vue.js 构建的博客平台。\n * vue-music163 - 一个 vue.js 音乐项目。\n * tomato5 - 实时协作工具，它将 pomodoro 技术与团队状态共享板结合在一起。\n * web 学习 - 一种服务，可让您轻松访问有关 web 开发和编程的数千个视频教程。\n * exceljson - 一种将 csv，tsv 与 json 相互转换的工具。\n * materialize-blog - 使用 laravel5.3 和 vue2.x 构建的材料博客。\n * vuecompomnentgenerator - 在浏览器上生成 vue 单个文件组件。\n * sdr 新闻 - 来自多个来源 (reddit，hacker news 和 prominent blogs) 的 web 设计人员和开发人员新闻。\n * pj blog - 使用 laravel 和 vue.js 构建的开源博客。\n * lulumi-browser-lulumi-browser 是使用 vue.js 2 和 electron 编码的轻型浏览器。\n * vue-wordpress-pwa\n * openapi 3 查看器 - 浏览并测试 openapi 3.0 规范中描述的 rest api\n * stacer-linux 系统优化程序和监视\n * distrochooser.de-linux 初学者的入门指南\n * buka - 电子书管理\n * 文档 - 一个无需构建过程即可编写文档的框架\n * pm86-node.js 应用网站的生产流程经理\n * vms - 一个 vue.js 2.0 管理系统\n * nativescript-vue-nativescript 渲染器的 vue.js 实现。\n * piper - 基于 vue 的拖放式移动网站构建器。\n * mmf-blog-vue2 - 基于 vue2 (vue-router，vuex) 和 webpack2 的博客。\n * 媒体管理器 - web 文件管理器。\n * dyu / bookmarks - 一个由 leveldb 驱动的自包含，自托管的书签应用程序，由 vue2.1.x 构建。\n * json 模式编辑器 - json 模式的直观编辑器。使用 vue.js 2 和 firebase 开发。\n * npm-stats-npm 包下载统计信息面板\n * vue2-admin-lte - 一个将 adminlte 转换为可与 vuejs (v2.x) 一起使用的项目。\n * dockeron - 基于 electron + vue.js 构建的桌面 docker 项目。\n * flamme - 一个基于 education 和 vue.js 构建的开源 tinder 桌面客户端，用于教育目的\n * goldfish - 使用 vuejs，golang 和 bulma css 构建的 hashicorp vault ui\n * 管理 - 基于 vuetify 的管理控制台，请选中 [在线演示](http：//adminify。 genyii.com)\n * 提示 - 用 vue.js 编写的框架，用于在 web 浏览器中创建类似命令行的界面。\n * hare-🐇 基于 vue.js 2.x，koa 2.x，element-ui 和 nuxt.js 的应用程序样板\n * paper-dashboard - 为 vue 制作的 creative tim paper dashboard\n * adminlte-vuejs2 - 一个在 adminlte 上实现 vuejs (v2.x) 的开源项目。\n * 材质仪表板 - 为 vue 制作的创意 tim 材质仪表板\n * explore-github-vuejs 2 github explorer 使用 api v3\n * coreui - 由 vue.js 支持的开源管理模板\n * chucknorris - 使用 vuejs + api.chucknorris.io 构建的 chuck norris 笑话生成器\n * leafplayer - 一个简单，快速，私有的音乐流服务器。\n * json 编辑器 - 一种可识别架构的 json 编辑器。用 vue2 开发。\n * voten - 使用 vue2 和 laravel 构建的类似 reddit 的平台。\n * news weaver - 使用 vuejs 和 vuetifyjs 制作的基于 web 的 rss 阅读器 / 聚合器\n * 唤醒 billie joe！- 根据绿日的歌曲 “唤醒我，当九月结束” 而倒计时到十月的网站。使用 vue 和 firebase 创建。\n * astrum - 旨在包含在任何 web 项目中的轻量级模式库。\n * vue2-pwa-vision - 带有 vue2 + vuetify + 渐进式 web app 的人脸检测 google cloud vision\n * vue2-pwa-rekognition - 使用 vue2 + vuetify + progressive web app 进行人脸检测的 amazon rekognition\n * ammobin.ca - 有关加拿大在线弹药价格的元搜索网站\n * spa-asp.net-api-vuejs-- 用于使用基本任务管理和消息传递的 vue.js 单页应用程序 asp .net webapi 2 和 sql server\n * book-trading-club - 与您所在地区的其他图书读者进行贸易或借阅图书。使用 nodejs 和 vuejs2 构建\n * vuejs-extension-pack vscode - 扩展 packf 或 vscode，具有用于 vue.js 开发的流行 vs code 扩展。\n * wiki.js - 基于 nodejs，git 和 markdown 构建的现代，轻量级且功能强大的 wiki 应用程序\n * vue-pwa-speech - 在 vue2 + vuetify + progressive web app 上使用 google cloud 进行文字演讲\n * vue-speech-streaming - 在渐进式 web app 上执行流式语音识别可通过 google cloud speech + socket.io 实时生成语音到文本\n * 我的动画列表 - 一个易于获取 css 动画代码的工具\n * vue-input-streaming - 使用 pusher 进行 textinput 流实时和双向数据绑定广播\n * tidytab - 一个 chrome 扩展程序，用于整理这些标签。\n * peregrine-cms - 基于 vue.js 和 apache sling 的可选 cms\n * concept-to-clinic - 具有 vue.js 界面的肺癌预测项目\n * grid-awesome - 使用 css 显示为网格布局生成样板 css：grid; 属性。\n * light bootstrap 仪表板 - 为 vue 制作的创意 tim light bootstrap 仪表板\n * hubaga - 适用于开发人员和其他数字商店的免费轻量级 wordpress 电子商务插件。\n * vue-webpack-buefy - 具有全功能 webpack 和 buefy 的 vue.js 入门\n * coypu - 类似文本编辑器的每周计划\n * 核心服务器 - 高度可扩展的 vuejs 框架，具有集成的 api 系统和多种高级功能。\n * discord-logo - 基于 svg 的 vue.js 动画不和谐徽标生成器。(github 页面)\n * node-vue-template - 用于使用 node.js (api) 和 vue.js (spa) 构建完整应用程序的入门模板，其中包括一些软件包和配置，以帮助快速开始开发。\n * vue-storefront-vue.js 店面 - 电子商务的 pwa。100％离线，与平台无关，无头，支持 magento2。\n * fd-vue-iot 框架的 vue.js 客户端\n * wildfire - 其他注释插件的替代品。\n * 收据 - 简单的自动化桌面应用程序，可以从 uber 和 lyft 下载并整理您的税款发票。\n * vue-chrome-extension-boilerplate - 使用 vue.js 和 webpack 进行 chrome 扩展的样板\n * timemark - 一个可以记录您的时间的时间管理器，还将开发更多功能。\n * laravel enso - 由 bulma，vuejs 和 laravel 构建的 spa 管理面板，开箱即用地打包了很多功能。\n * 代码说明 - 针对使用 electron＆vue.js 构建的开发人员的简单代码段管理器。\n * pomotroid - 简单，美观且可自定义的 pomodoro 计时器。\n * xmr miner - 加密货币 (xmr) 挖掘应用程序，使用 vue.js 构建并使用 d3 进行可视化\n * xmr paper-monero 钱包生成器，使用 vue.js 构建\n * joyproxy-chrome 扩展程序，用于处理代理设置\n * 活动自动化 - 管理日常活动并及时获取报告。\n * jsettlers-web 流行的德国棋盘游戏，用赚来的资源建造六角形，定居点，城市，道路\n * tamiat cms-tamiat 是面向前端的 cms，使用 vue.js 作为前端，并与 firebase 集成了后端功能。\n * vuegg-vue gui 生成器：一次性创建模型和代码！它通过其可视化编辑器利用页面，组件和样式的创建。为您的下一个 vuejs 项目生成所有脚手架代码。\n * podlove web player - 经过 podcast 优化的基于 html5 的音频播放器，具有章节，字幕和嵌入功能。\n * leo vue - 使用开源 leo 概述编辑器 / ide 创建带有嵌套菜单的 web 应用程序，并支持内容中的 vue 组件。\n * justine - 使用 vue 组件作为文档模板的可配置 html 文档生成器 (当前支持 jsdoc)\n * deezer-vue - 使用 vue \\ vuex 构建的 deezer 客户端\n * vuep.run-vue 的在线 sfc 编辑器\n * v·oogle-google.com，已修订\n * pomidorus - 使用 vue 和 d3 构建 pomodoro 时间跟踪器 🍅\n * hubble-：telescope：浏览 github stars 的历史。\n * vuepress - 简约的 vue 驱动的静态网站生成器\n * socialhome - 具有社交网络功能的联合富个人资料生成器\n * genvue - 一个可托管的 web 应用程序，允许机密用户上传和共享基于 vue.js，vuetifyjs 和 netcore webapi 堆栈的私有文件\n * vue-array-vue 下的数组对象操作，vue 下的数组对象操作使用此包可操作数组。vue 可以监视阵列中的更改\n * laqu-l - 具有 quasar framework，带有 oauth 2.0 身份验证的 graphql api 后端，firebase 就绪，多语言功能等的完整应用入门套件。\n * protovue - 一个原型组件库，可帮助设计人员和开发人员快速搭建抽象的应用程序布局。\n * chattier - 使用 laravel 5.6，vue.js 2 和 bulma (buefy 组件 + bulmaswatch 主题) 构建的 spa 社交网络。还使用 jwt 身份验证。\n * chrome-ribbon-reminder - 使用 vue 和 async / await 编写的 chrome 扩展程序。使用弹出显示并更改徽章计数。\n * 收藏夹 - 一个简单的简单收藏夹生成器。\n * 模块化家谱 - 使用 laravel 5.7，vue.js 2.5 和各种组件的家谱 / 族谱管理系统。工作正在进行中。\n * 最小注释 - 使用 vue.js 构建 web 应用\n * 烘焙一个应用程序，旨在帮助咖啡爱好者在学习 laravel + vue.js 的同时找到他们的下一杯咖啡。\n * 堆栈编辑 - 浏览器内 markdown 编辑器\n * bael 博客模板 - 静态生成的博客模板，该模板使用 netlify cms 作为后端，使用 netlify 进行托管。具有野蛮美学，模糊搜索，无服务器电子邮件注册等功能。\n * buefy shop 示例商店，开源的，具有 nuxt，stripe，firebase，bulma 和无服务器功能。\n * sysmon 用于 linux 的 ab / s 模式系统监视器。您可以在任何地方通过 web 浏览器远程监视系统资源的使用情况。\n * eth-vue 一个松露盒子，提供您快速构建具有 vue.js 身份验证功能的以太坊 dapp 所需的一切，包括易于部署到 vue.js 的配置。 ropsten 网络。它还具有 gravatar 功能。\n * nippon-color 受 nipponcolors 点 com 的启发。这是使用 vue-cli 3 的日本彩色 pwa 版本。\n * saleina cms 一个静态网站内容管理系统，使用 git 作为后端使用 vue 构建。\n * vuido 用于创建本机桌面应用程序的框架。它可以使用本机 gui 组件在 windows，os x 和 linux 上运行。\n * yougetyoutube 视频 / 音频 / 字幕下载器 + cutter\n * vue pug 手写笔 vue + pug + 手写笔样板 💚🐶🖌\n * crypto news 允许您转换加密货币，查看每个 ico 的最新新闻和汇率–来自一个加密货币世界的所有数据。\n * epiboard 一个新的选项卡页面扩展，具有材料设计和有用的功能：new：：tada：\n * zhudyos / duic 分布式配置中心：新：\n * vuemmerce 使用 vue.js 和 bulma 框架构建的免费电子商务模板：新：\n * nucleus 分层体系结构 asp.net core api 和 vuejs 客户端应用程序启动模板\n * carpoolear 阿根廷拼车应用程序的开源 vue.js 前端 (移动和 cordova 应用程序)：[carpoolear](https://carpoolear.com。 ar)\n * statusfy：statusfy 是一个状态页面系统，易于使用且完全开源。\n * dynamodb-gui-client：dynamodb 的跨平台 gui 客户端\n * rosterwebapp 开源名册 web 应用程序，允许对员工 / 团队的名册进行工作会议和其他功能。\n * vue 电子商店 templet - 带有 vue /vuex/vue-router 和 bootstrap4 的电子商务 templet。\n * kitty ipsum - 生成由不同语言的 “喵” 组成的 lorem ipsum。\n * git superstar - 计算您的 git 星级和顶级存储库。\n * twill - 用于 laravel 的开源 cms 工具包，可帮助开发人员快速创建直观，强大而灵活的自定义管理控制台。\n * math_bot - 通过对机器人编程来学习数学。\n * vue 填字游戏 - 一个基于 vue.js 的填字游戏构建器和填充前端应用程序。使用 codesandbox 构建。\n * vue 组织结构图 - 免费管理和发布您的交互式组织结构图 (orgchart)，无需网络服务器。\n * 哔 - 使用 vue.js 和 ionic 4 构建的帐户安全扫描程序\n * vue crud - 基于 vue.js 的 rest-ful crud 系统。vue crud 允许您轻松创建快速应用程序，例如 cms 或 crm。\n * vue hq 管理员仪表板–由 vue，sass，firestore 和 netlify 支持的现代管理仪表板。\n * mtodo - 带有简单身份验证的迷你待办事项列表，该身份验证是使用 vue.js 和 json server 作为数据模拟构建的。非常适合作为发现有关真实 vue.js 参考的任何人的参考\n * firex 代理 - firex 代理是用户值得信赖的 chrome 和 firefox 浏览器扩展程序，可让您解除阻止任何网站的权限并私密安全地浏览 web。🛡\n * vuesolitaire - 接龙 (spider，klondike) 包含在 vue.js 中。\n * thermal - 一站式访问所有 git 存储库。\n * qmk configurator-vue.js 中的 qmk 固件键盘配置 ui。\n * eplee 用 vue.js 和 electron.js 制作的甜美，简单的 epub 阅读器。\n * vue-realworld-example-app - 示例性全栈 medium.com 克隆\n * 每日 - 精选的开发新闻已传递到您的新标签页 👩🏽‍💻\n * laravel 文件管理器 - laravel 的强大文件管理器\n * vue 加密仪表板 - 用 vue.js 制作的 cryptocurrency 仪表板\n\n\n# 商业产品\n\n * wijmo - 具有 vuejs 支持的 ui 控件的集合。\n * 整理说明\n * formester - 表格，电子邮件营销自动化变得容易\n * chatwoot - 通过 facebook messenger 进行 livechat 和代理协作。\n * vuea - 具有多种布局和 laravel 版本的 vuejs 管理模板。\n * teleo - 团队合作应用在讲话，计划和做事之间轻松移动\n * cover - 基于 vue.js 构建的高质量组件库\n * educationlink - 适用于教育代理商和大学的 crm 和销售自动化。\n * pragmatic v2.0 - 使用 vue.js 和 element 构建的响应式和可配置管理模板。\n * 座位 - 简单而现代的团队沟通和协作解决方案。\n * moonitor - 台式机的加密货币跟踪器。\n * deskree - 将想法，任务和问题集中在一处的在线协作平台。\n * oshcexpress-oshc (海外学生健康保险) 保险 (澳大利亚国际学生保险) 的比较和电子商务。\n * agiloo - 适用于 scrum 和看板的项目管理应用\n * scaffoldhub - 带有 nodejs，mongodb 或 sql 的 vuejs 在线 web app 生成器。\n * commandeer - 可以重新构想管理。使用 vue.js 和 electron 构建的桌面云管理应用程序。\n * sa email builder - 使用 vuejs 和 quasar framework 做出响应的电子邮件模板构建器\n\n\n# 应用 / 网站\n\n * laravel spark\n * 副视频\n * 表格\n * laracasts\n * esa.io\n * 稀土掘金\n * 布拉格机场\n * 投资组合网站\n * 乐风乐团\n * atiiv - 面向私人教练及其客户的应用程序。\n * 统计\n * embalses！- 使用美国地质调查局数据库报告水坝水位的工具。\n * travelmap - 旅行者基于地图创建博客的简单方法。\n * 适当的衬衫制造商 - 定制衬衫的制造商。\n * checkit\n * reddit 新闻 - 浏览器扩展程序，用于显示来自 reddit 的通知和新闻。\n * 卡通网络自行制作 powerpuff\n * 小桃酱\n * cloudradioo-web 应用程序，可随机播放 soundcloud 图表中的前 50 首歌曲\n * vnotes - 使用 vue.js 和本地存储 api 的 markdown 简洁漂亮的记事本。\n * 开放功能计算机\n * dermail - 用 vue.js 编写的针对 dermail 的 webmail 客户端，dermail 是用 node.js 编写的邮件系统。\n * octimine - 专利搜索引擎。\n * draxed - 基于 web 的 mysql 和 postgresql 数据浏览器和仪表板管理器。\n * leapspotleap - 查找您附近的 wikipedia 文章的简单方法。或只是导航到一个地方并找到有趣的维基百科信息。响应式 web 应用程序。\n * x-songtao - 个人博客。fe 和 cms 位于同一 vue spa 中。\n * jobinja - 在伊朗运营的求职委员会和职业平台。\n * 滚蛋吧！莆田系 - 显示所有 put 田医院的信息\n * jobi：招聘平台\n * 香料屋 - 高质量香料的电子商务网站。结帐，购物车，产品详细信息页面和搜索是使用 vue 构建的。checkout 是用 vue＆vuex 编写的单页应用程序。\n * livestorm - 网络研讨会 / 直播活动应用。\n * metric loop - 一个技术服务和解决方案网站。\n * 保持\n * 全球考试 - 语言能力测试在线培训\n * slugsurvival - 一个可帮助学生更好地计划课程的网络应用程序 (业余项目，不属于 ucsc)。\n * freepoll.online - 使用 vue.js，vue 可排序，语义 ui 和 zappa 构建的群体决策工具。\n * gitrelease - 使用带有电子的 vue.js 在 mac 菜单栏上跟踪 github 项目的新版本。\n * 12bay.vn - 在线预订机票。\n * playcode.io - 快速前端实验的游乐场。\n * the void radio - 地下室内音乐在线广播。\n * bitly vue - 使用 vuejs 和 bitly api 缩短 url。\n * storyblok - 使用 vuejs 作为前端的基于 api 的 / 分离的 cms。\n * wizzair\n * 移至 https - 有关将不同平台 / 托管站点移至 https 的指南\n * booknshelf - 发现有关不同主题的出色书籍和书架。\n * top hn - 在 hacker news 上实时显示最新新闻活动\n * euronews-euronews 是一种多语言新闻媒体服务，总部位于法国里昂。\n * roozameروزامه??-roozame 是波斯语的智能新闻媒体服务。\n * koumoul\n * ninjacalc - 一组与嵌入式工程相关的计算器，使用 vue.js 作为开源单页应用程序构建。\n * vue.js feed - 最新的 vue.js 新闻，教程，插件等。基于 vuedo，使用 vue.js 和 laravel 制作。\n * 蒜瓣 - 使用 vue2.0 和 douban api 开发的网络应用\n * 猜对了 - 一个 “猜单词” 游戏 - 用 vue /vuex/vue-router (前端) 和 laravel / mysql (后端) 编写。代码是 github 上的开源 (尽管不是在 kdcinfo 上运行游戏的实时文件)。\n * grap - 商业通讯服务\n * 简易模拟\n * mmf-blog-vue2-ssr 使用 vue 2.0，vue-router 和 vuex 构建的博客，并具有服务器端渲染\n * json 模式编辑器 - 使用 vue.js 和 firebase 构建的 json 模式的直观编辑器。\n * winsome trivia - 一个单人或多人琐事游戏，具有由 vue.js 构建并由 open trivia 数据库提供支持的 2,000 多个独特问题。\n * moon organizer - 农历日历应用\n * flash-vue-“未来的抽认卡” 将学习无处不在：rocket：\n * kinderbesteck - 具有 vue2.0，vuex，vue 路由器的完整在线商店 spa\n * n2ex-vue ssr (必须) 网站，请使用 v2ex api\n * 词库 - 众包在线词库\n * chattanosy - 由社区提供的田纳西州查塔努加新事物的数据库。\n * paixin - 正版图片销售网站\n * codebottle - 将代码段拖放到您的项目中\n * 1xbet - 自 2007 年开始运营的博彩公司\n * myowntv - 用于创建互联网电视的流媒体网站\n * crowdcircus - 欧洲最大的众筹和众筹平台\n * 与某人交谈 - 与世界各地的陌生人进行免费，匿名和保密的在线文本聊天。\n * 车轮工厂 - ui 组件和库共享网站\n * ابیاتنابپارسی- 波斯诗集\n * ripplectron-ripple (区块链硬币) vue-electron 的电子钱包桌面客户端\n * pingbreak 使用 vuejs 作为实时仪表板的免费，简单的网站监控服务\n * todoist 致敬 - todoist 克隆，用 rails + vue 编写\n * json 编辑器 - 使用 vue2 和 firebase 构建的可识别架构的 json 编辑器。\n * develteam - 独立游戏开发者的社交网络。\n * mixsii - 适用于青少年，成人，家人和朋友的免费视频聊天室网站。\n * pipquest-vue 中内置的复古益智游戏\n * matryx - 去中心化的协作平台。\n * iprevyou-youtube™ 播放器 - 用于在桌面上观看 youtube 视频的 chrome 应用。\n * 物品管理器 - 传送命运 2 游戏物品的应用程序。\n * 前端大师 vue 简介 - 前端大师全日制课程\n * tr-101 - 鼓合成器 / 音序器。\n * bazaar - 媒体共享平台。\n * wynnstats - 非官方的 wynncraft 统计信息。\n * vectr - 免费的矢量图形软件\n * 大脑位 - emotiv 耳机的 p300 在线拼写机制\n * coin dashboard - 完全客户端的加密货币资产仪表板。\n * habitica - 角色扮演游戏形式的在线任务管理应用程序。\n * madewithvuejs - 由 vue.js 制作的项目图库 (网站本身也使用 vue.js)\n * codedependencyscanner - 显示.net 汇编代码依赖关系的 ac＃dektop 应用程序使用 vue，neutronium 和 d3.js 构建。\n * 千以太坊首页 - 百万美元首页被重新构想为以太坊 dapp。在 vue.js 上构建并开源。\n * 让我们着迷 - 免费的在线图像升级和神经网络增强功能。\n * pi.team - 在线发票和会计 - 简单易用的在线会计和发票，单用户和自由职业者免费。\n * vuethwallet - 一个简单的应用程序使用 vuejs 生成以太坊钱包。\n * tipe - 下一代 api 优先的 cms。使用功能强大的编辑工具创建内容，并使用 graphql 或 rest api 从任何地方访问它。停止让 cms 决定如何构建应用。\n * vuethexplore - 一个简单的应用程序使用 vuejs 探索以太坊区块链。\n * fintechers - 以 fintech 为重点的工作委员会。\n * devjournal - 项目和构想的协作待办事项列表。\n * bubbleflat - 一种在线平台，可通过搜索具有相似生活方式，兴趣爱好或学校的人来帮助学生和年轻的专业人 士找到理想的室友。laravel 和 vuejs\n * teaquinox tea co - 专门从事散叶茶的电子商务网站。\n * blip - 测试网站的速度，移动友好性，安全性和 html5 文档类型。在某个位置查找商家，然后整体测试其网站，或者只是测试您自己的 url。\n * sunpos - 太阳位置，仰角，方位角，黄道 / 赤道坐标和日出 / 日落时间 (朱利安日) 计算和转换实用程序。使用纯 js，vuejs 和 i18n vuejs 本地化插件对网站进行编程。可视化是使用 d3.js 创建的。\n * u3xyz - 基于 vue ssr 的个人博客。\n * 27.ua - 乌克兰的互联网大型超市\n * 国际象棋守护者 - 从您自己的游戏中回答国际象棋位置问题。\n * 二十一点休息 - 二十一点的快速游戏\n * mechanical - 适用于 firefox 的 reddit mod，可显示上下文数据见解。\n * gamevix - 与他人交换您使用过的视频游戏光盘，无忧。具有材料设计的 pwa。\n * vivifyscrum - 适用于交付团队的敏捷项目管理应用程序。可定制的 scrum 和看板板。\n * 9gag - 流行的在线平台和社交媒体网站\n * cryptovue - 实时加密货币仪表板\n * 厨房故事 - 烹饪平台\n * mailrabbit - 在没有开发人员的情况下创建，a / b 测试和监视交易电子邮件。\n * vue 资源精选 - 出色的 vue 组件列表，类别，内嵌演示秀和简介\n * cronhub - 无痛 cron 监控工具\n * wrkprty - 针对自由职业者，远程工作者和希望离开办公室的专业人员的弹出协作活动。\n * 用爱制造 - 世界各地的 “用爱制造 ❤️” 倡议是庆祝 🎉，促进 📣 和建立 build 品牌的运动。它从 dribbble，producthunt，behance 和 techcrunch 等多个来源获取 tech 新闻，设计灵感和趋势。💝\n * 产品路径 - 在创业公司和科技公司中发现超过 1,000 个产品工作。\n * v·oogle-google.com，已修订。一个笑话项目。😃\n * 经纪人注释 -' 研究成为房地产经纪人 '：房屋：\n * synclounge-synclounge 是用于在多个位置的多个播放器之间同步 plex 内容的工具。\n * hce.it - 一家意大利代理商的网站，完全由 vue 使用基于 laravel 的无头 cms 创建。\n * 页面 - 网页设计灵感\n * scrumpy - 敏捷团队的漂亮项目管理工具\n * spektrum-spektrum media agency 网站\n * spkspk 生态系统的网站\n * iddef☪️ 重视人类的网页，cms，crm 和捐赠以及所有电子商务页面的协会联合会均使用 vue.js，vuex 和纯 javascript 设计 🙏\n * 配置文件管理 - 一种管理配置文件的简单方法\n * 烘焙这个应用程序旨在帮助咖啡爱好者在学习 laravel + vue.js 的同时找到他们的下一杯咖啡。\n * ybr - 集中的 ybs 公开电子投诉管理系统。(全 spa)\n * regex fiddler\n * myanpwel - 活动票务平台的网站。\n * cryptoarte - 以太坊的艺术品收藏，不可替代的代币和 dapp。\n * muuviez - 具有时尚设计的电影发现和跟踪网站\n * naga virtual-naga virtual 是第一个独立的虚拟商品市场。\n * scroll.in-scroll.in 是独立的新闻，信息和娱乐企业。\n * akunyi - 慈善网站\n * mark ruffalo 会做什么？- 动机网站基于 mark ruffalo 在获得成功之前在数百次试镜中失败的故事。\n * 白兰地 - 菜单栏的品牌资产管理器。\n * ruster 社区 - cn 的 rust 全栈社区论坛。\n * nbc sports-nbc sports 是一家体育新闻网站。\n * within - 虚拟现实中的非凡故事。\n * plottr.io - 规划跑步和骑车路线\n * becamp - 在弗吉尼亚州夏洛茨维尔举行的由社区组织的技术会议。网站代码是开源的。\n * trustpilot - 免费开放给所有评论平台。\n * lagom - 简单，直观且响应迅速的 whmcs 主题\n * scoutmytrip-roadtrip planner - 印度的公路旅行计划应用程序，可帮助旅行者建立行程，发现景点，寻找酒店，加油站，美食餐厅等沿路线。\n * podflix - 播客应用。\n * gamersclub - 巴西最大的电子竞技社区发展公司\n * mit - 麻省理工学院的官方网站。\n * elvenar-elvenar 是一个基于浏览器的幻想城市建设者游戏。\n * 信标 -：blue_heart：这项服务可让您在多个网站之间共享内容。\n * artfinder-artfinder 是买卖艺术品的网站。\n * rolodromo - 专门用于桌面 rpg 的西班牙语网站。\n * githubexplorer - 用于探索 github 的纯静态页面 webapp。使用 vuejs 和 github graphql api v4 。\n * 主题演讲 - 与 vue 一同展示。\n * happyplants - 用于组织植物的渐进式 web 应用 🌱。\n * pocket lists - 世界上最友好的待办事项列表应用程序。\n * padlet - 协作公告板\n * glovo - 按需交付\n * mysigmail-mysigmail 是一个免费的浏览器电子邮件签名生成器，无需创建帐户\n * wordguru - 一个简单的口头游戏，您可以分成几个小组，并尝试猜测尽可能多的关键字。\n * apiflash - 基于 chrome 的截图 api，基于 aws lambda 开发人员专用\n * kitty ipsum - 生成由不同语言的 “喵” 组成的 lorem ipsum。\n * git superstar - 计算您的 git 星级和顶级存储库。\n * decs - 分散的多合一工作区，用于管理代码段并保护敏感数据。\n * careup - 牙医 🦷 的业务管理工具。\n * asciiur - 互联网的 ascii 艺术收藏\n * tapestri designer - 用于设计用于基因组测序实验 (ngs) 的 pcr 引物的免费工具\n * remote-access-ssh - 使用 node-ssh 的基于 web 的远程主机访问\n * 地图标记生成器 - 一个免费的在线工具，可即时生成自定义地图图标\n * monocle reader - 在一个地方关注提要，twitter，youtube，博客和其他所有内容。\n * 前站导航 - 前端社区，文档收录。\n * geenes - 生成调色板并将其应用于 ui，然后将其导出到草图或代码中。\n * blurrish-mac / windows 加密的 morning pages 日记，由 vue 和 electron 构建。书写时模糊，因此可以在公共工作区中记录日志。\n * exifshot - 摄影的方式和方式，精美绝伦。\n * studolog - 用于学生的在线文件共享平台，包括测试人员和评论。目前仅捷克语 🇨🇿。\n * sum.cumo–数字业务模型 (以 vue 作为技术堆栈的核心)。\n * gamebrary - 用于组织视频游戏收藏的开源工具。\n * guds - 比较各大超市的价格。仅适用于墨西哥 🇲🇽。\n * premium poker tools - 扑克玩家用来学习的东西。\n * qmk configurator - 从浏览器配置，构建和下载自定义 qmk 固件。\n * worksome - 适用于合格的 it 专业人员，自由职业者以及希望雇用他们的公司的市场 / 平台。\n * translator-vuejs - 使用 vuejs，yandex api 和 responsivevoice.js api 构建的翻译应用程序。\n * 大计时器 - 用于研讨会，会议和演示的全屏倒数计时器。big timer 可以帮助研讨会主持人，会议椅，设计短跑选手，演示者和有抱负的游戏节目主持人坚持自己的计划。\n * wirenook - 用于构建响应式网站线框的免费在线应用程序。高保真和低保真，项目共享和 svg 下载。\n * kvalitetskontroll - 为建筑业量身定制的挪威管理系统。\n * poolside fm - 复古音乐播放器\n\n\n# 互动体验\n\n * jean-pierre morin | 1700 laposte\n * facebook newsfeed\n * youtube adblitz 2016\n * omnisense 体验\n * louis ansa 网站 (投资组合)\n * djeco.com\n * tolks.io\n * 遇见 graham\n * noize 原创\n * tr-101 合成鼓机\n * bootstrap 4 编辑器\n * subtletab - 浏览器扩展\n * web-riimote - 将您的智能手机变成 3d 控制器 (源代码)\n * css colorvars - 交互式工具代码生成 (源代码)\n\n\n# 企业用途\n\n * 塞恩斯伯里的\n * arex - 大疆创新 -octimine gmbh - 浑力集\n * gitlab\n * clemenger bbdo melbourne\n * zenmate\n * 代码\n * storyblok\n * monito - 建立 booking.com 以进行国际汇款\n * hypefactors - 数据驱动的 pr 专业人员的软件 -adobe -ibm\n * cotabox\n * aromajoin - 基于硬件，软件和材料技术的协调发展最好的数字气味产品。\n * 家乐福\n\n\n# a11y\n\n * vue a11y 项目 - vue.js 社区项目，用于改善 web 可访问性。\n * vue-skip-to - 它可以帮助仅使用键盘的人跳到最重要的地方。\n * vue-axe-vue.js 应用程序的可访问性审核。\n * vue-announcer-vue 的一种简单方法，可为屏幕阅读器宣布任何有用的信息。\n * eslint-plugin-vue-a11y - 用于.vue 中元素可访问性规则的静态 ast 检查器\n * vue-focus-lock - 这是一个陷阱！焦点锁定。a11y util，用于确定焦点。\n * vue-a11y-calendar - 可访问的国际化 vue 日历。\n\n\n# 表格\n\n * vuetable-2 数据表简化\n * vue-tables-2-vue.js 2 网格组件。\n * vue-datasource - 一个 vue.js 服务器端组件，用于创建动态表。\n * ag-grid-vue - 用于 ag-grid 的 vue 适配器。\n * vue-data-tables-vue2.0 数据表，基于 element-ui。\n * vue-floatthead - 用于 floatthead 的 vue 2.0 组件，floatthead 是一个浮动的粘性表头插件。\n * vuetiful-datatable - 具有排序，过滤，分页，分组和聚合的数据表组件。\n * vue-materialize-datatable-materialize css 的 vuejs 数据表\n * vue-good-table - 一个易于使用的 vuejs (2.x) 表插件，具有排序，列过滤，分页等功能。\n * vue-grid-vue.js 的灵活网格组件\n * vue-easytable - 基于 vue2.x 的功能强大的表组件\n * vue2-datatable-component - 永远不会烂的 vue.js 2.x 最佳数据表\n * vue-js-grid-vue.js 2.x 响应式网格系统，具有平滑的排序，拖放和重新排序\n * vue-handsontable-official 用于 handsontable 电子表格组件的 vue.js 包装器\n * vue-grid - 用于 vue.js 2.x 的功能强大的 flexbox 网格系统，使用内联样式构建\n * vue-data-tablee - 基于 vue-good-table，一个简单漂亮的表组件\n * vue-scrolling-table - 具有 flexbox 大小的简单表格组件，滚动表格主体 (水平和垂直)，所有 tr /th/td 的插槽渲染。\n * el-search-table-pagination - 将 element ui 的 form，table 和 pagination 组件组合在一起。基于 vue 2.x。(详细信息)\n * vue-crud-x - 使用 vuetify 布局的可扩展 crud 组件，除了通常的页面，排序，过滤器之外，它还能嵌套的 crud，自定义表单，过滤器，操作。\n * vue 数据表 - vuejs 支持的数据表，具有 laravel 服务器端加载和 json 模板设置\n * v2-table - 一个基于 vue 2.x 的简单表组件。\n * vue-cheetah-grid - 在 vue.js 的画布上工作的高性能网格引擎。\n * vue-table-component - 直指 vue 组件以显示表。\n * @ lossendae / vue-table-vue.js 2.x 的简单表组件，具有分页和可排序的列。\n * el-data-table - 基于 element-ui，可以轻松完成任务\n * devextreme vue 网格 - 用于 bootstrap 的基于插件的高性能 vue 数据网格。\n * vue-ads-table-tree - 具有过滤，排序和分页功能的 vue table 组件。行可以具有子行，因此可以构建树结构。它还支持异步调用以从后端加载行。它是使用 css 框架 tailwindcss 构建的\n * 用于 vue 的 synfusion 数据网格 - 显示和处理具有分页，排序，过滤，编辑和分组等功能的表格数据。\n * @ marketconnect / vue-pivot-table - 数据透视表的 vue 组件\n * vue-teible-web 的轻巧灵活的表组件：zap：\n * vue-jqxgrid - 具有过滤，排序，编辑，分组，数据导出和其他功能的 vue 数据网格。\n * vue-jqxpivotgrid - 具有枢轴设计器的 vue 枢轴数据网格，钻取单元格，枢轴功能。\n * toast-ui.vue-grid- [toast ui grid] 的 vue 包装器 (http://ui.toast.com/tui -grid /)。\n * vueye-datatable-vueye 数据表是基于 vue.js 2 的响应数据表组件，它按页面组织数据以便于浏览。\n * vue-sorted-table - 一个将表转换为排序表的插件。支持嵌套的对象键，自定义图标和可重用组件。\n * vue-bootstrap4-table - 基于 vue 2 和 bootstrap 4 的高级数据表，其中包括多列过滤，多列排序，分页和信息，复选框行和高度可定制的插槽选项。\n * vuejs-smart-table - 直截了当的表格组件，使用原始 html 表格结构，并具有开箱即用的排序，过滤，分页和选择功能。\n * @ myena / vue-table - 用于客户端 / 服务器数据处理的表组件。筛选，排序，分页，分组，展开详细信息行。高度可定制的通孔，用于过滤器，标题，列，分页，详细信息行。\n * vue-jd-table-vue 2 的高级且灵活的数据表组件。功能丰富：搜索，过滤，导出，分页 (传统和虚拟) 滚动) 等等！\n * vue-grd - 用于网格布局的简单，轻巧和灵活的 vue.js 组件。\n * iview-table-page - 将 iview ui 的表和页面组件组合在一起。基于 vue2.x。并听到了一些使用 iview-table-page 的示例。\n\n\n# 通知\n\n * vue-notifications-vue.js 不可知的非阻塞通知库。\n * vue-easy-toast-vue /vue2 的 toast 插件。\n * vue-toasted - 适用于 vuejs 的自适应 touch 兼容 toast 插件。\n * vue-notifikation-vue.js 通知插件。\n * vue-notification - 使用 velocity 制作动画的 vue.js 2 + 通知插件。\n * vs-notify - 微小但功能强大的通知组件，没有依赖项。\n * vue2-notify-vue.js 2 + 通知插件。\n * vue-notifyjs - 极简主义，3kb 可通知通知插件\n * vueup-vue.js 的简单，轻巧和优雅的全局通知弹出窗口\n * vuex-flash-vuex 2.x 中用于 vuejs 2.x 的 flash 消息组件。\n * vue-snotify-vue.js 2 通知中心\n * vue-notify-me-vue 的可堆叠通知警报\n * vue-noty - 围绕 noty 的 vue.js 2 包装器\n * vue-notice-vue.js 2 使用本机 api 围绕 noty.js 进行包装\n * vue-flash-message - 简单但灵活的通知插件\n * @ voerro / vue-notifications - 具有 html 和样式支持的简单 vue.js 2 通知插件。\n * vue-awesome-notifications - 具有高级异步支持的轻量级 vue.js 通知库。\n * vue-izitoast - 围绕 izitoast 的 vue.js 2 包装器。\n * vue-toastr-2 - 基于 toastr 的 vue.js 的简单敬酒通知)\n * vue-snack - 基于 google material 的 snackbars 的 vue.js 插件。\n * vue-m-message-vue 的消息插件。\n * vue-notification-bell - 用于显示通知的 vue ui 组件。\n * v-tostini-vue.js 2.x 真正纯正的吐司通知机制。不包括 css。\n * vue-toast-notification - 另一个 vue.js toast 通知插件。\n\n\n# 装载机\n\n * vue-radial-progress-vue.js 的径向进度栏组件。\n * vue-simple-spinner - 适用于 vue.js 的简单灵活的微调器\n * vue-wait - 适用于 vue / vuex 和 nuxt 应用程序的复杂加载程序管理。\n * vue-progress-path - 支持任何自定义 svg 路径的可自定义进度指示器和微调器。\n * vue-blockui - 用于 vue 2 的 blockui，类似于 jquery blockui，可用于加载屏幕。\n * epic-spinners - 易于使用的带有 vue.js 集成的 css spinners 集合。\n * svg-progress-bar-vue.js 的简单进度条。\n * vue-loading-overlay - 微小的全屏加载指示器\n * vue-loaders- [loaders.css] 的 vue 包装器 (https://github.com/connoratherton/loaders.css)\n * vue-promise-btn - 小巧而强大的异步按钮 (或任何其他标签) 工具，带有精美的内置微调器\n * vue-spinkit-🌈 带有 vuejs css 动画的加载指示器集合\n * vue2-form-loading-vuejs 指令可与表单一起使用，以便在加载下一页时禁用提交按钮\n * vue-element-loading-⏳ 在容器内加载或全屏显示 vue.js\n * tb-skeleton-vue.js 的骨架屏幕加载\n * vue-spinners-💫 为 vuejs 加载微调器组件的集合\n * vue-progress-bar - 这是一个基于 vue 的级联进度条插件\n * vue-loading-button-👇 带有滑动加载指示器的直截了当按钮\n\n\n# 进度条\n\n * vue-progressbar-vue 的轻量级进度条。\n * vue2-loading-bar - 最简单的 youtube，例如 vue 2 的加载条组件。\n * vue-top-progress - 另一个为 vue.js 加载栏组件的顶级进度。\n * vue-nprogress - 进度条基于 vue 的 nprogress。\n * vue-progress-button-vue.js 2.x 动画按钮组件。\n * vue-simple-progress-vue.js 的简单，灵活的进度栏\n * vue-component-loading - 管理每个组件内部的加载状态，并使用进度条显示全局加载状态。\n * vue-scroll-progress - 用于页面滚动进度条的简单 vue.js 插件\n * vue-read-progress - 页面顶部的可自定义进度条，显示滚动进度\n * easy-circular-progress - 具有计数效果的简单循环进度组件\n\n\n# 工具提示\n\n工具提示 / 弹出窗口\n\n * v-tooltip - 使用 vue 2.x 的简单工具提示。\n * vue-popper-component-vue.js 的 popper.js 指令。\n * vue-directive-tooltip - 简单，灵活的工具提示指令 (基于 popper.js)！[vue.js](https：// img.shields.io/badge/vue-2-green.svg)\n * vue-popperjs - 基于 vuejs 2.x popover 组件的 popper.js\n * vue-tooltipster - 基于 vuejs 2.x 工具提示组件的 tooltipster.js。支持 html 内容，悬停和悬停 + 单击事件。\n * k-pop - 基于 popper.js 的简单 popover 组件。高度可定制的。带有主题。支持自定义触发器，并且可以监听任何事件。\n\n\n# 覆盖\n\n * vuedals - 一个 vuejs (2.x) 插件，用于具有单个组件实例的多个模态窗口。\n * sweet-modal-vue - 发生模态的最甜的库。现在可用于 vue.js。\n * vue-js-modal - 简单易用，高度可定制，移动友好的 vue.js 2.0 + 模态，具有 0 个依赖关系。\n * vudal-vue.js 的模态窗口\n * vodal - 具有动画的 vue 模态。\n * vue-image-lightbox - 一个 vue 图像灯箱 / 图库，可以很好地显示图像。\n * vue2-simplert-vue 2 简单警报组件 (受 sweetalert 启发)，作者：irfan maulana\n * vue-semantic-modal - 不具有 jquery 依赖关系的 vue 2 语义 - ui 模态组件\n * v-img - 易于安装的图库。\n * vue-dialog-drag - 可拖动对话框\n * vue-ya-semantic-modal-vue2 的另一个语义 ui 模态组件，没有 jquery 但具有 vue 转换\n * vue-pure-lightbox - 非常简单的灯箱插件，没有任何依赖性 - 仅 vue！🖼\n * v-viewer - 基于 [viewer.js] 的 vue 图像查看器组件，支持旋转，缩放，缩放等 (https：//github.com/fengyuanchen/viewerjs)\n * vue-messagebox-vue 上易于定制的消息框组件。\n * vuejs-dialog - 轻量级，基于承诺的警报，提示和确认对话框。\n * @ hscmap / vue-window-vue2 的窗口 ui 组件。\n * vue-gallery-vuejs 响应式和可自定义的图像和视频库，轮播和灯箱，已针对移动和桌面 web 浏览器进行了优化。基于 blueimp-gallery\n * vue-swal - 用于将 sweetalert 集成到 vuejs 的小型包装器。(与 ssr 兼容)\n * vue-modal-dialogs-✨ 承诺自己的对话框！\n * vue-img-view-vue.js 的插件，您可以在任意位置拖动 / 查看 / 旋转图片\n * vue-modaltor-vuejs 的最先进的可配置模态组件\n * v-modal-backdrop - 用于 vue 的简单通用背景组件\n * vue-cute-modal - 适用于 vue 应用程序的简单易用的 modal 组件。\n * v-dialogs - 一个简单而强大的对话框，包括基于 vue2.x 的 modal，alert，mask 和 toast 模式\n * vue-gallery-slideshow-vuejs 的响应式画廊组件\n * vue-a11y-dialog - 用于可访问对话框 [ a11y-dialog ](https://github.com 的 vue.js 组件包装器。 com /edenspiekermann/a11y-dialog)。\n * vue-slideout-panel-vuejs 的可堆叠面板组件\n * v-gallery - 用于在 “gallery” 或 “ carousel” 中显示图像的 vue2 插件\n * vue2-image-loader-vue2 的图像 lazyload loader 组件\n * vue-my-photos - 一个简单的无依赖图像灯箱组件，具有过滤功能\n * vue-img-orientation-changer - 一个 vue.js 指令，可自动调整您的 img 以更正方向。\n * vue-topmodal - 一个完全可定制，易于使用的 vue.js 模态组件。(自适应，可堆叠，可滚动，动画)\n * vue-modal🖼- 为多个可切换模态内容提供对象数组或快速内联您的内容。完全可定制的 vue 模态组件。\n * @ innologica / vue-stackable-modal - 用于可堆叠的模态对话框的库。完全可定制且非常易于使用。\n * vue-sweetalert2-sweetlaert2 的包装器，支持 typescript，nuxt 和 ssr\n\n\n# 视差\n\n * vue-parallax - 以比窗口慢的速度滚动图像以产生整洁的光学效果。\n * vue-parallaxy - 用于视差图像滚动效果的 vue.js 组件。\n * vue-mouse-parallax - 一个易于使用的鼠标视差组件 - 由 vue.js 制成\n * vue-parallax-js - 微小的 vue 组件，为元素上的视差效果添加了指令。\n\n\n# 图标\n\n * vue-awesome-vue.js 的 font awesome 组件，使用嵌入式 svg。\n * vue-material-design-icons - 单个 svg material design 图标集合文件组件。\n * vue-icon-font-vuejs 的 iconfont 插件 (支持 font-class 和 symbol)。\n * vue-ionicons - 来自离子团队的 vue 图标集组件。\n * vue-ico - 具有嵌入式浏览器支持和选择性捆绑功能的 vue 简易图标\n * mdi-vue-vuejs 的 material design 图标组件\n * vue-fontawesome-font awesome 5 vue 组件\n * g-icon-svg 图标的简单图标组件 (与类似于 font awesome 的字体工具包兼容)\n * vue-simple-line-icons-vuejs 的简单线条图标组件\n * vue-country-flag - 国家标记图标的 vue 组件 - vicon- vicon 是用于 vue 的简单 iconfont 组件。\n * md-svg-vue-google 为 vue.js 和 nuxt.js 提供的 material design 图标 (服务器端支持 (带缓存)，内嵌 svg) 渲染，官方图标名称)\n * vue-lang-code-flags-vue 组件，显示语言来源国的标志\n * vue-zondicons - 精美 [zondicon] 的 vue 组件 (http://www.zondicons.com/icons.html) svg 图标\n * vue-eva-icons - 简单漂亮的开源 eva 图标作为 vue 组件。\n * vue-unicons - 为您的下一个项目提供超过 1000 个像素完美的 svg unicons 作为 vue 组件。\n * vue-fa - 简单的 fontawesome 5 vue.js 2 组件。\n * vue-cryptoicon - 美丽的像素完美的 400 + 加密货币和 10 + 法定货币图标。\n\n\n# 菜单\n\n * vue-accordion - 适用于 vue.js 的简单手风琴导航菜单组件。\n * vue-js-dropdown-vue.js 2 下拉菜单组件。轻巧，易于使用和扩展，无外部缺陷。\n * vue-slideout - 流行的库 [slideout] 的 vue 实现 (https://github.com/mango/slideout)\n * vue-quick-menu - 这是基于 vue.js2 的 web 导航组件。\n * @ hscmap / vue-menu-vue2 的菜单 / 上下文菜单组件。\n * vue-router-nav - 简约的响应式导航栏，呈现 vue-router 的路线。\n * vue-drawer-layout - 一个简单的 drawerlayout 组件 (例如 android) 具有 vue.js。\n * vue-simple-menu - 具有一组基本功能的简单菜单组件，在 80％的情况下足够\n * vue-tree-navigation - 具有 vue-router 支持的 vue.js 2 树导航\n * bp-vuejs-dropdown-vuejs => 2 下拉菜单。易于使用，无需外部，可选。\n * vue-bulma-accordion - 简单，易于配置的手风琴或具有 bulma 自定义样式的可折叠样式或内置的可用图标\n * v-selectmenu - 针对 vue2 的简单，容易和高度定制的菜单解决方案。\n * vue-burger-menu - 具有不同 css 动画的画布外边栏 menu 组件。\n * vue-dynamic-dropdown - 一个高度可定制的，易于使用的优雅下拉组件\n * vue-navigation-bar - 适用于您的 vue 项目的简单，漂亮的导航栏。\n * vue-simple-search-dropdown - 一个没有外部依赖关系的简单可搜索输入下拉组件\n * @ innologica / vue-dropdown-menu-vue 的下拉菜单组件。任何元素都可以是下拉触发器，任何内容都可以下拉内容。\n * vue-menu-aim - 菜单三角形选择，又名亚马逊\n\n\n# 输入\n\n * minus-plus-input - 带正负号的数字输入；包含在 vue.js v1 和 v2 中。\n * vue-integer-plusminus - 带有 vue 2 增量和减量按钮的整数输入。\n * vue-numeric-input - 带有控件的数字输入组件。\n * vue-number-smarty - 数字输入可以在聚焦字段时更改滚动值。\n * vuetify-number-smarty - 数字输入可在字段聚焦时更改滚动值 (vuetify.js 实现)。\n\n\n# 轮播\n\n * vue-easy-slider-vue.js 的滑块组件。\n * vue-l-carousel-vue.js v2.x + 的响应式轮播 (即滑块或滑动) 组件。\n * vue-awesome-swiper-vue.js (1.x〜2.x) 的 swiper (slide) 组件。\n * vue-lory - 基于 lory 的 vue 滑块组件。\n * vue-slick-slick-carousel 的 vue 组件。\n * vue-flickity-flickity.js 的 vue 组件。\n * vue-carousel-3d-vue carousel 3d-vue.js 美观，灵活且受触摸支持的 3d carousel。\n * vue-carousel - 适用于 vue.js 的灵活，响应迅速，触摸友好的轮播。\n * vue-coverflow-vue2.x coverflow 组件。\n * vue-agile–受 slick 启发的轮播组件，仅以 vue.js 和 vanilla js 编写。\n * vue-tiny-slider–由 ganlanyuan 创建的轮播组件，用 vue.js 编写。没有 jquery。适用于 ie8 +。\n * vue2-text-swimlane - 用于 vue.js 的 text swimlane 插件\n * vue-picture-swipe-vue picture swipe gallery (具有缩略图，延迟加载和轻扫的图像画廊) 由 photowipe 支持。\n * vue2-siema - 非常小的 siema 转盘 / 滑块库的插件包装。\n * vue-flux - 带有 20 个炫酷过渡的图片滑块。\n * vue-glide- [glide.js] 上方的 vue 滑块和轮播组件 (https://github.com/glidejs/glide)\n * vue-owl-carousel- [owl carousel 2] 的 vue 组件 (https://owlcarousel2.github.io/owlcarousel2/)\n * vueper-slides - 适用于 vue js 的易于触摸且响应迅速的幻灯片 / 轮播。\n * vue-canvas-carousel- [vuc-carousel] 的 vue 画布组件 (http://vuc.tianchenyong.top/#/carousel)\n * 胡珀 - 针对 vue 优化的可自定义的可访问轮播滑块\n * 语言 - vue 的简单图像库组件，在下面显示带有缩略图的大图像\n * vue-piece-slider - 动画幻灯片的碎片化外观\n * vue2-photo-carousel-vue2 的照片轮播组件\n\n\n# 图表\n\n * vue-morris-vuejs 组件包装了 morris.js。\n * vue-charts - 适用于 vue.js 的 google charts 插件。\n * vue-chartjs-chart.js 的 vue.js 包装器。\n * hchs-vue-charts - 基于 chartjs 的 vue2.0 包装器。\n * vue-echarts-vue.js 的 echarts 组件。\n * vuetrend-vue.js 的简洁优雅火花线。\n * vue-highcharts-vue 的 highcharts 组件。\n * vue-echarts-v3-echarts.js (v3.x +) 的 vue.js (v2.x +) 组件包装。\n * vue-chartist-chartist 的 vue.js 2.0 组件包装。\n * g2-vue - 用于在 vue 组件中轻松使用 g2 的工厂包装。\n * vuebars - 适用于 vue.js 的简洁优雅的火花棒。\n * vue-d3-network - 使用 d3-force 绘制网络图形的 vue 组件\n * vue2vis- visjs 的 vue2 包装器。\n * vue-c3 - 用于 c3 图表的可重用 vue 组件\n * vue-d2b-d2b 图表的 vue 组件。(包括轴，饼图，sankey 和森伯斯特图)\n * vuechart - 一个非常简单的 chart vue 包装器。\n * vue-chartkick - 用一行 vue 创建漂亮的 javascript 图表\n * d3vue - 用于在 vuejs 中创建反应性数据可视化的 d3 插件\n * vue2-frappe-vuejs 的 frappe charts 的简单包装\n * vue-google-charts-google charts lib 的反应性 vue.js 包装器\n * vue-graph - 数据可视化库，用于 vue.js 中的仪表板实现\n * vue.d3.sunburst - 基于 d3.js 的反应性旭日形组件\n * v-chart-plugin - 一个可定制的组件，用于添加绑定到组件数据的 d3 图表。\n * vue-jqxchart - 具有饼图，气泡，甜甜圈，线，条，栏，面积，瀑布，极地和蜘蛛系列的制图组件。\n * toast-ui.vue-chart- [toast ui 图表] 的 vue 包装器 (http://ui.toast.com/tui - 图表 /)。\n * vue-apexcharts- [apexcharts] 的 vue.js 组件 (https://github.com/apexcharts/apexcharts.js)。\n * vue-doughnut-chart-vue.js 的甜甜圈图组件。\n * v-charts - 基于 vue2.x 和 echarts 的图表组件。\n * vue-css-donut-chart - 用于绘制纯 css 甜甜圈图的轻量级 vue 组件。\n * vue-trend-chart-vue.js 的简单趋势图\n * vueplotlib - 声明性，交互式，链接的绘图组件\n * vgauge-gaugejs 的 vue 包装器 - 创建漂亮的量规\n * vue-plotly- plotly.js 声明性图表库的包装，随附 20 图表类型，包括 3d 图表，统计图和 svg 地图。\n * vue-funnel-graph-js-vue.js 的漏斗图绘制库。创建垂直和水平动画 svg 漏斗图，并添加标签，值，图例和其他信息。\n * pure-vue-chart - 在没有任何图表库相关性的情况下实现的轻量级 vue 图表\n\n\n# 时间\n\n * vue-timeago-vue 的一个很小的 timeago 组件。\n * vue-moment-jalaali - 针对您的 vue.js 项目的 jalaali moment.js 过滤器。\n * vue-countdown-timer - 添加了时区转换支持。\n * vue-analog-clock-range - 显示时差的模拟时钟范围。\n * vue-moment-lib - 使用相同的 momentjs api 的简单 vue.js 2.0 momentjs 库 (过滤器和全局变量)。\n * vuejs-countdown - 适用于 vue js 2.0 的简单倒数计时器组件\n * vue2-flip-countdown-vue 2.x 具有倒转效果的倒数计时器\n * timeline-vuejs-vue 的简约时间表\n * vue-awesome-countdown-vue 2.5.0 + 具有高性能和高精度的倒计时插件。官方网站：https://vac.js.org\n * vue-clock2 - 显示 vue 的时钟组件。\n * vuemodoro-pomodoro 计时器作为单个文件 vue 组件。\n\n\n# 日历\n\n * vue-fullcalendar-vue 日历 fullcalendar。无需 jquery。安排事件管理。\n * vue-event-calendar-vue2 的简单事件日历，除 vue2 外没有其他依赖项。\n * vue-calendar-picker - 用于事件显示，时段选择和日期选择器的轻量级日历组件。\n * vue-lunar-calendar - 农历的 vue 组件。使用 moment.js 进行日期操作。\n * vue-simple-calendar - 基于 flexbox 的 vue 月历功能；支持多日活动，本地化，节日表情符号，拖放。没有依赖关系。\n * vue2-calendar - 一个简单的完整日历组件，旨在灵活而轻巧。\n * vue-jlunar-datepicker - 具有节日和节气的中国农历日期选择器组件。\n * vue-full-calendar-vue 1 和 2 的完整 fullcalendar.io 包装器\n * v-calendar - 动画日历 / 日期选择器，显示简单和重复日期的区域，指标和日弹出窗口。\n * vue-infinite-calendar-vue 2 的简单无限日历实现\n * vue-calendar - 适用于 vue 2.1.5 + 的简单日历组件，支持自定义内容。没有依赖关系。\n * vue2-event-calendar-vue2 的事件日历，支持自定义事件项和日历标题。\n * vue2-datepicker-infinite-vue2 的无限 datepicker，易于使用且没有依赖性。\n * vue2-slot-calendar-vue 2 日历，支持月球或日期事件的日期选择器组件，引导程序样式。\n * quasar-calendar - 使用 quasar 框架的 vue.js 日历，可实现每月，多天和议程视图。\n * vue2-datepicker-vue2 的漂亮 datepicker /datetimepicker 组件\n * vue-pikaday- pikadaydatepicker 的 vuejs 包装器组件\n * vue-tuicalendar- tui.calendar 日历的 vuejs 包装器组件\n * vue-jqxscheduler-vuejs scheduler 组件。\n * toast-ui.vue-calendar- [toast ui 日历] 的 vue 包装器 (http://ui.toast.com/tui - 日历)。\n * vue-functional-calendar - 基于 vue 的轻量级高性能日历组件 (日期选择器，日期范围)。\n * vue-cal-vue js 完整日历，无依赖项，无 bs。🤘。\n * vue-draggablecal - 不是普通的日期选择器。一个 vuejs 可拖动的日期选择器，具有全新的响应式设计，可移动使用且具有 0 个依赖项，已压缩 17kb\n * vue-material-year-calendar-vue2 的全年 (每页 12 个月) 日历。使用 dayjs。\n * vuelendar - 用 vuejs 编写的简洁日历\n\n\n# 地图\n\n * vue2-google-maps-google maps 组件，用于带有 2 向数据绑定的 vue。\n * vue2-leaflet - 传单地图的 vue 2 组件。\n * vue-mapbox-gl-mapbox gl js 的 vue 2.x 组件\n * vue-yandex-maps-yandex maps 的 vue 2.x 组件\n * vue-baidu-map - 百度地图的 vue 2.x 组件。\n * vue-choropleth-vue 2.x 组件，用于显示一个 choropleth 贴图。\n * vuelayers-vue 2 组件可与 openlayers 一起使用。\n * vue-googlemaps-vue 2.x 组件，用于集成 google maps。\n * vue-static-map-vue 2.x 简单组件，可生成静态 google 地图\n * vue-mapbox-mapbox gl js 库周围的 vue 2.x 包装器，提供了与地图交互的途径。\n\n\n# 音频视频\n\n * vue-aplayer-：cake：用于 vue 2.x 的易于配置的音乐播放器。\n * vue-audio - 音频标签包装器；vue 2.x 的声音播放器组件\n * vue-dplayer - 基于 dplayer 的 vue 2.x 视频播放器组件。\n * vue-canvasvideo - 一个 vue 2.x 组件，用于在 ios / safari 上播放视频背景和自动播放视频。\n * vue-music - 基于 html5`` 的 vue 组件。\n * vue-audio-visual-vue html5 音频可视化组件。\n * vue-plyr - 一组用于 plyr 视频和音频播放器的 vue 组件。\n * v-playback - 一个 vue2 插件，可简化视频播放。\n * vue-audio-recorder-vue.js 的音频记录器。它允许在服务器上创建，播放，下载和存储记录\n * vue-video-section-vue 的简单视频标头 / 部分组件。适用于视频背景并在其上叠加内容。\n\n\n# 无限滚动\n\n * vue-infinite-loading - 适用于 vue.js 1.0 和 vue.js 2.0 的无限滚动插件。\n * vue-mugen-scroll-vue.js 的无限滚动组件 2。\n * vue-infinite-scroll-vue.js 的无限滚动指令。\n * vue-loop-vue.js 2 的无限内容循环组件。\n * vue-scroller-vue.js 2 的无限内容循环组件，包括诸如 “拉动刷新”，“无限加载” 之类的功能，'snaping-scroll'。\n * vue-infinite-list - 无限列表 mixin 可以为 vue.js 2 回收 dom\n * vue-infinite-slide-bar-∞ 无限滑动条组件。\n * vue-virtual-infinite-scroll - 基于 iscroll 的 vue2 组件，支持具有高性能滚动，无限负载和拉动的大数据列表刷新。\n\n\n# 拉动刷新\n\n * vue-pull-refresh - 拉动刷新 vue.js 2.0 的组件。\n * vue-pull-to - 下拉刷新和上拉为 vue.js 组件加载了更多内容并无限滚动。\n * vue-data-loading - 另一个用于无限滚动和向下 / 向上加载数据的组件。\n * vue-quick-loadmore-vue 的下拉刷新和上拉无限滚动插件。\n\n\n# 降价\n\n * vue-markdown - 适用于 vue 的强大，高速 markdown 解析器。\n * vue-mavoneditor - 基于 vue 的降价编辑器，支持多种个性化功能。\n * vue-simple-markdown - 适用于 vue 的简单，高速 markdown 解析器。\n * vue-simplemde- simplemde 的包装。不论是初学者还是专家，都可轻松编辑。具有内置的自动保存和拼写检查功能。\n * toast-ui.vue-editor- [toast ui 编辑器] 的 vue 包装器 (http://ui.toast.com/tui - 编辑)。\n\n\n# pdf\n\n * vue-pdf - 基于 mozilla 的 pdf.js 的 pdf 查看器\n * pdfvuer-vue 的 pdf 查看器，使用 mozilla 的 pdf.js 和文本支持。演示\n\n\n# 树\n\n * vue.d3.tree - 基于 [d3.js] 的树状视图 (https://d3js.org/)\n * vue-json-tree-view-vue.js 的 json 树视图组件。\n * vue-tree-vue.js 2.x 的树组件。\n * liquor-tree - 惊人的 vue 树组件\n * vue-trees-ui - 基于 vue 的 tree ui。\n * bosket - 前端框架 (vue，react，angular 和 riot) 的树视图组件的集合。\n * plantain-00 / tree-component - 一个 reactjs，angular 和 vuejs 树组件。\n * sl-vue-tree - 适用于 vue.js 的简单可定制的可拖动树组件\n * vue-draggable-nested-tree - 适用于 vuejs2 [@phphe](https://github.com 的功能强大的可自定义可拖动树视图组件。 com /phphe)\n * vuejs-tree - 高度可定制的 vuejs 树查看器\n * vue-jstree - 适用于 vue2 的树形插件，带有漂亮的图标和拖放功能\n * vue-vtree-vue.js 的通用且灵活的树组件\n * vue-json-component-json 树视图，没有依赖项，typescript 支持且易于定制。\n * vue-tree-list - 用于树形结构的 vue 组件\n\n\n# 社交分享\n\n * vue-social-sharing - 一个 vue.js 组件，用于共享指向社交网络的链接，可与 vue.js 1.x 或 2.x 一起使用。\n * vue-goodshare - 用于社交共享的 vue.js 组件，具有精美的按钮设计。简单的安装，丰富的文档，开发人员支持，seo 友好，干净的代码，无需脚本即可快速跟踪页面上的用户活动。使用 vue.js2.x。\n * vue-socialmedia-share - 一个 vue.js 组件，用于使用 vue 2.x 共享与社交网络的链接\n * vue-picture-sharesheet - 一个 vue 图片共享表组件，受到苹果新闻编辑室中图片共享表的启发\n * vue-twitter - 用于嵌入 twitter 小部件 (例如时间线，按钮) 的 vue.js 组件\n * vue-share-buttons-vue.js 组件，用于在您的项目中放置按钮，您可以共享任何东西\n\n＃＃ 二维码\n\n * vue-qriously - 一个 vue.js 2 组件，用于使用 qrious 在 html canvas 上绘制 qr 代码。\n * vue-qart-vue 2.x 用于 qart.js 的指令。\n * vue-qrcode-reader - 一个 vue.js 2 组件，可从相机流中检测和解码 qr 码。\n\n\n# 搜索\n\n * vue-fuse - 模糊搜索库 fuse.js 的轻量级插件\n * vue-instantsearch - 使用 algolia 创建即时搜索体验的终极工具箱。\n * vue-innersearch - 用于 elasticsearch 的 vue.js 包装器\n * reactivesearch-vue - 用于使用 elasticsearch 构建数据驱动的应用程序的 ui 组件\n\n\n# 其他\n\n * vue-avatar-vue.js 的头像组件。\n * vue-touch-ripple-vue.js 的触摸波纹组件 (1.x〜2.x)。\n * vue-typer-vue 组件，用于模拟用户键入，选择和擦除文本。\n * vue-keyboard-vue 2 虚拟键盘组件。\n * vue-twentytwenty - 图像比较组件，可与 vue.js 2.x 一起使用\n * vue-cookie-law-vue.js 2.x 的 cookie 信息插件\n * vue-gravatar - 适用于 vue.js 2.x 的简陋的 gravatar 组件\n * vue-clipboard2 - 一种易于使用的 vue.js 2.x 剪贴板剪贴板绑定\n * vue-flashcard - 带有 vue.js 2.x 动画的 flashcard 组件：bulb：\n * vue-truncate-collapsed - 一个简单的组件，它会截断文本并为 vue.js 2 添加可点击的 “阅读更多 / 显示较少”。 x\n * vue-kanban - 灵活的拖放式看板板组件\n * vue-letter-avatar-vue.js 的简单优雅的字母头像组件\n * vue-highlightjs - 使用 highlight.js 突出显示语法\n * v-clipboard - 简单，小巧且易于使用的指令将您的模型保存到剪贴板 (最小 2kb，无依赖项)\n * vue-invisible-recaptcha - 超级简单的 google 隐形 recaptcha 集成\n * vue-embed-embed 组件基于 vue 2.x 的 embed.js，该组件可嵌入表情符号，媒体，地图，tweet，要点，代码，服务和减价。\n * vue-particles - 粒子背景的 vue.js 组件\n * vue-uniq-ids-vue.js 2.x 插件，可帮助使用与 id 相关的属性，且无副作用\n * vue-multivue - 在同一页面上使用同一类的多个 vue 应用。\n * vue-affix - 一个 vue.js 2.x 插件，可在滚动时在窗口中添加元素，类似于 bootstrap affix，但更简单，更智能\n * x-browser-update-vue - 一个 vue.js 浏览器更新插件。\n * vue-query-builder - 用于使用嵌套条件构建复杂查询的 ui 组件。\n * vue-info-card - 一个简单漂亮的卡片组件，带有优美的火花线和 css3 翻转动画。\n * v-offline - 简单，小巧且易于使用的 vue 应用程序检测离线和在线事件 (最小 390b)\n * vue-word-cloud - 词云生成器。\n * vue-flat-surface-shader- vue-flat-surface-shader\n * vue-easteregg-easey 在您的 vue 应用中添加了 easteregg (默认使用 konami 代码)\n * vue-barcode-scanner\n * vue-heatmapjs - 用于跟踪和可视化鼠标活动的 vue 指令\n * vue-maze - 由 vue.js 组件制作的小巧迷宫游戏\n * vue-drag-verify - 这是一个 vue 组件，可以滑动以解锁以进行登录或注册。\n * vue-balloon-vue 组件，用于在页面一角创建固定的，可缩放的容器。与 gmail 中使用的邮件撰写包装类似。\n * vue-sticker - 任意方向的贴纸效果\n * v-rating-⭐️ 使用 vuejs 制作的语义 ui 中的评级组件 (<500b 压缩，速度非常快)\n * vue-content-placeholders - 用于在 vue 中渲染诸如 facebook 之类的伪造 (渐进) 内容的可组合组件\n * vue-page-designer-vue 组件，用于拖放来设计和构建移动网站。\n * vue-creativecommons-creativecommons.org vue.js 组件库。\n * vue-status-indicator - 一个 vue.js 组件，用于将状态指示器显示为彩色圆点。\n * vue-google-adsense - 具有 infeed 和 inarticle ads 支持的 vue.js google adsense 组件\n * emoji-vue-vue.js 项目的 emoji😎👌🏻 下拉菜单\n * vue-chessboard - 棋盘 vue 组件可加载位置，创建位置并查看威胁。\n * vue-mindmap - 用于 mindnode 映射的 vue 组件。\n * v-currency - 用于格式化货币的 vue 组件。\n * vue-emoji-picker - 高度可定制的 unicode 表情符号选择器 🔥🚀\n * vue-8-puzzle - 一个由 vue.js 组件制作的小巧幻灯片益智游戏\n * vue-e164 - 具有 e.164 标准支持的可自定义电话格式化程序\n * vue-pgn-vue.js 组件，用于以 pgn 格式查看棋牌游戏\n * vue-avatar-editor - 使用清晰的用户界面调整大小，旋转并裁剪上传的头像。\n * vue-connection-listener-vue 事件总线插件监听在线 / 离线更改。\n * vue-sauce-vue 的 “查看源代码” 指令。\n * vue-prom-vue 承诺包装器组件。\n * 数字键盘 - 用于移动浏览器的数字键盘。\n * vue-zoom-on-hover - 鼠标悬停时图像缩放\n * vue-sensitive-image-vue 组件，可让您快速创建具有最佳数量的所有设备图像源的响应式图像标签。\n * vue-highlight-text-vue 组件，用于突出显示单词的多个实例\n * vue-cast-props - 提供了一种将 props 转换为常见数据类型的便捷方法。\n * vue2-heropatterns - 一个 vue2 实现，允许您将流行的 hero patterns 添加到任何 div 上\n * vue-link - 一个将所有链接都链接在一起的组件 (处理外部和内部链接相同)\n * vue-identify-network-⚡️ 识别您的用户正在使用哪种互联网！\n * vue-cloneya - 用于克隆 dom 元素的 vue 组件\n * vue-survey-builder-vue.js 应用程序的调查生成器\n * vue-if-bot - 一个轻量级的组件，用于基于用户代理向客户端隐藏 / 显示内容\n * vue-clampy-vue.js (2+) 指令，通过在其中包含内容的元素加上省略号来限制元素的内容太长。\n * vue-cookie-accept-decline - 在页面上显示带有文字，拒绝按钮和接受按钮的横幅。记住使用 cookie 进行选择。使用创建时的当前选择来发出事件。符合 gdpr 要求。\n * @ lossendae / vue-avatar-vuejs 2.0 的头像组件。\n * vue-text-highlight-vue.js 的文本荧光笔库 💄\n * vue2-hammervue 2.x 的 hammer.js 包装器支持移动触摸。\n * vue-countable-countable.js 的 vue 绑定。提供实时的段落，句子，单词和字符计数。\n * v-show-slide - 一个 vue.js 指令，用于将元素上下移动动画：自动滑动。\n * vue-swipe-actions - 适用于 vue.js 的 ios 样式滑动操作\n * vue-friendly-iframe - 用于创建超快速加载，无阻塞 iframe 的 vue js 组件。\n * vue-beautiful-chat - 一个简单而美丽的 vue 聊天组件后端不可知，完全可自定义和可扩展。\n * vue-magnifier-vue.js 2.x 的简单图像缩放 / 放大组件。\n * vue-highlight-words-vue 组件可在较大的文本正文中突出显示单词。从 [react-highlight-words] 移植 (https://github.com/bvaughn/react-highlight-words)\n * vue-tags-ball - 使用此插件创建漂亮的球形标签\n * vue-rippler - 用于自定义波纹效果的简单 vue.js 插件\n * vue-contacts-vue 的移动通讯录组件\n * basic-vue-chat - 易于使用的 vue.js 聊天\n * vue-resize-text - 一个 vue 指令，可根据元素宽度自动调整字体大小。\n * vue-github-profile - 一个 vue 组件，用于查看确定的用户的配置文件和存储库\n * vue-niege-🎅 单文件 vue 组件可通过画布添加暴风雪。\n * vue-dynamic-star-rating - 高度动态的 vue 明星评分组件，例如 google play 评分 ⭐️⭐️⭐️⭐️⭐️⭐️\n * vue-katex - 在 vue.js 中使用 katex 进行数学排版的简单插件\n * vue-canvas-identify- [vuc-identify] 的 vue 画布组件 (http://vuc.tianchenyong.top)\n * vue-canvas-material- [vuc-material] 的 vue 画布组件 (http://vuc.tianchenyong.top/#/materia)\n * vue-baberrage - 一个基于 vue.js 的简单弹幕插件 😎\n * vue-terminal-ui-🖥terminalui 模拟器 vue：自定义和基本命令\n * vue-command - 完全正常工作的 vue.js 终端模拟器\n * vue-ribbon-github 功能区的 vue 组件\n * avatio-avatar - 插图化身的 vue 组件 - avatio 使用\n * vue-jazzicon - 用于 vue 的简陋的 jazzicon 组件。\n * vue-star-rating - 一个简单的，高度可定制的星级评分组件 ⭐️⭐️⭐️\n * vue-fixed-header - 简单且跨浏览器友好的由 typescript 编写的 vue.js 固定标头组件。\n * vue-particle-effect-buttons 一个爆发粒子效果按钮组件。\n * vue-insomnia - 防止显示屏进入休眠状态 (唤醒锁定)。\n * vue-car-plate-keyboard - 用于 vuejs 2.x 的汽车牌照号码键盘。能源车牌 🚗🚗🚗)\n * vue-dataflow-editor-vue2 数据流图编辑器\n * cool-emoji-picker-vue 的快速即插即用 [tw] emoji picker (用于 twemoji 渲染的 + textarea) 组件。\n\n\n# 标签\n\n * vue-tabs - 简单的标签和药丸。\n * vue-swipe-tabs-vue.js (vue2) 的触摸滑动选项卡组件。\n * vue-tabs-component - 一种使用 vue 显示标签的简便方法。\n * vue-k-tabs - 具有 gitlab 设计的简单标签组件。\n * vue-tabs-with-active-line - 简单的 vue 2 组件，可让您制作带有移动底线的标签\n * vue-tabs-chrome - 一个类似于 chrome 的标签的 vue 组件。\n\n\n# 电话号码输入格式器\n\n * vue-phone-number-input - 一个漂亮的输入，用于格式化与国家 / 地区代码有效的电话号码：fire：\n\n\n# 选择器\n\n * vue-smooth-picker-vue 2.x 的平滑选择器组件，例如 ios 本机日期时间选择器。\n\n\n# 发电机\n\n * formschema native - 使用 json schema 和 vue.js 生成表单\n * vue-awesome-form - 一个 vue.js 组件，就像 json-editor\n * vue-generator-vue 项目的初始路由器和组件。\n * vue-form-json - 从 json 生成具有验证和 bulma 样式的 vue 表单\n * form-create - 具有动态呈现，数据收集，验证和提交功能的表单生成器，支持 json 数据\n * element-form-builder - 使用 json 模式构建 element-ui 表单。\n * ncform - 一种非常好的配置生成表单的方式\n * laraform - 具有 laravel 支持的 vue.js 的高级表单生成器\n * vue-ele-form-vue dataform，基于 element-ui\n\n\n# 日期选择器\n\n * vue-datepicker- [未维护] 具有用于 vue.js 的材质设计的日历和 datepicker 组件。\n * vue2-timepicker- [未维护] vue 2.x 的下拉时间选择器 (小时 | 分钟 | 秒)，具有灵活的时间格式支持。\n * vuejs-datepicker - 一个简单的 vue.js datepicker 组件。支持禁用日期，内联模式，翻译。\n * vuedt- [未维护] 疯狂的轻量级 (5.5kb！) vuejs 日期和时间选择器组件，动画效果很好，而且没有太多的模糊感。\n * vue-flatpickr-component 用于 flatpickr 日期时间选择器的 vue.js 组件\n * vue-bootstrap-datetimepickervue.js 组件，用于 [eonasdan-bootstrap-datetimepicker](https://github.com/eonasdan/bootstrap- datetimepicker /)\n * vue-jalaali-datepicker-vue.js 的 jalaali 日历和日期选择器 2。\n * vue-date-picker - 一个受材料设计启发的 vue 日期选择器组件\n * vue-monthly-picker - 仅适用于月份和年份选择器的 vue.js 组件\n * vue-hotel-datepicker - 响应式日期范围选择器，显示选定的住宿天数，允许自定义入住 / 退房规则，屏蔽日期，本地化支持等。\n * vue2-persian-datepicker-vue 的真棒波斯 datepicker 组件。کامپوننتانتخابتاریخبرایویو。\n * vue-datetime-vue 的移动友好日期时间选择器。支持日期，日期时间和时间模式，i18n 和禁用日期。\n * vue-rangedate-picker - 具有简单用法的范围日期选择器\n * v2-datepicker - 基于 vue 2.x 的简单 datepicker 组件。\n * vue-datepicker-local-vue2 的一个漂亮的 datepicker 组件。\n * vue-airbnb-style-datepicker-vue datepicker，外观和功能与流行的 airbnb datepicker 相似。轻巧，可配置且良好的浏览器支持！\n * vue-persian-datetime-picker 波斯材料 datepicker。支持日期时间，日期，时间，年，月。\n * vcalendar 非常可定制且功能强大的日历 / 日期选择器组件，具有许多功能和完善的文档。\n * @ owumaro / vue-date-range-picker - 使用 bootstrap 4 样式进行日期范围选择的 vue 组件\n * vue-datepicker-mobile - 适用于 vue2 的移动友好日期选择器。：cn：选择日期或日期范围，然后自定义所需的日期。\n * vue-draggable-cal - 不是普通的日期选择器。一个 vuejs 可拖动的日期选择器，具有全新的响应式设计，可移动且具有 0 个依赖项，已压缩 17kb。\n * vue-vanilla-datetime-picker-vue 的日期时间选择器。\n * vue2-daterange-picker - 基于 bootstrap-daterangepicker 的 vue2 日期范围选择器 (无 jquery 依赖性)\n * vue-timeselector - 完全简单可定制的 vue.js 功能强大的时间选择器组件。\n * vue-date-picker-vue 2.x 的轻量级 datepicker 组件。\n * vue-ctk-date-time-picker - 一个漂亮的 vuejs 组件，用于选择日期和时间 (使用范围模式)：新：\n * simple-vue2-datetimepicker - 一个简单易用的 vue.js 组件，用于日期和时间选择。：新：\n * vue-business-hours-vue 组件，用于在管理面板或仪表板中选择营业时间。\n * material-vue-daterange-picker-vuejs 2.x 的 material design 样式的日期范围选择器，与 vuetify 和友好版本兼容手机。\n * vue-datepicker - 具有 vuejs 2.x 的 material design 样式的干净响应式日期选择器。(日期 / 月 / 季度 && 日期范围选择器)：新：\n\n\n# 选择\n\n * vue-select - 一个本地 vue.js 组件，提供与 select2 类似的功能，而无需 jquery 的开销。\n * vue-multiselect-vue.js 的通用选择 / 多重选择 / 标记组件。\n * stf-vue-select - 最灵活和自定义的选择 vue2\n * vue-select-image-vue 2 组件，用于从列表中选择图像\n * @ riophae / vue-treeselect - 具有对 vue.js 的嵌套选项支持的多选组件。\n * @ k186 / pd-select - 一个移动 ui 组件，例如 vue 2.x 的 ios 选择器，可以随便定义。\n * vue-dropdowns - 如果对 vue2.x 使用对象，则是一种显示选择框的简约且可适应的方法\n * v-cascade - 带有 vue 2.x 的层叠选择器的一个可爱组件 (支持 pc 和 mobile)\n * vue-multi-select - 用于对 vue2 进行选择 / 多重选择的自定义组件。\n * v-region - 一个简单的区域选择器，提供中文行政区划数据。\n * v-selectpage-vue2，分页列表或表格视图的强大选择器，使用标签进行多项选择，i18n 和服务器端资源支持。\n * vue-cool-select - 引导程序 / 材质设计主题，支持广告位，自动填充，事件，验证等。\n * @ myena / advanced-select - 具有搜索功能，用于 (取消) 全选和 bootstrap 3 主题的单 / 多选择组件\n * @ alfsnd / vue-bootstrap-select-vue 版本的 bootstrap-select。\n\n\n# 滑块\n\n * vue-slider-component-vue1.x 和 vue2.x 的滑块。\n * vue-circle-slider-vue2.x 的圆形滑块组件。\n * vue-netflix-slider - 像 netflix 的滑块。\n * vue-slide-bar - 非常简单的 vue 滑条组件。\n * textra-vue js 插件可滑动文本。\n * vue-knob-control-vue.js 的旋钮控件\n\n\n# 拖放\n\n * vuedraggable-vue 组件允许与 view-model 同步进行拖放排序。基于 sortable.js。\n * vue-dragula - 拖放是如此简单，很痛苦。\n * vue2-dragula-vue2 的 vue-dragula 分支，有很多改进。\n * awe-dnd - 具有 vue 的可排序列表指令。\n * vue-draggable-resizable - 用于可拖动和可调整大小元素的 vue2 组件。\n * vddl - 用于使用 html5 拖放 api 修改列表的 vue 组件，支持 vuejs 版本 1 和 2。\n * vue-drag-drop-html5 拖放 api 的最小且轻巧的包装器。\n * vue-swing - 可滑动的卡片界面，如在 jelly 和 tinder 等应用中所见。\n * vue-slicksort - 一套无需依赖的混合包，用于动画，触摸友好，可排序的列表\n * draggable-vue-directive - 处理任何 vue 组件拖放的简单指令。\n * vue-smooth-dnd-smooth-dnd 库的 vue 包装器。拖放，可分类的库，适用于许多情况。\n * vue-drag-resize - 一个无依赖的 vue 组件，用于可拖动和可调整大小的元素，具有高宽比，反应性道具等\n * vue-drag-it-dude-vue2 组件，可让您将对象拖动到任意位置。\n * vue-draggable-vue 拖放库没有任何依赖性。简单易用。\n * vue-nestable - 作为 vue 组件制作的简单拖放层次列表。\n * vue-draggable-nested-tree - 适用于 vuejs2 [@phphe](https://github.com 的功能强大的可自定义可拖动树视图组件。 com /phphe)\n\n\n# 自动完成\n\n * vue-instant-vue 即时可让您轻松为 vue 2 应用程序创建带有自动建议的自定义搜索控件。\n * v-autocomplete-vue.js 的自动填充组件\n * vue-awesomplete-awesomplete 的 vue 包装器\n * vue-auto-complete-vue2 的自动完成。适用于对象或 api 调用。\n * vue-autosuggest-wai-aria 完整的 autosuggest 组件，对渲染和样式进行了完全自定义。\n * v-autosuggest - 一个简单的模块化 vuejs 组件，可以自动建议来自动态或静态数据查询的输入。\n * 自动完成 - 适用于 vue.js 2. * 的简单自动完成组件\n * vue-infinite-autocomplete-vue 的 vue 无限 - 自动完成包装 2。\n * vue-simple-suggest-vue.js 的简单但功能丰富的自动完成组件\n * v-suggest - 一个 vue2 插件，用于输入内容建议，支持键盘快速选择。\n * vue-bootstrap-typeahead - 使用 bootstrap 4 css 的 vue2 的 typeahead /autocomplete 组件。\n\n\n# 类型选择\n\n * vue-input-tag-vue.js 2.0 输入标签组件。\n * v-distpicker 一个灵活，高度可用的区域选择器，用于为 vue.js 2.x 挑选中国的省，市和地区。\n * vue-img-inputervue 2 的优美，高度可定制的 img 类型输入\n * vue-img-previewvue 2 中的图像输入预览组件\n * v-image：相机：用于输入 type = file 的小组件 (<1kb，已压缩)\n * @ voerro / vue-tagsinput 一个简单的标签输入了带有 typeahead /autocomplete 的 vue.js 2 组件\n * vue-tag-selector - 类似于标签的输入。轻巧，可自定义并处理 regex 验证！\n\n\n# 颜色选择器\n\n * vue-color - 适用于 sketch，photoshop，chrome 等的 vue 拾色器。\n * vue-swatches - 帮助用户选择漂亮的颜色！\n * radial-color-picker - 简约的拾色器，着重于尺寸，可访问性和性能。\n * vue-color-picker-board - 为人类设计的 vue 拾色器组件！\n * verte - 一个完整的 vue.js 颜色选择器组件。\n\n\n# 开关\n\n * vue-switches - 具有主题支持的 vue.js 的开 / 关开关组件。\n * vue-js-toggle-button-vue.js 2.0 + 切换 / 切换按钮 - 简单，漂亮，可自定义。\n * vue-checkbox-radio - 一个 vue 组件，可轻松设置复选框和广播输入的样式。\n * vue-enhanced-check - 用于重新设计 / 标记复选框 / 无线电的 vue 组件，包括切换 / 切换按钮。\n * pretty-checkbox-vue- [pretty-checkbox 3] 的实现 (https://lokesh-coder.github.io/pretty- checkbox /)(用于美化复选框和单选按钮的纯 css 库) 组件，适用于 vue.js 2.2+。\n * vue2-collapse-vue collapse 是一个灵活的内容切换插件，用于手风琴列表或任何其他有条件的内容呈现。\n * vue-badger-accordion - 用于 vue.js 2.0 + 的 badger 手风琴的包装组件\n * vue-loading-checkbox - 具有加载状态的高度可定制的 vue.js 复选框 ui 组件\n * vue-rocker-switch-vue.js 的可自定义翘板开关组件。\n * vue-toggle-btn - 高度可定制，易于使用的优雅切换 / 切换按钮组件\n\n\n# 屏蔽输入\n\n * vue-masked-input-vue.js 的蒙版输入组件。\n * vue-text-mask - 用于 react，angular，ember，vue 和普通 javascript 的输入掩码。\n * vue-ip-input - 由 vuejs 实现的 ip 输入。\n * vue-numeric - 输入字段组件，用于显示基于 vue 的货币值。\n * awesome-mask - 基于纯 vanillajs 实现的 mask 指令\n * v-money - 货币的微小 (<2k 压缩) 输入 / 指令掩码\n * vue-autonumeric - 一个 vue.js 组件，包装了很棒的 autonumeric 输入格式化程序库\n * vue-inputmask-vue.js 指令可将 robin herbots 的 inputmask 库添加到您的输入中 (香草 javascript)。\n * vue-input-number-vue.js 2 的自定义输入数字组件。\n * v-unicode-vue 指令通过 unicode 值限制输入。\n * vue-cleave-component- [cleave.js] 的 vue.js 组件 (http://nosir.github.io/cleave.js/)\n * vue-ip - 具有端口和材料设计支持的 ip 地址输入\n * vue-r-mask - 具有类似于 javascript 正则表达式的模板的指令。\n * vue-input-code - 基于 vue.js 2.0 + 验证码输入组件。\n * label-edit - 受 trello 的启发。单击以显示可编辑的输入并返回值更改。这是 vue 组件。\n * vue-jquery-mask- [jquery mask 插件] 的 vue.js v2.x 组件 (https://github.com/igorescobar/jquery - 掩码 - 插件)\n * vue-the-mask-tiny (<2k gzipipped) 和 vue.js 的无依赖掩码输入\n * vue-canvas-input- [vuc-input] 的 vue 画布组件 (http://vuc.tianchenyong.top/#/identify)\n * vue-currency-input - 轻松输入 vue.js 的货币格式数字。\n * vue-restricted-input - 基于 [restricted-input] 的 vue.js 输入掩码库 (https://github.com/braintree/ 受限输入)\n\n\n# rtf 编辑\n\n * vue-quill-editor-vue2 的鹅毛笔编辑器组件。\n * vue-mobiledoc-editor - 适用于 vuejs 的 mobiledoc 编辑器组件工具包。\n * vue2-medium-editor-vue 2 的 mediumeditor 组件。\n * vue-froala - 用于 froala 编辑器的 vuejs 包装器。\n * vue-froala-wysiwyg-froala wysiwig html 编辑器的官方 vuejs 插件。\n * vue-at-vue 的 at.js。\n * vue-wysiwyg 轻巧，快速且可扩展的所见即所得编辑器\n * vue-trumbowyg [trumbowyg] 的 vue.js 组件 (http://alex-d.github.io/trumbowyg/) 所见即所得编辑器\n * vue-pell-editor 用于 pell 的 vue.js 组件所见即所得编辑器\n * vue-tinymce-editorvue2 的 tinymce 编辑器组件。\n * vue-mce-vuejs 的 tinymce 编辑器组件。\n * vue2-editor - 使用 vue.js 和 quilljs 的 html 编辑器\n * vue-codemirror-vue2 的 codemirror 组件。\n * vue-easy-tinymce - 一个简单而强大的软件包，可在 vue.js 项目中轻松使用 tinymce。\n * vue-highlightable-input - 输入文字时突出显示和设置样式\n * vue-trix - 用于 vue.js 的简单轻巧的 trix 富文本编辑器\n * tiptap-vue.js 的不可渲染且可扩展的 rtf 编辑器\n * toast-ui.vue-editor- [toast ui 编辑器] 的 vue 包装器 (http://ui.toast.com/tui - 编辑)。\n * ckeditor5-vue-vue.js 的官方 ckeditor 5 rich text 编辑器组件。\n * yimo-vue-editor-vue2 的 wangeditor2 组件。\n * vue-mathlive 适用于 vue.hjs 的 mathlive 数学编辑器 (mathfield)\n\n\n# 图像处理\n\n * vue-core-image-upload - 一个用于裁剪和上传图像的 vue 插件。\n\n * vue-croppa - 适用于 vue 2.0 的简单易用的可自定义轻量级移动友好图像裁剪器。\n\n * vue-cropper-vue2.0 的图片剪辑插件\n\n * toast-ui.vue-image-editor- [toast ui 图像编辑器] 的 vue 包装器 (http：//ui。 toast.com/tui-image-editor)。\n\n * vue-quick-cropper-vue 移动头像上传裁剪插件可以选择裁剪区域和缩放。\n\n * vue-canvas-image-vue 画布组件，用于 vuc-image\n\n * vue-croppie - 另一个图像裁剪器\n\n * vue-slim-cropper-💇vue 2.x 的简单优雅的移动图像裁剪上传组件。\n\n * vue-advanced-cropper - 先进的裁剪器，使您有机会创建几乎任何想要的裁剪器\n\n * vue-cloudinary-vue (2.0) 插件提供了可重用的指令，可通过动态操作从 cloudinary (https://cloudinary.com) 获取图像 (调整大小 / 裁剪 / 效果 / 水印 / 缩放 / 格式化) 和优化 (webp /png/ 自动质量 / 自动视网膜)。\n\n * img-vuer-vue2 的 mobile-first 图像查看器 / 图库\n\n * vue-image-loader-vue 加载器 / 渐进式图像插件，例如 medium。\n\n * vue-load-image - 在图像加载期间显示加载器，并在图像加载失败时显示替代内容。\n\n * vue-image-painter-v vue 2.x 的图像魔术动画绘制效果组件。\n\n\n# 视频操作\n\n * vue-playlist - 轻量级的 vue (2.0) 组件，没有依赖关系，可提供真正无缝的 html5 视频播放。使用 vanilla js 进行无缝视频播放的唯一且唯一可行的解 决方案。它需要一系列视频并将它们拼接在一起成为一个视频。\n\n＃＃ 上传文件\n\n * vue-clip - 用于 vuej 的简单且可入侵的文件上传器。支持 vue> = 2.1。\n * vue-simple-upload-vue.js 的简单文件上传组件。\n * vue2-multi-uploader - 使用 vue.js v2 和 axios 的拖放式多文件上传器组件。上载器显示文件名，大小和添加文件的总大小。它还允许设置所需的最小文件上传数量。\n * vue-dropzone-dropzone.js 的 vue.js (vue2) 组件 - 具有图像预览功能的拖放文件上传实用程序。\n * vue-transmit - 一个纯粹的基于 vue 2.0 的 dropzone.js 的 vue.js 拖放上传器组件\n * vue-upload-component-vue 上载组件，多文件上载，上载目录，拖动上载，拖动目录。支持 vue> = 2.0\n * vue-uploader - 一个由 simple-uploader.js 驱动的 vue.js 上传组件\n * ic-firebase-uploader - 用于 firebase 存储的干净的多文件上传组件。\n * vuejs-uploader - 用于大型文件上传的可恢复的分段文件上传器。\n * vue-filepond-filepond 的 vue.js 组件 - 文件上传库，可以上传您扔给它的任何内容。\n * v-uploader - 一个 vue2 插件，可以使上传文件变得更加轻松简单，您可以拖动文件或在对话框中选择文件进行上传\n\n\n# 上下文菜单\n\n * vue-context-menu-vue js 的上下文菜单组件。\n * vue-lil-context-menu-vue 的灵活的 lil 上下文菜单组件。\n * vue-mouse-menu - 适用于 vue 2 + 的鼠标菜单组件。\n * @ hscmap / vue-menu-vue2 的菜单 / 上下文菜单组件。\n * vue-context - 用于 vue js 的简单但灵活的上下文菜单。\n * vue-simple-context-menu - 为 vue 构建的简单上下文菜单组件。左键单击和右键单击都可以很好地工作。\n * vue-context-menu-popup-vue 2 的上下文菜单弹出窗口。右键单击即可工作，也可以通过编程方式触发。\n * @ kiyoaki_w / vue-context - 为 vue2 构建的可自定义上下文菜单组件，支持惊人的图标。\n\n\n# 其他\n\n * vue-gmaps - 使用 google maps api 搜索地点和地址。\n * vuep - 使用实时编辑器和预览渲染 vue 组件的组件。\n * vue-places-places 组件基于 vue 2.x 的 places.js。将任何输入转换为地址自动完成。\n * vue-password-strength-meter-vue.js 中基于 zxcvbn 的密码强度计。\n * vue-float-label-vue.js 的浮动标签模式。\n * vue-longpress - 一个 vuejs (2.x) 按钮组件，需要您持续按下以确认给定的动作。\n * vue-google-autocomplete - 适用于 google maps places api 的 vue.js (2.x) 自动建议组件。\n * vue-ip-input-vue.js 2.x 的 ip 输入组件\n * vue-default-value-vue.js 2.x 指令为可编辑元素设置默认值，而不会影响模型状态\n * vue-model-autoset - 一个 vue.js 插件，可解决通过 v-model 指令观察动态添加的属性时 vue 的限制\n * vue-submit-ladda 的简单实现 ([1](http://lab.hakim.se/ladda/)，2) 不到 90 行代码，没有任何依赖关系。\n * vue-rate-vue 的费率组件\n * vuetify-google-autocomplete - 适用于 google maps places api 的 vuetify 就绪 vue.js (2.x) 自动建议组件。\n * vue-ripple-directive - 材质纹波效果作为 vue 指令。\n * vue-fab-vue 浮动操作按钮。\n * vue-complexify - 来自 jquery.complexify.js 的 vuejs 移植库。\n * vue-mc-vue.js 的模型和集合\n * vue-stars - 高度可定制的等级控制 (使用星号或其他字符)\n * vue-confirmation-button - 可自定义的确认按钮，要求用户在执行操作之前先阅读消息\n * vue-poll - 用于投票的 vue.js 组件\n * vue-diagrams-vue.js 的图表组件，受 react-diagrams 启发\n * vue-easy-polls - 一个 vue.js 组件，用于创建民意调查，投票和显示结果。它易于实现且易于定制。\n * vue-m-button-vue 的漂亮按钮组件。\n * vue-long-click - 用于 vue 的长按 (长按) 指令库，支持移动设备和台式机。\n * vue-ui-predicate - 规则编辑器，通用过滤 ui，vue js 的谓词组件。\n * vue-mobile-detection-vue.js 原型函数 this。$ ismobile() 会根据布尔值是否返回布尔值用户正在使用手机浏览。\n * vue-input-contenteditable - 用于 `contenteditable' 的 vue 组件包装，具有您通常期望的所有功能。进行漂亮的输入，不受 “input [type ='text']” 的限制。\n\n\n# 向导\n\n * vue-form-wizard - 基于选项卡的组件，可以代替经典的 bootstrap 和 jquery 表单向导\n * vue-stepper - 一个简单的步进器，具有诸如 next，back 和 end 之类的简单动作，可以执行简单的表单。\n * vue-stepper-component - 具有 vuex 支持和零依赖性的完全可定制的 stepper 组件。\n\n\n# csv\n\n * vuecsv - 来自 json 的简单 csv 下载程序，带有选项模式面板组件。\n\n\n# 评论系统\n\n * vue-comment-grid-💬 使用 css grid 和 firebase rest api + authentication 构建的自适应 vue.js 注释系统插件。\n\n\n# 帆布\n\n * vue-easeljs - 对 html5 canvas 元素的数据驱动控制。\n * vue-canvas-effect-vue.js 的简单画布效果集合。\n * vue-konva-vue＆canvas-javascript 库，用于使用 vue 绘制复杂的画布图形。\n * vue-html2canvas-vue mixin 捕获 html 并使用 html2canvas 将其转换为图像。\n * vue-canvas-nest - 适用于 canvas-nest 的 vue.js 组件。\n * vue-signature-pad-v vue 签名板组件\n\n\n# 链接预览\n\n * link-prevue - 用于生成链接预览的灵活组件。\n\n\n# 游览\n\n * vue-tour - 轻巧且可自定义的游览插件\n * vue-page-guide - 具有指令的页面游览 / 指南插件\n\n\n# ui 布局\n\n * vue-waterfall-vue.js 的瀑布布局组件。\n * vueisotope - 用于同位素过滤器和分类魔术布局的 vue 组件。\n * vue-grid-layout-vue.js 的可拖动和可调整大小的网格布局。\n * vue-drag-zone-vue.js (2.x) 的拖动区域组件。\n * vue-masonry - 用于砌体块布局的 vue.js 指令。\n * vue-fraction-grid - 基于 flexbox 的 vue.js 响应式分数网格系统。\n * vue-virtual-scroll-list-vue (2.x) 组件通过使用虚拟滚动列表支持大数据。\n * vue-virtual-scroller - 用于有效滚动大量元素的组件 (vue 2.x)。\n * vue-virtualscroll- [vue 2.x] 组件用于虚拟滚动内容。\n * vue-inview- [vue 2.x] 视口，在输入或离开 dom 元素时获取通知。\n * dnd-grid - 具有可拖动和可调整大小的框的 vuejs 网格\n * vue-extend-layout - 扩展默认布局或为 vue.js spa 的页面创建自定义布局\n * vue-masonry-css - 由 css 驱动的 vue.js masonry 布局组件，无依赖\n * vue-fullpage.js-vue.js 的官方 fullpage.js 组件。\n * vue-virtual-collection - 用于有效渲染大型集合数据的 vue 组件。\n * 自动响应 - vue-vue 的自动响应网格布局库。\n * vueflex - 一个 flexbox 网格系统。\n * v-chacheli - 一个 vue.js 组件，用于创建和显示类似于仪表板的自定义网格布局。\n * vue-grid-styled - 一组轻量级的功能网格组件，从 react 的 grid-styled /jxnblk/ 网格样式 /)\n * 简单网格 - 用于网格布局的 vue 组件，支持 flex。\n * vue-container-component - 受 bootstrap 容器启发的简单容器组件\n * vue-colcade - 用于将 colcade 网格布局集成到 vuejs 的小包装。\n * vue-ads-layout - 一个小的 vue 组件库，可快速生成带有工具栏，左 / 右抽屉和页脚的响应式 web 应用程序布局。所有组件都可以固定或相对放置。\n * vue-magic-grid-vue.js 2 的 magic grid 小端口。\n * vue-splitter-pane - 一个 vuejs 组件，它以可调节的拆分方式 (垂直或水平) 呈现两个插槽。\n * splitpanes - 一个 vue js 可靠，简单且可触摸的窗格拆分器 / 缩放器。\n * vue-mock-layout - 轻松模拟 vue 应用程序的布局。\n * vue-simple-drawer - 带有反弹动画，支持嵌套和自定义主题的小抽屉面板。方向：左 / 右 / 上 / 下\n * vue-grd - 用于网格布局的简单，轻巧和灵活的 vue.js 组件。\n\n\n# 自适应\n\n * quasar-framework - 类星体框架。使用 vuejs 2 使用相同的代码构建响应式网站，混合移动应用程序 (在 android 和 ios 上看起来本机) 和 electron 应用程序。\n * vue-material-vue.js 的材料设计。\n * vuetify-vue.js 的材料组件框架 2。\n * muse-ui-vue.js 的材料组件库 2。\n * buefy - 基于布尔玛框架的组件。\n * element-ui - 用于 web 的 vue.js 2.0 ui 工具包。\n * vue-bulma-components - 对 vue 组件轻松使用 bulma 类语法。\n * iview-ui - 适用于 web 的 vue.js 2.0 ui 框架。\n * at-ui-vue.js 2.0 使用 ♥ 制作的专门用于桌面应用程序的全新扁平 ui-kit\n * v-semantic-vue 的 semantic-ui 的实现\n * bootstrap-vue-vue.js 2 的 bootstrap-4 网格和组件的实现。\n * fish-ui - 用于 web 的 vue.js 2.0 ui 工具包\n * zircle-ui - 开发可缩放用户界面的前端库。\n * vue-mdc-adapter - 根据 mdc 团队 [指南] 的 vue.js 的材料组件集成 (https://github.com/material -components /material-components-web/blob /master/docs /integrating-into-frameworks.md)。\n * material components vue- [material-components-web] 的包装器 (https://github.com/material-components/material-components - 网络) 的 vue.js\n * vueface - 用于 web 的 vue.js 2.0 ui 组件库\n * vuesax-vue.js 的前端 vue 组件。\n * vuecidity-vue.js 2.0 的 ui 组件框架\n * ant-design-vue - 基于 ant design 和 vue 2.5.0 的企业级 ui 组件\n * heyui-(https://www.heyui.top/zh)- 适用于 web 的 vue.js 2.0 ui 工具包。\n * carvue.js-ibm 的 vue.js 碳设计系统\n * balmui-vue.js 的下一代 material ui\n * osiris ui-：art：一个 vue.js 2.0 通用响应式 ui 组件库\n * n3-components - 使用 vue 2 构建的漂亮 web 组件\n * 碎片 vue-✨ 基于 bootstrap 4 框架的时尚＆ui 组件库。\n * 基础 vue - 基于 sap fiori 基础的组件。\n * framevuerk-🚀 快速，响应迅速，无依赖性，基于 vue.js 的方向支持和可配置 ui 框架。\n * @ carbon / vue-@carbon 团队的 carbon design system 组件。\n * nutui - 适用于移动网络的 vue.js 2.0 ui 工具包\n * inkline-inkline 是用于 vue.js 的现代 ui / ux 框架，旨在创建完美的响应式 web 应用程序。\n * vue-awesome-mui - 用于 web 的 vue.js 2.0 mui 组件\n * mdbootstrap - 基于最新的 bootstrap 4 和 vue 2.6.10 的强大 ui 工具包，提供了一组平滑的，响应式页面模板，布局，组件和小部件，以快速构建响应迅速，移动优先的网站和应用。\n\n\n# 手机\n\n * framework7-vue - 使用 framework7＆vue 构建功能齐全的 ios 和 android 应用。\n\n * vux- [中文] 基于 weui 的 vue ui 组件。\n\n * vue-onsenui - 使用 html5 和 javascript 的移动应用开发框架和 sdk。创建美观，高性能的跨平台移动应用程序。基于 web 组件，并提供 angular 1、2，react 和 vue.js 的绑定。\n\n * weex-weex 提供了发布跨平台的功能，因此 web，android 和 ios 应用程序可以使用相同的 api 开发功能。\n\n * weex-eros- [中文] eros 是基于 weex 和 vue 的应用程序解决方案，使您能够使用 vue 的 api，简单快速地开发 vue 中小型应用程序。\n\n * mint-ui-vue.js 的移动 ui 元素。\n\n * vant - 来自 youzan 的 vue.js 2.0 移动用户界面。\n\n * cube-ui-vue.js 编写的出色的移动 ui lib 实现 2。\n\n * mand-mobile - 基于 vue.js 2 的移动 ui 工具包，专为金融场景而设计。\n\n\n# 组件集合\n\n * vue-mdc-vue.js 的 material components web。\n * keen-ui - 用 vue 编写并受 material design 启发的基本 ui 组件的轻量级集合。\n * vue-admin-vue 管理面板框架，由 vue 2.0 和 bulma 0.3 提供支持。\n * vuikit - 具有 vue 所有功能的 uikit。\n * uiv 由 vue2 实现的 bootstrap3 组件。\n * wffranco / vue-strap - 使用 vue.js 2 构建的 bootstrap 3 组件\n * jsmod-vue-pc - 适用于 vue 2.0 的高度可扩展的 web 组件\n * guilhermewaess / semvue - 使用 vue 2 实现的语义 ui 模块\n * office-ui-fabric-vue-vue.js 的 office ui fabric 实现\n * vuestic-admin - 带有自定义组件集合的 vue admin 仪表板。内置 vue 2 和 bootstrap 4\n * 语义 ui vue-vue 的语义 ui 集成\n * vuesax-vue.js 的前端 vue 组件。\n * vue 的基本 js 2 - 功能齐全的 45+ vue.js 组件，其中包括数据网格，图表，计划程序和图表组件等。\n * banshee - 一个几乎没有渲染的 vue ui 组件和实用程序框架，没有 css。\n * vue-atlas - 漂亮的 vue 组件库。\n * devextreme vue 组件 - 65 + 响应迅速且功能完善的 vue ui 组件，具有可自定义的 material design 和 bootstrap 兼容主题。\n * jqwidgets-70 多个具有 material design 主题的 vue.js 2.0 ui 组件。\n * vue-uix-vue.js 中用于网页实现的 ui 集合\n * vuedarkmode-vue.js 的极简暗设计系统 🎨\n * kendo vue 用户界面–为业务应用程序构建的 70 多个 ui 组件，包括网格。对多种设计语言 (包括材料设计和 bootstrap) 的支持完全响应。\n * vuent - 实现 microsoft fluent design 的 vue.js 组件\n * bpit / vue - 专注于效果的 vue 组件库\n * vue-tailwind - 具有可自定义类的 vue 组件可用于 tailwindcss，但与任何框架兼容。\n\n\n# 管理模板\n\n * iview vue 管理员 - iview vue 管理员 / 基于 iview 2.x 的管理门户模板\n * element vue admin-element vue admin / 基于 element ui 2.x 的管理门户模板\n * vue-element-admin - 基于 element ui 2.x 的神奇 vue 管理员\n * d2 管理员 - vue 制作的优雅后台模板在线演示\n * rest-admin - 基于 vue 和 bootstrap 4 的 restful 管理面板在线演示\n * shards dashboard lite vue-✨ 现代管理模板，具有数十个自定义组件和模板。\n * vue 材质管理员 - vue 材质设计管理员模板\n * element-admin - 使用 vue cli 3 和 element-ui 的简单而强大的 vue 管理员。\n\n\n# 服务器端渲染\n\n * nuxt.js - 通用的 vue.js 框架。\n * ream - 用于构建服务器呈现的静态网站的简约框架。\n * universal vue-vue cli 插件，可轻松创建通用 vue 应用程序\n\n\n# 静态网站生成器\n\n * vuepress - 简约的 vue 驱动的静态网站生成器。\n * peco - 人类的静态网站生成器。未维护\n * sabre - 一个静态网站生成器，用于使用 vue.js 构建快速的网站。\n * gridsome - 使用 vue.js 构建超快速，现代化的网站\n\n\n# 其他\n\n * app-framework - 具有 html 和 javascript 的 ios 和 android 应用程序 - 开发，构建和部署 - 免费和开源。\n * myfirebase - 一种已解耦的单页应用程序框架，该框架与 google firebase 高度兼容。\n * vue-access-control 基于 vue.js 的前端访问控制框架 2。\n * basys 工具箱，用于构建完整的 vue.js 应用程序\n * cabloyjs 基于 koajs＆eggjs＆vuejs＆framework7 的终极 nodejs 全栈业务开发平台\n\n\n# 事件处理\n\n * vue-shortkey-vue-shortkey-vue.js 的插件。\n * vue-throttle-event - 基于 requestanimationframe 的油门事件。\n * vue-waypoint-vue 的 waypoint 组件，这是滚动时触发功能的最简单方法。\n * vue-clickaway - 可重用的 vue.js 组件的可重用 clickaway 指令。\n * vue-scrollfire - 在特定的滚动位置触发事件。\n * vue-resize-directive-vue 指令可检测具有去污和节流能力的调整大小事件。\n * v-click-outside-vue 指令对元素外部的点击做出反应，而不会停止事件传播。\n * vue-outside-events-vue 2.x 指令可帮助指定元素侦听发生在自身外部的特定事件。\n * vue-selectable-vue 1.x/ 2.x 指令可通过鼠标选择项目。\n * vue-click-helper-vue2.x 指令可处理同一元素上的 click 事件和 dblclick 事件。\n * v-hotkey-vue 2.x 指令，用于将热键绑定到组件。\n * vue-resize-vue 2.x 组件可检测 dom 元素的大小调整 (基于事件 / 无 window.onresize)\n * vue-observe-visibility - 使用 intersection observer api 的 vue 2.x 指令可检测元素是否可见 (在视口中是否被隐藏) css)。\n * v-dragged - 用于拖动事件检测的 vue 2.x 指令插件。\n * vue-esc-vue.js 指令，可在转义键盘上添加文档事件监听器。\n * vue-global-events–使用 vue 的事件修饰符处理全局事件 (如快捷方式) 的组件\n * vue-edge-check–检查浏览器边缘，以防止用 `vue-router' 滑动边缘时奇怪地触发过渡效果\n * vue-mutation-observer–使用 mutationobserver api 观察 dom 中变化的简单而微小的指令\n * vue-scroll-show–如果用户在滚动后到达该元素，则显示该元素\n * vue-tabevents–其他打开的标签页之间易于通信\n * vue-visibility-trigger-👀 滚动到视图时以声明方式触发方法\n\n\n# 响应式设计\n\n * vue-viewports - 定义您的自定义视口，并在组件中使用它们。\n * vue 响应：vue.js (2.x) 指令用于隐藏 / 显示具有 bootstrap 4、3 或自定义断点的 html 元素。\n * vue-match-media-vue 2.x 兼容插件，提供一致，语义化的方法来使组件具有媒体查询意识。\n * vue-media-query-mixin-vue 2 媒体查询 mixin 可以在组件 js 和组件模板中使用。与引导程序和可视化视口兼容。如果屏幕宽度为 xs，则返回 wxs；如果屏幕宽度为 sm，则返回 wsm。\n * vue-breakpoints-vue 2 最小组件，用于显示和隐藏基于断点的元素。受到 airbnb 的启发。\n * vue-mq - 提供一些有用的工具，以语义和移动优先的 api (vue 2.x) 快速设置响应式设计\n * vueresizesensor - 支持调整大小事件的容器。\n * vue-breakpoint-component - 用于 组成 css 断点状态。\n * fine-mq - 一个很好的 api，可以轻松地管理 js 中的媒体查询，并且可以与 vuejs 作为插件进行一流的集成。\n * vue-response-components - 使用 resizeobserver 创建响应组件。\n * vue-screen-size - 可以轻松，被动地访问屏幕的宽度和高度。\n\n\n# 验证\n\n * vue-formly-javascript 支持的 vue.js 表单。\n\n * vue-focus - 用于可重用 vue.js 组件的可重用 focus 指令。\n\n * vue-form-generator-vue.js 的基于架构的表单生成器组件。\n\n * formschema native - 使用 json schema 和 vue.js 生成表单\n\n * ic-formly - 由 vue-formly 提供支持的简单表单组件。\n\n * 表单生成器 - 基于 json 模板的表单生成器，基于 vue 和 laravel。\n\n * vue-autofocus-directive-vue 自动聚焦指令。\n\n * vue-awesome-form - 一个 vue.js 组件，就像 json-editor\n\n * vue-form-components - 带有验证的干净＆最小化 vue 表单元素\n\n * ncform - 一种非常好的配置生成表单的方式\n\n * vee-validate - 简单的 vue.js 输入验证插件。\n\n * vue-rawmodel-vue.js v2 的 rawmodel.js 插件。表单验证从未如此简单。\n\n * vuelidate - 针对 vue.js 的简单，轻量级基于模型的验证。\n\n * simple-vue-validator - 一个简单而灵活的 vue.js 验证器库。\n\n * vue-vform-vue.js 2 表单组件，集成了 jquery 验证和 axios。\n\n * vue-form-vue.js 的全面表单验证。\n\n * vuelidation - 简单，功能强大的 vuejs 验证。\n\n * laravel-vue-validator - 显示来自 laravel 验证规则的错误\n\n * vue-daval - 超级 vue 数据验证器。简便，简单，准确。\n\n * willvalidate-vue.js 的验证表单。\n\n * vue-m-validator - 用于 vuej 的模型数据验证库。\n\n * vue-isyourpasswordsafe - 用 vue 编写的小型实用程序，用于检查给定的密码是否已针对 “我已被拥有” api 泄漏。\n\n * vue-form-send - 用于从表单和原始验证发送数据的 vue.js 指令\n\n * formvuelar - 考虑服务器端验证的 vue 表单组件\n\n * vue-final-validate - 根据我的开发经验，vue 验证解决方案支持嵌套，异步。\n\n * vform - 一种在 vue 中处理 laravel 后端验证的简单方法。\n\n\n# 调整大小\n\n * vue-not-visible-vue 指令，用于从屏幕上小于断点的 dom (如 v-if) 元素中删除。\n * vue-window-size - 提供反应性窗口大小属性。\n * vue-sensitive-text-↔ 相对于其父节点的宽度缩放其子节点的组件\n\n\n# 滚动\n\n * vue-chat-scroll-vue.js 2.0 的自动滚动至底部指令。\n * vue-scrollto - 添加了一个指令，该指令侦听单击事件并滚动到元素。\n * vue-next-level-scroll - 一种基于组件且支持 ssr 的方法，可使用现代 scroll behavior api 进行平滑滚动\n * vue-scroll-sync - 同步容器滚动位置的组件\n * v-scroll-lock - 用于正文滚动锁定而不中断目标元素滚动的 vue.js 指令\n * vue2-perfect-scrollbar-perfectscrollbar 简约包装器\n * vue-scroll-to - 添加了一个指令，该指令侦听单击事件并滚动到元素。\n * vue-scroll-progressbar - 可自定义的组件，用于指示进度条中滚动的相对位置。\n * vue-backtotop-vue.js 的 back-to-top 组件，单击该组件可将页面滚动到顶部。\n * vbar - 适用于 vue.js 2x 的虚拟响应式跨浏览器滚动条组件。\n * vuebar - 使用本地滚动行为的自定义滚动条的 vue 2 指令。轻巧，高性能，可定制且无依赖性。\n * vue-detached-scrollbar - 一个简单的滚动条，可以从正在滚动的容器中分离出来。\n * vuescroll - 基于 vue.js 的滚动插件，用于统一 pc 和移动设备中的滚动。\n * vue-simplebar-simplebar 插件的 vue.js 包装器。\n * smooth-vuebar - 平滑滚动条的 vue 指令包装\n * vue-scrollview - 一个组件，该组件利用作用域的插槽来检测 vue 组件何时进入和离开视口。\n * vue-scrollactive - 根据视口中的当前部分在菜单项中添加一个活动类，单击菜单项时也会滚动到该部分。\n * vue-intersect - 一个 vue 组件，用于向 vue 组件或 html 元素添加交集观察者。\n * vue-scrollmonitor - 一个 vue 插件，可在支持多种浏览器的情况下观看视口内部元素的可见性状态 (使用提供 / 注入，因此兼容 vue@2.2 。x)\n * vue-stroll - 适用于 vue.js 2.x 的超棒 css3 列表滚动效果组件。\n * navscroll-js - 在滚动时突出显示菜单项，并且在单击菜单项时也会滚动到某个部分。用作 vue 组件，vue 指令或与 vanilla js 一起使用。\n * vue-scrollwatch - 一个轻便的插件，可检测滚动事件，在元素进入视口时自定义回调，将'scrollto'api 暴露给特定元素。使用 vue 指令。\n * vue-check-view - 一个检查元素是否在视口中的插件。快速，小型，无依赖性，实时演示。\n * vue-stickto - 支持多个 dom 节点的 vue 指令会自动粘贴到顶部\n * vue2-scrollspy - 一个 scrollspy 插件和动画滚动到。\n * vue-scroll-behavior - 自定义路线导航中的滚动行为。特别是哈希模式。\n * vue-scroll-stop - 到达边缘时停止传播滚动。\n * vue-seamless-scroll-vue.js 的简单无缝 滚动。\n\n\n# 路由\n\n * vue-router-vue.js 的官方路由器。\n * vue-router-storage-vue.js 2 和 vue-router 2 的路由器存储和解决方案\n * vue-tidyroutes - 分散的 vue-router 路由定义\n * vue-routisan - 基于 laravel 路由系统的 vue 路由器的优雅路由定义\n * vue-error-page - 提供路由器视图的包装器，使您可以显示错误页面而不更改 url\n * vue-router-sitemap - 通过 vue-router 配置生成 sitemap.xml\n * vue-smart-route - 智能路由指令，可使用 vue.js 制作具有智能外观的应用程序。\n * vue-router-lite-vue.js 2 的基于组件的声明性路由器。\n\n\n# 延迟加载\n\n * vue-lazyload - 一个 vue.js 插件，用于将图像或组件延迟加载到应用程序中。\n * vue-lazy-background-images - 延迟加载 vue 2 的背景图像。\n * vue-progressive-image-vue 渐进式图像加载插件。\n * vue-l-lazyload-vue.js v2.x + 的 lazyload 插件。\n * vue-lazyload-img - 专门针对移动浏览器进行了优化。支持 v2 和 v1。\n * vue-lazy-images-vue 2.x 的 lazyload 图像插件。\n * v-lazy-img-tiny (<0.6kb) 指令，用于 vue 2 的渐进式图像加载。\n * vue-clazy-load - 使用 intersecionobserver for vue 2 的轻量级可转换图像延迟加载组件。\n * vue-lazy-this - 使用 intersection observer api 的延迟加载组件。\n * v2-lazy-list - 一个基于 vue 2.x 的简单的延迟加载列表组件\n * pimg - 一个用于延迟加载图像的简单渐进图像组件。\n * vue-tiny-lazyload-img - 用于延迟加载图像的小尺寸 vue.js v.2 + 指令\n * vue-lazy-youtube-video - 一个用于延迟加载 youtube 视频的简单 vue.js 组件。\n * lazyload-vue - 适用于 vanilla-lazyload 的 vue 插件。\n\n\n# 分页\n\n * vue-paginate - 一个简单的 vue.js 插件，可对数据进行分页。\n * vue-pagination-2-vue.js 2 分页组件。\n * vuejs-uib-pagination - 适用于 vue.js 的最佳，完整的分页插件。受角引导分页启发。\n * vuejs-paginate - 用于创建分页的 vue.js (v2.x +) 组件。\n * vue-pagination-bootstrap - 一个 vue.js (1.x＆2.x) 服务器端分页组件，带有基于 bootstrap 的模板\n * laravel-vue-semantic-ui-pagination - 与 laravel 和 semantic-ui 一起使用的 vue.js 2.x 分页。\n * vue-paginate-al-vue 分页并返回您的数据。\n * vue-tiny-pagination - 用于创建微小分页的 vue 组件。\n * laravel-vue-pagination - 适用于 laravel 分页器的 vue.js 分页组件，可与 bootstrap 一起使用。\n * vue-lpage - 低级 vue 分页组件。\n * v 页 - 一个简单的分页栏，包括基于 vue2.x 的长度菜单，i18n 支持。\n * vue-smart-pagination - 具有许多不错设置的任何数据的智能分页。\n * vue-paginatron - 分页组件使用范围插槽道具构建，具有最大的灵活性。\n * vue-ads-pagination - 使用 css 框架 [tailwindcss](https://tailwindcss.com/docs/what -is-tailwind /)\n\n\n# 动画\n\n * vue2-animate-animate.css 的 vue.js 2.0 端口。与 vue 的内置转换一起使用。\n * animated-vue - 一个 vue.js 2.x 插件，可轻松使用 animate.css 动画作为过渡。就像 `` 一样简单！\n * vue-lottie - 一个 vue.js 2.x 插件，用于基于 bodymovin 渲染特效动画\n * vueg - 使 vue-router 具有过渡效果 / 为 webapp 提供转场特效的开源 vue 插件\n * v-animate-css - 最容易实现 animate.css 的 vue 2 指令\n * vue-mixin-tween-mixin 工厂，它将补间值添加到动画的组件上下文中\n * v-odometer - 轻松平滑地转换数字。使用此库可为您的应用程序提供平滑的动画，仅适用于数字。\n * vue2-transitions✨ 可重复使用的 vue 2 过渡组件\n * vue-overdrivevue 应用程序的超级简单的魔术移动过渡 🎩\n * animated-number-vue 超级简单的数字动画方法。\n * vue-typed-js 集成了 typed.js，可轻松创建打字动画。\n * vue-parent-change-transition 启用子组件在更改父组件时进行动画处理。\n * vue-smooth-reflow 响应数据变化而转换元素重排。\n * vuetween 允许组件补间其属性。\n * vue-slide-up-down 就像 jquery 的 slideup / slidedown 一样，但是对于 vue！\n * vue-animejsvue 的简单 anime.js 指令。\n * eagle.jseagle.js 是 vue.js 的基于 web 的幻灯片框架。\n * vue-posepose for vue 是一个声明式运动系统，结合了 css 过渡的简单性和 css 的强大功能和灵活性 javascript。\n * vue-slide-up-down-component 这是一个简单的界面，但是实现了非常灵活而强大的幻灯片动画 vue！\n * femtotween 具有一流 vue 支持的简约 (零深度，小于 1k) 补间库\n * vue-sequential-entrance 插件，用于创建带有页面元素列表的优雅的连续动画入口。零努力。简单轻巧\n * vue-animate-scroll 一种超级轻量级 的方法，可在元素滚动到视图中时向其添加 css 动画。\n * vue-svg-transition 创建 2 状态，svg 驱动的过渡\n * vue-page-transitionvue.js 的简单路由 / 页面转换\n\n\n# 元标记\n\n * vue-head - 管理 head 标签的元信息，一种简单的方法。\n * vue-meta - 在 vue 2.0 组件中管理页面元信息。支持 ssr + 流媒体。\n * vue-headful - 从视图中设置文档 `` 和 meta 标签。\n * vue-simple-headful - 使用 vue.js 轻松设置元标记 - 具有 typescript 支持的更简单的 vue-headful 替代方法。\n\n\n# 传送门\n\n * vue-dom-portal-vue.js 组件中 dom 元素的转义口。\n * portal-vue - 一个 vue 插件，用于在 dom 中的任何位置渲染组件的模板 (在 virtualdom 级别上有效，不会在 dom 中移动节点)\n\n\n# 过滤器\n\n * vue2-filters - 适用于 vue 2. * 的标准过滤器 vue 1. * 的集合。\n * vue-morphling-vue 2 的标准和自定义过滤器的集合。\n * vue-currency-filter - 轻巧且可自定义的 vue 2 货币过滤器。\n * vue-trans - 一个简单的过滤器，提供了与 symfony trans 相似的翻译方式。\n * vue-string-filter - 轻量级 vue 2 字符串处理过滤器。\n * vue-units - 在 vue 2 中使用的方便的单位转换过滤器的集合。\n * vue-numeral-filter - 过滤器的集合，允许在组件的模板部分内联使用 numeral.js。\n * vue-filter-date-format-vue 2 的简单日期时间过滤器。\n * vue-filter-pluralize-vue 2 的简单复数过滤器。\n * vue-filter-date-parse-vue 2 的简单解析日期时间过滤器。\n\n\n# svg\n\n * vue-svgicon - 创建 svg 图标组件的工具。(版本 2.x)。\n * vue-content-loading-vue 组件可轻松构建 (或使用预设) facebook 之类的 svg 加载卡。\n * vue-annotator - 使用任何 svg 元素 (“rect”，“ polygon” 以及其他更多元素，即使包装了 html 元素如 “ canvas”，也可以为页面添加注释) 在 foreignobject 中)\n * vue-svg-sprite - 简单使用 svg sprite (vue 2.x) 的指令。\n * vue-svg-filler - 用于自定义 svg 文件 🖍(vue 2.x) 的 vue 组件。\n\n\n# 其他\n\n * vue-resource-progressbar-interceptor - 将进度条与所有请求联系在一起的拦截器，很明显，正在加载某些东西。\n * vue-images-loaded-vue.js 2.0 指令可检测图像加载。\n * vue-visible-vuejs (2.x) 的 v-visible 指令，类似于 v-show 但具有可见性。\n * vue-resize-sensor - 用于检测容器大小的组件 (基于事件)\n * v-blur-vue 指令动态模糊元素\n * vue-async-methods - 用于基于承诺的方法的帮助程序实用程序\n * vue-openseadragon - 适用于 vue.js 的 openseadragon 组件 (缩放和平移)\n * vue-match-heights - 指令将元素的高度设置为相同。\n * vue-conditional-attrs - 用于条件渲染属性和指令的 vue.js 组件\n * vue-cbsc - 一个 vue.js 2.x 组件，用于以编程方式混合，着色和转换颜色。\n * vue-spatialnavigation - 用于空间导航 (键盘导航) 的 vue 指令 (vue.js 2.x)\n * vue-lifecycle-vue.js 生命周期指令。\n * vue-aspect-ratio-vue 的长宽比指令。\n * @ kooljay82 / vue-m-camera - 为避免自动更改通过用户设备的相机拍摄的照片方向。\n\n\n# webgl\n\n * vue-3d-model-vue 组件中的 3d 模型查看器。\n * vue-pano-vue 组件中的全景查看器。\n * vue-threejs-three.js 的 vue 绑定。\n * vuegl-vue.js 组件通过 three.js 反应性地渲染 3d 图形\n * vue-vr - 使用 vue 构建 vr 应用程序的框架\n * vue-displacement-slideshow - 一个 vue.js 组件，可简化 webgl 图像位移转换。\n\n\n# 全屏\n\n * vue-fullscreen - 用于全屏的简单 vue 组件。\n\n\n# 页面可见性\n\n * vue-page-visibility-awesome - 易于配置的页面可见性 api 的 vue 2.x 组件。\n * vue-authplugin - 美观的 auth 控制插件，支持指令和原型方法。\n\n\n# 打印\n\n * vue-html-to-paper-vue mixin 用于将 html 元素打印到纸张上。",charsets:{cyrillic:!0,cjk:!0}},{title:"你知道的越多，不知道的也就越多",frontmatter:{title:"你知道的越多，不知道的也就越多",date:"2022-04-15T16:54:07.000Z",permalink:"/pages/fb2914/",categories:["随笔"],tags:[null],sidebar:"auto"},regularPath:"/views/05.%E9%9A%8F%E7%AC%94/01.%E4%BD%A0%E7%9F%A5%E9%81%93%E7%9A%84%E8%B6%8A%E5%A4%9A%EF%BC%8C%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E4%B9%9F%E5%B0%B1%E8%B6%8A%E5%A4%9A.html",relativePath:"views/05.随笔/01.你知道的越多，不知道的也就越多.md",key:"v-9a4b90e2",path:"/pages/fb2914/",excerpt:"\x3c!-- ---\ntitle: 你知道的越多，不知道的也就越多\ndate: 2021-03-17 15:52:40\npermalink: /pages/f2e63f/\nsticky: 1\nsidebar: auto\ncategories: \n  - 随笔\ntags: \n  - 学习\n  - 知识\n  - 鸡汤\n\n---\n\n不知道大家有没有发现，我们身边经常有这样的人，他们越是有能力的，越是有知识的，越是低调，越是谦逊，因为他们深知，知道的越多，不知道的也就越多。\n",lastUpdated:"4/28/2022, 6:08:46 PM",lastUpdatedTimestamp:1651169326e3,headersStr:null,content:"你知道的越多，你不知道的也就越多，这是一句非常有哲理的话。\n\n每个人的知识面都是有限的，你有可能在某个领域会有较深的研究，成为这个领域里的专家，等到你站在高处的时候，才会发现，自己是多么的渺小，才知道自己有多少没有涉及的领域。知道的越多，疑惑、问题就会越来越多，对已知的质疑、疑虑、困惑就会越来越多。\n\n即使如此，我们也应该努力，至少可以成为某个领域的佼佼者。\n\n鸡汤1\n\n弱小的人，才习惯嘲讽与否定，而内心强大的人，从不吝啬赞美与鼓励。\n\n鸡汤2\n\n当代青年人都应该摆脱冷气，只管向上走，不必听从自暴自弃者的流言。能做事的做事，能发声的发声。有一份热，发一份光，就像萤火一般，也可以在黑暗里发一点光，不必等候炬火。\n\n--\x3e",normalizedContent:"你知道的越多，你不知道的也就越多，这是一句非常有哲理的话。\n\n每个人的知识面都是有限的，你有可能在某个领域会有较深的研究，成为这个领域里的专家，等到你站在高处的时候，才会发现，自己是多么的渺小，才知道自己有多少没有涉及的领域。知道的越多，疑惑、问题就会越来越多，对已知的质疑、疑虑、困惑就会越来越多。\n\n即使如此，我们也应该努力，至少可以成为某个领域的佼佼者。\n\n鸡汤1\n\n弱小的人，才习惯嘲讽与否定，而内心强大的人，从不吝啬赞美与鼓励。\n\n鸡汤2\n\n当代青年人都应该摆脱冷气，只管向上走，不必听从自暴自弃者的流言。能做事的做事，能发声的发声。有一份热，发一份光，就像萤火一般，也可以在黑暗里发一点光，不必等候炬火。\n\n--\x3e",charsets:{cjk:!0}},{title:"拥抱生活，拥抱快乐",frontmatter:{title:"拥抱生活，拥抱快乐",date:"2021-03-17T20:40:38.000Z",permalink:"/pages/cd8bde/",categories:["随笔"],tags:["鸡汤"],sidebar:"auto"},regularPath:"/views/05.%E9%9A%8F%E7%AC%94/02.%E6%8B%A5%E6%8A%B1%E7%94%9F%E6%B4%BB%EF%BC%8C%E6%8B%A5%E6%8A%B1%E5%BF%AB%E4%B9%90.html",relativePath:"views/05.随笔/02.拥抱生活，拥抱快乐.md",key:"v-f15cedf6",path:"/pages/cd8bde/",excerpt:"<p>生活在后现代的今天，很多人都有一种虚无感，认为人生没有意义。但是，人生不可能没有意义，因为当你认为没有意义的时候，一定有一个与之相对应的概念叫有意义。</p>\n",lastUpdated:"4/28/2022, 6:08:46 PM",lastUpdatedTimestamp:1651169326e3,headersStr:null,content:"生活在后现代的今天，很多人都有一种虚无感，认为人生没有意义。但是，人生不可能没有意义，因为当你认为没有意义的时候，一定有一个与之相对应的概念叫有意义。\n\n当你怀疑人生没有意义时，难道怀疑本身不值得怀疑吗？\n\n不要任由你内心的虚无感蔓延，我们需要去拥抱真实的生活。\n\n所有真实的快乐，都离不开艰辛的努力，无论是金榜题名的快乐，还是事业成功的喜悦，甚至包括洞房花烛的激动。所有真实的快乐，都需要长久的铺垫与努力，没有辛勤的汗水，快乐也就不再真实。\n\n如果快乐触手可及，这种廉价的快乐也就不值得珍惜，随时都可能抛弃。因此，对于年轻人而言，一个重要的功课就是学会去节制欲望。\n\n所有通过捷径所带来的快乐，都是廉价的，以至于所有追求都变得毫无意义，人生就了无生趣。我们需要在每天真实的努力中去拥抱生活，追寻真实的快乐。\n\n\n\n> 文章摘录自：B 站视频《罗翔说刑法》，链接 https://b23.tv/K8ulrE",normalizedContent:"生活在后现代的今天，很多人都有一种虚无感，认为人生没有意义。但是，人生不可能没有意义，因为当你认为没有意义的时候，一定有一个与之相对应的概念叫有意义。\n\n当你怀疑人生没有意义时，难道怀疑本身不值得怀疑吗？\n\n不要任由你内心的虚无感蔓延，我们需要去拥抱真实的生活。\n\n所有真实的快乐，都离不开艰辛的努力，无论是金榜题名的快乐，还是事业成功的喜悦，甚至包括洞房花烛的激动。所有真实的快乐，都需要长久的铺垫与努力，没有辛勤的汗水，快乐也就不再真实。\n\n如果快乐触手可及，这种廉价的快乐也就不值得珍惜，随时都可能抛弃。因此，对于年轻人而言，一个重要的功课就是学会去节制欲望。\n\n所有通过捷径所带来的快乐，都是廉价的，以至于所有追求都变得毫无意义，人生就了无生趣。我们需要在每天真实的努力中去拥抱生活，追寻真实的快乐。\n\n\n\n> 文章摘录自：b 站视频《罗翔说刑法》，链接 https://b23.tv/k8ulre",charsets:{cjk:!0}},{title:"关于",frontmatter:{title:"关于",date:"2022-04-15T14:27:01.000Z",permalink:"/about",sidebar:!1,article:!1},regularPath:"/views/06.%E5%85%B3%E4%BA%8E/01.%E5%85%B3%E4%BA%8E.html",relativePath:"views/06.关于/01.关于.md",key:"v-18baa86e",path:"/about/",headers:[{level:3,title:"📚Blog",slug:"📚blog",normalizedTitle:"📚blog",charIndex:2},{level:2,title:"✉️ connection",slug:"connection",normalizedTitle:"✉️ connection",charIndex:87},{level:2,title:"前端学习",slug:"前端学习",normalizedTitle:"前端学习",charIndex:187}],lastUpdated:"4/28/2022, 6:08:46 PM",lastUpdatedTimestamp:1651169326e3,headersStr:"📚Blog ✉️ connection 前端学习",content:"# 📚Blog\n\n这是一个学习前端技术的个人博客，主要记录了学习前端过程中的一些笔记和一些随笔。\n\n笔记\n\n文章内容仅是我个人的小总结，资历尚浅，如有误还请指正。\n\n\n# ✉️ connection\n\n * QQ: 1434249940\n * WeChat: 1434249940\n * GitHub: https://github.com/Takichange\n\n\n# 前端学习\n\n🎉🎉✨欢迎各位小伙伴与我一起学习前端，GO!",normalizedContent:"# 📚blog\n\n这是一个学习前端技术的个人博客，主要记录了学习前端过程中的一些笔记和一些随笔。\n\n笔记\n\n文章内容仅是我个人的小总结，资历尚浅，如有误还请指正。\n\n\n# ✉️ connection\n\n * qq: 1434249940\n * wechat: 1434249940\n * github: https://github.com/takichange\n\n\n# 前端学习\n\n🎉🎉✨欢迎各位小伙伴与我一起学习前端，go!",charsets:{cjk:!0}}],themeConfig:{nav:[{text:"Home",link:"/"},{text:"前端",link:"/web/",items:[{text:"前端",link:"/web/"},{text:"Http",link:"/pages/1d1b92/"},{text:"Ajax",link:"/pages/43a79d/"},{text:"Node",link:"/pages/079821/"},{text:"MongoDB",link:"/pages/934d6e/"},{text:"Axios",link:"/pages/2135b2/"},{text:"Git",link:"/pages/06c08b/"},{text:"Webpack",link:"/pages/df6335/"},{text:"React",link:"/pages/eb18b6/"},{text:"Vue",link:"/pages/5e3b2f/"},{text:"Uni-app",link:"/pages/bdbd49/"},{text:"性能优化",link:"/pages/01a636/"},{text:"移动端",link:"/pages/3b5bc6/"}]},{text:"技术",link:"/skill/",items:[{text:"技术",link:"/skill/"},{text:"Vue3入门",link:"/pages/f2223/"},{text:"TypeScript入门",link:"/pages/fb23314/"},{text:"Jenkins-Nginx",link:"/pages/9d8967/"}]},{text:"UI",link:"/UI/",items:[{text:"UI",link:"/UI/"},{text:"文本超出隐藏解决",link:"/pages/43a79122/"}]},{text:"收藏",link:"/collect/",items:[{text:"收藏",link:"/collect/"},{text:"实用网站",link:"/pages/beb6c0bd8a66cea6/"},{text:"资源库",link:"/pages/eee83a9211a70f9d/"},{text:"Vue专区",link:"/pages/12df8ace52d493f6/"}]},{text:"随笔",link:"/pages/fb2914/",items:[{text:"你知道的越多，不知道的也就越多",link:"/pages/fb2914/"},{text:"拥抱生活，拥抱快乐",link:"/pages/cd8bde/"}]},{text:"关于",link:"/about/"},{text:"索引",link:"/archives/",items:[{text:"分类",link:"/categories/"},{text:"标签",link:"/tags/"},{text:"归档",link:"/archives/"}]}],sidebarDepth:2,logo:"/assets/img/logo.png",repo:"https://github.com/Takichange",searchMaxSuggestions:5,lastUpdated:"上次更新",docsDir:"docs/views",editLinks:!0,editLinkText:"编辑",category:!0,tag:!0,archive:!0,bodyBgImg:["/assets/img/bg.jpg","/assets/img/bg1.jpg","/assets/img/bg2.jpg"],bodyBgImgOpacity:.7,sidebarOpen:!0,sidebar:{"/views/":[{title:"目录页",collapsable:!0,children:[["00.目录页/01.前端.md","前端","/web/"],["00.目录页/02.技术.md","技术","/skill/"],["00.目录页/03.UI.md","UI","/UI/"],["00.目录页/04.收藏.md","收藏","/collect/"]]},{title:"前端",collapsable:!0,children:[{title:"Http",collapsable:!0,children:[["01.前端/10.Http/00.http.md","http","/pages/1d1b92/"]]},{title:"Ajax",collapsable:!0,children:[["01.前端/20.Ajax/00.ajax.md","ajax","/pages/43a79d/"]]},{title:"Node",collapsable:!0,children:[["01.前端/30.Node/10.node.md","node","/pages/079821/"]]},{title:"MongoDB",collapsable:!0,children:[["01.前端/40.MongoDB/10.mongodb.md","mongodb","/pages/934d6e/"]]},{title:"Axios",collapsable:!0,children:[["01.前端/50.Axios/10.axios.md","测试","/pages/2135b2/"]]},{title:"Git",collapsable:!0,children:[["01.前端/60.Git/10.git.md","git","/pages/06c08b/"]]},{title:"Webpack",collapsable:!0,children:[["01.前端/70.Webpack/10.webpack-npm环境搭建.md","webpack-npm环境搭建","/pages/df6335/"],["01.前端/70.Webpack/20.webpack-yarn环境搭建.md","webpack-yarn环境搭建","/pages/036dbb/"]]},{title:"React",collapsable:!0,children:[["01.前端/80.React/10.react.md","React","/pages/eb18b6/"]]},{title:"Vue",collapsable:!0,children:[["01.前端/90.Vue/10.vue.md","vue","/pages/5e3b2f/"]]},{title:"Uni-app",collapsable:!0,children:[["01.前端/100.Uni-app/10.uni-app.md","uni-app","/pages/bdbd49/"]]},{title:"性能优化",collapsable:!0,children:[["01.前端/110.性能优化/10.性能优化.md","性能优化","/pages/01a636/"]]},{title:"移动端",collapsable:!0,children:[["01.前端/120.移动端/01.移动端适配.md","移动端适配","/pages/3b5bc6/"]]}]},{title:"技术",collapsable:!0,children:[["02.技术/01.vue3学习记录.md","vue3入门","/pages/f2223/"],["02.技术/02.TS学习记录.md","TypeScript入门","/pages/fb23314/"],["02.技术/03.在浏览器输入url后都发生了什么.md","在浏览器输入url后都发生了什么","/pages/aa976e/"],["02.技术/04.如何保证setTimeout准确性.md","如何保证setTimeout准确性","/pages/599f44/"],["02.技术/05.Jenkins+nginx.md","Jenkins+nginx","/pages/9d8967/"],["02.技术/06.浏览器缓存机制.md","浏览器缓存机制","/pages/7dcd08/"],["02.技术/07.requestAnimationFrame实践.md","requestAnimationFrame实践","/pages/9357b2/"],["02.技术/08.git突然连不上github解决方案.md","git突然连不上github解决方案","/pages/e7b715/"],["02.技术/09.让vue3更好用的vite插件.md","让vue3更好用的vite插件","/pages/918535/"],["02.技术/10.Vue3有哪些新特性.md","Vue3有哪些新特性","/pages/ac678c/"],["02.技术/11.EventLoop有哪些.md","EvenLoop有哪些","/pages/5cf57d/"],["02.技术/12.win10下关闭进程.md","win10下关闭进程","/pages/597c89/"],["02.技术/13.JS设计模式.md","JS设计模式","/pages/427ffd/"],["02.技术/14.谷歌调试快捷键.md","谷歌调试快捷键","/pages/423757/"],["02.技术/15.前端常用设计模式.md","前端常用设计模式","/pages/a72718/"]]},{title:"UI",collapsable:!0,children:[["03.UI/01.单行多行文本超出隐藏解决方法.md","单行多行文本超出隐藏解决方法","/pages/43a79122/"],["03.UI/02.flex布局优缺点.md","flex布局优缺点","/pages/44fc09/"],["03.UI/03.css速写.md","css速写","/pages/7bc80c/"]]},{title:"收藏",collapsable:!0,children:[["04.收藏/01.网站.md","网站","/pages/beb6c0bd8a66cea6"],["04.收藏/02.资源.md","资源","/pages/eee83a9211a70f9d"],["04.收藏/03.Vue资源.md","Vue资源","/pages/12df8ace52d493f6"]]},{title:"随笔",collapsable:!0,children:[["05.随笔/01.你知道的越多，不知道的也就越多.md","你知道的越多，不知道的也就越多","/pages/fb2914/"],["05.随笔/02.拥抱生活，拥抱快乐.md","拥抱生活，拥抱快乐","/pages/cd8bde/"]]},{title:"关于",collapsable:!0,children:[["06.关于/01.关于.md","关于","/about"]]}],catalogue:{"前端":"/web/","技术":"/skill/",UI:"/UI/","收藏":"/collect/"}},updateBar:{showToArticle:!0,moreArticle:"/archives"},author:{name:"nengkai",link:"https://takichange-github-io.vercel.app/"},blogger:{avatar:"/assets/img/the-joke.png",name:"nengkai",slogan:"大道至简-知易行难"},social:{icons:[{iconClass:"icon-QQ",title:"QQ"},{iconClass:"icon-github",title:"GitHub",link:"https://github.com/Takichange"}]},footer:{createYear:2022,copyrightInfo:"\n    "}}},Ks=(t(72),t(150),t(67),t(227)),Ys=t(228),Qs=(t(381),t(160),t(55));var Zs={computed:{$filterPosts:function(){return this.$site.pages.filter((function(n){var e=n.frontmatter,t=e.pageComponent,r=e.article,o=e.home;return!(t||!1===r||!0===o)}))},$sortPosts:function(){return(n=this.$filterPosts).sort((function(n,e){var t=n.frontmatter.sticky,r=e.frontmatter.sticky;return t&&r?t==r?Object(Qs.a)(n,e):t-r:t&&!r?-1:!t&&r?1:Object(Qs.a)(n,e)})),n;var n},$sortPostsByDate:function(){return(n=this.$filterPosts).sort((function(n,e){return Object(Qs.a)(n,e)})),n;var n},$groupPosts:function(){return function(n){for(var e={},t={},r=function(r,o){var i=n[r].frontmatter,a=i.categories,s=i.tags;"array"===Object(Qs.n)(a)&&a.forEach((function(t){t&&(e[t]||(e[t]=[]),e[t].push(n[r]))})),"array"===Object(Qs.n)(s)&&s.forEach((function(e){e&&(t[e]||(t[e]=[]),t[e].push(n[r]))}))},o=0,i=n.length;o<i;o++)r(o);return{categories:e,tags:t}}(this.$sortPosts)},$categoriesAndTags:function(){return function(n){var e=[],t=[];for(var r in n.categories)e.push({key:r,length:n.categories[r].length});for(var o in n.tags)t.push({key:o,length:n.tags[o].length});return{categories:e,tags:t}}(this.$groupPosts)}}};Oo.component(Ks.default),Oo.component(Ys.default);function nu(n){return n.toString().padStart(2,"0")}t(385);Oo.component("Badge",(function(){return Promise.all([t.e(1),t.e(12)]).then(t.bind(null,545))})),Oo.component("CodeBlock",(function(){return Promise.resolve().then(t.bind(null,227))})),Oo.component("CodeGroup",(function(){return Promise.resolve().then(t.bind(null,228))}));t(386);var eu=Oo.extend({props:{bvid:{type:String,default:{page:1,danmaku:!0,allowfullscreen:"allowfullscreen",sandbox:"allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups",width:"100%",height:[.5625,70]}.bvid,required:!0},danmaku:{type:Boolean,default:!0,required:!1},page:{type:Number,default:1,required:!1},sandbox:{type:String,default:"allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups",required:!1},allowfullscreen:{type:[String,Boolean],default:"allowfullscreen",required:!1},width:{type:String,default:"100%",required:!1},height:{type:Array,default:function(){return[.5625,70]},required:!1}},render:function(){var n=arguments[0];return n("div",{class:"smplayer"},[n("iframe",{ref:"sbplayer",style:"width: ".concat(this.width),attrs:{src:"//player.bilibili.com/player.html?bvid=".concat(this.bvid,"&page=").concat(this.page,"&danmaku=").concat(this.danmaku),allowfullscreen:(this.allowfullscreen,!0),scrolling:"no",frameborder:"0",sandbox:this.sandbox}})])},mounted:function(){var n=this;this.$nextTick((function(){var e=n.$refs.sbplayer;e.style.height="".concat(e.scrollWidth*n.height[0]+n.height[1],"px")}))}}),tu=Oo.extend({props:{xid:{type:String,default:null,required:!0},id:{type:String,default:null,required:!1},autoplay:{type:Boolean,default:!1,required:!1},startTime:{type:Number,default:0,required:!1},sandbox:{type:String,default:"allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups",required:!1},allowfullscreen:{type:[String,Boolean],default:"allowfullscreen",required:!1},width:{type:String,default:"100%",required:!1},height:{type:Array,default:function(){return[.5625,0]},required:!1}},render:function(){var n=arguments[0];return n("div",{class:"smplayer"},[n("iframe",{ref:"sbplayer",style:"width: ".concat(this.width),attrs:{src:"//www.ixigua.com/iframe/".concat(this.xid,"?").concat(this.id?"id="+this.id+"&":"","autoplay=").concat(this.autoplay?1:0,"&startTime=").concat(this.startTime),allowfullscreen:(this.allowfullscreen,!0),scrolling:"no",frameborder:"0",sandbox:this.sandbox}})])},mounted:function(){var n=this;this.$nextTick((function(){var e=n.$refs.sbplayer;e.style.height="".concat(e.scrollWidth*n.height[0]+n.height[1],"px")}))}}),ru=t(26),ou=t(19),iu=(t(112),t(153),function(){function n(e){ls(this,n),Object(ou.a)(this,"src",void 0),Object(ou.a)(this,"player",void 0),e&&(this.src=e)}var e;return ps(n,[{key:"InitPlayer",value:(e=Object(r.a)(regeneratorRuntime.mark((function n(){var e=this;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(!this.src){n.next=4;break}return n.next=3,t.e(6).then(t.t.bind(null,484,7)).then(function(){var n=Object(r.a)(regeneratorRuntime.mark((function n(r){var o,i,a,s,u,l,c,p,d,v,m,h,f,g,b,x,y,j,w,k,T,V,S,_,I,A,z,C,E,P,O;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(v=r.default,m=!1,h=!1,f=!1,g=!1,b=!1,e.src.video.customType=(null===(o=e.src)||void 0===o||null===(i=o.video)||void 0===i?void 0:i.customType)||{},null!==(a=e.src)&&void 0!==a&&null!==(s=a.video)&&void 0!==s&&s.type||(null!==(x=e.src)&&void 0!==x&&null!==(y=x.video)&&void 0!==y&&y.url.toLowerCase().endsWith(".m3u8")?e.src.video.type="hls":null!==(j=e.src)&&void 0!==j&&null!==(w=j.video)&&void 0!==w&&w.url.toLowerCase().endsWith(".flv")?e.src.video.type="flv":null!==(k=e.src)&&void 0!==k&&null!==(T=k.video)&&void 0!==T&&T.url.toLowerCase().endsWith(".mpd")&&(e.src.video.type="shakaDash")),null===(u=e.src)||void 0===u||null===(l=u.video)||void 0===l||!l.type||"string"!=typeof e.src.video.type){n.next=27;break}n.t0=e.src.video.type.toLowerCase(),n.next="hls"===n.t0||"m3u8"===n.t0?12:"flv"===n.t0?15:"dash"===n.t0?18:"shakadash"===n.t0||"shaka"===n.t0||"shaka-dash"===n.t0?21:"webtorrent"===n.t0?24:27;break;case 12:return e.src.video.type="smplayerDplayerHls",m=!0,n.abrupt("break",27);case 15:return e.src.video.type="smplayerDplayerFlv",h=!0,n.abrupt("break",27);case 18:return e.src.video.type="smplayerDplayerDash",f=!0,n.abrupt("break",27);case 21:return e.src.video.type="smplayerDplayerShakaDash",g=!0,n.abrupt("break",27);case 24:return e.src.video.type="smplayerDplayerWebtorrent",b=!0,n.abrupt("break",27);case 27:if(null!=(null===(c=e.src)||void 0===c||null===(p=c.video)||void 0===p?void 0:p.quality)&&e.src.video.quality.length>0&&e.src.video.quality.forEach((function(n){if(null==n.type&&(n.url.toLowerCase().endsWith(".m3u8")?n.type="m3u8":n.url.toLowerCase().endsWith(".flv")?n.type="flv":n.url.toLowerCase().endsWith(".mpd")&&(n.type="shakaDash")),null!=n.type&&"string"==typeof n.type)switch(n.type.toLowerCase()){case"hls":case"m3u8":n.type="smplayerDplayerHls",m=!0;break;case"flv":n.type="smplayerDplayerFlv",h=!0;break;case"dash":n.type="smplayerDplayerDash",f=!0;break;case"shakadash":case"shaka":case"shaka-dash":n.type="smplayerDplayerShakaDash",g=!0;break;case"webtorrent":n.type="smplayerDplayerWebtorrent",b=!0}})),m&&Object.assign(null===(V=e.src)||void 0===V||null===(S=V.video)||void 0===S?void 0:S.customType,{smplayerDplayerHls:function(n,e){t.e(7).then(t.t.bind(null,485,7)).then((function(t){var r=t.default,o=n.src,i=new r;i.attachMedia(n),i.on(r.Events.MEDIA_ATTACHED,(function(){i.loadSource(o)})),e.on("destroy",(function(){i.destroy()}))}))}}),h&&Object.assign(null===(_=e.src)||void 0===_||null===(I=_.video)||void 0===I?void 0:I.customType,{smplayerDplayerFlv:function(n,e){t.e(8).then(t.t.bind(null,486,7)).then((function(t){var r=t.default.createPlayer({type:"flv",url:n.src});r.attachMediaElement(n),r.load(),e.on("destroy",(function(){r.destroy()}))}))}}),f&&Object.assign(null===(A=e.src)||void 0===A||null===(z=A.video)||void 0===z?void 0:z.customType,{smplayerDplayerDash:function(n,e){t.e(5).then(t.t.bind(null,487,7)).then((function(t){var r=t.default.MediaPlayer().create();r.initialize(n,n.src,!1),e.on("destroy",(function(){r.reset()}))}))}}),g&&Object.assign(null===(C=e.src)||void 0===C||null===(E=C.video)||void 0===E?void 0:E.customType,{smplayerDplayerShakaDash:function(n,e){t.e(9).then(t.t.bind(null,488,7)).then((function(t){var r=new t.default.Player(n);r.load(n.src).then((function(){e.on("destroy",(function(){r.destroy()}))}))}))}}),b&&Object.assign(null===(P=e.src)||void 0===P||null===(O=P.video)||void 0===O?void 0:O.customType,{smplayerDplayerWebtorrent:function(n,e){t.e(10).then(t.t.bind(null,489,7)).then((function(t){var r=new(0,t.default);r.add(n.src,(function(t){t.files.find((function(n){return n.name.endsWith(".mp4")})).renderTo(n),e.on("destroy",(function(){r.destroy()}))}))}))}}),null===(d=e.src)||void 0===d||!d.customInit){n.next=39;break}return n.next=36,e.src.customInit(v,e.src).then((function(n){return e.player=n,e.player}));case 36:n.t1=n.sent,n.next=40;break;case 39:n.t1=new v(e.src);case 40:return e.player=n.t1,n.abrupt("return",e.player);case 42:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}());case 3:return n.abrupt("return",n.sent);case 4:case"end":return n.stop()}}),n,this)}))),function(){return e.apply(this,arguments)})},{key:"DestroyPlayer",value:function(){var n;null===(n=this.player)||void 0===n||n.destroy()}},{key:"AddOnEvent",value:function(n){var e=this;n&&this.player&&Object.keys(n).forEach((function(t){e.player.on(t,(function(){return n[t](e.player,e.src)}))}))}}]),n}()),au=t(27),su=t.n(au),uu=Oo.extend({props:{src:{type:Object,required:!0},on:{type:Object,default:function(){return{}},required:!1},width:{type:String,default:"100%",required:!1},height:{type:Array,default:function(){return{src:{container:null},width:"100%",on:{}}.height},required:!1}},render:function(){var n=arguments[0];return n("div",{class:"smplayer"},[n("div",{ref:"sbplayer",style:"width: ".concat(this.width)})])},data:function(){return{player:{}}},mounted:function(){var n=this;return Object(r.a)(regeneratorRuntime.mark((function e(){var t,r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=su()({},n.on),r=Object(ru.a)(Object(ru.a)({},su()({container:null},n.src)),{},{container:n.$refs.sbplayer}),n.player=new iu(r),e.next=5,n.player.InitPlayer();case 5:n.player.AddOnEvent(t);case 6:case"end":return e.stop()}}),e)})))()},beforeDestroy:function(){var n;null===(n=this.player)||void 0===n||n.DestroyPlayer()}}),lu=(t(113),function(){function n(e){ls(this,n),Object(ou.a)(this,"src",void 0),Object(ou.a)(this,"player",void 0),e&&(this.src=e)}var e;return ps(n,[{key:"InitPlayer",value:(e=Object(r.a)(regeneratorRuntime.mark((function n(){var e=this;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(!this.src){n.next=4;break}return n.next=3,Promise.all([Promise.all([t.e(1),t.e(3)]).then(t.t.bind(null,490,7)),Promise.all([t.e(1),t.e(3)]).then(t.t.bind(null,491,7))]).then(function(){var n=Object(r.a)(regeneratorRuntime.mark((function n(r){var o,i,a,s,u,l,c,p;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(u=Object(Ga.a)(r,1),l=u[0].default,e.src.customAudioType=(null===(o=e.src)||void 0===o?void 0:o.customAudioType)||{},c=!1,null===(i=e.src)||void 0===i||null===(a=i.audio)||void 0===a||a.forEach((function(n){if(n.type||n.url.toLowerCase().endsWith(".m3u8")&&(n.type="hls"),n.type&&"string"==typeof n.type)switch(n.type.toLowerCase()){case"hls":case"m3u8":n.type="smplayerAplayerHls",c=!0}})),c&&Object.assign(null===(p=e.src)||void 0===p?void 0:p.customAudioType,{smplayerAplayerHls:function(n,e,r){t.e(7).then(t.t.bind(null,485,7)).then((function(t){var o=t.default,i=!1===r.audio.paused;if(n.canPlayType("application/x-mpegURL")||n.canPlayType("application/vnd.apple.mpegURL"))n.src=e.url;else if(o.isSupported()){var a=new o;a.attachMedia(n),a.on(o.Events.MEDIA_ATTACHED,(function(){a.loadSource(e.url)})),r.on("destroy",(function(){a.destroy()}))}else r.notice("Error: HLS is not supported.");i&&r.play()}))}}),null===(s=e.src)||void 0===s||!s.customInit){n.next=11;break}return n.next=8,e.src.customInit(l,e.src).then((function(n){return e.player=n,e.player}));case 8:n.t0=n.sent,n.next=12;break;case 11:n.t0=new l(e.src);case 12:return e.player=n.t0,n.abrupt("return",e.player);case 14:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}());case 3:return n.abrupt("return",n.sent);case 4:case"end":return n.stop()}}),n,this)}))),function(){return e.apply(this,arguments)})},{key:"DestroyPlayer",value:function(){var n;!this.player||null!==(n=this.src)&&void 0!==n&&n.fixed||this.player.destroy()}},{key:"AddOnEvent",value:function(n){var e=this;n&&this.player&&Object.keys(n).forEach((function(t){e.player.on(t,(function(){return n[t](e.player,e.src)}))}))}}]),n}()),cu=Oo.extend({props:{src:{type:Object,required:!0},on:{type:Object,default:function(){return{}},required:!1}},render:function(){var n=arguments[0];return n("div",{class:"smplayer"},[n("div",{ref:"sbplayer"})])},data:function(){return{player:{}}},mounted:function(){var n=this;return Object(r.a)(regeneratorRuntime.mark((function e(){var t,r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=su()({},n.on),r=Object(ru.a)(Object(ru.a)({},su()({lrcType:3},n.src)),{},{container:n.$refs.sbplayer}),n.player=new lu(r),e.next=5,n.player.InitPlayer();case 5:n.player.AddOnEvent(t),n.$nextTick((function(){if(n.src.fixed){var e=document.querySelector("#app");null==e||e.append(n.$el)}}));case 7:case"end":return e.stop()}}),e)})))()},beforeDestroy:function(){var n;null===(n=this.player)||void 0===n||n.DestroyPlayer()}}),pu=function(){function n(e){ls(this,n),Object(ou.a)(this,"src",void 0),Object(ou.a)(this,"player",void 0),e&&(this.src=e)}var e;return ps(n,[{key:"InitPlayer",value:(e=Object(r.a)(regeneratorRuntime.mark((function n(){var e=this;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(!this.src){n.next=4;break}return n.next=3,t.e(4).then(t.t.bind(null,492,7)).then(function(){var n=Object(r.a)(regeneratorRuntime.mark((function n(r){var o,i,a,s,u,l,c,p,d,v,m,h,f,g,b,x,y,j,w,k,T,V;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(l=r.default,c=!1,p=!1,d=!1,v=!1,m=!1,e.src.customType=(null===(o=e.src)||void 0===o?void 0:o.customType)||{},null!==(i=e.src)&&void 0!==i&&i.type||(null!==(h=e.src)&&void 0!==h&&null!==(f=h.url)&&void 0!==f&&f.toLowerCase().endsWith(".m3u8")?e.src.type="hls":null!==(g=e.src)&&void 0!==g&&null!==(b=g.url)&&void 0!==b&&b.toLowerCase().endsWith(".flv")?e.src.type="flv":null!==(x=e.src)&&void 0!==x&&null!==(y=x.url)&&void 0!==y&&y.toLowerCase().endsWith(".mpd")&&(e.src.type="shakaDash")),null===(a=e.src)||void 0===a||!a.type||"string"!=typeof e.src.type){n.next=27;break}n.t0=e.src.type.toLowerCase(),n.next="hls"===n.t0||"m3u8"===n.t0?12:"flv"===n.t0?15:"dash"===n.t0?18:"shakadash"===n.t0||"shaka"===n.t0||"shaka-dash"===n.t0?21:"webtorrent"===n.t0?24:27;break;case 12:return e.src.type="smplayerArtplayerHls",c=!0,n.abrupt("break",27);case 15:return e.src.type="smplayerArtplayerFlv",p=!0,n.abrupt("break",27);case 18:return e.src.type="smplayerArtplayerDash",d=!0,n.abrupt("break",27);case 21:return e.src.type="smplayerArtplayerShakaDash",v=!0,n.abrupt("break",27);case 24:return e.src.type="smplayerArtplayerWebtorrent",m=!0,n.abrupt("break",27);case 27:if(null!=(null===(s=e.src)||void 0===s?void 0:s.quality)&&e.src.quality.length>0&&e.src.quality.forEach((function(n){if(null==n.type&&(n.url.toLowerCase().endsWith(".m3u8")?n.type="m3u8":n.url.toLowerCase().endsWith(".flv")?n.type="flv":n.url.toLowerCase().endsWith(".mpd")&&(n.type="shakaDash")),null!=n.type&&"string"==typeof n.type)switch(n.type.toLowerCase()){case"hls":case"m3u8":n.type="smplayerArtplayerHls",c=!0;break;case"flv":n.type="smplayerArtplayerFlv",p=!0;break;case"dash":n.type="smplayerArtplayerDash",d=!0;break;case"shakadash":case"shaka":case"shaka-dash":n.type="smplayerArtplayerShakaDash",v=!0;break;case"webtorrent":n.type="smplayerArtplayerWebtorrent",m=!0}})),c&&Object.assign(null===(j=e.src)||void 0===j?void 0:j.customType,{smplayerArtplayerHls:function(n,e,r){t.e(7).then(t.t.bind(null,485,7)).then((function(t){var o=t.default,i=new o;i.attachMedia(n),i.on(o.Events.MEDIA_ATTACHED,(function(){i.loadSource(e)})),r.on("destroy",(function(){i.destroy()}))}))}}),p&&Object.assign(null===(w=e.src)||void 0===w?void 0:w.customType,{smplayerArtplayerFlv:function(n,e,r){t.e(8).then(t.t.bind(null,486,7)).then((function(t){var o=t.default.createPlayer({type:"flv",url:e});o.attachMediaElement(n),o.load(),r.on("destroy",(function(){o.destroy()}))}))}}),d&&Object.assign(null===(k=e.src)||void 0===k?void 0:k.customType,{smplayerArtplayerDash:function(n,e,r){t.e(5).then(t.t.bind(null,487,7)).then((function(t){var o=t.default.MediaPlayer().create();o.initialize(n,e,!1),r.on("destroy",(function(){o.reset()}))}))}}),v&&Object.assign(null===(T=e.src)||void 0===T?void 0:T.customType,{smplayerArtplayerShakaDash:function(n,e,r){t.e(9).then(t.t.bind(null,488,7)).then((function(t){var o=new t.default.Player(n);o.load(e).then((function(){r.on("destroy",(function(){o.destroy()}))}))}))}}),m&&Object.assign(null===(V=e.src)||void 0===V?void 0:V.customType,{smplayerArtplayerWebtorrent:function(n,e,r){t.e(10).then(t.t.bind(null,489,7)).then((function(t){var o=new(0,t.default);o.add(e,(function(e){e.files.find((function(n){return n.name.endsWith(".mp4")})).renderTo(n),r.on("destroy",(function(){o.destroy()}))}))}))}}),null===(u=e.src)||void 0===u||!u.customInit){n.next=39;break}return n.next=36,e.src.customInit(l,e.src).then((function(n){return e.player=n,e.player}));case 36:n.t1=n.sent,n.next=40;break;case 39:n.t1=new l(e.src);case 40:return e.player=n.t1,n.abrupt("return",e.player);case 42:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}());case 3:return n.abrupt("return",n.sent);case 4:case"end":return n.stop()}}),n,this)}))),function(){return e.apply(this,arguments)})},{key:"DestroyPlayer",value:function(){var n;null===(n=this.player)||void 0===n||n.destroy()}},{key:"AddOnEvent",value:function(n){var e=this;n&&this.player&&Object.keys(n).forEach((function(t){e.player.on(t,(function(){return n[t](e.player,e.src)}))}))}}]),n}(),du=Oo.extend({props:{src:{type:Object,required:!0},on:{type:Object,default:function(){return{}},required:!1},width:{type:String,default:"100%",required:!1},height:{type:Array,default:function(){return[.5625,0]},required:!1}},render:function(){var n=arguments[0];return n("div",{class:"smplayer"},[n("div",{ref:"sbplayer",style:"width: ".concat(this.width)})])},data:function(){return{player:{}}},mounted:function(){var n=this;return Object(r.a)(regeneratorRuntime.mark((function e(){var t,r,o;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.$refs.sbplayer,r=su()({},n.on),o=Object(ru.a)(Object(ru.a)({},su()({url:"",fullscreen:!0,autoSize:!0,setting:!0,playbackRate:!0,whitelist:["*"],moreVideoAttr:{preload:"auto"}},n.src)),{},{container:t}),n.player=new pu(o),e.next=6,n.player.InitPlayer();case 6:n.player.AddOnEvent(r),t.style.height=t.scrollWidth*n.height[0]+n.height[1]+"px";case 8:case"end":return e.stop()}}),e)})))()},beforeDestroy:function(){var n;null===(n=this.player)||void 0===n||n.DestroyPlayer()}});t(217);function vu(n,e){return(vu=Object.setPrototypeOf||function(n,e){return n.__proto__=e,n})(n,e)}function mu(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),Object.defineProperty(n,"prototype",{writable:!1}),e&&vu(n,e)}t(218),t(220);function hu(n){return(hu=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}function fu(n,e){if(e&&("object"===Object(Sa.a)(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}(n)}function gu(n){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(n){return!1}}();return function(){var t,r=hu(n);if(e){var o=hu(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return fu(this,t)}}t(242),t(243);var bu=function(n){mu(o,n);var e,t=gu(o);function o(){return ls(this,o),t.call(this)}return ps(o,[{key:"InitMeting",value:(e=Object(r.a)(regeneratorRuntime.mark((function n(){var e,t,o,i,a,s,u=this,l=arguments;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return e=l.length>0&&void 0!==l[0]?l[0]:{},t=l.length>1?l[1]:void 0,o=[],i=e.audio||[],a=e.list||[],(e.id||e.auto)&&(a=[{id:e.id,server:e.server,type:e.type,auth:e.auth,auto:e.auto}].concat(a.map((function(n){return{id:n.id,server:n.server,type:n.type,auth:n.auth,auto:n.auto}})))),a&&a.length>0&&a.map((function(n){if(n.id||n.auto){var t=u.ParseMeting({id:n.id,server:n.server,type:n.type,auth:n.auth,auto:n.auto},e.api);t&&o.push(t)}})),s=o.map(function(){var n=Object(r.a)(regeneratorRuntime.mark((function n(e){return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,fetch(e);case 2:return n.abrupt("return",n.sent.json());case 3:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}()),n.next=10,Promise.all(s).then(function(){var n=Object(r.a)(regeneratorRuntime.mark((function n(r){var o;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return r.map((function(n){i=i.concat(n.map((function(n){return{name:(null==n?void 0:n.name)||(null==n?void 0:n.title)||"Audio name",artist:(null==n?void 0:n.artist)||(null==n?void 0:n.author)||"Audio artist",url:null==n?void 0:n.url,cover:(null==n?void 0:n.cover)||(null==n?void 0:n.pic),lrc:(null==n?void 0:n.lrc)||(null==n?void 0:n.lyric)||"",type:(null==n?void 0:n.type)||"auto"}})))})),o={container:t,audio:i,fixed:e.fixed,mini:e.mini,autoplay:e.autoplay,loop:e.loop,order:e.order,preload:e.preload,volume:e.volume,mutex:e.mutex,lrcType:e.lrcType,listFolded:e.listFolded,listMaxHeight:e.listMaxHeight,storageName:e.storageName},u.src=o,n.abrupt("return",u.InitPlayer());case 4:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}());case 10:return n.abrupt("return",n.sent);case 11:case"end":return n.stop()}}),n)}))),function(){return e.apply(this,arguments)})},{key:"ParseMeting",value:function(n,e){return n&&n.auto&&(n=this.ParseLink(n.auto)),n&&n.server&&n.type&&n.id?e.replace(":server",n.server).replace(":type",n.type).replace(":id",n.id).replace(":auth",n.auth).replace(":r",Math.random().toString()):""}},{key:"ParseLink",value:function(n){for(var e=0,t=[["music.163.com.*song.*id=(\\d+)","netease","song"],["music.163.com.*album.*id=(\\d+)","netease","album"],["music.163.com.*artist.*id=(\\d+)","netease","artist"],["music.163.com.*playlist.*id=(\\d+)","netease","playlist"],["music.163.com.*discover/toplist.*id=(\\d+)","netease","playlist"],["y.qq.com.*song/(\\w+).html","tencent","song"],["y.qq.com.*songDetail/(\\w+)","tencent","song"],["y.qq.com.*album/(\\w+).html","tencent","album"],["y.qq.com.*singer/(\\w+).html","tencent","artist"],["y.qq.com.*playsquare/(\\w+).html","tencent","playlist"],["y.qq.com.*playlist/(\\w+).html","tencent","playlist"],["xiami.com.*song/(\\w+)","xiami","song"],["xiami.com.*album/(\\w+)","xiami","album"],["xiami.com.*artist/(\\w+)","xiami","artist"],["xiami.com.*collect/(\\w+)","xiami","playlist"]];e<t.length;e++){var r=t[e],o=new RegExp(r[0]).exec(n);if(o)return{server:r[1],type:r[2],id:o[1]}}return console.error("无法解析的链接: ".concat(n,"，请检查链接是否书写正确")),{}}}]),o}(lu),xu=Oo.extend({props:{id:{required:!1,type:String,default:""},server:{required:!1,type:String,default:"tencent"},type:{required:!1,type:String,default:"song"},auto:{required:!1,type:String,default:""},fixed:{required:!1,type:Boolean,default:!1},mini:{required:!1,type:Boolean,default:!1},autoplay:{required:!1,type:Boolean,default:!1},theme:{required:!1,type:String,default:"#2980b9"},loop:{required:!1,type:String,default:"all"},order:{required:!1,type:String,default:"list"},preload:{required:!1,type:String,default:"auto"},volume:{required:!1,type:Number,default:.7},mutex:{required:!1,type:Boolean,default:!0},lrcType:{required:!1,type:Number,default:3},listFolded:{required:!1,type:Boolean,default:!1},listMaxHeight:{required:!1,type:String,default:"340px"},storageName:{required:!1,type:String,default:"vuepress-plugin-smplayer"},api:{required:!1,type:String,default:"https://api.i-meto.com/meting/api?server=:server&type=:type&id=:id&r=:r"},audio:{required:!1,type:Array},list:{required:!1,type:Array}},render:function(){var n=arguments[0];return n("div",{class:"smplayer"},[n("div",{ref:"sbplayer"})])},data:function(){return{meting:{}}},mounted:function(){var n=this;return Object(r.a)(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.$props,n.meting=new bu,e.next=4,n.meting.InitMeting(t,n.$refs.sbplayer);case 4:case"end":return e.stop()}}),e)})))()},beforeDestroy:function(){var n;null===(n=this.meting)||void 0===n||n.DestroyPlayer()}}),yu=function(){function n(e){ls(this,n),Object(ou.a)(this,"src",void 0),Object(ou.a)(this,"player",void 0),e&&(this.src=e)}var e;return ps(n,[{key:"InitPlayer",value:(e=Object(r.a)(regeneratorRuntime.mark((function n(){var e,o,i,a,s,u=this;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(!this.src){n.next=24;break}if(null!==(e=this.src)&&void 0!==e&&e.type||"string"!=typeof(null===(o=this.src)||void 0===o?void 0:o.url)||(this.src.url.toLowerCase().endsWith(".m3u8")?this.src.type="hls":this.src.url.toLowerCase().endsWith(".flv")?this.src.type="flv":this.src.url.toLowerCase().endsWith(".mpd")&&(this.src.type="shaka")),s=t.e(0).then(t.t.bind(null,398,7)),null===(i=this.src)||void 0===i||!i.type||"string"!=typeof this.src.type){n.next=20;break}n.t0=this.src.type.toLowerCase(),n.next="hls"===n.t0||"m3u8"===n.t0?7:"flv"===n.t0?9:"dash"===n.t0?11:"shakadash"===n.t0||"shaka"===n.t0||"shaka-dash"===n.t0?13:"music"===n.t0?15:17;break;case 7:return a=Promise.all([Promise.all([t.e(0),t.e(61)]).then(t.t.bind(null,493,7)),s]),n.abrupt("break",18);case 9:return a=Promise.all([Promise.all([t.e(0),t.e(60)]).then(t.t.bind(null,494,7)),s]),n.abrupt("break",18);case 11:return a=Promise.all([Promise.all([t.e(0),t.e(59)]).then(t.t.bind(null,495,7)),s]),n.abrupt("break",18);case 13:return a=Promise.all([Promise.all([t.e(0),t.e(63)]).then(t.t.bind(null,496,7)),s]),n.abrupt("break",18);case 15:return a=Promise.all([Promise.all([t.e(0),t.e(62)]).then(t.t.bind(null,497,7)),s]),n.abrupt("break",18);case 17:a=t.e(0).then(t.t.bind(null,398,7));case 18:n.next=21;break;case 20:a=Promise.all([s]);case 21:return n.next=23,a.then(function(){var n=Object(r.a)(regeneratorRuntime.mark((function n(e){var t,r,o;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(r=Object(Ga.a)(e,1),o=r[0].default,null===(t=u.src)||void 0===t||!t.customInit){n.next=7;break}return n.next=4,u.src.customInit(o,u.src).then((function(n){return n}));case 4:n.t0=n.sent,n.next=8;break;case 7:n.t0=new o(u.src);case 8:return u.player=n.t0,n.abrupt("return",u.player);case 10:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}());case 23:return n.abrupt("return",n.sent);case 24:case"end":return n.stop()}}),n,this)}))),function(){return e.apply(this,arguments)})},{key:"DestroyPlayer",value:function(){var n;null===(n=this.player)||void 0===n||n.destroy()}},{key:"AddOnEvent",value:function(n){var e=this;n&&this.player&&Object.keys(n).forEach((function(t){e.player.on(t,(function(){return n[t](e.player,e.src)}))}))}}]),n}(),ju=Oo.extend({props:{src:{type:Object,required:!0},on:{type:Object,default:function(){return{}},required:!1},width:{type:String,default:"100%",required:!1},height:{type:Array,default:function(){return{src:{url:"",fluid:!0,fitVideoSize:"auto"},width:"100%",on:{}}.height},required:!1}},render:function(){var n=arguments[0];return n("div",{class:"smplayer"},[n("div",{ref:"sbplayer",style:"width: ".concat(this.width)})])},data:function(){return{player:{}}},mounted:function(){var n=this;return Object(r.a)(regeneratorRuntime.mark((function e(){var t,r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=su()({},n.on),r=Object(ru.a)(Object(ru.a)({},su()({url:"",fluid:!0,fitVideoSize:"auto"},n.src)),{},{el:n.$refs.sbplayer}),n.player=new yu(r),e.next=5,n.player.InitPlayer();case 5:n.player.AddOnEvent(t);case 6:case"end":return e.stop()}}),e)})))()},beforeDestroy:function(){var n;null===(n=this.player)||void 0===n||n.DestroyPlayer()}}),wu=function(n){var e=n.Vue;e.component("Bilibili",eu),e.component("Xigua",tu),e.component("DPlayer",uu),e.component("APlayer",cu),e.component("Artplayer",du),e.component("Meting",xu),e.component("metingJs",xu),e.component("Xgplayer",ju)},ku=function(){function n(e,t,r,o,i,a,s){ls(this,n),this.x=e,this.y=t,this.s=r,this.r=o,this.fn=i,this.that=a,this.img=s}return ps(n,[{key:"draw",value:function(n){n.save();this.s;n.translate(this.x,this.y),n.rotate(this.r),n.drawImage(this.img,0,0,40*this.s,40*this.s),n.restore()}},{key:"update",value:function(){this.x=this.fn.x(this.x,this.y),this.y=this.fn.y(this.y,this.y),this.r=this.fn.r(this.r),(this.x>window.innerWidth||this.x<0||this.y>window.innerHeight||this.y<0)&&(this.r=this.that.getRandom("fnr"),Math.random()>.4?(this.x=this.that.getRandom("x"),this.y=0,this.s=this.that.getRandom("s"),this.r=this.that.getRandom("r")):(this.x=window.innerWidth,this.y=this.that.getRandom("y"),this.s=this.that.getRandom("s"),this.r=this.that.getRandom("r")))}}]),n}(),Tu=function(){function n(){ls(this,n),this.list=[]}return ps(n,[{key:"push",value:function(n){this.list.push(n)}},{key:"update",value:function(){for(var n=0,e=this.list.length;n<e;n++)this.list[n].update()}},{key:"draw",value:function(n){for(var e=0,t=this.list.length;e<t;e++)this.list[e].draw(n)}},{key:"get",value:function(n){return this.list[n]}},{key:"size",value:function(){return this.list.length}}]),n}(),Vu={name:"Sakura",data:function(){return{staticx:!1,stop:null,num:30,show:!0,zIndex:5}},mounted:function(){var n=this;this.$nextTick((function(){n.show&&n.startSakura()}))},methods:{getRandom:function(n){var e,t;switch(n){case"x":e=Math.random()*window.innerWidth;break;case"y":e=Math.random()*window.innerHeight;break;case"s":e=Math.random();break;case"r":e=6*Math.random();break;case"fnx":t=1*Math.random()-.5,e=function(n,e){return n+.5*t-1.7};break;case"fny":t=1.5+.7*Math.random(),e=function(n,e){return e+t};break;case"fnr":t=.03*Math.random(),e=function(n){return n+t}}return e},startSakura:function(){var n=this;requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame||window.oRequestAnimationFrame;var e=document.getElementById("canvas_sakura");this.staticx=!0,this.$refs.canvas_sakura.width=window.innerWidth,this.$refs.canvas_sakura.height=window.innerHeight;var r=this.$refs.canvas_sakura.getContext("2d"),o=new Tu,i=new Image;i.src=t(389);for(var a=0;a<n.num;a++){var s,u,l,c,p,d,v,m=void 0;s=this.getRandom("x"),u=this.getRandom("y"),c=this.getRandom("r"),l=this.getRandom("s"),p=this.getRandom("fnx"),d=this.getRandom("fny"),v=this.getRandom("fnr"),(m=new ku(s,u,l,c,{x:p,y:d,r:v},this,i)).draw(r),o.push(m)}this.stop=requestAnimationFrame((function t(){r.clearRect(0,0,e.width,e.height),o.update(),o.draw(r),n.stop=requestAnimationFrame(t)}))},stopp:function(){if(this.staticx){var n=document.getElementById("canvas_sakura");n.parentNode.removeChild(n),window.cancelAnimationFrame(this.stop),this.staticx=!1}else this.startSakura()}}},Su=(t(390),Object(Js.a)(Vu,(function(){var n=this.$createElement,e=this._self._c||n;return e("div",{staticClass:"Sakura"},[e("canvas",{ref:"canvas_sakura",style:{zIndex:this.zIndex},attrs:{id:"canvas_sakura"}})])}),[],!1,null,"248d85d6",null).exports),_u=(t(222),{name:"Ribbon",data:function(){return{canvas:null,ctx:null,angle:0,resizeTimeout:null,visible:!1,config:{size:80,opacity:.3,zIndex:-1}}},mounted:function(){},methods:{draw:function(n){var e=this.ctx,t=this.config.size,r=n[0],o=n[1],i={x:o.x+this.rand(-.25,1.75)*t,y:this.nextY(o.y)};e.beginPath(),e.moveTo(r.x,r.y),e.lineTo(o.x,o.y),e.lineTo(i.x,i.y),e.closePath(),e.fillStyle=this.nextColor(),e.fill(),n[0]=o,n[1]=i},getCanvas:function(){var n=document.getElementById("Ribbon");return n.width=window.innerWidth,n.height=window.innerHeight,this.setStyle(n),n},redraw:function(){var n=this.canvas.width,e=this.canvas.height,t=this.config.size,r=[{x:0,y:.7*e+t},{x:0,y:.7*e-t}];for(this.ctx.clearRect(0,0,n,e);r[1].x<n+t;)this.draw(r)},nextY:function(n){this.canvas.width;var e=this.canvas.height,t=this.config.size,r=n+this.rand(-1.1,.9)*t;return r>e||r<0?this.nextY(n):r},setStyle:function(n){var e=n.style;e.opacity=this.config.opacity,e.position="fixed",e.top=0,e.left=0,e.zIndex=this.config.zIndex,e.width=n.width,e.height=n.height,e.pointerEvents="none"},rand:function(n,e){return Math.random()*(e-n)+n},nextColor:function(){var n=2*Math.PI;return this.angle+=.02*n,this.angle%=n,"#"+(127*Math.cos(this.angle)+128<<16|127*Math.cos(this.angle+n/3)+128<<8|127*Math.cos(this.angle+n/3*2)+128).toString(16).padStart(6,"0")},isMobile:function(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)},handleResize:function(){var n=this;null!=this.resizeTimeout&&clearTimeout(this.resizeTimeout),this.resizeTimeout=setTimeout((function(){n.canvas.width=window.innerWidth,n.canvas.height=window.innerHeight,n.redraw()}),500)}}}),Iu=Object(Js.a)(_u,(function(){var n=this.$createElement,e=this._self._c||n;return this.visible?e("canvas",{attrs:{id:"Ribbon"}}):this._e()}),[],!1,null,null,null).exports,Au={name:"RibbonAnimation",data:function(){return{RIBBON_OPTION:{colorSaturation:"80%",colorBrightness:"60%",colorAlpha:.65,colorCycleSpeed:5,verticalPosition:"center",horizontalSpeed:200,ribbonCount:2,strokeSize:0,parallaxAmount:-.5,animateSections:!0},visible:!0}},mounted:function(){new(t(392).default)(this.RIBBON_OPTION)}},zu=Object(Js.a)(Au,(function(){var n=this.$createElement,e=this._self._c||n;return this.visible?e("div",{staticClass:"RibbonAnimation"}):this._e()}),[],!1,null,null,null).exports,Cu=[function(n){var e=n.Vue,t=(n.options,n.router,n.siteData);t.pages.map((function(n){var e=n.frontmatter,r=e.date,o=e.author;"string"==typeof r&&"Z"===r.charAt(r.length-1)&&(n.frontmatter.date=function(n){n instanceof Date||(n=new Date(n));return"".concat(n.getUTCFullYear(),"-").concat(nu(n.getUTCMonth()+1),"-").concat(nu(n.getUTCDate())," ").concat(nu(n.getUTCHours()),":").concat(nu(n.getUTCMinutes()),":").concat(nu(n.getUTCSeconds()))}(r)),o?n.author=o:t.themeConfig.author&&(n.author=t.themeConfig.author)})),e.mixin(Zs)},{},function(n){n.Vue.mixin({computed:{$dataBlock:function(){return this.$options.__data__block__}}})},{},{},wu,function(n){n.Vue.component(Su.name,Su)},function(n){var e=n.Vue;e.component(Iu.name,Iu),e.component(zu.name,zu)}],Eu=["Sakura","Ribbon","RibbonAnimation"];t(151),t(81),t(103);var Pu=function(n){mu(t,n);var e=gu(t);function t(){return ls(this,t),e.apply(this,arguments)}return ps(t)}(function(){function n(){ls(this,n),this.store=new Oo({data:{state:{}}})}return ps(n,[{key:"$get",value:function(n){return this.store.state[n]}},{key:"$set",value:function(n,e){Oo.set(this.store.state,n,e)}},{key:"$emit",value:function(){var n;(n=this.store).$emit.apply(n,arguments)}},{key:"$on",value:function(){var n;(n=this.store).$on.apply(n,arguments)}}]),n}());Object.assign(Pu.prototype,{getPageAsyncComponent:Ba,getLayoutAsyncComponent:Ua,getAsyncComponent:Fa,getVueComponent:Ha});var Ou={install:function(n){var e=new Pu;n.$vuepress=e,n.prototype.$vuepress=e}};function Mu(n){n.beforeEach((function(e,t,r){if(qu(n,e.path))r();else if(/(\/|\.html)$/.test(e.path))if(/\/$/.test(e.path)){var o=e.path.replace(/\/$/,"")+".html";qu(n,o)?r(o):r()}else r();else{var i=e.path+"/",a=e.path+".html";qu(n,a)?r(a):qu(n,i)?r(i):r()}}))}function qu(n,e){var t=e.toLowerCase();return n.options.routes.some((function(n){return n.path.toLowerCase()===t}))}var Ru={props:{pageKey:String,slotKey:{type:String,default:"default"}},render:function(n){var e=this.pageKey||this.$parent.$page.key;return Wa("pageKey",e),Oo.component(e)||Oo.component(e,Ba(e)),Oo.component(e)?n(e):n("")}},Du={functional:!0,props:{slotKey:String,required:!0},render:function(n,e){var t=e.props,r=e.slots;return n("div",{class:["content__".concat(t.slotKey)]},r()[t.slotKey])}},Lu={computed:{openInNewWindowTitle:function(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},$u=(t(395),t(396),Object(Js.a)(Lu,(function(){var n=this.$createElement,e=this._self._c||n;return e("span",[e("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[e("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),e("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),e("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports);function Nu(){return(Nu=Object(r.a)(regeneratorRuntime.mark((function n(e){var t,r,o,i;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:Xs.routerBase||Xs.base,Mu(r=new Ta({base:t,mode:"history",fallback:!1,routes:Gs,scrollBehavior:function(n,e,t){return t||(n.hash?!Oo.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(n.hash)}:{x:0,y:0})}})),o={},n.prev=4,n.next=7,Promise.all(Cu.filter((function(n){return"function"==typeof n})).map((function(n){return n({Vue:Oo,options:o,router:r,siteData:Xs,isServer:e})})));case 7:n.next=12;break;case 9:n.prev=9,n.t0=n.catch(4),console.error(n.t0);case 12:return i=new Oo(Object.assign(o,{router:r,render:function(n){return n("div",{attrs:{id:"app"}},[n("RouterView",{ref:"layout"}),n("div",{class:"global-ui"},Eu.map((function(e){return n(e)})))])}})),n.abrupt("return",{app:i,router:r});case 14:case"end":return n.stop()}}),n,null,[[4,9]])})))).apply(this,arguments)}Oo.config.productionTip=!1,Oo.use(Ta),Oo.use(Ou),Oo.mixin(function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Oo;Va(e),t.$vuepress.$set("siteData",e);var r=n(t.$vuepress.$get("siteData")),o=new r,i=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(o)),a={};return Object.keys(i).reduce((function(n,e){return e.startsWith("$")&&(n[e]=i[e].get),n}),a),{computed:a}}((function(n){return function(){function e(){ls(this,e)}return ps(e,[{key:"setPage",value:function(n){this.__page=n}},{key:"$site",get:function(){return n}},{key:"$themeConfig",get:function(){return this.$site.themeConfig}},{key:"$frontmatter",get:function(){return this.$page.frontmatter}},{key:"$localeConfig",get:function(){var n,e,t=this.$site.locales,r=void 0===t?{}:t;for(var o in r)"/"===o?e=r[o]:0===this.$page.path.indexOf(o)&&(n=r[o]);return n||e||{}}},{key:"$siteTitle",get:function(){return this.$localeConfig.title||this.$site.title||""}},{key:"$canonicalUrl",get:function(){var n=this.$page.frontmatter.canonicalUrl;return"string"==typeof n&&n}},{key:"$title",get:function(){var n=this.$page,e=this.$page.frontmatter.metaTitle;if("string"==typeof e)return e;var t=this.$siteTitle,r=n.frontmatter.home?null:n.frontmatter.title||n.title;return t?r?r+" | "+t:t:r||"VuePress"}},{key:"$description",get:function(){var n=function(n){if(n){var e=n.filter((function(n){return"description"===n.name}))[0];if(e)return e.content}}(this.$page.frontmatter.meta);return n||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}},{key:"$lang",get:function(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}},{key:"$localePath",get:function(){return this.$localeConfig.path||"/"}},{key:"$themeLocaleConfig",get:function(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}},{key:"$page",get:function(){return this.__page?this.__page:function(n,e){for(var t=0;t<n.length;t++){var r=n[t];if(r.path.toLowerCase()===e.toLowerCase())return r}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}}]),e}()}),Xs)),Oo.component("Content",Ru),Oo.component("ContentSlotsDistributor",Du),Oo.component("OutboundLink",$u),Oo.component("ClientOnly",{functional:!0,render:function(n,e){var t=e.parent,r=e.children;if(t._isMounted)return r;t.$once("hook:mounted",(function(){t.$forceUpdate()}))}}),Oo.component("Layout",Ua("Layout")),Oo.component("NotFound",Ua("NotFound")),Oo.prototype.$withBase=function(n){var e=this.$site.base;return"/"===n.charAt(0)?e+n.slice(1):n},window.__VUEPRESS__={version:"1.9.7",hash:"010a353"},function(n){return Nu.apply(this,arguments)}(!1).then((function(n){var e=n.app;n.router.onReady((function(){e.$mount("#app")}))}))}]);